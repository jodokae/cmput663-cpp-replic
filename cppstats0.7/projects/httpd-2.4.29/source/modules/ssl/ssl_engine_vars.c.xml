<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/ssl/ssl_engine_vars.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_engine_vars.c
 *  Variable Lookup Facility
 */</comment>
                             <comment type="block">/* ``Those of you who think they
                                  know everything are very annoying
                                  to those of us who do.''
                                                  -- Unknown       */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>

<comment type="block">/*  _________________________________________________________________
**
**  Variable Lookup
**  _________________________________________________________________
*/</comment>

<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>xs</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_dn</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>X509_NAME</name> *</type><name>xsname</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_san</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>xs</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_valid</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>ASN1_TIME</name> *</type><name>tm</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_remain</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>ASN1_TIME</name> *</type><name>tm</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_serial</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>xs</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_chain</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> *<name>sk</name></expr></argument>, <argument><expr><name>char</name> *<name>var</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_rfc4523_cea</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_PEM</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>xs</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_verify</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cipher</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>ssl_var_lookup_ssl_cipher_bits</name><parameter_list>(<param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>, <param><decl><type><name>int</name> *</type><name>usekeysize</name></decl></param>, <param><decl><type><name>int</name> *</type><name>algkeysize</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_version</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_compress_meth</name><parameter_list>(<param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>SSLConnRec</name> *</type><name>ssl_get_effective_config</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>myConnConfig</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!(<name>sslconn</name> &amp;&amp; <name><name>sslconn</name>-&gt;<name>ssl</name></name>) &amp;&amp; <name><name>c</name>-&gt;<name>master</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* use master connection if no SSL defined here */</comment>
        <expr_stmt><expr><name>sslconn</name> = <call><name>myConnConfig</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>sslconn</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_is_https</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>ssl_get_effective_config</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>sslconn</name> &amp;&amp; <name><name>sslconn</name>-&gt;<name>ssl</name></name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>var_interface</name><index>[]</index></name> <init>= <expr>"mod_ssl/" <name>AP_SERVER_BASEREVISION</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>var_library_interface</name><index>[]</index></name> <init>= <expr><name>MODSSL_LIBRARY_TEXT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>var_library</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type><name>expr_peer_ext_list_fn</name><parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>dummy</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>ssl_ext_list</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>expr_var_fn</name><parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>var</name> <init>= <expr>(<name>char</name> *)<name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>ssl_get_effective_config</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>sslconn</name> ? <call><name>ssl_var_lookup_ssl</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>sslconn</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>expr_func_fn</name><parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>var</name> <init>= <expr>(<name>char</name> *)<name>arg</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>var</name> ? <call><name>ssl_var_lookup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_expr_lookup</name><parameter_list>(<param><decl><type><name>ap_expr_lookup_parms</name> *</type><name>parms</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name><name>parms</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
    <case>case <expr><name>AP_EXPR_FUNC_VAR</name></expr>:
        <comment type="block">/* for now, we just handle everything that starts with SSL_, but
         * register our hook as APR_HOOK_LAST
         * XXX: This can be optimized
         */</comment>
        <if>if <condition>(<expr><call><name>strcEQn</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"SSL_"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name><name>parms</name>-&gt;<name>func</name></name> = <name>expr_var_fn</name></expr>;</expr_stmt>
            <expr_stmt><expr>*<name><name>parms</name>-&gt;<name>data</name></name> = <name><name>parms</name>-&gt;<name>name</name></name> + 4</expr>;</expr_stmt>
            <return>return <expr><name>OK</name></expr>;</return>
        }</block></then></if>
        <break>break;</break>
    </case><case>case <expr><name>AP_EXPR_FUNC_STRING</name></expr>:
        <comment type="block">/* Function SSL() is implemented by us.
         */</comment>
        <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"SSL"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name><name>parms</name>-&gt;<name>func</name></name> = <name>expr_func_fn</name></expr>;</expr_stmt>
            <expr_stmt><expr>*<name><name>parms</name>-&gt;<name>data</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>OK</name></expr>;</return>
        }</block></then></if>
        <break>break;</break>
    </case><case>case <expr><name>AP_EXPR_FUNC_LIST</name></expr>:
        <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"PeerExtList"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name><name>parms</name>-&gt;<name>func</name></name> = <name>expr_peer_ext_list_fn</name></expr>;</expr_stmt>
            <expr_stmt><expr>*<name><name>parms</name>-&gt;<name>data</name></name> = "PeerExtList"</expr>;</expr_stmt>
            <return>return <expr><name>OK</name></expr>;</return>
        }</block></then></if>
        <break>break;</break>
    </case>}</block></switch>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>ssl_var_register</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>cp2</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_is_https</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_var_lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_ext_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Perform once-per-process library version determination: */</comment>
    <expr_stmt><expr><name>var_library</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>MODSSL_LIBRARY_DYNTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>cp</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>var_library</name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>cp</name> = '/'</expr>;</expr_stmt>
        <if>if <condition>(<expr>(<name>cp2</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>cp2</name> = <name>NUL</name></expr>;</expr_stmt></then></if>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>cp</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>var_library_interface</name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>cp</name> = '/'</expr>;</expr_stmt>
        <if>if <condition>(<expr>(<name>cp2</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>cp2</name> = <name>NUL</name></expr>;</expr_stmt></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_hook_expr_lookup</name><argument_list>(<argument><expr><name>ssl_expr_lookup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* This function must remain safe to use for a non-SSL connection. */</comment>
<function><type><name>char</name> *</type><name>ssl_var_lookup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOOL</name></type> <name>resdup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>tm</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>resdup</name> = <name>TRUE</name></expr>;</expr_stmt>

    <comment type="block">/*
     * When no pool is given try to find one
     */</comment>
    <if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>r</name> != <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr><name>p</name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><name>c</name> != <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr><name>p</name> = <name><name>c</name>-&gt;<name>pool</name></name></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>p</name> = <name><name>mc</name>-&gt;<name>pPool</name></name></expr>;</expr_stmt></else></if></else></if>
    }</block></then></if>

    <comment type="block">/*
     * Request dependent stuff
     */</comment>
    <if>if <condition>(<expr><name>r</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <switch>switch <condition>(<expr><name><name>var</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
        <case>case <expr>'H'</expr>:
        </case><case>case <expr>'h'</expr>:
            <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_USER_AGENT"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"User-Agent"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_REFERER"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Referer"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_COOKIE"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Cookie"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_FORWARDED"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Forwarded"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_HOST"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Host"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_PROXY_CONNECTION"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Proxy-Connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_ACCEPT"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Accept"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 5 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then>
                <comment type="block">/* all other headers from which we are still not know about */</comment>
                <expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>var</name>+5</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
            <break>break;</break>

        </case><case>case <expr>'R'</expr>:
        </case><case>case <expr>'r'</expr>:
            <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REQUEST_METHOD"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>method</name></name></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REQUEST_SCHEME"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>ap_http_scheme</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REQUEST_URI"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>uri</name></name></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REQUEST_FILENAME"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REMOTE_ADDR"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>useragent_ip</name></name></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REMOTE_HOST"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>ap_get_useragent_host</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REMOTE_NAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REMOTE_IDENT"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>ap_get_remote_logname</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REMOTE_USER"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>user</name></name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
            <break>break;</break>

        </case><case>case <expr>'S'</expr>:
        </case><case>case <expr>'s'</expr>:
            <if>if <condition>(<expr><call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SSL"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>)</condition><then> <break>break;</break></then></if> <comment type="block">/* shortcut common case */</comment>

            <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SERVER_ADMIN"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_admin</name></name></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SERVER_NAME"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>ap_get_server_name_for_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SERVER_PORT"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%u"</expr></argument>, <argument><expr><call><name>ap_get_server_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SERVER_PROTOCOL"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>protocol</name></name></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SCRIPT_FILENAME"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if>
            <break>break;</break>

        </case><default>default:
            <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"PATH_INFO"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>path_info</name></name></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"QUERY_STRING"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"IS_SUBREQ"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = (<name><name>r</name>-&gt;<name/></name>main != <name>NULL</name> ? "true" : "false")</expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"DOCUMENT_ROOT"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <call><name>ap_document_root</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"AUTH_TYPE"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>ap_auth_type</name></name></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"THE_REQUEST"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>the_request</name></name></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 4 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"ENV:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>var</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
                    <expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>var</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
            <break>break;</break>
        </default>}</block></switch>
    }</block></then></if>

    <comment type="block">/*
     * Connection stuff
     */</comment>
    <if>if <condition>(<expr><name>result</name> == <name>NULL</name> &amp;&amp; <name>c</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>ssl_get_effective_config</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 4 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SSL_"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call>
            &amp;&amp; <name>sslconn</name> &amp;&amp; <name><name>sslconn</name>-&gt;<name>ssl</name></name></expr>)</condition><then>
            <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sslconn</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>var</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTPS"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>sslconn</name> &amp;&amp; <name><name>sslconn</name>-&gt;<name>ssl</name></name></expr>)</condition><then>
                <expr_stmt><expr><name>result</name> = "on"</expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>result</name> = "off"</expr>;</expr_stmt></else></if>
        }</block></then></if></else></if>
    }</block></then></if>

    <comment type="block">/*
     * Totally independent stuff
     */</comment>
    <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 12 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SSL_VERSION_"</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_version</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>var</name>+12</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SERVER_SOFTWARE"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>result</name> = <call><name>ap_get_server_banner</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"API_VERSION"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>apr_itoa</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>MODULE_MAGIC_NUMBER_MAJOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_YEAR"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr>&amp;<name>tm</name></expr></argument>, <argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%02d%02d"</expr></argument>,
                                 <argument><expr>(<name><name>tm</name>.<name>tm_year</name></name> / 100) + 19</expr></argument>, <argument><expr><name><name>tm</name>.<name>tm_year</name></name> % 100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
        }</block></then>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MKTIMESTR</name><parameter_list>(<param><type><name>format</name></type></param>, <param><type><name>tmfield</name></type></param>)</parameter_list></cpp:macro> \
            <cpp:value>apr_time_exp_lt(&amp;tm, apr_time_now()); \
            result = apr_psprintf(p, format, tm.tmfield); \
            resdup = FALSE;</cpp:value></cpp:define>
        <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_MON"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <macro><name>MKTIMESTR</name><argument_list>(<argument>"%02d"</argument>, <argument>tm_mon+1</argument>)</argument_list></macro>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_DAY"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <macro><name>MKTIMESTR</name><argument_list>(<argument>"%02d"</argument>, <argument>tm_mday</argument>)</argument_list></macro>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_HOUR"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <macro><name>MKTIMESTR</name><argument_list>(<argument>"%02d"</argument>, <argument>tm_hour</argument>)</argument_list></macro>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_MIN"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <macro><name>MKTIMESTR</name><argument_list>(<argument>"%02d"</argument>, <argument>tm_min</argument>)</argument_list></macro>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_SEC"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <macro><name>MKTIMESTR</name><argument_list>(<argument>"%02d"</argument>, <argument>tm_sec</argument>)</argument_list></macro>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_WDAY"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <macro><name>MKTIMESTR</name><argument_list>(<argument>"%d"</argument>, <argument>tm_wday</argument>)</argument_list></macro>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr>&amp;<name>tm</name></expr></argument>, <argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
                        <argument><expr>"%02d%02d%02d%02d%02d%02d%02d"</expr></argument>, <argument><expr>(<name><name>tm</name>.<name>tm_year</name></name> / 100) + 19</expr></argument>,
                        <argument><expr>(<name><name>tm</name>.<name>tm_year</name></name> % 100)</expr></argument>, <argument><expr><name><name>tm</name>.<name>tm_mon</name></name>+1</expr></argument>, <argument><expr><name><name>tm</name>.<name>tm_mday</name></name></expr></argument>,
                        <argument><expr><name><name>tm</name>.<name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name>.<name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name>.<name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
        }</block></then>
        <comment type="block">/* all other env-variables from the parent Apache process */</comment>
        <else>else <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 4 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"ENV:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>getenv</name><argument_list>(<argument><expr><name>var</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>result</name> != <name>NULL</name> &amp;&amp; <name>resdup</name></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = ""</expr>;</expr_stmt></then></if>
    <return>return <expr>(<name>char</name> *)<name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name></decl></param>, 
                                <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>X509</name> *</type><name>xs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> *<name>sk</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSL</name> *</type><name>ssl</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ssl</name> = <name><name>sslconn</name>-&gt;<name>ssl</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 8 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"VERSION_"</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_version</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>var</name>+8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"PROTOCOL"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = (<name>char</name> *)<call><name>SSL_get_version</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SESSION_ID"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MODSSL_SESSION_ID_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSL_SESSION</name> *</type><name>pSession</name> <init>= <expr><call><name>SSL_get_session</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pSession</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>IDCONST</name> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OPENSSL_NO_SSL_INTERN</name></cpp:ifdef>
            <expr_stmt><expr><name>id</name> = (<name>unsigned</name> <name>char</name> *)<call><name>SSL_SESSION_get_id</name><argument_list>(<argument><expr><name>pSession</name></expr></argument>, <argument><expr>&amp;<name>idlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><name>id</name> = <name><name>pSession</name>-&gt;<name>session_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>idlen</name> = <name><name>pSession</name>-&gt;<name>session_id_length</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>modssl_SSL_SESSION_id2sz</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>,
                                                             <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
    <else>else <if>if<condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SESSION_RESUMED"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>SSL_session_reused</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call> == 1</expr>)</condition><then>
            <expr_stmt><expr><name>result</name> = "Resumed"</expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>result</name> = "Initial"</expr>;</expr_stmt></else></if>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt;= 6 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"CIPHER"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cipher</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sslconn</name></expr></argument>, <argument><expr><name>var</name>+6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 18 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"CLIENT_CERT_CHAIN_"</expr></argument>, <argument><expr>18</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>sk</name> = <call><name>SSL_get_peer_cert_chain</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert_chain</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name>var</name>+18</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"CLIENT_CERT_RFC4523_CEA"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert_rfc4523_cea</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"CLIENT_VERIFY"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert_verify</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sslconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 7 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"CLIENT_"</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>xs</name> = <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>var</name>+7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 7 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SERVER_"</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>xs</name> = <call><name>SSL_get_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>var</name>+7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* SSL_get_certificate is different from SSL_get_peer_certificate.
             * No need to X509_free(xs).
             */</comment>
        }</block></then></if>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"COMPRESS_METHOD"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_compress_meth</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TLSEXT</name></cpp:ifdef>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TLS_SNI"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>SSL_get_servername</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>,
                                                   <argument><expr><name>TLSEXT_NAMETYPE_host_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SECURE_RENEG"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_get_secure_renegotiation_support</name></cpp:ifdef>
        <expr_stmt><expr><name>flag</name> = <call><name>SSL_get_secure_renegotiation_support</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>flag</name> ? "true" : "false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SRP</name></cpp:ifdef>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SRP_USER"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>result</name> = <call><name>SSL_get_srp_username</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name> &amp;&amp; <call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SRP_USERINFO"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>result</name> = <call><name>SSL_get_srp_userinfo</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_dn_oneline</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                                <param><decl><type><name>X509_NAME</name> *</type><name>xsname</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>dc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>legacy_format</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>dc</name> = <call><name>myDirConfig</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>legacy_format</name> = <name><name>dc</name>-&gt;<name>nOptions</name></name> &amp; <name>SSL_OPT_LEGACYDNFORMAT</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>legacy_format</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>cp</name> <init>= <expr><call><name>X509_NAME_oneline</name><argument_list>(<argument><expr><name>xsname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>OPENSSL_free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <decl_stmt><decl><type><name>BIO</name>*</type> <name>bio</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name> <init>= <expr><name>XN_FLAG_RFC2253</name> &amp; ~<name>ASN1_STRFLGS_ESC_MSB</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>(<name>bio</name> = <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><call><name>X509_NAME_print_ex</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>xsname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> = <call><name>BIO_pending</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> = <call><name>BIO_read</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>n</name></expr>]</index></name> = <name>NUL</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>xs</name></decl></param>,
                                     <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOOL</name></type> <name>resdup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>X509_NAME</name> *</type><name>xsname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>resdup</name> = <name>TRUE</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"M_VERSION"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%lu"</expr></argument>, <argument><expr><call><name>X509_get_version</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"M_SERIAL"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert_serial</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"V_START"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert_valid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>X509_get_notBefore</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"V_END"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert_valid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>X509_get_notAfter</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"V_REMAIN"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert_remain</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>X509_get_notAfter</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>*<name>var</name> &amp;&amp; <call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name>+1</expr></argument>, <argument><expr>"_DN"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>*<name>var</name> == 'S'</expr>)</condition><then>
            <expr_stmt><expr><name>xsname</name> = <call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr>*<name>var</name> == 'I'</expr>)</condition><then>
            <expr_stmt><expr><name>xsname</name> = <call><name>X509_get_issuer_name</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <return>return <expr><name>NULL</name></expr>;</return></else></if></else></if>
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert_dn_oneline</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>xsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 5 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name>+1</expr></argument>, <argument><expr>"_DN_"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>*<name>var</name> == 'S'</expr>)</condition><then>
            <expr_stmt><expr><name>xsname</name> = <call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr>*<name>var</name> == 'I'</expr>)</condition><then>
            <expr_stmt><expr><name>xsname</name> = <call><name>X509_get_issuer_name</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <return>return <expr><name>NULL</name></expr>;</return></else></if></else></if>
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert_dn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xsname</name></expr></argument>, <argument><expr><name>var</name>+5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 4 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SAN_"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert_san</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>var</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"A_SIG"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
        <expr_stmt><expr><name>nid</name> = <call><name>OBJ_obj2nid</name><argument_list>(<argument><expr><call>(<name>ASN1_OBJECT</name> *)<argument_list>(<argument><expr><name><name>xs</name>-&gt;<name>cert_info</name>-&gt;<name>signature</name>-&gt;<name>algorithm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ASN1_OBJECT</name> *</type><name>paobj</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>X509_ALGOR_get0</name><argument_list>(<argument><expr>&amp;<name>paobj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>X509_get0_tbs_sigalg</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nid</name> = <call><name>OBJ_obj2nid</name><argument_list>(<argument><expr><name>paobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
                             <argument><expr>(<name>nid</name> == <name>NID_undef</name>) ? "UNKNOWN" : <call><name>OBJ_nid2ln</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"A_KEY"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &lt; 0x10100000L</expr></cpp:if>
        <expr_stmt><expr><name>nid</name> = <call><name>OBJ_obj2nid</name><argument_list>(<argument><expr><call>(<name>ASN1_OBJECT</name> *)<argument_list>(<argument><expr><name><name>xs</name>-&gt;<name>cert_info</name>-&gt;<name>key</name>-&gt;<name>algor</name>-&gt;<name>algorithm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <decl_stmt><decl><type><name>ASN1_OBJECT</name> *</type><name>paobj</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>X509_PUBKEY_get0_param</name><argument_list>(<argument><expr>&amp;<name>paobj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>X509_get_X509_PUBKEY</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nid</name> = <call><name>OBJ_obj2nid</name><argument_list>(<argument><expr><name>paobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
                             <argument><expr>(<name>nid</name> == <name>NID_undef</name>) ? "UNKNOWN" : <call><name>OBJ_nid2ln</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"CERT"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert_PEM</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

    <if>if <condition>(<expr><name>resdup</name></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="block">/* In this table, .extract is non-zero if RDNs using the NID should be
 * extracted to for the SSL_{CLIENT,SERVER}_{I,S}_DN_* environment
 * variables. */</comment>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>nid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>extract</name></decl>;</decl_stmt>
}</block> <decl><name><name>ssl_var_lookup_ssl_cert_dn_rec</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr>"C"</expr>,     <expr><name>NID_countryName</name></expr>,            <expr>1</expr> }</block></expr>,
    <expr><block>{ <expr>"ST"</expr>,    <expr><name>NID_stateOrProvinceName</name></expr>,    <expr>1</expr> }</block></expr>, <comment type="block">/* officially    (RFC2156) */</comment>
    <expr><block>{ <expr>"SP"</expr>,    <expr><name>NID_stateOrProvinceName</name></expr>,    <expr>0</expr> }</block></expr>, <comment type="block">/* compatibility (SSLeay)  */</comment>
    <expr><block>{ <expr>"L"</expr>,     <expr><name>NID_localityName</name></expr>,           <expr>1</expr> }</block></expr>,
    <expr><block>{ <expr>"O"</expr>,     <expr><name>NID_organizationName</name></expr>,       <expr>1</expr> }</block></expr>,
    <expr><block>{ <expr>"OU"</expr>,    <expr><name>NID_organizationalUnitName</name></expr>, <expr>1</expr> }</block></expr>,
    <expr><block>{ <expr>"CN"</expr>,    <expr><name>NID_commonName</name></expr>,             <expr>1</expr> }</block></expr>,
    <expr><block>{ <expr>"T"</expr>,     <expr><name>NID_title</name></expr>,                  <expr>1</expr> }</block></expr>,
    <expr><block>{ <expr>"I"</expr>,     <expr><name>NID_initials</name></expr>,               <expr>1</expr> }</block></expr>,
    <expr><block>{ <expr>"G"</expr>,     <expr><name>NID_givenName</name></expr>,              <expr>1</expr> }</block></expr>,
    <expr><block>{ <expr>"S"</expr>,     <expr><name>NID_surname</name></expr>,                <expr>1</expr> }</block></expr>,
    <expr><block>{ <expr>"D"</expr>,     <expr><name>NID_description</name></expr>,            <expr>1</expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NID_userId</name></cpp:ifdef>
    <expr><block>{ <expr>"UID"</expr>,   <expr><name>NID_userId</name></expr>,                 <expr>1</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{ <expr>"Email"</expr>, <expr><name>NID_pkcs9_emailAddress</name></expr>,     <expr>1</expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr>,    <expr>0</expr>,                          <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_dn</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>X509_NAME</name> *</type><name>xsname</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>, *<decl><type ref="prev"/><name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>X509_NAME_ENTRY</name> *</type><name>xsne</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>varlen</name></decl>;</decl_stmt>

    <comment type="block">/* if an _N suffix is used, find the Nth attribute of given name */</comment>
    <expr_stmt><expr><name>ptr</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>'_'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ptr</name> != <name>NULL</name> &amp;&amp; <call><name>strspn</name><argument_list>(<argument><expr><name>ptr</name> + 1</expr></argument>, <argument><expr>"0123456789"</expr></argument>)</argument_list></call> == <call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name> + 1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>idx</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>varlen</name> = <name>ptr</name> - <name>var</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>varlen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>ssl_var_lookup_ssl_cert_dn_rec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><call><name>strEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name><name>ssl_var_lookup_ssl_cert_dn_rec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name>varlen</name></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name><name>ssl_var_lookup_ssl_cert_dn_rec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call> == <name>varlen</name></expr>)</condition><then> <block>{
            <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <call><name>X509_NAME_entry_count</name><argument_list>(<argument><expr><name>xsname</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>xsne</name> = <call><name>X509_NAME_get_entry</name><argument_list>(<argument><expr><name>xsname</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>n</name> =<call><name>OBJ_obj2nid</name><argument_list>(<argument><expr>(<name>ASN1_OBJECT</name> *)<call><name>X509_NAME_ENTRY_get_object</name><argument_list>(<argument><expr><name>xsne</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>n</name> == <name><name>ssl_var_lookup_ssl_cert_dn_rec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>nid</name> &amp;&amp; <name>idx</name>-- == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = <call><name>modssl_X509_NAME_ENTRY_to_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xsne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_san</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>xs</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>numlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>onf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>entries</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"Email_"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>type</name> = <name>GEN_EMAIL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>var</name> += 6</expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"DNS_"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>type</name> = <name>GEN_DNS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>var</name> += 4</expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"OTHER_"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>type</name> = <name>GEN_OTHERNAME</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>var</name> += 6</expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>strEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"msUPN_"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>var</name> += 6</expr>;</expr_stmt>
            <expr_stmt><expr><name>onf</name> = "msUPN"</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"dnsSRV_"</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>var</name> += 7</expr>;</expr_stmt>
            <expr_stmt><expr><name>onf</name> = "id-on-dnsSRV"</expr>;</expr_stmt>
        }</block></then>
        <else>else
           <return>return <expr><name>NULL</name></expr>;</return></else></if></else></if>
    }</block></then>
    <else>else
        <return>return <expr><name>NULL</name></expr>;</return></else></if></else></if></else></if>

    <comment type="block">/* sanity check: number must be between 1 and 4 digits */</comment>
    <expr_stmt><expr><name>numlen</name> = <call><name>strspn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"0123456789"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>numlen</name> &lt; 1) || (<name>numlen</name> &gt; 4) || (<name>numlen</name> != <call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>modssl_X509_getSAN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>onf</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>entries</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <comment type="block">/* return the first entry from this 1-element array */</comment>
        <return>return <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr>;</return></then>
    <else>else
        <return>return <expr><name>NULL</name></expr>;</return></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_valid</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>ASN1_TIME</name> *</type><name>tm</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BIO</name>*</type> <name>bio</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>bio</name> = <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>ASN1_TIME_print</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> = <call><name>BIO_pending</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> = <call><name>BIO_read</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><index>[<expr><name>n</name></expr>]</index></name> = <name>NUL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGIT2NUM</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x)[0] - '0') * 10 + (x)[1] - '0')</cpp:value></cpp:define>

<comment type="block">/* Return a string giving the number of days remaining until 'tm', or
 * "0" if this can't be determined. */</comment>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_remain</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>ASN1_TIME</name> *</type><name>tm</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>then</name></decl>, <decl><type ref="prev"/><name>now</name> <init>= <expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>exp</name> <init>= <expr><block>{<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>diff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>dp</name></decl>;</decl_stmt>

    <comment type="block">/* Fail if the time isn't a valid ASN.1 TIME; RFC3280 mandates
     * that the seconds digits are present even though ASN.1
     * doesn't. */</comment>
    <if>if <condition>(<expr>(<name><name>tm</name>-&gt;<name>type</name></name> == <name>V_ASN1_UTCTIME</name> &amp;&amp; <name><name>tm</name>-&gt;<name>length</name></name> &lt; 11) ||
        (<name><name>tm</name>-&gt;<name>type</name></name> == <name>V_ASN1_GENERALIZEDTIME</name> &amp;&amp; <name><name>tm</name>-&gt;<name>length</name></name> &lt; 13) ||
        !<call><name>ASN1_TIME_check</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>tm</name>-&gt;<name>type</name></name> == <name>V_ASN1_UTCTIME</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>exp</name>.<name>tm_year</name></name> = <call><name>DIGIT2NUM</name><argument_list>(<argument><expr><name><name>tm</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>exp</name>.<name>tm_year</name></name> &lt;= 50</expr>)</condition><then> <expr_stmt><expr><name><name>exp</name>.<name>tm_year</name></name> += 100</expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>dp</name> = <name><name>tm</name>-&gt;<name>data</name></name> + 2</expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>exp</name>.<name>tm_year</name></name> = <call><name>DIGIT2NUM</name><argument_list>(<argument><expr><name><name>tm</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> * 100 + <call><name>DIGIT2NUM</name><argument_list>(<argument><expr><name><name>tm</name>-&gt;<name>data</name></name> + 2</expr></argument>)</argument_list></call> - 1900</expr>;</expr_stmt>
        <expr_stmt><expr><name>dp</name> = <name><name>tm</name>-&gt;<name>data</name></name> + 4</expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name><name>exp</name>.<name>tm_mon</name></name> = <call><name>DIGIT2NUM</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call> - 1</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>exp</name>.<name>tm_mday</name></name> = <call><name>DIGIT2NUM</name><argument_list>(<argument><expr><name>dp</name> + 2</expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>exp</name>.<name>tm_hour</name></name> = <call><name>DIGIT2NUM</name><argument_list>(<argument><expr><name>dp</name> + 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>exp</name>.<name>tm_min</name></name> = <call><name>DIGIT2NUM</name><argument_list>(<argument><expr><name>dp</name> + 6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>exp</name>.<name>tm_sec</name></name> = <call><name>DIGIT2NUM</name><argument_list>(<argument><expr><name>dp</name> + 8</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>apr_time_exp_gmt_get</name><argument_list>(<argument><expr>&amp;<name>then</name></expr></argument>, <argument><expr>&amp;<name>exp</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>diff</name> = <call>(<name>long</name>)<argument_list>(<argument><expr>(<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>then</name></expr></argument>)</argument_list></call> - <call><name>apr_time_sec</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call>) / (60*60*24)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>diff</name> &gt; 0 ? <call><name>apr_ltoa</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call> : <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_serial</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>xs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BIO</name> *</type><name>bio</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>bio</name> = <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>i2a_ASN1_INTEGER</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><call><name>X509_get_serialNumber</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> = <call><name>BIO_pending</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> = <call><name>BIO_read</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><index>[<expr><name>n</name></expr>]</index></name> = <name>NUL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_chain</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> *<name>sk</name></expr></argument>, <argument><expr><name>char</name> *<name>var</name></expr></argument>)</argument_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>X509</name> *</type><name>xs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>strspn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"0123456789"</expr></argument>)</argument_list></call> == <call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>n</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>n</name> &lt; <call><name>sk_X509_num</name><argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xs</name> = <call><name>sk_X509_value</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup_ssl_cert_PEM</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>result</name></expr>;</return>
}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_rfc4523_cea</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>X509</name> *</type><name>xs</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ASN1_INTEGER</name> *</type><name>serialNumber</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!(<name>xs</name> = <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>serialNumber</name> = <call><name>X509_get_serialNumber</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>serialNumber</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>X509_NAME</name> *</type><name>issuer</name> <init>= <expr><call><name>X509_get_issuer_name</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>issuer</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>BIGNUM</name> *</type><name>bn</name> <init>= <expr><call><name>ASN1_INTEGER_to_BN</name><argument_list>(<argument><expr><name>serialNumber</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> *</type><name>decimal</name> <init>= <expr><call><name>BN_bn2dec</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"{ serialNumber "</expr></argument>, <argument><expr><name>decimal</name></expr></argument>,
                    <argument><expr>", issuer rdnSequence:\""</expr></argument>,
                    <argument><expr><call><name>modssl_X509_NAME_to_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>issuer</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"\" }"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>OPENSSL_free</name><argument_list>(<argument><expr><name>decimal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_PEM</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>xs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BIO</name> *</type><name>bio</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>bio</name> = <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>PEM_write_bio_X509</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> = <call><name>BIO_pending</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> = <call><name>BIO_read</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><index>[<expr><name>n</name></expr>]</index></name> = <name>NUL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cert_verify</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>vrc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>verr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vinfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSL</name> *</type><name>ssl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>X509</name> *</type><name>xs</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ssl</name>   = <name><name>sslconn</name>-&gt;<name>ssl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>verr</name>  = <name><name>sslconn</name>-&gt;<name>verify_error</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vinfo</name> = <name><name>sslconn</name>-&gt;<name>verify_info</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vrc</name>   = <call><name>SSL_get_verify_result</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>xs</name>    = <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>vrc</name> == <name>X509_V_OK</name> &amp;&amp; <name>verr</name> == <name>NULL</name> &amp;&amp; <name>xs</name> == <name>NULL</name></expr>)</condition><then>
        <comment type="block">/* no client verification done at all */</comment>
        <expr_stmt><expr><name>result</name> = "NONE"</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>vrc</name> == <name>X509_V_OK</name> &amp;&amp; <name>verr</name> == <name>NULL</name> &amp;&amp; <name>vinfo</name> == <name>NULL</name> &amp;&amp; <name>xs</name> != <name>NULL</name></expr>)</condition><then>
        <comment type="block">/* client verification done successful */</comment>
        <expr_stmt><expr><name>result</name> = "SUCCESS"</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>vrc</name> == <name>X509_V_OK</name> &amp;&amp; <name>vinfo</name> != <name>NULL</name> &amp;&amp; <call><name>strEQ</name><argument_list>(<argument><expr><name>vinfo</name></expr></argument>, <argument><expr>"GENEROUS"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <comment type="block">/* client verification done in generous way */</comment>
        <expr_stmt><expr><name>result</name> = "GENEROUS"</expr>;</expr_stmt></then>
    <else>else
        <comment type="block">/* client verification failed */</comment>
        <expr_stmt><expr><name>result</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"FAILED:%s"</expr></argument>,
                              <argument><expr><name>verr</name> ? <name>verr</name> : <call><name>X509_verify_cert_error_string</name><argument_list>(<argument><expr><name>vrc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if>

    <if>if <condition>(<expr><name>xs</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_cipher</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOOL</name></type> <name>resdup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>usekeysize</name></decl>, <decl><type ref="prev"/><name>algkeysize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSL</name> *</type><name>ssl</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>resdup</name> = <name>TRUE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ssl</name> = <name><name>sslconn</name>-&gt;<name>ssl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ssl_var_lookup_ssl_cipher_bits</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr>&amp;<name>usekeysize</name></expr></argument>, <argument><expr>&amp;<name>algkeysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>ssl</name> &amp;&amp; <call><name>strEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>MODSSL_SSL_CIPHER_CONST</name> <name>SSL_CIPHER</name> *</type><name>cipher</name> <init>= <expr><call><name>SSL_get_current_cipher</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = (<name>cipher</name> != <name>NULL</name> ? (<name>char</name> *)<call><name>SSL_CIPHER_get_name</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call> : <name>NULL</name>)</expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"_EXPORT"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = (<name>usekeysize</name> &lt; 56 ? "true" : "false")</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"_USEKEYSIZE"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>apr_itoa</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>usekeysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"_ALGKEYSIZE"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>apr_itoa</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>algkeysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if></else></if>

    <if>if <condition>(<expr><name>result</name> != <name>NULL</name> &amp;&amp; <name>resdup</name></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_var_lookup_ssl_cipher_bits</name><parameter_list>(<param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>, <param><decl><type><name>int</name> *</type><name>usekeysize</name></decl></param>, <param><decl><type><name>int</name> *</type><name>algkeysize</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>MODSSL_SSL_CIPHER_CONST</name> <name>SSL_CIPHER</name> *</type><name>cipher</name></decl>;</decl_stmt>

    <expr_stmt><expr>*<name>usekeysize</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr>*<name>algkeysize</name> = 0</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ssl</name> != <name>NULL</name></expr>)</condition><then>
        <if>if <condition>(<expr>(<name>cipher</name> = <call><name>SSL_get_current_cipher</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>usekeysize</name> = <call><name>SSL_CIPHER_get_bits</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>, <argument><expr><name>algkeysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></then></if>
    <return>return;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_version</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>strEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"INTERFACE"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>var_interface</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"LIBRARY_INTERFACE"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>var_library_interface</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"LIBRARY"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>var_library</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></else></if></else></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/* Add each RDN in 'xn' to the table 't' where the NID is present in
 * 'nids', using key prefix 'pfx'.  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>extract_dn</name><parameter_list>(<param><decl><type><name>apr_table_t</name> *</type><name>t</name></decl></param>, <param><decl><type><name>apr_hash_t</name> *</type><name>nids</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pfx</name></decl></param>,
                       <param><decl><type><name>X509_NAME</name> *</type><name>xn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>X509_NAME_ENTRY</name> *</type><name>xsne</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nid</name></decl>;</decl_stmt>

    <comment type="block">/* Hash of (int) NID -&gt; (int *) counter to count each time an RDN
     * with the given NID has been seen. */</comment>
    <expr_stmt><expr><name>count</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* For each RDN... */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>X509_NAME_entry_count</name><argument_list>(<argument><expr><name>xn</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
         <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl>;</decl_stmt>
         <expr_stmt><expr><name>xsne</name> = <call><name>X509_NAME_get_entry</name><argument_list>(<argument><expr><name>xn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <comment type="block">/* Retrieve the nid, and check whether this is one of the nids
          * which are to be extracted. */</comment>
         <expr_stmt><expr><name>nid</name> = <call><name>OBJ_obj2nid</name><argument_list>(<argument><expr>(<name>ASN1_OBJECT</name> *)<call><name>X509_NAME_ENTRY_get_object</name><argument_list>(<argument><expr><name>xsne</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <expr_stmt><expr><name>tag</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>nids</name></expr></argument>, <argument><expr>&amp;<name>nid</name></expr></argument>, <argument><expr>sizeof <name>nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if>if <condition>(<expr><name>tag</name></expr>)</condition><then> <block>{
             <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>int</name> *</type><name>dup</name></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>;</decl_stmt>

             <comment type="block">/* Check whether a variable with this nid was already
              * been used; if so, use the foo_N=bar syntax. */</comment>
             <expr_stmt><expr><name>dup</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr>&amp;<name>nid</name></expr></argument>, <argument><expr>sizeof <name>nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <if>if <condition>(<expr><name>dup</name></expr>)</condition><then> <block>{
                 <expr_stmt><expr><name>key</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%s%s_%d"</expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr>++(*<name>dup</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
             }</block></then>
             <else>else <block>{
                 <comment type="block">/* Otherwise, use the plain foo=bar syntax. */</comment>
                 <expr_stmt><expr><name>dup</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr>&amp;<name>nid</name></expr></argument>, <argument><expr>sizeof <name>nid</name></expr></argument>, <argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><name>key</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             }</block></else></if>
             <expr_stmt><expr><name>value</name> = <call><name>modssl_X509_NAME_ENTRY_to_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xsne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then></if>
    }</block></for>
}</block></function>

<function><type><name>void</name></type> <name>modssl_var_extract_dns</name><parameter_list>(<param><decl><type><name>apr_table_t</name> *</type><name>t</name></decl></param>, <param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>nids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>X509</name> *</type><name>xs</name></decl>;</decl_stmt>

    <comment type="block">/* Build up a hash table of (int *)NID-&gt;(char *)short-name for all
     * the tags which are to be extracted: */</comment>
    <expr_stmt><expr><name>nids</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name><name>ssl_var_lookup_ssl_cert_dn_rec</name><index>[<expr><name>n</name></expr>]</index></name>.<name>name</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>ssl_var_lookup_ssl_cert_dn_rec</name><index>[<expr><name>n</name></expr>]</index></name>.<name>extract</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>nids</name></expr></argument>, <argument><expr>&amp;<name><name>ssl_var_lookup_ssl_cert_dn_rec</name><index>[<expr><name>n</name></expr>]</index></name>.<name>nid</name></expr></argument>,
                         <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ssl_var_lookup_ssl_cert_dn_rec</name><index>[<expr>0</expr>]</index></name>.<name>nid</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                         <argument><expr><name><name>ssl_var_lookup_ssl_cert_dn_rec</name><index>[<expr><name>n</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <comment type="block">/* Extract the server cert DNS -- note that the refcount does NOT
     * increase: */</comment>
    <expr_stmt><expr><name>xs</name> = <call><name>SSL_get_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>xs</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>extract_dn</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>nids</name></expr></argument>, <argument><expr>"SSL_SERVER_S_DN_"</expr></argument>, <argument><expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>extract_dn</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>nids</name></expr></argument>, <argument><expr>"SSL_SERVER_I_DN_"</expr></argument>, <argument><expr><call><name>X509_get_issuer_name</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* Extract the client cert DNs -- note that the refcount DOES
     * increase: */</comment>
    <expr_stmt><expr><name>xs</name> = <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>xs</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>extract_dn</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>nids</name></expr></argument>, <argument><expr>"SSL_CLIENT_S_DN_"</expr></argument>, <argument><expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>extract_dn</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>nids</name></expr></argument>, <argument><expr>"SSL_CLIENT_I_DN_"</expr></argument>, <argument><expr><call><name>X509_get_issuer_name</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extract_san_array</name><parameter_list>(<param><decl><type><name>apr_table_t</name> *</type><name>t</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pfx</name></decl></param>,
                              <param><decl><type><name>apr_array_header_t</name> *</type><name>entries</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>entries</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%s_%d"</expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>void</name></type> <name>modssl_var_extract_san_entries</name><parameter_list>(<param><decl><type><name>apr_table_t</name> *</type><name>t</name></decl></param>, <param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>X509</name> *</type><name>xs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>entries</name></decl>;</decl_stmt>

    <comment type="block">/* subjectAltName entries of the server certificate */</comment>
    <expr_stmt><expr><name>xs</name> = <call><name>SSL_get_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>xs</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>modssl_X509_getSAN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>GEN_EMAIL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>entries</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>extract_san_array</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"SSL_SERVER_SAN_Email"</expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>modssl_X509_getSAN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>GEN_DNS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>entries</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>extract_san_array</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"SSL_SERVER_SAN_DNS"</expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>modssl_X509_getSAN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>GEN_OTHERNAME</name></expr></argument>, <argument><expr>"id-on-dnsSRV"</expr></argument>, <argument><expr>-1</expr></argument>,
                               <argument><expr>&amp;<name>entries</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>extract_san_array</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"SSL_SERVER_SAN_OTHER_dnsSRV"</expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="block">/* no need to free xs (refcount does not increase) */</comment>
    }</block></then></if>

    <comment type="block">/* subjectAltName entries of the client certificate */</comment>
    <expr_stmt><expr><name>xs</name> = <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>xs</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>modssl_X509_getSAN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>GEN_EMAIL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>entries</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>extract_san_array</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"SSL_CLIENT_SAN_Email"</expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>modssl_X509_getSAN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>GEN_DNS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>entries</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>extract_san_array</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"SSL_CLIENT_SAN_DNS"</expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>modssl_X509_getSAN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>GEN_OTHERNAME</name></expr></argument>, <argument><expr>"msUPN"</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>entries</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>extract_san_array</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"SSL_CLIENT_SAN_OTHER_msUPN"</expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<comment type="block">/* For an extension type which OpenSSL does not recognize, attempt to
 * parse the extension type as a primitive string.  This will fail for
 * any structured extension type per the docs.  Returns non-zero on
 * success and writes the string to the given bio. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_extn_value</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><name>ASN1_OCTET_STRING</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>pp</name> <init>= <expr><name><name>str</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ASN1_STRING</name> *</type><name>ret</name> <init>= <expr><call><name>ASN1_STRING_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="block">/* This allows UTF8String, IA5String, VisibleString, or BMPString;
     * conversion to UTF-8 is forced. */</comment>
    <if>if <condition>(<expr><call><name>d2i_DISPLAYTEXT</name><argument_list>(<argument><expr>&amp;<name>ret</name></expr></argument>, <argument><expr>&amp;<name>pp</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ASN1_STRING_print_ex</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ASN1_STRFLGS_UTF8_CONVERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rv</name> = 1</expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>ASN1_STRING_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>apr_array_header_t</name> *</type><name>ssl_ext_list</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>int</name></type> <name>peer</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>extension</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>ssl_get_effective_config</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSL</name> *</type><name>ssl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>X509</name> *</type><name>xs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ASN1_OBJECT</name> *</type><name>oid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr>0</expr></init>, <name>j</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>sslconn</name> || !<name><name>sslconn</name>-&gt;<name>ssl</name></name> || !<name>extension</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>ssl</name> = <name><name>sslconn</name>-&gt;<name>ssl</name></name></expr>;</expr_stmt>

    <comment type="block">/* We accept the "extension" string to be converted as
     * a long name (nsComment), short name (DN) or
     * numeric OID (1.2.3.4).
     */</comment>
    <expr_stmt><expr><name>oid</name> = <call><name>OBJ_txt2obj</name><argument_list>(<argument><expr><name>extension</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>oid</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01970</expr></argument>)</argument_list></call>
                      "could not parse OID '%s'"</expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>xs</name> = <name>peer</name> ? <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call> : <call><name>SSL_get_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>xs</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>count</name> = <call><name>X509_get_ext_count</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Create an array large enough to accommodate every extension. This is
     * likely overkill, but safe.
     */</comment>
    <expr_stmt><expr><name>array</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>X509_EXTENSION</name> *</type><name>ext</name> <init>= <expr><call><name>X509_get_ext</name><argument_list>(<argument><expr><name>xs</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>OBJ_cmp</name><argument_list>(<argument><expr><call><name>X509_EXTENSION_get_object</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>BIO</name> *</type><name>bio</name> <init>= <expr><call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block">/* We want to obtain a string representation of the extensions
             * value and add it to the array we're building.
             * X509V3_EXT_print() doesn't know about all the possible
             * data types, but the value is stored as an ASN1_OCTET_STRING
             * allowing us a fallback in case of X509V3_EXT_print
             * not knowing how to handle the data.
             */</comment>
            <if>if <condition>(<expr><call><name>X509V3_EXT_print</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == 1 ||
                <call><name>dump_extn_value</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><call><name>X509_EXTENSION_get_data</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 1</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>BUF_MEM</name> *</type><name>buf</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name> **</type><name>ptr</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>BIO_get_mem_ptr</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*<name>ptr</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>buf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>buf</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01971</expr></argument>)</argument_list></call>
                              "Found an extension '%s', but failed to "
                              "create a string from it"</expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>BIO_vfree</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <if>if <condition>(<expr><name><name>array</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then>
        <expr_stmt><expr><name>array</name> = <name>NULL</name></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><name>peer</name></expr>)</condition><then> <block>{
        <comment type="block">/* only SSL_get_peer_certificate raises the refcount */</comment>
        <expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>ASN1_OBJECT_free</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>array</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>ssl_var_lookup_ssl_compress_meth</name><parameter_list>(<param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name> <init>= <expr>"NULL"</expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OPENSSL_NO_COMP</name></cpp:ifndef>
    <decl_stmt><decl><type><name>SSL_SESSION</name> *</type><name>pSession</name> <init>= <expr><call><name>SSL_get_session</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>pSession</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OPENSSL_NO_SSL_INTERN</name></cpp:ifdef>
        <switch>switch <condition>(<expr><call><name>SSL_SESSION_get_compress_id</name><argument_list>(<argument><expr><name>pSession</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <switch>switch <condition>(<expr><name><name>pSession</name>-&gt;<name>compress_meth</name></name></expr>)</condition> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <case>case <expr>0</expr>:
            <comment type="block">/* default "NULL" already set */</comment>
            <break>break;</break>

            <comment type="block">/* Defined by RFC 3749, deflate is coded by "1" */</comment>
        </case><case>case <expr>1</expr>:
            <expr_stmt><expr><name>result</name> = "DEFLATE"</expr>;</expr_stmt>
            <break>break;</break>

            <comment type="block">/* IANA assigned compression number for LZS */</comment>
        </case><case>case <expr>0x40</expr>:
            <expr_stmt><expr><name>result</name> = "LZS"</expr>;</expr_stmt>
            <break>break;</break>

        </case><default>default:
            <expr_stmt><expr><name>result</name> = "UNKNOWN"</expr>;</expr_stmt>
            <break>break;</break>
        </default>}</block></switch>
    }</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>result</name></expr>;</return>
}</block></then></if>

<comment type="block">/*  _________________________________________________________________
**
**  SSL Extension to mod_log_config
**  _________________________________________________________________
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../modules/loggers/mod_log_config.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ssl_var_log_handler_c</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ssl_var_log_handler_x</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * register us for the mod_log_config function registering phase
 * to establish %{...}c and to be able to expand %{...}x variables.
 */</comment>
<function><type><name>void</name></type> <name>ssl_var_log_config_register</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_register_log_handler</name></expr></argument>)</argument_list></call> *<name>log_pfn_register</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>log_pfn_register</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_register_log_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>log_pfn_register</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"c"</expr></argument>, <argument><expr><name>ssl_var_log_handler_c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"x"</expr></argument>, <argument><expr><name>ssl_var_log_handler_x</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return;</return>
}</block></function>

<comment type="block">/*
 * implement the %{..}c log function
 * (we are the only function)
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ssl_var_log_handler_c</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>ssl_get_effective_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>sslconn</name> == <name>NULL</name> || <name><name>sslconn</name>-&gt;<name>ssl</name></name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>strEQ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"version"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"SSL_PROTOCOL"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>strEQ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"cipher"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"SSL_CIPHER"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>strEQ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"subjectdn"</expr></argument>)</argument_list></call> || <call><name>strEQ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"clientcert"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"SSL_CLIENT_S_DN"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>strEQ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"issuerdn"</expr></argument>)</argument_list></call> || <call><name>strEQ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"cacert"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"SSL_CLIENT_I_DN"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>strEQ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"errcode"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = "-"</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>strEQ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"errstr"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = (<name>char</name> *)<name><name>sslconn</name>-&gt;<name>verify_error</name></name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if>
    <if>if <condition>(<expr><name>result</name> != <name>NULL</name> &amp;&amp; <name><name>result</name><index>[<expr>0</expr>]</index></name> == <name>NUL</name></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * extend the implementation of the %{..}x log function
 * (there can be more functions)
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ssl_var_log_handler_x</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> = <call><name>ssl_var_lookup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>result</name> != <name>NULL</name> &amp;&amp; <name><name>result</name><index>[<expr>0</expr>]</index></name> == <name>NUL</name></expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function></block></function>


</unit>
