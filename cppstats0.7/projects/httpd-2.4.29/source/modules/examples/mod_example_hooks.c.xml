<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/examples/mod_example_hooks.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * Apache example_hooks module.  Provide demonstrations of how modules do things.
 * It is not meant to be used in a production server.  Since it participates
 * in all of the processing phases, it could conceivable interfere with
 * the proper operation of other modules -- particularly the ones related
 * to security.
 *
 * In the interest of brevity, all functions and structures internal to
 * this module, but which may have counterparts in *real* modules, are
 * prefixed with 'x_' instead of 'example_'.
 *
 * To use mod_example_hooks, configure the Apache build with
 * --enable-example-hooks and compile.  Set up a &lt;Location&gt; block in your
 * configuration file like so:
 *
 * &lt;Location /example&gt;
 *    SetHandler example-hooks-handler
 * &lt;/Location&gt;
 *
 * When you look at that location on your server, you will see a backtrace of
 * the callbacks that have been invoked up to that point.  See the ErrorLog for
 * more information on code paths that  touch mod_example_hooks.
 *
 * IMPORTANT NOTES
 * ===============
 *
 * Do NOT use this module on a production server. It attaches itself to every
 * phase of the server runtime operations including startup, shutdown and
 * request processing, and produces copious amounts of logging data.  This will
 * negatively affect server performance.
 *
 * Do NOT use mod_example_hooks as the basis for your own code.  This module
 * implements every callback hook offered by the Apache core, and your
 * module will almost certainly not have to implement this much.  If you
 * want a simple module skeleton to start development, use apxs -g.
 *
 * XXX TO DO XXX
 * =============
 *
 * * Enable HTML backtrace entries for more callbacks that are not directly
 *   associated with a request
 * * Make sure every callback that posts an HTML backtrace entry does so in the *   right category, so nothing gets overwritten
 * * Implement some logic to show what happens in the parent, and what in the
 *   child(ren)
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SUEXEC</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unixd.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/* Data declarations.                                                       */</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/* Here are the static cells and structure declarations private to our      */</comment>
<comment type="block">/* module.                                                                  */</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/*--------------------------------------------------------------------------*/</comment>

<comment type="block">/*
 * Sample configuration record.  Used for both per-directory and per-server
 * configuration data.
 *
 * It's perfectly reasonable to have two different structures for the two
 * different environments.  The same command handlers will be called for
 * both, though, so the handlers need to be able to tell them apart.  One
 * possibility is for both structures to start with an int which is 0 for
 * one and 1 for the other.
 *
 * Note that while the per-directory and per-server configuration records are
 * available to most of the module handlers, they should be treated as
 * READ-ONLY by all except the command and merge handlers.  Sometimes handlers
 * are handed a record that applies to the current location by implication or
 * inheritance, and modifying it will change the rules for other locations.
 */</comment>
<typedef>typedef <type><struct>struct <name>x_cfg</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>cmode</name></decl>;</decl_stmt>                  <comment type="block">/* Environment to which record applies
                                 * (directory, server, or combination).
                                 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_MODE_SERVER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_MODE_DIRECTORY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_MODE_COMBO</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>     <comment type="block">/* Shouldn't ever happen. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>local</name></decl>;</decl_stmt>                  <comment type="block">/* Boolean: "Example" directive declared
                                 * here?
                                 */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>congenital</name></decl>;</decl_stmt>             <comment type="block">/* Boolean: did we inherit an "Example"? */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>trace</name></decl>;</decl_stmt>                <comment type="block">/* Pointer to trace string. */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>loc</name></decl>;</decl_stmt>                  <comment type="block">/* Location to which this record applies. */</comment>
}</block></struct></type> <name>x_cfg</name>;</typedef>

<comment type="block">/*
 * String pointer to hold the startup trace. No harm working with a global until
 * the server is (may be) multi-threaded.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>trace</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Declare ourselves so the configuration routines can find and know us.
 * We'll fill it in at the end of the module.
 */</comment>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>example_hooks_module</name></decl>;</decl_stmt>

<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/* The following pseudo-prototype declarations illustrate the parameters    */</comment>
<comment type="block">/* passed to command handlers for the different types of directive          */</comment>
<comment type="block">/* syntax.  If an argument was specified in the directive definition        */</comment>
<comment type="block">/* (look for "command_rec" below), it's available to the command handler    */</comment>
<comment type="block">/* via the (void *) info field in the cmd_parms argument passed to the      */</comment>
<comment type="block">/* handler (cmd-&gt;info for the examples below).                              */</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/*--------------------------------------------------------------------------*/</comment>

<comment type="block">/*
 * Command handler for a NO_ARGS directive.  Declared in the command_rec
 * list with
 *   AP_INIT_NO_ARGS("directive", function, mconfig, where, help)
 *
 * static const char *handle_NO_ARGS(cmd_parms *cmd, void *mconfig);
 */</comment>

<comment type="block">/*
 * Command handler for a RAW_ARGS directive.  The "args" argument is the text
 * of the commandline following the directive itself.  Declared in the
 * command_rec list with
 *   AP_INIT_RAW_ARGS("directive", function, mconfig, where, help)
 *
 * static const char *handle_RAW_ARGS(cmd_parms *cmd, void *mconfig,
 *                                    const char *args);
 */</comment>

<comment type="block">/*
 * Command handler for a FLAG directive.  The single parameter is passed in
 * "bool", which is either zero or not for Off or On respectively.
 * Declared in the command_rec list with
 *   AP_INIT_FLAG("directive", function, mconfig, where, help)
 *
 * static const char *handle_FLAG(cmd_parms *cmd, void *mconfig, int bool);
 */</comment>

<comment type="block">/*
 * Command handler for a TAKE1 directive.  The single parameter is passed in
 * "word1".  Declared in the command_rec list with
 *   AP_INIT_TAKE1("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE1(cmd_parms *cmd, void *mconfig,
 *                                 char *word1);
 */</comment>

<comment type="block">/*
 * Command handler for a TAKE2 directive.  TAKE2 commands must always have
 * exactly two arguments.  Declared in the command_rec list with
 *   AP_INIT_TAKE2("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE2(cmd_parms *cmd, void *mconfig,
 *                                 char *word1, char *word2);
 */</comment>

<comment type="block">/*
 * Command handler for a TAKE3 directive.  Like TAKE2, these must have exactly
 * three arguments, or the parser complains and doesn't bother calling us.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE3("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE3(cmd_parms *cmd, void *mconfig,
 *                                 char *word1, char *word2, char *word3);
 */</comment>

<comment type="block">/*
 * Command handler for a TAKE12 directive.  These can take either one or two
 * arguments.
 * - word2 is a NULL pointer if no second argument was specified.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE12("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE12(cmd_parms *cmd, void *mconfig,
 *                                  char *word1, char *word2);
 */</comment>

<comment type="block">/*
 * Command handler for a TAKE123 directive.  A TAKE123 directive can be given,
 * as might be expected, one, two, or three arguments.
 * - word2 is a NULL pointer if no second argument was specified.
 * - word3 is a NULL pointer if no third argument was specified.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE123("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE123(cmd_parms *cmd, void *mconfig,
 *                                   char *word1, char *word2, char *word3);
 */</comment>

<comment type="block">/*
 * Command handler for a TAKE13 directive.  Either one or three arguments are
 * permitted - no two-parameters-only syntax is allowed.
 * - word2 and word3 are NULL pointers if only one argument was specified.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE13("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE13(cmd_parms *cmd, void *mconfig,
 *                                  char *word1, char *word2, char *word3);
 */</comment>

<comment type="block">/*
 * Command handler for a TAKE23 directive.  At least two and as many as three
 * arguments must be specified.
 * - word3 is a NULL pointer if no third argument was specified.
 * Declared in the command_rec list with
 *   AP_INIT_TAKE23("directive", function, mconfig, where, help)
 *
 * static const char *handle_TAKE23(cmd_parms *cmd, void *mconfig,
 *                                  char *word1, char *word2, char *word3);
 */</comment>

<comment type="block">/*
 * Command handler for a ITERATE directive.
 * - Handler is called once for each of n arguments given to the directive.
 * - word1 points to each argument in turn.
 * Declared in the command_rec list with
 *   AP_INIT_ITERATE("directive", function, mconfig, where, help)
 *
 * static const char *handle_ITERATE(cmd_parms *cmd, void *mconfig,
 *                                   char *word1);
 */</comment>

<comment type="block">/*
 * Command handler for a ITERATE2 directive.
 * - Handler is called once for each of the second and subsequent arguments
 *   given to the directive.
 * - word1 is the same for each call for a particular directive instance (the
 *   first argument).
 * - word2 points to each of the second and subsequent arguments in turn.
 * Declared in the command_rec list with
 *   AP_INIT_ITERATE2("directive", function, mconfig, where, help)
 *
 * static const char *handle_ITERATE2(cmd_parms *cmd, void *mconfig,
 *                                    char *word1, char *word2);
 */</comment>

<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/* These routines are strictly internal to this module, and support its     */</comment>
<comment type="block">/* operation.  They are not referenced by any external portion of the       */</comment>
<comment type="block">/* server.                                                                  */</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/*--------------------------------------------------------------------------*/</comment>

<comment type="block">/*
 * Locate our directory configuration record for the current request.
 */</comment>
<function><type><specifier>static</specifier> <name>x_cfg</name> *</type><name>our_dconfig</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>(<name>x_cfg</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>example_hooks_module</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
 * The following utility routines are not used in the module. Don't
 * compile them so -Wall doesn't complain about functions that are
 * defined but not used.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
<comment type="block">/*
 * Locate our server configuration record for the specified server.
 */</comment>
static x_cfg *our_sconfig(const server_rec *s)
{
    return (x_cfg *) ap_get_module_config(s-&gt;module_config, &amp;example_hooks_module);
}

<comment type="block">/*
 * Likewise for our configuration record for the specified request.
 */</comment>
static x_cfg *our_rconfig(const request_rec *r)
{
    return (x_cfg *) ap_get_module_config(r-&gt;request_config, &amp;example_hooks_module);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* if 0 */</comment>

<comment type="block">/*
 * Likewise for our configuration record for a connection.
 */</comment>
<function><type><specifier>static</specifier> <name>x_cfg</name> *</type><name>our_cconfig</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>(<name>x_cfg</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>example_hooks_module</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
 * You *could* change the following if you wanted to see the calling
 * sequence reported in the server's error_log, but beware - almost all of
 * these co-routines are called for every single request, and the impact
 * on the size (and readability) of the error_log is considerable.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EXAMPLE_LOG_EACH</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXAMPLE_LOG_EACH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXAMPLE_LOG_EACH</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>example_log_each</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>s</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02991</expr></argument>)</argument_list></call>
                     "mod_example_hooks: %s"</expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"mod_example_hooks traced in non-loggable "
                        "context: %s\n"</expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * This utility routine traces the hooks called when the server starts up.
 * It leaves a trace in a global variable, so it should not be called from
 * a hook handler that runs in a multi-threaded situation.
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_startup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>x_cfg</name> *</type><name>mconfig</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sofar</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>where</name></decl>, *<decl><type ref="prev"/><name>addon</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXAMPLE_LOG_EACH</name></expr></cpp:if>
    <expr_stmt><expr><call><name>example_log_each</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * If we weren't passed a configuration record, we can't figure out to
     * what location this call applies.  This only happens for co-routines
     * that don't operate in a particular directory or server context.  If we
     * got a valid record, extract the location (directory or server) to which
     * it applies.
     */</comment>
    <expr_stmt><expr><name>where</name> = (<name>mconfig</name> != <name>NULL</name>) ? <name><name>mconfig</name>-&gt;<name>loc</name></name> : "nowhere"</expr>;</expr_stmt>
    <expr_stmt><expr><name>where</name> = (<name>where</name> != <name>NULL</name>) ? <name>where</name> : ""</expr>;</expr_stmt>

    <expr_stmt><expr><name>addon</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
                        <argument><expr>"   &lt;li&gt;\n"
                        "    &lt;dl&gt;\n"
                        "     &lt;dt&gt;&lt;samp&gt;"</expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr>"&lt;/samp&gt;&lt;/dt&gt;\n"
                        "     &lt;dd&gt;&lt;samp&gt;["</expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr>"]&lt;/samp&gt;&lt;/dd&gt;\n"
                        "    &lt;/dl&gt;\n"
                        "   &lt;/li&gt;\n"</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Make sure that we start with a valid string, even if we have never been
     * called.
     */</comment>
    <expr_stmt><expr><name>sofar</name> = (<name>trace</name> == <name>NULL</name>) ? "" : <name>trace</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>trace</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sofar</name></expr></argument>, <argument><expr><name>addon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block">/*
 * This utility route traces the hooks called as a request is handled.
 * It takes the current request as argument
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE_NOTE</name></cpp:macro> <cpp:value>"example-hooks-trace"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_request</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>trace_copy</name></decl>, *<decl><type ref="prev"/><name>sofar</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>addon</name></decl>, *<decl><type ref="prev"/><name>where</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>x_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXAMPLE_LOG_EACH</name></expr></cpp:if>
    <expr_stmt><expr><call><name>example_log_each</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr>(<name>sofar</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>TRACE_NOTE</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>sofar</name> = ""</expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>cfg</name> = <call><name>our_dconfig</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>where</name> = (<name>cfg</name> != <name>NULL</name>) ? <name><name>cfg</name>-&gt;<name>loc</name></name> : "nowhere"</expr>;</expr_stmt>
    <expr_stmt><expr><name>where</name> = (<name>where</name> != <name>NULL</name>) ? <name>where</name> : ""</expr>;</expr_stmt>

    <expr_stmt><expr><name>addon</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                        <argument><expr>"   &lt;li&gt;\n"
                        "    &lt;dl&gt;\n"
                        "     &lt;dt&gt;&lt;samp&gt;"</expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr>"&lt;/samp&gt;&lt;/dt&gt;\n"
                        "     &lt;dd&gt;&lt;samp&gt;["</expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr>"]&lt;/samp&gt;&lt;/dd&gt;\n"
                        "    &lt;/dl&gt;\n"
                        "   &lt;/li&gt;\n"</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>trace_copy</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sofar</name></expr></argument>, <argument><expr><name>addon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>TRACE_NOTE</name></expr></argument>, <argument><expr><name>trace_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * This utility routine traces the hooks called while processing a
 * Connection. Its trace is kept in the pool notes of the pool associated
 * with the Connection.
 */</comment>

<comment type="block">/*
 * Key to get and set the userdata.  We should be able to get away
 * with a constant key, since in prefork mode the process will have
 * the connection and its pool to itself entirely, and in
 * multi-threaded mode each connection will have its own pool.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_NOTE</name></cpp:macro> <cpp:value>"example-hooks-connection"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>trace_copy</name></decl>, *<decl><type ref="prev"/><name>sofar</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>addon</name></decl>, *<decl><type ref="prev"/><name>where</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>x_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXAMPLE_LOG_EACH</name></expr></cpp:if>
    <expr_stmt><expr><call><name>example_log_each</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>cfg</name> = <call><name>our_cconfig</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>where</name> = (<name>cfg</name> != <name>NULL</name>) ? <name><name>cfg</name>-&gt;<name>loc</name></name> : "nowhere"</expr>;</expr_stmt>
    <expr_stmt><expr><name>where</name> = (<name>where</name> != <name>NULL</name>) ? <name>where</name> : ""</expr>;</expr_stmt>

    <expr_stmt><expr><name>addon</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>,
                        <argument><expr>"   &lt;li&gt;\n"
                        "    &lt;dl&gt;\n"
                        "     &lt;dt&gt;&lt;samp&gt;"</expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr>"&lt;/samp&gt;&lt;/dt&gt;\n"
                        "     &lt;dd&gt;&lt;samp&gt;["</expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr>"]&lt;/samp&gt;&lt;/dd&gt;\n"
                        "    &lt;/dl&gt;\n"
                        "   &lt;/li&gt;\n"</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Find existing notes and copy */</comment>
    <expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>CONN_NOTE</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sofar</name> = (<name>data</name> == <name>NULL</name>) ? "" : (const <name>char</name> *) <name>data</name></expr>;</expr_stmt>

    <comment type="block">/* Tack addon onto copy */</comment>
    <expr_stmt><expr><name>trace_copy</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sofar</name></expr></argument>, <argument><expr><name>addon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Stash copy back into pool notes.  This call has a cleanup
     * parameter, but we're not using it because the string has been
     * allocated from that same pool.  There is also an unused return
     * value: we have nowhere to communicate any error that might
     * occur, and will have to check for the existence of this data on
     * the other end.
     */</comment>
    <expr_stmt><expr><call><name>apr_pool_userdata_set</name><argument_list>(<argument><expr>(const <name>void</name> *) <name>trace_copy</name></expr></argument>, <argument><expr><name>CONN_NOTE</name></expr></argument>,
                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_nocontext</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Since we have no request or connection to trace, or any idea
     * from where this routine was called, there's really not much we
     * can do.  If we are not logging everything by way of the
     * EXAMPLE_LOG_EACH constant, do nothing in this routine.
     */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EXAMPLE_LOG_EACH</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>


<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/* We prototyped the various syntax for command handlers (routines that     */</comment>
<comment type="block">/* are called when the configuration parser detects a directive declared    */</comment>
<comment type="block">/* by our module) earlier.  Now we actually declare a "real" routine that   */</comment>
<comment type="block">/* will be invoked by the parser when our "real" directive is               */</comment>
<comment type="block">/* encountered.                                                             */</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/* If a command handler encounters a problem processing the directive, it   */</comment>
<comment type="block">/* signals this fact by returning a non-NULL pointer to a string            */</comment>
<comment type="block">/* describing the problem.                                                  */</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/* The magic return value DECLINE_CMD is used to deal with directives       */</comment>
<comment type="block">/* that might be declared by multiple modules.  If the command handler      */</comment>
<comment type="block">/* returns NULL, the directive was processed; if it returns DECLINE_CMD,    */</comment>
<comment type="block">/* the next module (if any) that declares the directive is given a chance   */</comment>
<comment type="block">/* at it.  If it returns any other value, it's treated as the text of an    */</comment>
<comment type="block">/* error message.                                                           */</comment>
<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/*
 * Command handler for the NO_ARGS "Example" directive.  All we do is mark the
 * call in the trace log, and flag the applicability of the directive to the
 * current location in that location's configuration record.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>cmd_example</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>x_cfg</name> *</type><name>cfg</name> <init>= <expr>(<name>x_cfg</name> *) <name>mconfig</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * "Example Wuz Here"
     */</comment>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>local</name></name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr>"cmd_example()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This function gets called to create a per-directory configuration
 * record.  This will be called for the "default" server environment, and for
 * each directory for which the parser finds any of our directives applicable.
 * If a directory doesn't have any of our directives involved (i.e., they
 * aren't in the .htaccess file, or a &lt;Location&gt;, &lt;Directory&gt;, or related
 * block), this routine will *not* be called - the configuration for the
 * closest ancestor is used.
 *
 * The return value is a pointer to the created module-specific
 * structure.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>x_create_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dirspec</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>x_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>dname</name> <init>= <expr><name>dirspec</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Allocate the space for our record from the pool supplied.
     */</comment>
    <expr_stmt><expr><name>cfg</name> = (<name>x_cfg</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Now fill in the defaults.  If there are any `parent' configuration
     * records, they'll get merged as part of a separate callback.
     */</comment>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>local</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>congenital</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>cmode</name></name> = <name>CONFIG_MODE_DIRECTORY</name></expr>;</expr_stmt>
    <comment type="block">/*
     * Finally, add our trace to the callback list.
     */</comment>
    <expr_stmt><expr><name>dname</name> = (<name>dname</name> != <name>NULL</name>) ? <name>dname</name> : ""</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>loc</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"DIR("</expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr>")"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>note</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"x_create_dir_config(p == %pp, dirspec == %s)"</expr></argument>,
                        <argument><expr>(<name>void</name>*) <name>p</name></expr></argument>, <argument><expr><name>dirspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>void</name> *) <name>cfg</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This function gets called to merge two per-directory configuration
 * records.  This is typically done to cope with things like .htaccess files
 * or &lt;Location&gt; directives for directories that are beneath one for which a
 * configuration record was already created.  The routine has the
 * responsibility of creating a new record and merging the contents of the
 * other two into it appropriately.  If the module doesn't declare a merge
 * routine, the record for the closest ancestor location (that has one) is
 * used exclusively.
 *
 * The routine MUST NOT modify any of its arguments!
 *
 * The return value is a pointer to the created module-specific structure
 * containing the merged values.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>x_merge_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>parent_conf</name></decl></param>,
                                      <param><decl><type><name>void</name> *</type><name>newloc_conf</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>x_cfg</name> *</type><name>merged_config</name> <init>= <expr>(<name>x_cfg</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>x_cfg</name> *</type><name>pconf</name> <init>= <expr>(<name>x_cfg</name> *) <name>parent_conf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>x_cfg</name> *</type><name>nconf</name> <init>= <expr>(<name>x_cfg</name> *) <name>newloc_conf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Some things get copied directly from the more-specific record, rather
     * than getting merged.
     */</comment>
    <expr_stmt><expr><name><name>merged_config</name>-&gt;<name>local</name></name> = <name><name>nconf</name>-&gt;<name>local</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>merged_config</name>-&gt;<name>loc</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>nconf</name>-&gt;<name>loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Others, like the setting of the `congenital' flag, get ORed in.  The
     * setting of that particular flag, for instance, is TRUE if it was ever
     * true anywhere in the upstream configuration.
     */</comment>
    <expr_stmt><expr><name><name>merged_config</name>-&gt;<name>congenital</name></name> = (<name><name>pconf</name>-&gt;<name>congenital</name></name> | <name><name>pconf</name>-&gt;<name>local</name></name>)</expr>;</expr_stmt>
    <comment type="block">/*
     * If we're merging records for two different types of environment (server
     * and directory), mark the new record appropriately.  Otherwise, inherit
     * the current value.
     */</comment>
    <expr_stmt><expr><name><name>merged_config</name>-&gt;<name>cmode</name></name> =
        (<name><name>pconf</name>-&gt;<name>cmode</name></name> == <name><name>nconf</name>-&gt;<name>cmode</name></name>) ? <name><name>pconf</name>-&gt;<name>cmode</name></name> : <name>CONFIG_MODE_COMBO</name></expr>;</expr_stmt>
    <comment type="block">/*
     * Now just record our being called in the trace list.  Include the
     * locations we were asked to merge.
     */</comment>
    <expr_stmt><expr><name>note</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"x_merge_dir_config(p == %pp, parent_conf == "
                        "%pp, newloc_conf == %pp)"</expr></argument>, <argument><expr>(<name>void</name>*) <name>p</name></expr></argument>,
                        <argument><expr>(<name>void</name>*) <name>parent_conf</name></expr></argument>, <argument><expr>(<name>void</name>*) <name>newloc_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>merged_config</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>void</name> *) <name>merged_config</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This function gets called to create a per-server configuration
 * record.  It will always be called for the "default" server.
 *
 * The return value is a pointer to the created module-specific
 * structure.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>x_create_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>x_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>sname</name> <init>= <expr><name><name>s</name>-&gt;<name>server_hostname</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * As with the x_create_dir_config() reoutine, we allocate and fill
     * in an empty record.
     */</comment>
    <expr_stmt><expr><name>cfg</name> = (<name>x_cfg</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>local</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>congenital</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>cmode</name></name> = <name>CONFIG_MODE_SERVER</name></expr>;</expr_stmt>
    <comment type="block">/*
     * Note that we were called in the trace list.
     */</comment>
    <expr_stmt><expr><name>sname</name> = (<name>sname</name> != <name>NULL</name>) ? <name>sname</name> : ""</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>loc</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"SVR("</expr></argument>, <argument><expr><name>sname</name></expr></argument>, <argument><expr>")"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr>"x_create_server_config()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>void</name> *) <name>cfg</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This function gets called to merge two per-server configuration
 * records.  This is typically done to cope with things like virtual hosts and
 * the default server configuration  The routine has the responsibility of
 * creating a new record and merging the contents of the other two into it
 * appropriately.  If the module doesn't declare a merge routine, the more
 * specific existing record is used exclusively.
 *
 * The routine MUST NOT modify any of its arguments!
 *
 * The return value is a pointer to the created module-specific structure
 * containing the merged values.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>x_merge_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>server1_conf</name></decl></param>,
                                         <param><decl><type><name>void</name> *</type><name>server2_conf</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>x_cfg</name> *</type><name>merged_config</name> <init>= <expr>(<name>x_cfg</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>x_cfg</name> *</type><name>s1conf</name> <init>= <expr>(<name>x_cfg</name> *) <name>server1_conf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>x_cfg</name> *</type><name>s2conf</name> <init>= <expr>(<name>x_cfg</name> *) <name>server2_conf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Our inheritance rules are our own, and part of our module's semantics.
     * Basically, just note whence we came.
     */</comment>
    <expr_stmt><expr><name><name>merged_config</name>-&gt;<name>cmode</name></name> =
        (<name><name>s1conf</name>-&gt;<name>cmode</name></name> == <name><name>s2conf</name>-&gt;<name>cmode</name></name>) ? <name><name>s1conf</name>-&gt;<name>cmode</name></name> : <name>CONFIG_MODE_COMBO</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>merged_config</name>-&gt;<name>local</name></name> = <name><name>s2conf</name>-&gt;<name>local</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>merged_config</name>-&gt;<name>congenital</name></name> = (<name><name>s1conf</name>-&gt;<name>congenital</name></name> | <name><name>s1conf</name>-&gt;<name>local</name></name>)</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>merged_config</name>-&gt;<name>loc</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s2conf</name>-&gt;<name>loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Trace our call, including what we were asked to merge.
     */</comment>
    <expr_stmt><expr><name>note</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"x_merge_server_config(\""</expr></argument>, <argument><expr><name><name>s1conf</name>-&gt;<name>loc</name></name></expr></argument>, <argument><expr>"\",\""</expr></argument>,
                   <argument><expr><name><name>s2conf</name>-&gt;<name>loc</name></name></expr></argument>, <argument><expr>"\")"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>merged_config</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>void</name> *) <name>merged_config</name></expr>;</return>
}</block></function>


<comment type="block">/*--------------------------------------------------------------------------*
 *                                                                          *
 * Now let's declare routines for each of the callback hooks in order.      *
 * (That's the order in which they're listed in the callback list, *not     *
 * the order in which the server calls them!  See the command_rec           *
 * declaration near the bottom of this file.)  Note that these may be       *
 * called for situations that don't relate primarily to our function - in   *
 * other words, the fixup handler shouldn't assume that the request has     *
 * to do with "example_hooks" stuff.                                        *
 *                                                                          *
 * With the exception of the content handler, all of our routines will be   *
 * called for each request, unless an earlier handler from another module   *
 * aborted the sequence.                                                    *
 *                                                                          *
 * There are three types of hooks (see include/ap_config.h):                *
 *                                                                          *
 * VOID      : No return code, run all handlers declared by any module      *
 * RUN_FIRST : Run all handlers until one returns something other           *
 *             than DECLINED. Hook runner result is result of last callback *
 * RUN_ALL   : Run all handlers until one returns something other than OK   *
 *             or DECLINED. The hook runner returns that other value. If    *
 *             all hooks run, the hook runner returns OK.                   *
 *                                                                          *
 * Handlers that are declared as "int" can return the following:            *
 *                                                                          *
 *  OK          Handler accepted the request and did its thing with it.     *
 *  DECLINED    Handler took no action.                                     *
 *  HTTP_mumble Handler looked at request and found it wanting.             *
 *                                                                          *
 * See include/httpd.h for a list of HTTP_mumble status codes.  Handlers    *
 * that are not declared as int return a valid pointer, or NULL if they     *
 * DECLINE to handle their phase for that specific request.  Exceptions, if *
 * any, are noted with each routine.                                        *
 *--------------------------------------------------------------------------*/</comment>

<comment type="block">/*
 * This routine is called before the server processes the configuration
 * files.  There is no return value.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"x_pre_config()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine is called after the server processes the configuration
 * files.  At this point the module may review and adjust its configuration
 * settings in relation to one another and report any problems.  On restart,
 * this routine will be called twice, once in the startup process (which
 * exits shortly after this phase) and once in the running server process.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_check_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"x_check_config()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine is called when the -t command-line option is supplied.
 * It executes only once, in the startup process, after the check_config
 * phase and just before the process exits.  At this point the module
 * may output any information useful in configuration testing.
 *
 * This is a VOID hook: all defined handlers get called.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>x_test_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Example module configuration test routine\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"x_test_config()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * This routine is called to perform any module-specific log file
 * openings. It is invoked just before the post_config phase
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_open_logs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"x_open_logs()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine is called after the server finishes the configuration
 * process.  At this point the module may review and adjust its configuration
 * settings in relation to one another and report any problems.  On restart,
 * this routine will be called only once, in the running server process.
 *
 * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
 * server will still call any remaining modules with an handler for this
 * phase.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"x_post_config()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * All our process-death routine does is add its trace to the log.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>x_child_exit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>sname</name> <init>= <expr><name><name>s</name>-&gt;<name>server_hostname</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * The arbitrary text we add to our trace entry indicates for which server
     * we're being called.
     */</comment>
    <expr_stmt><expr><name>sname</name> = (<name>sname</name> != <name>NULL</name>) ? <name>sname</name> : ""</expr>;</expr_stmt>
    <expr_stmt><expr><name>note</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"x_child_exit("</expr></argument>, <argument><expr><name>sname</name></expr></argument>, <argument><expr>")"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * All our process initialiser does is add its trace to the log.
 *
 * This is a VOID hook: all defined handlers get called.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>x_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>sname</name> <init>= <expr><name><name>s</name>-&gt;<name>server_hostname</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * The arbitrary text we add to our trace entry indicates for which server
     * we're being called.
     */</comment>
    <expr_stmt><expr><name>sname</name> = (<name>sname</name> != <name>NULL</name>) ? <name>sname</name> : ""</expr>;</expr_stmt>
    <expr_stmt><expr><name>note</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"x_child_init("</expr></argument>, <argument><expr><name>sname</name></expr></argument>, <argument><expr>")"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>x_child_exit</name></expr></argument>, <argument><expr><name>x_child_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * The hook runner for ap_hook_http_scheme is aliased to ap_http_scheme(),
 * a routine that the core and other modules call when they need to know
 * the URL scheme for the request.  For instance, mod_ssl returns "https"
 * if the server_rec associated with the request has SSL enabled.
 *
 * This hook was named 'ap_hook_http_method' in httpd 2.0.
 *
 * This is a RUN_FIRST hook: the first handler to return a non NULL
 * value aborts the handler chain.  The http_core module inserts a
 * fallback handler (with APR_HOOK_REALLY_LAST preference) that returns
 * "http".
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>x_http_scheme</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_http_scheme()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We have no claims to make about the request scheme */</comment>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * The runner for this hook is aliased to ap_default_port(), which the
 * core and other modules call when they need to know the default port
 * for a particular server.  This is used for instance to omit the
 * port number from a Redirect response Location header URL if the port
 * number is equal to the default port for the service (like 80 for http).
 *
 * This is a RUN_FIRST hook: the first handler to return a non-zero
 * value is the last one executed.  The http_core module inserts a
 * fallback handler (with APR_HOOK_REALLY_LAST order specifier) that
 * returns 80.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_port_t</name></type> <name>x_default_port</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_default_port()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine is called just before the handler gets invoked. It allows
 * a module to insert a previously defined filter into the filter chain.
 *
 * No filter has been defined by this module, so we just log the call
 * and exit.
 *
 * This is a VOID hook: all defined handlers get called.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>x_insert_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_insert_filter()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * This routine is called to insert a previously defined error filter into
 * the filter chain as the request is being processed.
 *
 * For the purpose of this example, we don't have a filter to insert,
 * so just add to the trace and exit.
 *
 * This is a VOID hook: all defined handlers get called.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>x_insert_error_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_insert_error_filter()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/* Now we declare our content handlers, which are invoked when the server   */</comment>
<comment type="block">/* encounters a document which our module is supposed to have a chance to   */</comment>
<comment type="block">/* see.  (See mod_mime's SetHandler and AddHandler directives, and the      */</comment>
<comment type="block">/* mod_info and mod_status examples, for more details.)                     */</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/* Since content handlers are dumping data directly into the connection     */</comment>
<comment type="block">/* (using the r*() routines, such as rputs() and rprintf()) without         */</comment>
<comment type="block">/* intervention by other parts of the server, they need to make             */</comment>
<comment type="block">/* sure any accumulated HTTP headers are sent first.  This is done by       */</comment>
<comment type="block">/* calling send_http_header().  Otherwise, no header will be sent at all,   */</comment>
<comment type="block">/* and the output sent to the client will actually be HTTP-uncompliant.     */</comment>
<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/*
 * Sample content handler.  All this does is display the call list that has
 * been built up so far.
 *
 * This routine gets called for every request, unless another handler earlier
 * in the callback chain has already handled the request. It is up to us to
 * test the request_rec-&gt;handler field and see whether we are meant to handle
 * this request.
 *
 * The content handler gets to write directly to the client using calls like
 * ap_rputs() and ap_rprintf()
 *
 * This is a RUN_FIRST hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>x_cfg</name> *</type><name>dcfg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>conn_data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>dcfg</name> = <call><name>our_dconfig</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Add our trace to the log, and whether we get to write
     * content for this request.
     */</comment>
    <expr_stmt><expr><name>note</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"x_handler(), handler is \""</expr></argument>,
                      <argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If it's not for us, get out as soon as possible. */</comment>
    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"example-hooks-handler"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Set the Content-type header. Note that we do not actually have to send
     * the headers: this is done by the http core.
     */</comment>
    <expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/html"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * If we're only supposed to send header information (HEAD request), we're
     * already there.
     */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>OK</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Now send our actual output.  Since we tagged this as being
     * "text/html", we need to embed any HTML.
     */</comment>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name>DOCTYPE_HTML_3_2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;HTML&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;HEAD&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;TITLE&gt;mod_example_hooks Module Content-Handler Output\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;/TITLE&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/HEAD&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;BODY&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;H1&gt;&lt;SAMP&gt;mod_example_hooks&lt;/SAMP&gt; Module Content-Handler Output\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;/H1&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"  Apache HTTP Server version: \"%s\"\n"</expr></argument>,
            <argument><expr><call><name>ap_get_server_banner</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;BR&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"  Server built: \"%s\"\n"</expr></argument>, <argument><expr><call><name>ap_get_server_built</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;/P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  The format for the callback trace is:\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;/P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;DL&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"   &lt;DT&gt;&lt;EM&gt;n&lt;/EM&gt;.&lt;SAMP&gt;&amp;lt;routine-name&amp;gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"(&amp;lt;routine-data&amp;gt;)&lt;/SAMP&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"   &lt;/DT&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"   &lt;DD&gt;&lt;SAMP&gt;[&amp;lt;applies-to&amp;gt;]&lt;/SAMP&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"   &lt;/DD&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;/DL&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  The &lt;SAMP&gt;&amp;lt;routine-data&amp;gt;&lt;/SAMP&gt; is supplied by\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  the routine when it requests the trace,\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  and the &lt;SAMP&gt;&amp;lt;applies-to&amp;gt;&lt;/SAMP&gt; is extracted\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  from the configuration record at the time of the trace.\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;STRONG&gt;SVR()&lt;/STRONG&gt; indicates a server environment\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  (blank means the main or default server, otherwise it's\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  the name of the VirtualHost); &lt;STRONG&gt;DIR()&lt;/STRONG&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  indicates a location in the URL or filesystem\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  namespace.\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;/P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"  &lt;H2&gt;Startup callbacks so far:&lt;/H2&gt;\n  &lt;OL&gt;\n%s  &lt;/OL&gt;\n"</expr></argument>,
            <argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;H2&gt;Connection-specific callbacks so far:&lt;/H2&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>status</name> =  <call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>conn_data</name></expr></argument>, <argument><expr><name>CONN_NOTE</name></expr></argument>,
                                    <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>status</name> == <name>APR_SUCCESS</name>) &amp;&amp; <name>conn_data</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"  &lt;OL&gt;\n%s  &lt;/OL&gt;\n"</expr></argument>, <argument><expr>(<name>char</name> *) <name>conn_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;P&gt;No connection-specific callback information was "
                 "retrieved.&lt;/P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;H2&gt;Request-specific callbacks so far:&lt;/H2&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"  &lt;OL&gt;\n%s  &lt;/OL&gt;\n"</expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>TRACE_NOTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;H2&gt;Environment for &lt;EM&gt;this&lt;/EM&gt; call:&lt;/H2&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;UL&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"   &lt;LI&gt;Applies-to: &lt;SAMP&gt;%s&lt;/SAMP&gt;\n   &lt;/LI&gt;\n"</expr></argument>, <argument><expr><name><name>dcfg</name>-&gt;<name>loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"   &lt;LI&gt;\"Example\" directive declared here: %s\n   &lt;/LI&gt;\n"</expr></argument>,
            <argument><expr>(<name><name>dcfg</name>-&gt;<name>local</name></name> ? "YES" : "NO")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"   &lt;LI&gt;\"Example\" inherited: %s\n   &lt;/LI&gt;\n"</expr></argument>,
            <argument><expr>(<name><name>dcfg</name>-&gt;<name>congenital</name></name> ? "YES" : "NO")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"  &lt;/UL&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/BODY&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/HTML&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * We're all done, so cancel the timeout we set.  Since this is probably
     * the end of the request we *could* assume this would be done during
     * post-processing - but it's possible that another handler might be
     * called and inherit our outstanding timer.  Not good; to each its own.
     */</comment>
    <comment type="block">/*
     * We did what we wanted to do, so tell the rest of the server we
     * succeeded.
     */</comment>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * The quick_handler hook presents modules with a very powerful opportunity to
 * serve their content in a very early request phase.  Note that this handler
 * can not serve any requests from the file system because hooks like
 * map_to_storage have not run.  The quick_handler hook also runs before any
 * authentication and access control.
 *
 * This hook is used by mod_cache to serve cached content.
 *
 * This is a RUN_FIRST hook. Return OK if you have served the request,
 * DECLINED if you want processing to continue, or a HTTP_* error code to stop
 * processing the request.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_quick_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>lookup_uri</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_quick_handler()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine is called just after the server accepts the connection,
 * but before it is handed off to a protocol module to be served.  The point
 * of this hook is to allow modules an opportunity to modify the connection
 * as soon as possible. The core server uses this phase to setup the
 * connection record based on the type of connection that is being used.
 *
 * This is a RUN_ALL hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_pre_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>void</name> *</type><name>csd</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><name>note</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"x_pre_connection(c = %pp, p = %pp)"</expr></argument>,
                        <argument><expr>(<name>void</name>*) <name>c</name></expr></argument>, <argument><expr>(<name>void</name>*) <name><name>c</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>trace_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<comment type="block">/* This routine is used to actually process the connection that was received.
 * Only protocol modules should implement this hook, as it gives them an
 * opportunity to replace the standard HTTP processing with processing for
 * some other protocol.  Both echo and POP3 modules are available as
 * examples.
 *
 * This is a RUN_FIRST hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_process_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>trace_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>"x_process_connection()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine is called after the request has been read but before any other
 * phases have been processed.  This allows us to make decisions based upon
 * the input header fields.
 *
 * This is a HOOK_VOID hook.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>x_pre_read_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_pre_read_request()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * This routine is called after the request has been read but before any other
 * phases have been processed.  This allows us to make decisions based upon
 * the input header fields.
 *
 * This is a RUN_ALL hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_post_read_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_post_read_request()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine gives our module an opportunity to translate the URI into an
 * actual filename.  If we don't do anything special, the server's default
 * rules (Alias directives and the like) will continue to be followed.
 *
 * This is a RUN_FIRST hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_translate_name</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_translate_name()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine maps r-&gt;filename to a physical file on disk.  Useful for
 * overriding default core behavior, including skipping mapping for
 * requests that are not file based.
 *
 * This is a RUN_FIRST hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_map_to_storage</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_map_to_storage()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * this routine gives our module another chance to examine the request
 * headers and to take special action. This is the first phase whose
 * hooks' configuration directives can appear inside the &lt;Directory&gt;
 * and similar sections, because at this stage the URI has been mapped
 * to the filename. For example this phase can be used to block evil
 * clients, while little resources were wasted on these.
 *
 * This is a RUN_ALL hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_header_parser</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * We don't actually *do* anything here, except note the fact that we were
     * called.
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_header_parser()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>


<comment type="block">/*
 * This routine is called to check for any module-specific restrictions placed
 * upon the requested resource.  (See the mod_access_compat module for an
 * example.)
 *
 * This is a RUN_ALL hook. The first handler to return a status other than OK
 * or DECLINED (for instance, HTTP_FORBIDDEN) aborts the callback chain.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_check_access</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_check_access()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine is called to check the authentication information sent with
 * the request (such as looking up the user in a database and verifying that
 * the [encrypted] password sent matches the one in the database).
 *
 * This is a RUN_FIRST hook. The return value is OK, DECLINED, or some
 * HTTP_mumble error (typically HTTP_UNAUTHORIZED).
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_check_authn</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Don't do anything except log the call.
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_check_authn()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine is called to check to see if the resource being requested
 * requires authorisation.
 *
 * This is a RUN_FIRST hook. The return value is OK, DECLINED, or
 * HTTP_mumble.  If we return OK, no other modules are called during this
 * phase.
 *
 * If *all* modules return DECLINED, the request is aborted with a server
 * error.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_check_authz</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Log the call and return OK, or access will be denied (even though we
     * didn't actually do anything).
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_check_authz()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine is called to determine and/or set the various document type
 * information bits, like Content-type (via r-&gt;content_type), language, et
 * cetera.
 *
 * This is a RUN_FIRST hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_type_checker</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Log the call, but don't do anything else - and report truthfully that
     * we didn't do anything.
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_type_checker()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine is called to perform any module-specific fixing of header
 * fields, et cetera.  It is invoked just before any content-handler.
 *
 * This is a RUN_ALL HOOK.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_fixups</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Log the call and exit.
     */</comment>
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_fixups()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine is called to perform any module-specific logging activities
 * over and above the normal server things.
 *
 * This is a RUN_ALL hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_log_transaction</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_log_transaction()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SUEXEC</name></cpp:ifdef>

<comment type="block">/*
 * This routine is called to find out under which user id to run suexec
 * Unless our module runs CGI programs, there is no reason for us to
 * mess with this information.
 *
 * This is a RUN_FIRST hook. The return value is a pointer to an
 * ap_unix_identity_t or NULL.
 */</comment>
<function><type><specifier>static</specifier> <name>ap_unix_identity_t</name> *</type><name>x_get_suexec_identity</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_get_suexec_identity()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * This routine is called to create a connection. This hook is implemented
 * by the Apache core: there is no known reason a module should override
 * it.
 *
 * This is a RUN_FIRST hook.
 *
 * Return NULL to decline, a valid conn_rec pointer to accept.
 */</comment>
<function><type><specifier>static</specifier> <name>conn_rec</name> *</type><name>x_create_connection</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>server</name></decl></param>,
                                     <param><decl><type><name>apr_socket_t</name> *</type><name>csd</name></decl></param>, <param><decl><type><name>long</name></type> <name>conn_id</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>sbh</name></decl></param>, <param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>trace_nocontext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr>"x_create_connection()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This hook is defined in server/core.c, but it is not actually called
 * or documented.
 *
 * This is a RUN_ALL hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_get_mgmt_items</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_hash_t</name> *</type><name>ht</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* We have nothing to do here but trace the call, and no context
     * in which to trace it.
     */</comment>
    <expr_stmt><expr><call><name>trace_nocontext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr>"x_check_config()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine gets called shortly after the request_rec structure
 * is created. It provides the opportunity to manipulae the request
 * at a very early stage.
 *
 * This is a RUN_ALL hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_create_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * We have a request_rec, but it is not filled in enough to give
     * us a usable configuration. So, add a trace without context.
     */</comment>
    <expr_stmt><expr><call><name>trace_nocontext</name><argument_list>( <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr>"x_create_request()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This routine gets called during the startup of the MPM.
 * No known existing module implements this hook.
 *
 * This is a RUN_ALL hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_pre_mpm</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>ap_scoreboard_e</name></type> <name>sb_type</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>trace_nocontext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr>"x_pre_mpm()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This hook gets run periodically by a maintenance function inside
 * the MPM. Its exact purpose is unknown and undocumented at this time.
 *
 * This is a RUN_ALL hook.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_monitor</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>trace_nocontext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr>"x_monitor()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/* Which functions are responsible for which hooks in the server.           */</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/*
 * Each function our module provides to handle a particular hook is
 * specified here.  The functions are registered using
 * ap_hook_foo(name, predecessors, successors, position)
 * where foo is the name of the hook.
 *
 * The args are as follows:
 * name         -&gt; the name of the function to call.
 * predecessors -&gt; a list of modules whose calls to this hook must be
 *                 invoked before this module.
 * successors   -&gt; a list of modules whose calls to this hook must be
 *                 invoked after this module.
 * position     -&gt; The relative position of this module.  One of
 *                 APR_HOOK_FIRST, APR_HOOK_MIDDLE, or APR_HOOK_LAST.
 *                 Most modules will use APR_HOOK_MIDDLE.  If multiple
 *                 modules use the same relative position, Apache will
 *                 determine which to call first.
 *                 If your module relies on another module to run first,
 *                 or another module running after yours, use the
 *                 predecessors and/or successors.
 *
 * The number in brackets indicates the order in which the routine is called
 * during request processing.  Note that not all routines are necessarily
 * called (such as if a resource doesn't have access restrictions).
 * The actual delivery of content to the browser [9] is not handled by
 * a hook; see the handler declarations below.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>x_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>x_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_config</name><argument_list>(<argument><expr><name>x_check_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_test_config</name><argument_list>(<argument><expr><name>x_test_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_open_logs</name><argument_list>(<argument><expr><name>x_open_logs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>x_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>x_child_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>x_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_quick_handler</name><argument_list>(<argument><expr><name>x_quick_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_pre_connection</name><argument_list>(<argument><expr><name>x_pre_connection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_process_connection</name><argument_list>(<argument><expr><name>x_process_connection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_pre_read_request</name><argument_list>(<argument><expr><name>x_pre_read_request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [1] post read_request handling */</comment>
    <expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>x_post_read_request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_log_transaction</name><argument_list>(<argument><expr><name>x_log_transaction</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_http_scheme</name><argument_list>(<argument><expr><name>x_http_scheme</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_default_port</name><argument_list>(<argument><expr><name>x_default_port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_translate_name</name><argument_list>(<argument><expr><name>x_translate_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_map_to_storage</name><argument_list>(<argument><expr><name>x_map_to_storage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_header_parser</name><argument_list>(<argument><expr><name>x_header_parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>x_fixups</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_type_checker</name><argument_list>(<argument><expr><name>x_type_checker</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_access</name><argument_list>(<argument><expr><name>x_check_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>,
                         <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_authn</name><argument_list>(<argument><expr><name>x_check_authn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>,
                        <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_authz</name><argument_list>(<argument><expr><name>x_check_authz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>,
                        <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>x_insert_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_insert_error_filter</name><argument_list>(<argument><expr><name>x_insert_error_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SUEXEC</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_hook_get_suexec_identity</name><argument_list>(<argument><expr><name>x_get_suexec_identity</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ap_hook_create_connection</name><argument_list>(<argument><expr><name>x_create_connection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_get_mgmt_items</name><argument_list>(<argument><expr><name>x_get_mgmt_items</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_create_request</name><argument_list>(<argument><expr><name>x_create_request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_pre_mpm</name><argument_list>(<argument><expr><name>x_pre_mpm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_monitor</name><argument_list>(<argument><expr><name>x_monitor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/* All of the routines have been declared now.  Here's the list of          */</comment>
<comment type="block">/* directives specific to our module, and information about where they      */</comment>
<comment type="block">/* may appear and how the command parser should pass them to us for         */</comment>
<comment type="block">/* processing.  Note that care must be taken to ensure that there are NO    */</comment>
<comment type="block">/* collisions of directive names between modules.                           */</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/*
 * List of directives specific to our module.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>x_cmds</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><call><name>AP_INIT_NO_ARGS</name><argument_list>(
        <argument><expr>"Example"</expr></argument>,                          <comment type="block">/* directive name */</comment>
        <argument><expr><name>cmd_example</name></expr></argument>,                        <comment type="block">/* config action routine */</comment>
        <argument><expr><name>NULL</name></expr></argument>,                               <comment type="block">/* argument to include in call */</comment>
        <argument><expr><name>OR_OPTIONS</name></expr></argument>,                         <comment type="block">/* where available */</comment>
        <argument><expr>"Example directive - no arguments"</expr></argument>  <comment type="block">/* directive description */</comment>
    )</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/* Finally, the list of callback routines and data structures that provide  */</comment>
<comment type="block">/* the static hooks into our module from the other parts of the server.     */</comment>
<comment type="block">/*                                                                          */</comment>
<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<comment type="block">/*
 * Module definition for configuration.  If a particular callback is not
 * needed, replace its routine name below with the word NULL.
 */</comment>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>example_hooks</name></expr></argument>)</argument_list></call> =
<block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>x_create_dir_config</name></expr>,    <comment type="block">/* per-directory config creator */</comment>
    <expr><name>x_merge_dir_config</name></expr>,     <comment type="block">/* dir config merger */</comment>
    <expr><name>x_create_server_config</name></expr>, <comment type="block">/* server config creator */</comment>
    <expr><name>x_merge_server_config</name></expr>,  <comment type="block">/* server config merger */</comment>
    <expr><name>x_cmds</name></expr>,                 <comment type="block">/* command table */</comment>
    <expr><name>x_register_hooks</name></expr>,       <comment type="block">/* set up other request processing hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
