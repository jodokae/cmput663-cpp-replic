<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/lua/lua_request.c"><comment type="block">/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua_apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua_dbd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua_passwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_varbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_cookies.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_BYTEFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>apr_global_mutex_t</name>*</type> <name>lua_ivm_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>apr_shm_t</name> *</type><name>lua_ivm_shm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POST_MAX_VARS</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MODLUA_MAX_REG_MATCH</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODLUA_MAX_REG_MATCH</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>char</name> *</type>(*<name>req_field_string_f</name>) <parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>req_field_int_f</name>) <parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>req_table_t</name> *</type>(*<name>req_field_apr_table_f</name>) <parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list>;</function_decl></typedef>


<function><type><name>void</name></type> <name>ap_lua_rstack_dump</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01484</expr></argument>)</argument_list></call> "Lua Stack Dump: [%s]"</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt;= <name>top</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{
        <case>case <expr><name>LUA_TSTRING</name></expr>:<block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03001</expr></argument>)</argument_list></call>
                              "%d:  '%s'"</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
        </case><case>case <expr><name>LUA_TUSERDATA</name></expr>:<block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03002</expr></argument>)</argument_list></call>
                              "%d:  userdata"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
        </case><case>case <expr><name>LUA_TLIGHTUSERDATA</name></expr>:<block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03003</expr></argument>)</argument_list></call>
                              "%d:  lightuserdata"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
        </case><case>case <expr><name>LUA_TNIL</name></expr>:<block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03004</expr></argument>)</argument_list></call>
                              "%d:  NIL"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
        </case><case>case <expr><name>LUA_TNONE</name></expr>:<block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03005</expr></argument>)</argument_list></call>
                              "%d:  None"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
        </case><case>case <expr><name>LUA_TBOOLEAN</name></expr>:<block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03006</expr></argument>)</argument_list></call>
                              "%d:  %s"</expr></argument>, <argument><expr><name>i</name></expr></argument>,
                              <argument><expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> ? "true" : "false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
        </case><case>case <expr><name>LUA_TNUMBER</name></expr>:<block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03007</expr></argument>)</argument_list></call>
                              "%d:  %g"</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
        </case><case>case <expr><name>LUA_TTABLE</name></expr>:<block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03008</expr></argument>)</argument_list></call>
                              "%d:  &lt;table&gt;"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
        </case><case>case <expr><name>LUA_TFUNCTION</name></expr>:<block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03009</expr></argument>)</argument_list></call>
                              "%d:  &lt;function&gt;"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
        </case><default>default:<block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03010</expr></argument>)</argument_list></call>
                              "%d:  unknown: -[%s]-"</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>lua_typename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
        </default>}</block></switch>
    }</block></for>
}</block></function>

<comment type="block">/**
 * Verify that the thing at index is a request_rec wrapping
 * userdata thingamajig and return it if it is. if it is not
 * lua will enter its error handling routine.
 */</comment>
<function><type><specifier>static</specifier> <name>request_rec</name> *</type><name>ap_lua_check_request_rec</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checkudata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>"Apache2.Request"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = (<name>request_rec</name> *) <call><name>lua_unboxpointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>r</name></expr>;</return>
}</block></function>

<comment type="block">/* ------------------ request methods -------------------- */</comment>
<comment type="block">/* helper callback for req_parseargs */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_aprtable2luatable_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>l</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lua_State</name> *</type><name>L</name> <init>= <expr>(<name>lua_State</name> *) <name>l</name></expr></init></decl>;</decl_stmt>     <comment type="block">/* [table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
    <comment type="block">/* rstack_dump(L, RRR, "start of cb"); */</comment>
    <comment type="block">/* L is [table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
    <comment type="block">/* build complex */</comment>

    <expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* [VALUE, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
    <comment type="block">/* rstack_dump(L, RRR, "after getfield"); */</comment>
    <expr_stmt><expr><name>t</name> = <call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{
    <case>case <expr><name>LUA_TNIL</name></expr>:
    </case><case>case <expr><name>LUA_TNONE</name></expr>:<block>{
            <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block">/* [table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* [array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* [1, array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* [string, 1, array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* [array, table&lt;s,t&gt;, table&lt;s,s&gt;]  */</comment>
            <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* [table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <break>break;</break>
        }</block>
    </case><case>case <expr><name>LUA_TTABLE</name></expr>:<block>{
            <comment type="block">/* [array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>lua_rawlen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* [#, array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* [string, #, array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* [array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* [table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <break>break;</break>
        }</block>
    </case>}</block></switch>

    <comment type="block">/* L is [table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
    <comment type="block">/* build simple */</comment>
    <expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* [VALUE, table&lt;s,s&gt;, table&lt;s,t&gt;] */</comment>
    <if>if <condition>(<expr><call><name>lua_isnoneornil</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{       <comment type="block">/* only set if not already set */</comment>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block">/* [table&lt;s,s&gt;, table&lt;s,t&gt;]] */</comment>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* [string, table&lt;s,s&gt;, table&lt;s,t&gt;] */</comment>
        <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* [table&lt;s,s&gt;, table&lt;s,t&gt;]  */</comment>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* helper callback for req_parseargs */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_aprtable2luatable_cb_len</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>l</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lua_State</name> *</type><name>L</name> <init>= <expr>(<name>lua_State</name> *) <name>l</name></expr></init></decl>;</decl_stmt>     <comment type="block">/* [table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
    <comment type="block">/* rstack_dump(L, RRR, "start of cb"); */</comment>
    <comment type="block">/* L is [table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
    <comment type="block">/* build complex */</comment>

    <expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* [VALUE, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
    <comment type="block">/* rstack_dump(L, RRR, "after getfield"); */</comment>
    <expr_stmt><expr><name>t</name> = <call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{
    <case>case <expr><name>LUA_TNIL</name></expr>:
    </case><case>case <expr><name>LUA_TNONE</name></expr>:<block>{
            <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block">/* [table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* [array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* [1, array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* [string, 1, array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* [array, table&lt;s,t&gt;, table&lt;s,s&gt;]  */</comment>
            <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* [table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <break>break;</break>
        }</block>
    
    </case><case>case <expr><name>LUA_TTABLE</name></expr>:<block>{
            <comment type="block">/* [array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>lua_rawlen</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* [#, array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* [string, #, array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* [array, table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* [table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
            <break>break;</break>
        }</block>
    </case>}</block></switch>

    <comment type="block">/* L is [table&lt;s,t&gt;, table&lt;s,s&gt;] */</comment>
    <comment type="block">/* build simple */</comment>
    <expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* [VALUE, table&lt;s,s&gt;, table&lt;s,t&gt;] */</comment>
    <if>if <condition>(<expr><call><name>lua_isnoneornil</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{       <comment type="block">/* only set if not already set */</comment>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block">/* [table&lt;s,s&gt;, table&lt;s,t&gt;]] */</comment>
        <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* [string, table&lt;s,s&gt;, table&lt;s,t&gt;] */</comment>
        <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* [table&lt;s,s&gt;, table&lt;s,t&gt;]  */</comment>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr>1</expr>;</return>
}</block></function>


<comment type="block">/*
 =======================================================================================================================
    lua_read_body(request_rec *r, const char **rbuf, apr_off_t *size): Reads any additional form data sent in POST/PUT
    requests. Used for multipart POST data.
 =======================================================================================================================
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_read_body</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>rbuf</name></decl></param>, <param><decl><type><name>apr_off_t</name> *</type><name>size</name></decl></param>,
        <param><decl><type><name>apr_off_t</name></type> <name>maxsize</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>rc</name> = <call><name>ap_setup_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REQUEST_CHUNKED_ERROR</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <return>return <expr>(<name>rc</name>)</expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>ap_should_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

        <comment type="block">/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/</comment>
        <decl_stmt><decl><type><name>char</name></type>         <name><name>argsbuffer</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_off_t</name></type>    <name>rsize</name></decl>, <decl><type ref="prev"/><name>len_read</name></decl>, <decl><type ref="prev"/><name>rpos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_off_t</name></type> <name>length</name> <init>= <expr><name><name>r</name>-&gt;<name>remaining</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/</comment>

        <if>if <condition>(<expr><name>maxsize</name> != 0 &amp;&amp; <name>length</name> &gt; <name>maxsize</name></expr>)</condition><then> <block>{
            <return>return <expr><name>APR_EINCOMPLETE</name></expr>;</return> <comment type="block">/* Only room for incomplete data chunk :( */</comment>
        }</block></then></if>
        <expr_stmt><expr>*<name>rbuf</name> = (const <name>char</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call>(<name>apr_size_t</name>) <argument_list>(<argument><expr><name>length</name> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>size</name> = <name>length</name></expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>len_read</name> = <call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>argsbuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>argsbuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
            <if>if <condition>(<expr>(<name>rpos</name> + <name>len_read</name>) &gt; <name>length</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rsize</name> = <name>length</name> - <name>rpos</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>rsize</name> = <name>len_read</name></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name> *) *<name>rbuf</name> + <name>rpos</name></expr></argument>, <argument><expr><name>argsbuffer</name></expr></argument>, <argument><expr>(<name>size_t</name>) <name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rpos</name> += <name>rsize</name></expr>;</expr_stmt>
        }</block></while>
    }</block></then></if>

    <return>return <expr>(<name>rc</name>)</expr>;</return>
}</block></function>


<comment type="block">/*
 * =======================================================================================================================
 * lua_write_body: Reads any additional form data sent in POST/PUT requests
 * and writes to a file.
 * =======================================================================================================================
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>lua_write_body</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>file</name></decl></param>, <param><decl><type><name>apr_off_t</name> *</type><name>size</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>rc</name> = <call><name>ap_setup_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REQUEST_CHUNKED_ERROR</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <return>return <expr><name>rc</name></expr>;</return></then></if>
    <if>if <condition>(<expr><call><name>ap_should_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>argsbuffer</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_off_t</name></type> <name>rsize</name></decl>,
                  <decl><type ref="prev"/><name>len_read</name></decl>,
                  <decl><type ref="prev"/><name>rpos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_off_t</name></type> <name>length</name> <init>= <expr><name><name>r</name>-&gt;<name>remaining</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr>*<name>size</name> = <name>length</name></expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>len_read</name> =
                    <call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>argsbuffer</name></expr></argument>,
                                        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>argsbuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
            <if>if <condition>(<expr>(<name>rpos</name> + <name>len_read</name>) &gt; <name>length</name></expr>)</condition><then>
                <expr_stmt><expr><name>rsize</name> = (<name>apr_size_t</name>) <name>length</name> - <name>rpos</name></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>rsize</name> = <name>len_read</name></expr>;</expr_stmt></else></if>

            <expr_stmt><expr><name>rc</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>argsbuffer</name></expr></argument>, <argument><expr>(<name>apr_size_t</name>) <name>rsize</name></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
                <return>return <expr><name>rc</name></expr>;</return></then></if>
            <expr_stmt><expr><name>rpos</name> += <name>rsize</name></expr>;</expr_stmt>
        }</block></while>
    }</block></then></if>

    <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/* r:parseargs() returning a lua table */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_parseargs</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>form_table</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="block">/* [table, table] */</comment>
    <expr_stmt><expr><call><name>ap_args_to_table</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>form_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>req_aprtable2luatable_cb</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>form_table</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>2</expr>;</return>                   <comment type="block">/* [table&lt;string, string&gt;, table&lt;string, array&lt;string&gt;&gt;] */</comment>
}</block></function>

<comment type="block">/* ap_lua_binstrstr: Binary strstr function for uploaded data with NULL bytes */</comment>
<function><type><specifier>static</specifier> <name>char</name>*</type> <name>ap_lua_binstrstr</name> <parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>haystack</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>hsize</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>needle</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>nsize</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>p</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>haystack</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>needle</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>hsize</name> &lt; <name>nsize</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <for>for (<init><expr><name>p</name> = 0</expr>;</init> <condition><expr><name>p</name> &lt;= (<name>hsize</name> - <name>nsize</name>)</expr>;</condition> <incr><expr>++<name>p</name></expr></incr>) <block>{
        <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>haystack</name> + <name>p</name></expr></argument>, <argument><expr><name>needle</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr><call>(<name>char</name>*) <argument_list>(<argument><expr><name>haystack</name> + <name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></for>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function> 

<comment type="block">/* r:parsebody(): Parses regular (url-enocded) or multipart POST data and returns two tables*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_parsebody</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_array_header_t</name>          *</type><name>pairs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>max_post_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>multipart</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contentType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>max_post_size</name> = (<name>apr_size_t</name>) <call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>MAX_STRING_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>multipart</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>256</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>contentType</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="block">/* [table, table] */</comment>    
    <if>if <condition>(<expr><name>contentType</name> != <name>NULL</name> &amp;&amp; (<call><name>sscanf</name><argument_list>(<argument><expr><name>contentType</name></expr></argument>, <argument><expr>"multipart/form-data; boundary=%250c"</expr></argument>, <argument><expr><name>multipart</name></expr></argument>)</argument_list></call> == 1)</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name>        *</type><name>buffer</name></decl>, *<decl><type ref="prev"/><name>key</name></decl>, *<decl><type ref="prev"/><name>filename</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>        *</type><name>start</name> <init>= <expr>0</expr></init>, *<name>end</name> <init>= <expr>0</expr></init>, *<name>crlf</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  *</type><name>data</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>         <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type>      <name>vlen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type>      <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>lua_read_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>(<name>apr_off_t</name>*) &amp;<name>size</name></expr></argument>, <argument><expr><name>max_post_size</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
            <return>return <expr>2</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>multipart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
        <for>for
        (
            <init><expr><name>start</name> = <call><name>strstr</name><argument_list>(<argument><expr>(<name>char</name> *) <name>data</name></expr></argument>, <argument><expr><name>multipart</name></expr></argument>)</argument_list></call></expr>;</init>
            <condition><expr><name>start</name> != <name>NULL</name></expr>;</condition>
            <incr><expr><name>start</name> = <name>end</name></expr></incr>
        ) <block>{
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>i</name> == <name>POST_MAX_VARS</name></expr>)</condition><then> <break>break;</break></then></if>
            <expr_stmt><expr><name>crlf</name> = <call><name>strstr</name><argument_list>(<argument><expr>(<name>char</name> *) <name>start</name></expr></argument>, <argument><expr>"\r\n\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>crlf</name></expr>)</condition><then> <break>break;</break></then></if>
            <expr_stmt><expr><name>end</name> = <call><name>ap_lua_binstrstr</name><argument_list>(<argument><expr><name>crlf</name></expr></argument>, <argument><expr>(<name>size</name> - (<name>crlf</name> - <name>data</name>))</expr></argument>, <argument><expr><name>multipart</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>end</name> == <name>NULL</name></expr>)</condition><then> <break>break;</break></then></if>
            <expr_stmt><expr><name>key</name> = (<name>char</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>256</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>filename</name> = (<name>char</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>256</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>vlen</name> = <name>end</name> - <name>crlf</name> - 8</expr>;</expr_stmt>
            <expr_stmt><expr><name>buffer</name> = (<name>char</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>vlen</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>crlf</name> + 4</expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>start</name> + <name>len</name> + 2</expr></argument>,
                <argument><expr>"Content-Disposition: form-data; name=\"%255[^\"]\"; filename=\"%255[^\"]\""</expr></argument>,
                <argument><expr><name>key</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>*<name>key</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>req_aprtable2luatable_cb_len</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></then>
    <else>else <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>buffer</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>res</name> = <call><name>ap_parse_form_data</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>pairs</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>max_post_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>res</name> == <name>OK</name></expr>)</condition><then> <block>{
            <while>while<condition>(<expr><name>pairs</name> &amp;&amp; !<call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name>pairs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>ap_form_pair_t</name> *</type><name>pair</name> <init>= <expr>(<name>ap_form_pair_t</name> *) <call><name>apr_array_pop</name><argument_list>(<argument><expr><name>pairs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name> = (<name>apr_size_t</name>) <name>len</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
                <expr_stmt><expr><call><name>req_aprtable2luatable_cb</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
    }</block></else></if>
    <return>return <expr>2</expr>;</return>                   <comment type="block">/* [table&lt;string, string&gt;, table&lt;string, array&lt;string&gt;&gt;] */</comment>
}</block></function>


<comment type="block">/*
 * lua_ap_requestbody; r:requestbody([filename]) - Reads or stores the request
 * body
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_requestbody</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type>      <name>maxSize</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>filename</name> = <call><name>luaL_optstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxSize</name> = (<name>apr_off_t</name>)<call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_off_t</name></type> <name>size</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>maxSize</name> &gt; 0 &amp;&amp; <name><name>r</name>-&gt;<name>remaining</name></name> &gt; <name>maxSize</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Request body was larger than the permitted size."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>2</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_POST</name> &amp;&amp; <name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_PUT</name></expr>)</condition><then>
            <return>return <expr>(0)</expr>;</return></then></if>
        <if>if <condition>(<expr>!<name>filename</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>data</name></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name>lua_read_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>maxSize</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then>
                <return>return <expr>(0)</expr>;</return></then></if>

            <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>(<name>size_t</name>) <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Integer</name>) <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>(2)</expr>;</return>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_file_t</name>     *</type><name>file</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>rc</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>APR_CREATE</name> | <name>APR_FOPEN_WRITE</name></expr></argument>,
                               <argument><expr><name>APR_FPROT_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rc</name> = <call><name>lua_write_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>rc</name> != <name>OK</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>1</expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Integer</name>) <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>(1)</expr>;</return>
            }</block></then> <else>else
                <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            <return>return <expr>(1)</expr>;</return>
        }</block></else></if>
    }</block></then></if>

    <return>return <expr>(0)</expr>;</return>
}</block></function>

<comment type="block">/* wrap ap_rputs as r:puts(String) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_puts</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 2</expr>;</init> <condition><expr><name>i</name> &lt;= <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/* wrap ap_rwrite as r:write(String) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_write</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name>ap_rwrite</name><argument_list>(<argument><expr>(<name>void</name> *) <name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* r:addoutputfilter(name|function) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_add_output_filter</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01485</expr></argument>)</argument_list></call> "adding output filter %s"</expr></argument>,
                  <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/* wrap ap_construct_url as r:construct_url(String) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_construct_url</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* wrap ap_escape_html r:escape_html(String) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_escape_html</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* wrap optional ssl_var_lookup as  r:ssl_var_lookup(String) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_ssl_var_lookup</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>res</name> <init>= <expr><call><name>ap_lua_ssl_val</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, 
                                     <argument><expr>(<name>char</name> *)<name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* BEGIN dispatch mathods for request_rec fields */</comment>

<comment type="block">/* not really a field, but we treat it like one */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_document_root</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>ap_document_root</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_context_prefix</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>ap_context_prefix</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_context_document_root</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>ap_context_document_root</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>req_uri_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>uri</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_method_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>method</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_handler_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>handler</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_proxyreq_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition> <block>{
        <case>case <expr><name>PROXYREQ_NONE</name></expr>:     <return>return <expr>"PROXYREQ_NONE"</expr>;</return>
        </case><case>case <expr><name>PROXYREQ_PROXY</name></expr>:    <return>return <expr>"PROXYREQ_PROXY"</expr>;</return>
        </case><case>case <expr><name>PROXYREQ_REVERSE</name></expr>:  <return>return <expr>"PROXYREQ_REVERSE"</expr>;</return>
        </case><case>case <expr><name>PROXYREQ_RESPONSE</name></expr>: <return>return <expr>"PROXYREQ_RESPONSE"</expr>;</return>
        </case><default>default: <return>return <expr><name>NULL</name></expr>;</return>
    </default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_hostname_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>hostname</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_args_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>args</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_path_info_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>path_info</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_canonical_filename_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>canonical_filename</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_filename_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>filename</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_user_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>user</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_unparsed_uri_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_ap_auth_type_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_content_encoding_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_content_type_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>content_type</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_range_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>range</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_protocol_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>protocol</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_the_request_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>the_request</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_log_id_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>log_id</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>req_useragent_ip_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>useragent_ip</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>req_remaining_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>remaining</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>req_status_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>status</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>req_assbackwards_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>r</name>-&gt;<name>assbackwards</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>req_table_t</name>*</type> <name>req_headers_in</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>req_table_t</name>*</type> <name>t</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req_table_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>t</name></name> = <name><name>r</name>-&gt;<name>headers_in</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>n</name></name> = "headers_in"</expr>;</expr_stmt>
  <return>return <expr><name>t</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>req_table_t</name>*</type> <name>req_headers_out</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>req_table_t</name>*</type> <name>t</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req_table_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>t</name></name> = <name><name>r</name>-&gt;<name>headers_out</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>n</name></name> = "headers_out"</expr>;</expr_stmt>
  <return>return <expr><name>t</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>req_table_t</name>*</type> <name>req_err_headers_out</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>req_table_t</name>*</type> <name>t</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req_table_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>t</name></name> = <name><name>r</name>-&gt;<name>err_headers_out</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>n</name></name> = "err_headers_out"</expr>;</expr_stmt>
  <return>return <expr><name>t</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>req_table_t</name>*</type> <name>req_subprocess_env</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>req_table_t</name>*</type> <name>t</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req_table_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>t</name></name> = <name><name>r</name>-&gt;<name>subprocess_env</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>n</name></name> = "subprocess_env"</expr>;</expr_stmt>
  <return>return <expr><name>t</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>req_table_t</name>*</type> <name>req_notes</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>req_table_t</name>*</type> <name>t</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req_table_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>t</name></name> = <name><name>r</name>-&gt;<name>notes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name>-&gt;<name>n</name></name> = "notes"</expr>;</expr_stmt>
  <return>return <expr><name>t</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>req_ssl_is_https_field</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>ap_lua_ssl_is_https</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>req_ap_get_server_port</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>(<name>int</name>) <call><name>ap_get_server_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_rflush</name> <parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{

    <decl_stmt><decl><type><name>int</name></type> <name>returnValue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>returnValue</name> = <call><name>ap_rflush</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>returnValue</name> == 0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>lua_ap_options</name><parameter_list>(<param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>opts</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>opts</name> = <call><name>ap_allow_options</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s %s %s %s %s %s"</expr></argument>, <argument><expr>(<name>opts</name>&amp;<name>OPT_INDEXES</name>) ? "Indexes" : ""</expr></argument>, <argument><expr>(<name>opts</name>&amp;<name>OPT_INCLUDES</name>) ? "Includes" : ""</expr></argument>, <argument><expr>(<name>opts</name>&amp;<name>OPT_SYM_LINKS</name>) ? "FollowSymLinks" : ""</expr></argument>, <argument><expr>(<name>opts</name>&amp;<name>OPT_EXECCGI</name>) ? "ExecCGI" : ""</expr></argument>, <argument><expr>(<name>opts</name>&amp;<name>OPT_MULTI</name>) ? "MultiViews" : ""</expr></argument>, <argument><expr>(<name>opts</name>&amp;<name>OPT_ALL</name>) == <name>OPT_ALL</name> ? "All" : ""</expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>lua_ap_allowoverrides</name><parameter_list>(<param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>opts</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>opts</name> = <call><name>ap_allow_overrides</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>( <expr>(<name>opts</name> &amp; <name>OR_ALL</name>) == <name>OR_ALL</name></expr>)</condition><then> <block>{
        <return>return <expr>"All"</expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>opts</name> == <name>OR_NONE</name></expr>)</condition><then> <block>{
        <return>return <expr>"None"</expr>;</return>
    }</block></then></if></else></if>
    <return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s %s %s %s %s"</expr></argument>, <argument><expr>(<name>opts</name> &amp; <name>OR_LIMIT</name>) ? "Limit" : ""</expr></argument>, <argument><expr>(<name>opts</name> &amp; <name>OR_OPTIONS</name>) ? "Options" : ""</expr></argument>, <argument><expr>(<name>opts</name> &amp; <name>OR_FILEINFO</name>) ? "FileInfo" : ""</expr></argument>, <argument><expr>(<name>opts</name> &amp; <name>OR_AUTHCFG</name>) ? "AuthCfg" : ""</expr></argument>, <argument><expr>(<name>opts</name> &amp; <name>OR_INDEXES</name>) ? "Indexes" : ""</expr></argument> )</argument_list></call></expr>;</return>
    
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_started</name><parameter_list>(<param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>)</parameter_list> 
<block>{
    <return>return <expr><call>(<name>int</name>)<argument_list>(<argument><expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>restart_time</name></name> / 1000000</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>lua_ap_basic_auth_pw</name><parameter_list>(<param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>pw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ap_get_basic_auth_pw</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>pw</name> ? <name>pw</name> : ""</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_limit_req_body</name><parameter_list>(<param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>)</parameter_list> 
<block>{
    <return>return <expr>(<name>int</name>) <call><name>ap_get_limit_req_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_is_initial_req</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>ap_is_initial_req</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_some_auth_required</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>ap_some_auth_required</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_sendfile</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>file_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  *</type><name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>filename</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>file_info</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>APR_FINFO_MIN</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>file_info</name>.<name>filetype</name></name> == <name>APR_NOFILE</name> || <name><name>file_info</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <decl_stmt><decl><type><name>apr_size_t</name></type>      <name>sent</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_status_t</name></type>    <name>rc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_file_t</name>      *</type><name>file</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rc</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
                            <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_send_fd</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>apr_size_t</name>)<name><name>file_info</name>.<name>size</name></name></expr></argument>, <argument><expr>&amp;<name>sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

    <return>return <expr>(1)</expr>;</return>
}</block></function>


<comment type="block">/*
 * lua_apr_b64encode; r:encode_base64(string) - encodes a string to Base64
 * format
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_apr_b64encode</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>plain</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>           *</type><name>encoded</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>plain_len</name></decl>, <decl><type ref="prev"/><name>encoded_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>plain</name> = <call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>plain_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>encoded_len</name> = <call><name>apr_base64_encode_len</name><argument_list>(<argument><expr><name>plain_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>encoded_len</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>encoded</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>encoded_len</name> = <call><name>apr_base64_encode</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>plain</name></expr></argument>, <argument><expr><name>plain_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>encoded_len</name> &gt; 0 &amp;&amp; <name><name>encoded</name><index>[<expr><name>encoded_len</name> - 1</expr>]</index></name> == '\0'</expr>)</condition><then>
            <expr_stmt><expr><name>encoded_len</name>--</expr>;</expr_stmt></then></if> 
        <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_apr_b64decode; r:decode_base64(string) - decodes a Base64 string
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_apr_b64decode</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>encoded</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>           *</type><name>plain</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>encoded_len</name></decl>, <decl><type ref="prev"/><name>decoded_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>encoded</name> = <call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>encoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>decoded_len</name> = <call><name>apr_base64_decode_len</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>decoded_len</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>plain</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>decoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>decoded_len</name> = <call><name>apr_base64_decode</name><argument_list>(<argument><expr><name>plain</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>decoded_len</name> &gt; 0 &amp;&amp; <name><name>plain</name><index>[<expr><name>decoded_len</name> - 1</expr>]</index></name> == '\0'</expr>)</condition><then>
            <expr_stmt><expr><name>decoded_len</name>--</expr>;</expr_stmt></then></if> 
        <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>plain</name></expr></argument>, <argument><expr><name>decoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_ap_unescape; r:unescape(string) - Unescapes an URL-encoded string
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_unescape</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>escaped</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>           *</type><name>plain</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>x</name></decl>,
           <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>escaped</name> = <call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>plain</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> = <call><name>ap_unescape_urlencoded</name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>y</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_ap_escape; r:escape(string) - URL-escapes a string
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_escape</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>plain</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>           *</type><name>escaped</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>plain</name> = <call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>escaped</name> = <call><name>ap_escape_urlencoded</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_apr_md5; r:md5(string) - Calculates an MD5 digest of a string
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_apr_md5</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>           *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buffer</name> = <call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> = <call><name>ap_md5_binary</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(const <name>unsigned</name> <name>char</name> *)<name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_apr_sha1; r:sha1(string) - Calculates the SHA1 digest of a string
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_apr_sha1</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_SHA1_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_sha1_ctx_t</name></type> <name>sha1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>           *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></sizeof> * 2 + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buffer</name> = <call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_sha1_init</name><argument_list>(<argument><expr>&amp;<name>sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_sha1_update</name><argument_list>(<argument><expr>&amp;<name>sha1</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_sha1_final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>&amp;<name>sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>ap_bin2hex</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_apr_htpassword; r:htpassword(string [, algorithm [, cost]]) - Creates
 * a htpassword hash from a string
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_apr_htpassword</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>passwd_ctx</name></type>     <name>ctx</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>passwd</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>alg</name></name> = <call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>ALG_APMD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>cost</name></name> = <call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>out</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>MAX_PASSWD_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>out_len</name></name> = <name>MAX_PASSWD_LEN</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>mk_password_hash</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ctx</name>.<name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>2</expr>;</return>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ctx</name>.<name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_apr_touch; r:touch(string [, time]) - Sets mtime of a file
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_apr_touch</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>     *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>      *</type><name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type>    <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type>      <name>mtime</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>path</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mtime</name> = (<name>apr_time_t</name>)<call><name>luaL_optnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>(<name>lua_Number</name>)<call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>apr_file_mtime_set</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mtime</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>status</name> == 0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_apr_mkdir; r:mkdir(string [, permissions]) - Creates a directory
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_apr_mkdir</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>     *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>      *</type><name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type>    <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_fileperms_t</name></type> <name>perms</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>path</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>perms</name> = <call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>apr_dir_make</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>status</name> == 0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_apr_mkrdir; r:mkrdir(string [, permissions]) - Creates directories
 * recursive
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_apr_mkrdir</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>     *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>      *</type><name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type>    <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_fileperms_t</name></type> <name>perms</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>path</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>perms</name> = <call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>apr_dir_make_recursive</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>status</name> == 0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_apr_rmdir; r:rmdir(string) - Removes a directory
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_apr_rmdir</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>     *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>      *</type><name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type>    <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>path</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>apr_dir_remove</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>status</name> == 0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_apr_date_parse_rfc; r.date_parse_rfc(string) - Parses a DateTime string
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_apr_date_parse_rfc</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>input</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> = <call><name>apr_date_parse_rfc</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>result</name> == 0</expr>)</condition><then>
        <return>return <expr>0</expr>;</return></then></if>
    <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call>(<name>lua_Number</name>)<argument_list>(<argument><expr><name>result</name> / <name>APR_USEC_PER_SEC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_ap_mpm_query; r:mpm_query(info) - Queries for MPM info
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_mpm_query</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,
        <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>x</name> = <call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_ap_expr; r:expr(string) - Evaluates an expr statement.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_expr</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>expr</name></decl>,
    *<decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_expr_info_t</name></type> <name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expr</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><name><name>res</name>.<name>filename</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name>.<name>flags</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name>.<name>line_number</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name>.<name>module_index</name></name> = <name>APLOG_MODULE_INDEX</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> = <call><name>ap_expr_parse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>x</name> = <call><name>ap_expr_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>x</name> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>2</expr>;</return>
        }</block></then></if>
        <return>return <expr>1</expr>;</return>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>2</expr>;</return>
    }</block></else></if>
    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>


<comment type="block">/*
 * lua_ap_regex; r:regex(string, pattern [, flags])
 * - Evaluates a regex and returns captures if matched
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_regex</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,
        <decl><type ref="prev"/><name>rv</name></decl>,
        <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>pattern</name></decl>,
    *<decl><type ref="prev"/><name>source</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>           *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_regex_t</name></type> <name>regex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>matches</name><index>[<expr><name>MODLUA_MAX_REG_MATCH</name>+1</expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>source</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pattern</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> = <call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name>ap_regcomp</name><argument_list>(<argument><expr>&amp;<name>regex</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>256</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_regerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>&amp;<name>regex</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr>256</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>2</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>regex</name>.<name>re_nsub</name></name> &gt; <name>MODLUA_MAX_REG_MATCH</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>64</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>64</expr></argument>,
                     <argument><expr>"regcomp found %d matches; only %d allowed."</expr></argument>,
                     <argument><expr><name><name>regex</name>.<name>re_nsub</name></name></expr></argument>, <argument><expr><name>MODLUA_MAX_REG_MATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>2</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>ap_regexec</name><argument_list>(<argument><expr>&amp;<name>regex</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>MODLUA_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> == <name>AP_REG_NOMATCH</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name><name>regex</name>.<name>re_nsub</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name> &gt;= 0 &amp;&amp; <name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_eo</name> &gt;= 0</expr>)</condition><then>
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
                           <argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>source</name> + <name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name></expr></argument>,
                                        <argument><expr><name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_eo</name> - <name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></for>
    <return>return <expr>1</expr>;</return>
}</block></function>




<comment type="block">/*
 * lua_ap_scoreboard_process; r:scoreboard_process(a) - returns scoreboard info
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_scoreboard_process</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>process_score</name>  *</type><name>ps_record</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TNUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> = <call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ps_record</name> = <call><name>ap_get_scoreboard_process</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ps_record</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"connections"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ps_record</name>-&gt;<name>connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"keepalive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ps_record</name>-&gt;<name>keep_alive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"lingering_close"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ps_record</name>-&gt;<name>lingering_close</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"pid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ps_record</name>-&gt;<name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"suspended"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ps_record</name>-&gt;<name>suspended</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"write_completion"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ps_record</name>-&gt;<name>write_completion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"not_accepting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ps_record</name>-&gt;<name>not_accepting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"quiescing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ps_record</name>-&gt;<name>quiescing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr>1</expr>;</return>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_ap_scoreboard_worker; r:scoreboard_worker(proc, thread) - Returns thread
 * info
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_scoreboard_worker</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>worker_score</name> *</type><name>ws_record</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TNUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>LUA_TNUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>r</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>

    <expr_stmt><expr><name>i</name> = <call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name> = <call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ws_record</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>sizeof *<name>ws_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_copy_scoreboard_worker</name><argument_list>(<argument><expr><name>ws_record</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ws_record</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"access_count"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ws_record</name>-&gt;<name>access_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"bytes_served"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Number</name>) <name><name>ws_record</name>-&gt;<name>bytes_served</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"client"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ws_record</name>-&gt;<name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"conn_bytes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Number</name>) <name><name>ws_record</name>-&gt;<name>conn_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"conn_count"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ws_record</name>-&gt;<name>conn_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"generation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ws_record</name>-&gt;<name>generation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"last_used"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Number</name>) <name><name>ws_record</name>-&gt;<name>last_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"pid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ws_record</name>-&gt;<name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"request"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ws_record</name>-&gt;<name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"start_time"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Number</name>) <name><name>ws_record</name>-&gt;<name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"status"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ws_record</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"stop_time"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Number</name>) <name><name>ws_record</name>-&gt;<name>stop_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"tid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Integer</name>) <name><name>ws_record</name>-&gt;<name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"vhost"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ws_record</name>-&gt;<name>vhost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TIMES</name></cpp:ifdef>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"stimes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_stime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"utimes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_utime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_ap_clock; r:clock() - Returns timestamp with microsecond precision
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_clock</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>now</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Number</name>) <name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_ap_add_input_filter; r:add_input_filter(name) - Adds an input filter to
 * the chain
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_add_input_filter</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>filterName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>filter</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>filterName</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>filter</name> = <call><name>ap_get_input_filter_handle</name><argument_list>(<argument><expr><name>filterName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>filter</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_add_input_filter_handle</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <return>return <expr>1</expr>;</return>
}</block></function>


<comment type="block">/*
 * lua_ap_module_info; r:module_info(mod_name) - Returns information about a
 * loaded module
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_module_info</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>moduleName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>module</name>         *</type><name>mod</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>moduleName</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mod</name> = <call><name>ap_find_linked_module</name><argument_list>(<argument><expr><name>moduleName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mod</name> &amp;&amp; <name><name>mod</name>-&gt;<name>cmds</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>cmd</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"commands"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><expr><name>cmd</name> = <name><name>mod</name>-&gt;<name>cmds</name></name></expr>;</init> <condition><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr>;</condition> <incr><expr>++<name>cmd</name></expr></incr>) <block>{
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_ap_runtime_dir_relative: r:runtime_dir_relative(file): Returns the
 * filename as relative to the runtime dir
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_runtime_dir_relative</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>file</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>file</name> = <call><name>luaL_optstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_ap_set_document_root; r:set_document_root(path) - sets the current doc
 * root for the request
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_set_document_root</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>root</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>root</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_set_document_root</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_ap_getdir; r:get_direntries(directory) - Gets all entries of a
 * directory and returns the directory info as a table
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_getdir</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dir_t</name>      *</type><name>thedir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_finfo_t</name></type>    <name>file_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type>   <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>directory</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>directory</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>apr_dir_open</name><argument_list>(<argument><expr>&amp;<name>thedir</name></expr></argument>, <argument><expr><name>directory</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <do>do <block>{
            <expr_stmt><expr><name>status</name> = <call><name>apr_dir_read</name><argument_list>(<argument><expr>&amp;<name>file_info</name></expr></argument>, <argument><expr><name>APR_FINFO_NAME</name></expr></argument>, <argument><expr><name>thedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>APR_STATUS_IS_INCOMPLETE</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <continue>continue;</continue> <comment type="block">/* ignore un-stat()able files */</comment>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if></else></if>
            <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>++<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>file_info</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block> while <condition>(<expr>1</expr>)</condition>;</do>
        <expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>thedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then>
    <else>else <block>{
        <return>return <expr>0</expr>;</return>
    }</block></else></if>
}</block></function>

<comment type="block">/*
 * lua_ap_stat; r:stat(filename [, wanted]) - Runs stat on a file and
 * returns the file info as a table
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_stat</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>file_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_int32_t</name></type> <name>wanted</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>filename</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wanted</name> = <call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>APR_FINFO_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>file_info</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>wanted</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> == <name>OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>wanted</name> &amp; <name>APR_FINFO_MTIME</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"mtime"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Number</name>) <name><name>file_info</name>.<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>wanted</name> &amp; <name>APR_FINFO_ATIME</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"atime"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Number</name>) <name><name>file_info</name>.<name>atime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>wanted</name> &amp; <name>APR_FINFO_CTIME</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"ctime"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Number</name>) <name><name>file_info</name>.<name>ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>wanted</name> &amp; <name>APR_FINFO_SIZE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"size"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>lua_Number</name>) <name><name>file_info</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>wanted</name> &amp; <name>APR_FINFO_TYPE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"filetype"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>file_info</name>.<name>filetype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>wanted</name> &amp; <name>APR_FINFO_PROT</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"protection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>file_info</name>.<name>protection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>1</expr>;</return>
    }</block></then>
    <else>else <block>{
        <return>return <expr>0</expr>;</return>
    }</block></else></if>
}</block></function>

<comment type="block">/*
 * lua_ap_loaded_modules; r:loaded_modules() - Returns a list of loaded modules
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_loaded_modules</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>ap_loaded_modules</name><index>[<expr><name>i</name></expr>]</index></name> &amp;&amp; <name><name>ap_loaded_modules</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>name</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ap_loaded_modules</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_ap_server_info; r:server_info() - Returns server info, such as the
 * executable filename, server root, mpm etc
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_server_info</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"server_executable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ap_server_argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"server_root"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ap_server_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"scoreboard_fname"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ap_scoreboard_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"server_mpm"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ap_show_mpm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>1</expr>;</return>
}</block></function>


<comment type="block">/*
 * === Auto-scraped functions ===
 */</comment>


<comment type="block">/**
 * ap_set_context_info: Set context_prefix and context_document_root.
 * @param r The request
 * @param prefix the URI prefix, without trailing slash
 * @param document_root the corresponding directory on disk, without trailing
 * slash
 * @note If one of prefix of document_root is NULL, the corrsponding
 * property will not be changed.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_set_context_info</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>prefix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>document_root</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>prefix</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>document_root</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_set_context_info</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>document_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>


<comment type="block">/**
 * ap_os_escape_path (apr_pool_t *p, const char *path, int partial)
 * convert an OS path to a URL in an OS dependant way.
 * @param p The pool to allocate from
 * @param path The path to convert
 * @param partial if set, assume that the path will be appended to something
 *        with a '/' in it (and thus does not prefix "./")
 * @return The converted URL
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_os_escape_path</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name>           *</type><name>returnValue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>partial</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>path</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>lua_isboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>partial</name> = <call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>returnValue</name> = <call><name>ap_os_escape_path</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>partial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>


<comment type="block">/**
 * ap_escape_logitem (apr_pool_t *p, const char *str)
 * Escape a string for logging
 * @param p The pool to allocate from
 * @param str The string to escape
 * @return The escaped string
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_escape_logitem</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name>           *</type><name>returnValue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>str</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>returnValue</name> = <call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/**
 * ap_strcmp_match (const char *str, const char *expected)
 * Determine if a string matches a pattern containing the wildcards '?' or '*'
 * @param str The string to check
 * @param expected The pattern to match against
 * @param ignoreCase Whether to ignore case when matching
 * @return 1 if the two strings match, 0 otherwise
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_strcmp_match</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>returnValue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>expected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ignoreCase</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expected</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>lua_isboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>ignoreCase</name> = <call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr>!<name>ignoreCase</name></expr>)</condition><then>
        <expr_stmt><expr><name>returnValue</name> = <call><name>ap_strcmp_match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name>returnValue</name> = <call><name>ap_strcasecmp_match</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(!<name>returnValue</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>


<comment type="block">/**
 * ap_set_keepalive (request_rec *r)
 * Set the keepalive status for this request
 * @param r The current request
 * @return 1 if keepalive can be set, 0 otherwise
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_set_keepalive</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>returnValue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>returnValue</name> = <call><name>ap_set_keepalive</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/**
 * ap_make_etag (request_rec *r, int force_weak)
 * Construct an entity tag from the resource information.  If it's a real
 * file, build in some of the file characteristics.
 * @param r The current request
 * @param force_weak Force the entity tag to be weak - it could be modified
 *                   again in as short an interval.
 * @return The entity tag
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_make_etag</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name>           *</type><name>returnValue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>force_weak</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TBOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>force_weak</name> = (<name>int</name>)<call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>returnValue</name> = <call><name>ap_make_etag</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>force_weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>



<comment type="block">/**
 * ap_send_interim_response (request_rec *r, int send_headers)
 * Send an interim (HTTP 1xx) response immediately.
 * @param r The request
 * @param send_headers Whether to send&amp;clear headers in r-&gt;headers_out
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_send_interim_response</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>send_headers</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>lua_isboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>send_headers</name> = <call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>ap_send_interim_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>send_headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>


<comment type="block">/**
 * ap_custom_response (request_rec *r, int status, const char *string)
 * Install a custom response handler for a given status
 * @param r The current request
 * @param status The status for which the custom response should be used
 * @param string The custom response.  This can be a static string, a file
 *               or a URL
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_custom_response</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>string</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TNUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>string</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_custom_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>


<comment type="block">/**
 * ap_exists_config_define (const char *name)
 * Check for a definition from the server command line
 * @param name The define to check for
 * @return 1 if defined, 0 otherwise
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_exists_config_define</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>returnValue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>name</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>name</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>returnValue</name> = <call><name>ap_exists_config_define</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_get_server_name_for_url</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     *</type><name>servername</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>    *</type><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>servername</name> = <call><name>ap_get_server_name_for_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>servername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* ap_state_query (int query_code) item starts a new field  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_state_query</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>int</name></type> <name>returnValue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>query_code</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TNUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>query_code</name> = <call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>returnValue</name> = <call><name>ap_state_query</name><argument_list>(<argument><expr><name>query_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * lua_ap_usleep; r:usleep(microseconds)
 * - Sleep for the specified number of microseconds.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_usleep</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>msec</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TNUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>msec</name> = (<name>apr_interval_time_t</name>)<call><name>lua_tonumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name>msec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/* END dispatch methods for request_rec fields */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>req_dispatch</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>dispatch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>req_fun_t</name> *</type><name>rft</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr>"Apache2.Request.dispatch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dispatch</name> = <call><name>lua_touserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rft</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rft</name></expr>)</condition><then> <block>{
        <switch>switch <condition>(<expr><name><name>rft</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
        <case>case <expr><name>APL_REQ_FUNTYPE_TABLE</name></expr>:<block>{
                <decl_stmt><decl><type><name>req_table_t</name> *</type><name>rs</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>req_field_apr_table_f</name></type> <name>func</name> <init>= <expr>(<name>req_field_apr_table_f</name>)<name><name>rft</name>-&gt;<name>fun</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01486</expr></argument>)</argument_list></call>
                              "request_rec-&gt;dispatching %s -&gt; apr table"</expr></argument>,
                              <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rs</name> = <call>(*<name>func</name>)<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ap_lua_push_apr_table</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
            }</block>

        </case><case>case <expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr>:<block>{
                <decl_stmt><decl><type><name>lua_CFunction</name></type> <name>func</name> <init>= <expr>(<name>lua_CFunction</name>)<name><name>rft</name>-&gt;<name>fun</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01487</expr></argument>)</argument_list></call>
                              "request_rec-&gt;dispatching %s -&gt; lua_CFunction"</expr></argument>,
                              <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
            }</block>
        </case><case>case <expr><name>APL_REQ_FUNTYPE_STRING</name></expr>:<block>{
                <decl_stmt><decl><type><name>req_field_string_f</name></type> <name>func</name> <init>= <expr>(<name>req_field_string_f</name>)<name><name>rft</name>-&gt;<name>fun</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name> *</type><name>rs</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01488</expr></argument>)</argument_list></call>
                              "request_rec-&gt;dispatching %s -&gt; string"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rs</name> = <call>(*<name>func</name>) <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
            }</block>
        </case><case>case <expr><name>APL_REQ_FUNTYPE_INT</name></expr>:<block>{
                <decl_stmt><decl><type><name>req_field_int_f</name></type> <name>func</name> <init>= <expr>(<name>req_field_int_f</name>)<name><name>rft</name>-&gt;<name>fun</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>rs</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01489</expr></argument>)</argument_list></call>
                              "request_rec-&gt;dispatching %s -&gt; int"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rs</name> = <call>(*<name>func</name>) <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
            }</block>
        </case><case>case <expr><name>APL_REQ_FUNTYPE_BOOLEAN</name></expr>:<block>{
                <decl_stmt><decl><type><name>req_field_int_f</name></type> <name>func</name> <init>= <expr>(<name>req_field_int_f</name>)<name><name>rft</name>-&gt;<name>fun</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>rs</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01490</expr></argument>)</argument_list></call>
                              "request_rec-&gt;dispatching %s -&gt; boolean"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rs</name> = <call>(*<name>func</name>) <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>1</expr>;</return>
            }</block>
        </case>}</block></switch>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01491</expr></argument>)</argument_list></call> "nothing for %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/* helper function for the logging functions below */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_log_at</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lua_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_getinfo</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Sl"</expr></argument>, <argument><expr>&amp;<name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>msg</name> = <call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Intentional no APLOGNO */</comment>
    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name><name>dbg</name>.<name>source</name></name></expr></argument>, <argument><expr><name><name>dbg</name>.<name>currentline</name></name></expr></argument>, <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr>0</expr></argument>,
                  <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/* r:debug(String) and friends which use apache logging */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_emerg</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>req_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_alert</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>req_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_crit</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>req_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_err</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>req_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_warn</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>req_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_notice</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>req_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_info</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>req_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_debug</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>req_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ivm_get</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>raw_key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lua_ivm_object</name> *</type><name>object</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>key</name> = <call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>raw_key</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"lua_ivm_"</expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>lua_ivm_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pool</name> = *((<name>apr_pool_t</name>**) <call><name>apr_shm_baseaddr_get</name><argument_list>(<argument><expr><name>lua_ivm_shm</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>(<name>void</name> **)&amp;<name>object</name></expr></argument>, <argument><expr><name>raw_key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>object</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>object</name>-&gt;<name>type</name></name> == <name>LUA_TBOOLEAN</name></expr>)</condition><then> <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>(<name>int</name>) <name><name>object</name>-&gt;<name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><name><name>object</name>-&gt;<name>type</name></name> == <name>LUA_TNUMBER</name></expr>)</condition><then> <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>object</name>-&gt;<name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><name><name>object</name>-&gt;<name>type</name></name> == <name>LUA_TSTRING</name></expr>)</condition><then> <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>object</name>-&gt;<name>vb</name>.<name>buf</name></name></expr></argument>, <argument><expr><name><name>object</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if>
        <expr_stmt><expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>lua_ivm_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>lua_ivm_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></else></if>
}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ivm_set</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>raw_key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>str_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lua_ivm_object</name> *</type><name>object</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>key</name> = <call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_checkany</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>raw_key</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"lua_ivm_"</expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>lua_ivm_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pool</name> = *((<name>apr_pool_t</name>**) <call><name>apr_shm_baseaddr_get</name><argument_list>(<argument><expr><name>lua_ivm_shm</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>(<name>void</name> **)&amp;<name>object</name></expr></argument>, <argument><expr><name>raw_key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>object</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>object</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lua_ivm_object</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_varbuf_init</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>object</name>-&gt;<name>vb</name></name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>object</name>-&gt;<name>size</name></name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>object</name>-&gt;<name>vb_size</name></name> = 1</expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>object</name>-&gt;<name>type</name></name> = <call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>object</name>-&gt;<name>type</name></name> == <name>LUA_TNUMBER</name></expr>)</condition><then> <expr_stmt><expr><name><name>object</name>-&gt;<name>number</name></name> = <call><name>lua_tonumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name><name>object</name>-&gt;<name>type</name></name> == <name>LUA_TBOOLEAN</name></expr>)</condition><then> <expr_stmt><expr><name><name>object</name>-&gt;<name>number</name></name> = <call><name>lua_tonumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name><name>object</name>-&gt;<name>type</name></name> == <name>LUA_TSTRING</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>value</name> = <call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>str_len</name>++</expr>;</expr_stmt> <comment type="block">/* add trailing \0 */</comment>
        <if>if <condition>( <expr><name>str_len</name> &gt; <name><name>object</name>-&gt;<name>vb_size</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_varbuf_grow</name><argument_list>(<argument><expr>&amp;<name><name>object</name>-&gt;<name>vb</name></name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>object</name>-&gt;<name>vb_size</name></name> = <name>str_len</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>object</name>-&gt;<name>size</name></name> = <name>str_len</name>-1</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>object</name>-&gt;<name>vb</name>.<name>buf</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>object</name>-&gt;<name>vb</name>.<name>buf</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>str_len</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if>
    <expr_stmt><expr><call><name>apr_pool_userdata_set</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>raw_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>lua_ivm_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_get_cookie</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>cookie</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>key</name> = <call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cookie</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_cookie_read</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>cookie</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cookie</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_set_cookie</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>, *<decl><type ref="prev"/><name>out</name></decl>, *<decl><type ref="prev"/><name>path</name> <init>= <expr>""</expr></init>, *<name>domain</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>strexpires</name> <init>= <expr>""</expr></init>, *<name>strdomain</name> <init>= <expr>""</expr></init>, *<name>strpath</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>secure</name> <init>= <expr>0</expr></init>, <name>expires</name> <init>= <expr>0</expr></init>, <name>httponly</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>cdate</name><index>[<expr><name>APR_RFC822_DATE_LEN</name>+1</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="block">/* New &gt;= 2.4.8 method: */</comment>
    <if>if <condition>(<expr><call><name>lua_istable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
         
        <comment type="block">/* key */</comment>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"key"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> = <call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* value */</comment>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* expiry */</comment>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"expires"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>expires</name> = (<name>int</name>)<call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* secure */</comment>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"secure"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>lua_isboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>secure</name> = <call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* httponly */</comment>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"httponly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>lua_isboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>httponly</name> = <call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* path */</comment>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"path"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>path</name> = <call><name>luaL_optstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* domain */</comment>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"domain"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>domain</name> = <call><name>luaL_optstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></then>
    <comment type="block">/* Old &lt;= 2.4.7 method: */</comment>
    <else>else <block>{
        <expr_stmt><expr><name>key</name> = <call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>secure</name> = 0</expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>lua_isboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>secure</name> = <call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>expires</name> = <call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    
    <comment type="block">/* Calculate expiry if set */</comment>
    <if>if <condition>(<expr><name>expires</name> &gt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>apr_rfc822_date</name><argument_list>(<argument><expr><name>cdate</name></expr></argument>, <argument><expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>expires</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>strexpires</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Expires=%s;"</expr></argument>, <argument><expr><name>cdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    
    <comment type="block">/* Create path segment */</comment>
    <if>if <condition>(<expr><name>path</name> != <name>NULL</name> &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>strpath</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Path=%s;"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <comment type="block">/* Create domain segment */</comment>
    <if>if <condition>(<expr><name>domain</name> != <name>NULL</name> &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* Domain does NOT like quotes in most browsers, so let's avoid that */</comment>
        <expr_stmt><expr><name>strdomain</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Domain=%s;"</expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <comment type="block">/* URL-encode key/value */</comment>
    <expr_stmt><expr><name>value</name> = <call><name>ap_escape_urlencoded</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>key</name> = <call><name>ap_escape_urlencoded</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Create the header */</comment>
    <expr_stmt><expr><name>out</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s=%s; %s %s %s %s %s"</expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, 
            <argument><expr><name>secure</name> ? "Secure;" : ""</expr></argument>, 
            <argument><expr><name>expires</name> ? <name>strexpires</name> : ""</expr></argument>, 
            <argument><expr><name>httponly</name> ? "HttpOnly;" : ""</expr></argument>, 
            <argument><expr>*<name>strdomain</name> ? <name>strdomain</name> : ""</expr></argument>, 
            <argument><expr>*<name>strpath</name> ? <name>strpath</name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Set-Cookie"</expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_uint64_t</name></type> <name>ap_ntoh64</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_uint64_t</name> *</type><name>input</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>rval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>data</name> <init>= <expr>(<name>unsigned</name> <name>char</name> *)&amp;<name>rval</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>APR_IS_BIGENDIAN</name></expr>)</condition><then> <block>{
        <return>return <expr>*<name>input</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name><name>data</name><index>[<expr>0</expr>]</index></name> = *<name>input</name> &gt;&gt; 56</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><index>[<expr>1</expr>]</index></name> = *<name>input</name> &gt;&gt; 48</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><index>[<expr>2</expr>]</index></name> = *<name>input</name> &gt;&gt; 40</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><index>[<expr>3</expr>]</index></name> = *<name>input</name> &gt;&gt; 32</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><index>[<expr>4</expr>]</index></name> = *<name>input</name> &gt;&gt; 24</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><index>[<expr>5</expr>]</index></name> = *<name>input</name> &gt;&gt; 16</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><index>[<expr>6</expr>]</index></name> = *<name>input</name> &gt;&gt; 8</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><index>[<expr>7</expr>]</index></name> = *<name>input</name> &gt;&gt; 0</expr>;</expr_stmt>

    <return>return <expr><name>rval</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_websocket_greet</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_SHA1_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_sha1_ctx_t</name></type> <name>sha1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>           *</type><name>encoded</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>encoded_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>key</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Sec-WebSocket-Key"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>key</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03011</expr></argument>)</argument_list></call> 
                      "Websocket: Got websocket key: %s"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>"258EAFA5-E914-47DA-95CA-C5AB0DC85B11"</expr></argument>, 
                <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_sha1_init</name><argument_list>(<argument><expr>&amp;<name>sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_sha1_update</name><argument_list>(<argument><expr>&amp;<name>sha1</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_sha1_final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>&amp;<name>sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>encoded_len</name> = <call><name>apr_base64_encode_len</name><argument_list>(<argument><expr><name>APR_SHA1_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>encoded_len</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>encoded</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>encoded_len</name> = <call><name>apr_base64_encode</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr>(<name>char</name>*) <name>digest</name></expr></argument>, <argument><expr><name>APR_SHA1_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = 101</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Upgrade"</expr></argument>, <argument><expr>"websocket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Connection"</expr></argument>, <argument><expr>"Upgrade"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Sec-WebSocket-Accept"</expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="block">/* Trick httpd into NOT using the chunked filter, IMPORTANT!!!111*/</comment>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>, <argument><expr>"chunked"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><name><name>r</name>-&gt;<name>clength</name></name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name>-&gt;<name>bytes_sent</name></name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name>-&gt;<name>read_chunked</name></name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rflush</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03012</expr></argument>)</argument_list></call> 
                          "Websocket: Upgraded from HTTP to Websocket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>1</expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02666</expr></argument>)</argument_list></call>
                  "Websocket: Upgrade from HTTP to Websocket failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>lua_websocket_readbytes</name><parameter_list>(<param><decl><type><name>conn_rec</name>*</type> <name>c</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>buffer</name></decl></param>, 
        <param><decl><type><name>apr_off_t</name></type> <name>len</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>brigade</name> <init>= <expr><call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>brigade</name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, 
            <argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>brigade</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>bucket</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>brigade</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_size_t</name></type> <name>data_length</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>data_length</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_websocket_peek</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>brigade</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>brigade</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>pool</name></name></expr></argument>, 
            <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>brigade</name></expr></argument>, 
            <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>APR_NONBLOCK_READ</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_websocket_read</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>do_read</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>plen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>payload_short</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>payload_long</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>mask_bytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>byte</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>plaintext</name></decl>;</decl_stmt>
    
    
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>plaintext</name> = <call><name>ap_lua_ssl_is_https</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call> ? 0 : 1</expr>;</expr_stmt>

    
    <expr_stmt><expr><name>mask_bytes</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sock</name> = <call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>do_read</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>do_read</name> = 0</expr>;</expr_stmt>
        <comment type="block">/* Get opcode and FIN bit */</comment>
        <if>if <condition>(<expr><name>plaintext</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr>&amp;<name>byte</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>lua_websocket_readbytes</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr>&amp;<name>byte</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ubyte</name></decl>, <decl><type ref="prev"/><name>fin</name></decl>, <decl><type ref="prev"/><name>opcode</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>, <decl><type ref="prev"/><name>payload</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>ubyte</name> = (<name>unsigned</name> <name>char</name>)<name>byte</name></expr>;</expr_stmt>
            <comment type="block">/* fin bit is the first bit */</comment>
            <expr_stmt><expr><name>fin</name> = <name>ubyte</name> &gt;&gt; (<name>CHAR_BIT</name> - 1)</expr>;</expr_stmt>
            <comment type="block">/* opcode is the last four bits (there's 3 reserved bits we don't care about) */</comment>
            <expr_stmt><expr><name>opcode</name> = <name>ubyte</name> &amp; 0xf</expr>;</expr_stmt>

            <comment type="block">/* Get the payload length and mask bit */</comment>
            <if>if <condition>(<expr><name>plaintext</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rv</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr>&amp;<name>byte</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>rv</name> = <call><name>lua_websocket_readbytes</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr>&amp;<name>byte</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ubyte</name> = (<name>unsigned</name> <name>char</name>)<name>byte</name></expr>;</expr_stmt>
                <comment type="block">/* Mask is the first bit */</comment>
                <expr_stmt><expr><name>mask</name> = <name>ubyte</name> &gt;&gt; (<name>CHAR_BIT</name> - 1)</expr>;</expr_stmt>
                <comment type="block">/* Payload is the last 7 bits */</comment>
                <expr_stmt><expr><name>payload</name> = <name>ubyte</name> &amp; 0x7f</expr>;</expr_stmt>
                <expr_stmt><expr><name>plen</name> = <name>payload</name></expr>;</expr_stmt>

                <comment type="block">/* Extended payload? */</comment>
                <if>if <condition>(<expr><name>payload</name> == 126</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>len</name> = 2</expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>plaintext</name></expr>)</condition><then> <block>{
                        <comment type="block">/* XXX: apr_socket_recv does not receive len bits, only up to len bits! */</comment>
                        <expr_stmt><expr><name>rv</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr>(<name>char</name>*) &amp;<name>payload_short</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>rv</name> = <call><name>lua_websocket_readbytes</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, 
                                <argument><expr>(<name>char</name>*) &amp;<name>payload_short</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>payload_short</name> = <call><name>ntohs</name><argument_list>(<argument><expr><name>payload_short</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>plen</name> = <name>payload_short</name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <return>return <expr>0</expr>;</return>
                    }</block></else></if>
                }</block></then></if>
                <comment type="block">/* Super duper extended payload? */</comment>
                <if>if <condition>(<expr><name>payload</name> == 127</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>len</name> = 8</expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>plaintext</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>rv</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr>(<name>char</name>*) &amp;<name>payload_long</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>rv</name> = <call><name>lua_websocket_readbytes</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, 
                                <argument><expr>(<name>char</name>*) &amp;<name>payload_long</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>plen</name> = <call><name>ap_ntoh64</name><argument_list>(<argument><expr>&amp;<name>payload_long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <return>return <expr>0</expr>;</return>
                    }</block></else></if>
                }</block></then></if>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03210</expr></argument>)</argument_list></call>
                              "Websocket: Reading %" <name>APR_SIZE_T_FMT</name> " (%s) bytes, masking is %s. %s"</expr></argument>, 
                              <argument><expr><name>plen</name></expr></argument>,
                              <argument><expr>(<name>payload</name> &gt;= 126) ? "extra payload" : "no extra payload"</expr></argument>, 
                              <argument><expr><name>mask</name> ? "on" : "off"</expr></argument>, 
                              <argument><expr><name>fin</name> ? "This is a final frame" : "more to follow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>mask</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>len</name> = 4</expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>plaintext</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>rv</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr>(<name>char</name>*) <name>mask_bytes</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>rv</name> = <call><name>lua_websocket_readbytes</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, 
                                <argument><expr>(<name>char</name>*) <name>mask_bytes</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <return>return <expr>0</expr>;</return>
                    }</block></then></if>
                }</block></then></if>
                <if>if <condition>(<expr><name>plen</name> &lt; (<name>HUGE_STRING_LEN</name>*1024) &amp;&amp; <name>plen</name> &gt; 0</expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>remaining</name> <init>= <expr><name>plen</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>received</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>at</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>char</name> *</type><name>buffer</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>plen</name>+1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>plen</name></expr>]</index></name> = 0</expr>;</expr_stmt>

                    <if>if <condition>(<expr><name>plaintext</name></expr>)</condition><then> <block>{
                        <while>while <condition>(<expr><name>remaining</name> &gt; 0</expr>)</condition> <block>{
                            <expr_stmt><expr><name>received</name> = <name>remaining</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>rv</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buffer</name>+<name>at</name></expr></argument>, <argument><expr>&amp;<name>received</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if>if <condition>(<expr><name>received</name> &gt; 0</expr> )</condition><then> <block>{
                                <expr_stmt><expr><name>remaining</name> -= <name>received</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>at</name> += <name>received</name></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></while>
                        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, 
                                <argument><expr>"Websocket: Frame contained %" <name>APR_OFF_T_FMT</name> " bytes, pushed to Lua stack"</expr></argument>, 
                                <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>rv</name> = <call><name>lua_websocket_readbytes</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, 
                                <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, 
                                <argument><expr>"Websocket: SSL Frame contained %" <name>APR_SIZE_T_FMT</name> " bytes, "\
                                "pushed to Lua stack"</expr></argument>, 
                                <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <if>if <condition>(<expr><name>mask</name></expr>)</condition><then> <block>{
                        <for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>plen</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
                            <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>n</name></expr>]</index></name> ^= <name><name>mask_bytes</name><index>[<expr><name>n</name>%4</expr>]</index></name></expr>;</expr_stmt>
                        }</block></for>
                    }</block></then></if>

                    <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>(<name>size_t</name>) <name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* push to stack */</comment>
                    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* push FIN bit to stack as boolean */</comment>
                    <return>return <expr>2</expr>;</return>
                }</block></then></if>


                <comment type="block">/* Decide if we need to react to the opcode or not */</comment>
                <if>if <condition>(<expr><name>opcode</name> == 0x09</expr>)</condition><then> <block>{ <comment type="block">/* ping */</comment>
                    <decl_stmt><decl><type><name>char</name></type> <name><name>frame</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>plen</name> = 2</expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>frame</name><index>[<expr>0</expr>]</index></name> = 0x8A</expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>frame</name><index>[<expr>1</expr>]</index></name> = 0</expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>apr_socket_send</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr>&amp;<name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Pong! */</comment>
                    <expr_stmt><expr><name>do_read</name> = 1</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
    }</block></while>
    <return>return <expr>0</expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_websocket_write</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>raw</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>prelude</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <if>if <condition>(<expr><call><name>lua_isboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>raw</name> = <call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>string</name> = <call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><name>raw</name> != 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03013</expr></argument>)</argument_list></call> 
                      "Websocket: Writing framed message to client"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>prelude</name> = 0x81</expr>;</expr_stmt> <comment type="block">/* text frame, FIN */</comment>
        <expr_stmt><expr><call><name>ap_rputc</name><argument_list>(<argument><expr><name>prelude</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>len</name> &lt; 126</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_rputc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> 
        <else>else <if>if <condition>(<expr><name>len</name> &lt; 65535</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>slen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ap_rputc</name><argument_list>(<argument><expr>126</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <expr_stmt><expr><name>slen</name> = <call><name>htons</name><argument_list>(<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rwrite</name><argument_list>(<argument><expr>(<name>char</name>*) &amp;<name>slen</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>llen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ap_rputc</name><argument_list>(<argument><expr>127</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>llen</name> = <call><name>ap_ntoh64</name><argument_list>(<argument><expr>&amp;<name>llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* ntoh doubles as hton */</comment>
            <expr_stmt><expr><call><name>ap_rwrite</name><argument_list>(<argument><expr>(<name>char</name>*) &amp;<name>llen</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03014</expr></argument>)</argument_list></call> 
                      "Websocket: Writing raw message to client"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>ap_rwrite</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>ap_rflush</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr>1</expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_websocket_close</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>prelude</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>sock</name> = <call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Send a header that says: socket is closing. */</comment>
    <expr_stmt><expr><name><name>prelude</name><index>[<expr>0</expr>]</index></name> = 0x88</expr>;</expr_stmt> <comment type="block">/* closing socket opcode */</comment>
    <expr_stmt><expr><name><name>prelude</name><index>[<expr>1</expr>]</index></name> = 0</expr>;</expr_stmt> <comment type="block">/* zero length frame */</comment>
    <expr_stmt><expr><call><name>ap_rwrite</name><argument_list>(<argument><expr><name>prelude</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Close up tell the MPM and filters to back off */</comment>
    <expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>output_filters</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_websocket_ping</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>plen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>prelude</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sock</name> = <call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Send a header that says: PING. */</comment>
    <expr_stmt><expr><name><name>prelude</name><index>[<expr>0</expr>]</index></name> = 0x89</expr>;</expr_stmt> <comment type="block">/* ping  opcode */</comment>
    <expr_stmt><expr><name><name>prelude</name><index>[<expr>1</expr>]</index></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>plen</name> = 2</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_socket_send</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>prelude</name></expr></argument>, <argument><expr>&amp;<name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    
    <comment type="block">/* Get opcode and FIN bit from pong */</comment>
    <expr_stmt><expr><name>plen</name> = 2</expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>prelude</name></expr></argument>, <argument><expr>&amp;<name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>opcode</name> <init>= <expr><name><name>prelude</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>len</name> <init>= <expr><name><name>prelude</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name> <init>= <expr><name>len</name> &gt;&gt; 7</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mask</name></expr>)</condition><then> <expr_stmt><expr><name>len</name> -= 128</expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>plen</name> = <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03015</expr></argument>)</argument_list></call> 
                      "Websocket: Got PONG opcode: %x"</expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>opcode</name> == 0x8A</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name>plen</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, 
                          <argument><expr>"Websocket: Reading %" <name>APR_SIZE_T_FMT</name> " bytes of PONG"</expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>mask</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>plen</name> = 2</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>prelude</name></expr></argument>, <argument><expr>&amp;<name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>plen</name> = 2</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>prelude</name></expr></argument>, <argument><expr>&amp;<name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr>1</expr>;</return>
}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLUA_REQ_TRACE</name><parameter_list>(<param><type><name>lev</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static int req_trace##lev(lua_State *L)  \
{                                                               \
    return req_log_at(L, APLOG_TRACE##lev);                     \
}</cpp:value></cpp:define>

<macro><name>APLUA_REQ_TRACE</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<macro><name>APLUA_REQ_TRACE</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<macro><name>APLUA_REQ_TRACE</name><argument_list>(<argument>3</argument>)</argument_list></macro>
<macro><name>APLUA_REQ_TRACE</name><argument_list>(<argument>4</argument>)</argument_list></macro>
<macro><name>APLUA_REQ_TRACE</name><argument_list>(<argument>5</argument>)</argument_list></macro>
<macro><name>APLUA_REQ_TRACE</name><argument_list>(<argument>6</argument>)</argument_list></macro>
<macro><name>APLUA_REQ_TRACE</name><argument_list>(<argument>7</argument>)</argument_list></macro>
<macro><name>APLUA_REQ_TRACE</name><argument_list>(<argument>8</argument>)</argument_list></macro>

<comment type="block">/* handle r.status = 201 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>req_newindex</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
    <comment type="block">/* request_rec* r = lua_touserdata(L, lua_upvalueindex(1)); */</comment>
    <comment type="block">/* const char* key = luaL_checkstring(L, -2); */</comment>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>key</name> = <call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"args"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>args</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"content_type"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"filename"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"handler"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"proxyreq"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>proxyreq</name></name> = <name>value</name></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"status"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>code</name></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"uri"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>uri</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"user"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
                   <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                <argument><expr>"Property [%s] may not be set on a request_rec"</expr></argument>,
                                <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>



<comment type="block">/* helper function for walking config trees */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>read_cfg_tree</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>ap_directive_t</name> *</type><name>rcfg</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for (<init><expr><name>cfg</name> = <name>rcfg</name></expr>;</init> <condition><expr><name>cfg</name></expr>;</condition> <incr><expr><name>cfg</name> = <name><name>cfg</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <expr_stmt><expr><name>x</name>++</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s %s"</expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"directive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"line"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>line_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>first_child</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"children"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read_cfg_tree</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>first_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_get_config</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>   
    <expr_stmt><expr><call><name>read_cfg_tree</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ap_conftree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr>1</expr>;</return>
}</block></function>


<comment type="block">/* Hack, hack, hack...! TODO: Make this actually work properly */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_ap_get_active_config</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>subdir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>dir</name> <init>= <expr><name>ap_conftree</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <for>for (<init><expr><name>dir</name> = <name>ap_conftree</name></expr>;</init> <condition><expr><name>dir</name></expr>;</condition> <incr><expr><name>dir</name> = <name><name>dir</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <if>if <condition>(<expr><call><name>ap_strcasestr</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr>"&lt;virtualhost"</expr></argument>)</argument_list></call> &amp;&amp; <name><name>dir</name>-&gt;<name>first_child</name></name></expr>)</condition><then> <block>{
            <for>for (<init><expr><name>subdir</name> = <name><name>dir</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>subdir</name></expr>;</condition> <incr><expr><name>subdir</name> = <name><name>subdir</name>-&gt;<name>next</name></name></expr></incr>) <block>{
                <if>if <condition>(<expr><call><name>ap_strcasecmp_match</name><argument_list>(<argument><expr><name><name>subdir</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr>"servername"</expr></argument>)</argument_list></call> &amp;&amp;
                        !<call><name>ap_strcasecmp_match</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>subdir</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>read_cfg_tree</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>first_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>1</expr>;</return>
                }</block></then></if>
                <if>if <condition>(<expr><call><name>ap_strcasecmp_match</name><argument_list>(<argument><expr><name><name>subdir</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr>"serveralias"</expr></argument>)</argument_list></call> &amp;&amp;
                        !<call><name>ap_strcasecmp_match</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>subdir</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>read_cfg_tree</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>first_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>1</expr>;</return>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
    }</block></for>     
    <return>return <expr>0</expr>;</return>
}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> struct <name>luaL_Reg</name></type> <name><name>request_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"__index"</expr>, <expr><name>req_dispatch</name></expr>}</block></expr>,
    <expr><block>{<expr>"__newindex"</expr>, <expr><name>req_newindex</name></expr>}</block></expr>,
    <comment type="block">/*   {"__newindex", req_set_field}, */</comment>
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> struct <name>luaL_Reg</name></type> <name><name>connection_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>lua_ap_auth_name</name><parameter_list>(<param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>name</name> = <call><name>ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>name</name> ? <name>name</name> : ""</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>lua_ap_get_server_name</name><parameter_list>(<param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>name</name> = <call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>name</name> ? <name>name</name> : "localhost"</expr>;</return>
}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> struct <name>luaL_Reg</name></type> <name><name>server_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>req_fun_t</name> *</type><name>makefun</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>fun</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>req_fun_t</name> *</type><name>rft</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req_fun_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>rft</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rft</name>-&gt;<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
    <return>return <expr><name>rft</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>ap_lua_load_request_lmodule</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>dispatch</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"puts"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_puts</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"write"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_write</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"document_root"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_document_root</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"context_prefix"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_context_prefix</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"context_document_root"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_context_document_root</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"parseargs"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_parseargs</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"parsebody"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_parsebody</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"debug"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_debug</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"info"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_info</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"notice"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_notice</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"warn"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_warn</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"err"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_err</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"crit"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_crit</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"alert"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_alert</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"emerg"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_emerg</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"trace1"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_trace1</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"trace2"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_trace2</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"trace3"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_trace3</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"trace4"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_trace4</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"trace5"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_trace5</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"trace6"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_trace6</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"trace7"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_trace7</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"trace8"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_trace8</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"add_output_filter"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_add_output_filter</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"construct_url"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_construct_url</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"escape_html"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_escape_html</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"ssl_var_lookup"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_ssl_var_lookup</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"is_https"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_ssl_is_https_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_BOOLEAN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"assbackwards"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_assbackwards_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_BOOLEAN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"status"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_status_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_INT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"protocol"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_protocol_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"range"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_range_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"content_type"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_content_type_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"content_encoding"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_content_encoding_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>,
                         <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"ap_auth_type"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_ap_auth_type_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"unparsed_uri"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_unparsed_uri_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"user"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_user_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"filename"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_filename_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"canonical_filename"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_canonical_filename_field</name></expr></argument>,
                         <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"path_info"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_path_info_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"args"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_args_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"handler"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_handler_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"hostname"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_hostname_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"uri"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_uri_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"the_request"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_the_request_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"log_id"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_log_id_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"useragent_ip"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_useragent_ip_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"method"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_method_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"proxyreq"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_proxyreq_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"headers_in"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_headers_in</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_TABLE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"headers_out"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_headers_out</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_TABLE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"err_headers_out"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_err_headers_out</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_TABLE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"notes"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_notes</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_TABLE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"subprocess_env"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_subprocess_env</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_TABLE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"flush"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_rflush</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"port"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_ap_get_server_port</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_INT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"banner"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>ap_get_server_banner</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"options"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_options</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"allowoverrides"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_allowoverrides</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"started"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_started</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_INT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"basic_auth_pw"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_basic_auth_pw</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"limit_req_body"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_limit_req_body</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_INT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"server_built"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>ap_get_server_built</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"is_initial_req"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_is_initial_req</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_BOOLEAN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"remaining"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>req_remaining_field</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_INT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"some_auth_required"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_some_auth_required</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_BOOLEAN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"server_name"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_get_server_name</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"auth_name"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_auth_name</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_STRING</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"sendfile"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_sendfile</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"dbacquire"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_db_acquire</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"stat"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_stat</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"get_direntries"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_getdir</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"regex"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_regex</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"usleep"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_usleep</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"base64_encode"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_apr_b64encode</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"base64_decode"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_apr_b64decode</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"md5"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_apr_md5</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"sha1"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_apr_sha1</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"htpassword"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_apr_htpassword</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"touch"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_apr_touch</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"mkdir"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_apr_mkdir</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"mkrdir"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_apr_mkrdir</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"rmdir"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_apr_rmdir</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"date_parse_rfc"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_apr_date_parse_rfc</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"escape"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_escape</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"unescape"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_unescape</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"mpm_query"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_mpm_query</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"expr"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_expr</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"scoreboard_process"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_scoreboard_process</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"scoreboard_worker"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_scoreboard_worker</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"clock"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_clock</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"requestbody"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_requestbody</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"add_input_filter"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_add_input_filter</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"module_info"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_module_info</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"loaded_modules"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_loaded_modules</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"runtime_dir_relative"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_runtime_dir_relative</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"server_info"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_server_info</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"set_document_root"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_set_document_root</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"set_context_info"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_set_context_info</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"os_escape_path"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_os_escape_path</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"escape_logitem"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_escape_logitem</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"strcmp_match"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_strcmp_match</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"set_keepalive"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_set_keepalive</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"make_etag"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_make_etag</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"send_interim_response"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_send_interim_response</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"custom_response"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_custom_response</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"exists_config_define"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_exists_config_define</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"state_query"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_state_query</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"get_server_name_for_url"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_get_server_name_for_url</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"ivm_get"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ivm_get</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"ivm_set"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ivm_set</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"getcookie"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_get_cookie</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"setcookie"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_set_cookie</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"wsupgrade"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_websocket_greet</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"wsread"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_websocket_read</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"wspeek"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_websocket_peek</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"wswrite"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_websocket_write</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"wsclose"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_websocket_close</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"wsping"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_websocket_ping</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"config"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_get_config</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>, <argument><expr>"activeconfig"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>makefun</name><argument_list>(<argument><expr>&amp;<name>lua_ap_get_active_config</name></expr></argument>, <argument><expr><name>APL_REQ_FUNTYPE_LUACFUN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>dispatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr>"Apache2.Request.dispatch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>luaL_newmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Apache2.Request"</expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* [metatable] */</comment>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>"__index"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_setfuncs_compat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>request_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* [metatable] */</comment>

    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>luaL_newmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Apache2.Connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* [metatable] */</comment>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>"__index"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_setfuncs_compat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>connection_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* [metatable] */</comment>

    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>luaL_newmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Apache2.Server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block">/* [metatable] */</comment>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>"__index"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_setfuncs_compat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>server_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* [metatable] */</comment>

    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function>

<function><type><name>void</name></type> <name>ap_lua_push_connection</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>req_table_t</name>*</type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_boxpointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_getmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Apache2.Connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_getmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Apache2.Connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>t</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req_table_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name>-&gt;<name>t</name></name> = <name><name>c</name>-&gt;<name>notes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name>-&gt;<name>r</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name>-&gt;<name>n</name></name> = "notes"</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_lua_push_apr_table</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>"notes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>"client_ip"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>void</name></type> <name>ap_lua_push_server</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>lua_boxpointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_getmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Apache2.Server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_getmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Apache2.Server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>server_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>"server_hostname"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>ap_lua_push_request</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>lua_boxpointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_getmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Apache2.Request"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
