<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/lua/lua_config.c"><comment type="block">/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua_vmprep.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>ap_lua_dir_cfg</name> *</type><name>check_dir_config</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checkudata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>"Apache2.DirConfig"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cfg</name> = (<name>ap_lua_dir_cfg</name> *) <call><name>lua_unboxpointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cfg</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>cmd_parms</name> *</type><name>check_cmd_parms</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_checkudata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>"Apache2.CommandParameters"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmd</name> = (<name>cmd_parms</name> *) <call><name>lua_unboxpointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cmd</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apl_toscope</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"once"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>AP_LUA_SCOPE_ONCE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"request"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>AP_LUA_SCOPE_REQUEST</name></expr>;</return></then></if>
    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"connection"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>AP_LUA_SCOPE_CONN</name></expr>;</return></then></if>
    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"conn"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>AP_LUA_SCOPE_CONN</name></expr>;</return></then></if>
    <if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr>"thread"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>AP_LUA_SCOPE_THREAD</name></expr>;</return></then></if>
    <return>return <expr><name>AP_LUA_SCOPE_ONCE</name></expr>;</return>
}</block></function>

<function><type><name>apr_status_t</name></type> <name>ap_lua_map_handler</name><parameter_list>(<param><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pattern</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scope</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>uri_pattern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_lua_mapped_handler_spec</name> *</type><name>handler</name> <init>=
        <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_mapped_handler_spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>handler</name>-&gt;<name>uri_pattern</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name>-&gt;<name>function_name</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>uri_pattern</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_regex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_regcomp</name><argument_list>(<argument><expr><name>uri_pattern</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>handler</name>-&gt;<name>file_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name>-&gt;<name>uri_pattern</name></name> = <name>uri_pattern</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name>-&gt;<name>scope</name></name> = <call><name>apl_toscope</name><argument_list>(<argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>handler</name>-&gt;<name>function_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*(const <name>ap_lua_mapped_handler_spec</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>mapped_handlers</name></name></expr></argument>)</argument_list></call> =
        <name>handler</name></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/* Change to use ap_lua_map_handler */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfg_lua_map_handler</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>check_dir_config</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_lua_mapped_handler_spec</name> *</type><name>handler</name> <init>=
        <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_mapped_handler_spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>handler</name>-&gt;<name>uri_pattern</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handler</name>-&gt;<name>function_name</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>LUA_TTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>lua_isstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>handler</name>-&gt;<name>file_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"pattern"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>lua_isstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pattern</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>uri_pattern</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_regex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>ap_regcomp</name><argument_list>(<argument><expr><name>uri_pattern</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Unable to compile regular expression, '%s'"</expr></argument>,
                              <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>handler</name>-&gt;<name>uri_pattern</name></name> = <name>uri_pattern</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"scope"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>lua_isstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scope</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>handler</name>-&gt;<name>scope</name></name> = <call><name>apl_toscope</name><argument_list>(<argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>handler</name>-&gt;<name>scope</name></name> = <name>AP_LUA_SCOPE_ONCE</name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"func"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>lua_isstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>handler</name>-&gt;<name>function_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>handler</name>-&gt;<name>function_name</name></name> = "handle"</expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr>*(const <name>ap_lua_mapped_handler_spec</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>mapped_handlers</name></name></expr></argument>)</argument_list></call> =
        <name>handler</name></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cfg_directory</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>check_dir_config</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*static int cfg_root(lua_State *L)
{
    ap_lua_dir_cfg *cfg = check_dir_config(L, 1);
    lua_pushstring(L, cfg-&gt;root_path);
    return 1;
}*/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> struct <name>luaL_Reg</name></type> <name><name>cfg_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"match_handler"</expr>, <expr><name>cfg_lua_map_handler</name></expr>}</block></expr>,
    <expr><block>{<expr>"directory"</expr>, <expr><name>cfg_directory</name></expr>}</block></expr>,
    <comment type="block">/* {"root", cfg_root}, */</comment>
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* helper function for the logging functions below */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_log_at</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_parms</name> *</type><name>cmd</name> <init>= <expr><call><name>check_cmd_parms</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lua_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_getinfo</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Sl"</expr></argument>, <argument><expr>&amp;<name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>msg</name> = <call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Intentional no APLOGNO */</comment>
    <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name><name>dbg</name>.<name>source</name></name></expr></argument>, <argument><expr><name><name>dbg</name>.<name>currentline</name></name></expr></argument>, <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr>0</expr></argument>,
                 <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/* r:debug(String) and friends which use apache logging */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_emerg</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_alert</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_crit</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_err</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_warn</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_notice</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_info</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_debug</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_trace1</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_trace2</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_trace3</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_trace4</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_trace5</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_trace6</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_TRACE6</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_trace7</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_trace8</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>cmd_log_at</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>APLOG_TRACE8</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> struct <name>luaL_Reg</name></type> <name><name>cmd_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"trace8"</expr>, <expr><name>cmd_trace8</name></expr>}</block></expr>,
    <expr><block>{<expr>"trace7"</expr>, <expr><name>cmd_trace7</name></expr>}</block></expr>,
    <expr><block>{<expr>"trace6"</expr>, <expr><name>cmd_trace6</name></expr>}</block></expr>,
    <expr><block>{<expr>"trace5"</expr>, <expr><name>cmd_trace5</name></expr>}</block></expr>,
    <expr><block>{<expr>"trace4"</expr>, <expr><name>cmd_trace4</name></expr>}</block></expr>,
    <expr><block>{<expr>"trace3"</expr>, <expr><name>cmd_trace3</name></expr>}</block></expr>,
    <expr><block>{<expr>"trace2"</expr>, <expr><name>cmd_trace2</name></expr>}</block></expr>,
    <expr><block>{<expr>"trace1"</expr>, <expr><name>cmd_trace1</name></expr>}</block></expr>,
    <expr><block>{<expr>"debug"</expr>, <expr><name>cmd_debug</name></expr>}</block></expr>,
    <expr><block>{<expr>"info"</expr>, <expr><name>cmd_info</name></expr>}</block></expr>,
    <expr><block>{<expr>"notice"</expr>, <expr><name>cmd_notice</name></expr>}</block></expr>,
    <expr><block>{<expr>"warn"</expr>, <expr><name>cmd_warn</name></expr>}</block></expr>,
    <expr><block>{<expr>"err"</expr>, <expr><name>cmd_err</name></expr>}</block></expr>,
    <expr><block>{<expr>"crit"</expr>, <expr><name>cmd_crit</name></expr>}</block></expr>,
    <expr><block>{<expr>"alert"</expr>, <expr><name>cmd_alert</name></expr>}</block></expr>,
    <expr><block>{<expr>"emerg"</expr>, <expr><name>cmd_emerg</name></expr>}</block></expr>,

    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ap_lua_load_config_lmodule</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>luaL_newmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Apache2.DirConfig"</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* [metatable] */</comment>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>"__index"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_setfuncs_compat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cfg_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* [metatable] */</comment>


    <expr_stmt><expr><call><name>luaL_newmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Apache2.CommandParameters"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>"__index"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_setfuncs_compat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cmd_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* [metatable] */</comment>

}</block></function>
</unit>
