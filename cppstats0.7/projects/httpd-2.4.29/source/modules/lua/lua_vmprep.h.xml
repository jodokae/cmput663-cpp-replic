<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/lua/lua_vmprep.h"><comment type="block">/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lualib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_rwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_reslist.h"</cpp:file></cpp:include>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>VMPREP_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMPREP_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_SCOPE_UNSET</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_SCOPE_ONCE</name></cpp:macro>          <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_SCOPE_REQUEST</name></cpp:macro>       <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_SCOPE_CONN</name></cpp:macro>          <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_SCOPE_THREAD</name></cpp:macro>        <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_SCOPE_SERVER</name></cpp:macro>        <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_CACHE_UNSET</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_CACHE_NEVER</name></cpp:macro>         <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_CACHE_STAT</name></cpp:macro>          <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_CACHE_FOREVER</name></cpp:macro>       <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_FILTER_INPUT</name></cpp:macro>        <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_FILTER_OUTPUT</name></cpp:macro>       <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (*<name>ap_lua_state_open_callback</name>) <parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
                                             <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl></typedef>
<comment type="block">/**
 * Specification for a lua virtual machine
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
    <comment type="block">/* NEED TO ADD ADDITIONAL PACKAGE PATHS AS PART OF SPEC INSTEAD OF DIR CONFIG */</comment>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>package_paths</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>package_cpaths</name></decl>;</decl_stmt>

    <comment type="block">/* name of base file to load in the vm */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl>;</decl_stmt>

    <comment type="block">/* APL_SCOPE_ONCE | APL_SCOPE_REQUEST | APL_SCOPE_CONN | APL_SCOPE_THREAD | APL_SCOPE_SERVER */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>scope</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vm_min</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vm_max</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ap_lua_state_open_callback</name></type> <name>cb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>*</type> <name>cb_arg</name></decl>;</decl_stmt>

    <comment type="block">/* pool to use for lifecycle if APL_SCOPE_ONCE is set, otherwise unused */</comment>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

    <comment type="block">/* Pre-compiled Lua Byte code to load directly.  If bytecode_len is &gt;0,
     * the file part of this structure is ignored for loading purposes, but
     * it is used for error messages.
     */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytecode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytecode_len</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>codecache</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_lua_vm_spec</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>scope</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>uri_pattern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytecode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytecode_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>codecache</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_lua_mapped_handler_spec</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>filter_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>direction</name></decl>;</decl_stmt> <comment type="block">/* AP_LUA_FILTER_INPUT | AP_LUA_FILTER_OUTPUT */</comment>
}</block></struct></type> <name>ap_lua_filter_handler_spec</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>runs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>modified</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type>  <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_lua_finfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>lua_State</name>*</type> <name>L</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_lua_finfo</name>*</type> <name>finfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_lua_server_spec</name>;</typedef>

<comment type="block">/**
 * Fake out addition of the "apache2" module
 */</comment>
<function_decl><type><name>void</name></type> <name>ap_lua_load_apache2_lmodule</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * alternate means of getting lua_State (preferred eventually)
 * Obtain a lua_State which has loaded file and is associated with lifecycle_pool
 * If one exists, will return extant one, otherwise will create, attach, and return
 * This does no locking around the lua_State, so if the pool is shared between
 * threads, locking is up the client.
 *
 * @lifecycle_pool -&gt; pool whose lifeycle controls the lua_State
 * @file file to be opened, also used as a key for uniquing lua_States
 * @cb callback for vm initialization called *before* the file is opened
 * @ctx a baton passed to cb
 */</comment>
<function_decl><type><name>lua_State</name> *</type><name>ap_lua_get_lua_state</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>lifecycle_pool</name></decl></param>,
                                                <param><decl><type><name>ap_lua_vm_spec</name> *</type><name>spec</name></decl></param>, <param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name> || <call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Initialize mod_lua mutex.
 * @pool pool for mutex
 * @s server_rec for logging
 */</comment>
<function_decl><type><name>void</name></type> <name>ap_lua_init_mutex</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
