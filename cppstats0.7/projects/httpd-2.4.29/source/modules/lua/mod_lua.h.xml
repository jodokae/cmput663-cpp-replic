<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/lua/mod_lua.h"><comment type="block">/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_MOD_LUA_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MOD_LUA_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_regex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_rwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_reslist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lualib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LUA_VERSION_NUM</name> &gt; 501</expr></cpp:if>
<comment type="block">/* Load mode for lua_load() */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lua_load</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>,<param><type><name>c</name></type></param>,<param><type><name>d</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>lua_load(a,b,c,d,NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lua_resume</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>lua_resume(a, NULL, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_setfuncs_compat</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>luaL_setfuncs(a,b,0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lua_rawlen</name><parameter_list>(<param><type><name>L</name></type></param>,<param><type><name>i</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>lua_objlen(L, (i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_setfuncs_compat</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>luaL_register(a,NULL,b)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LUA_VERSION_NUM</name> &gt; 502</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lua_dump</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>,<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>lua_dump(a,b,c,0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Create a set of AP_LUA_DECLARE(type), AP_LUA_DECLARE_NONSTD(type) and
 * AP_LUA_DECLARE_DATA with appropriate export and import tags for the platform
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>            <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_LUA_DECLARE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>            <cpp:value>type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_LUA_DECLARE_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>            <cpp:value>__declspec(dllexport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>__declspec(dllexport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_DECLARE_DATA</name></cpp:macro>             <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>            <cpp:value>__declspec(dllimport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>__declspec(dllimport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_DECLARE_DATA</name></cpp:macro>             <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua_vmprep.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
    <decl><name>AP_LUA_INHERIT_UNSET</name>        <init>= <expr>-1</expr></init></decl>,
    <decl><name>AP_LUA_INHERIT_NONE</name>         <init>=  <expr>0</expr></init></decl>,
    <decl><name>AP_LUA_INHERIT_PARENT_FIRST</name> <init>=  <expr>1</expr></init></decl>,
    <decl><name>AP_LUA_INHERIT_PARENT_LAST</name>  <init>=  <expr>2</expr></init></decl>
}</block></enum></type> <name>ap_lua_inherit_t</name>;</typedef>

<comment type="block">/**
 * make a userdata out of a C pointer, and vice versa
 * instead of using lightuserdata
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>lua_boxpointer</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lua_boxpointer</name><parameter_list>(<param><type><name>L</name></type></param>,<param><type><name>u</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(*(void **)(lua_newuserdata(L, sizeof(void *))) = (u))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lua_unboxpointer</name><parameter_list>(<param><type><name>L</name></type></param>,<param><type><name>i</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>(*(void **)(lua_touserdata(L, i)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>ap_lua_rstack_dump</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>package_paths</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>package_cpaths</name></decl>;</decl_stmt>

    <comment type="block">/**
     * mapped handlers/filters
     */</comment>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>mapped_handlers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>mapped_filters</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

    <comment type="block">/**
     * AP_LUA_SCOPE_ONCE | AP_LUA_SCOPE_REQUEST | AP_LUA_SCOPE_CONN | AP_LUA_SCOPE_SERVER
     */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vm_scope</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vm_min</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vm_max</name></decl>;</decl_stmt>

    <comment type="block">/* info for the hook harnesses */</comment>
    <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hooks</name></decl>;</decl_stmt>          <comment type="block">/* &lt;wombat_hook_info&gt; */</comment>

    <comment type="block">/* the actual directory being configured */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name></decl>;</decl_stmt>
  
    <comment type="block">/* Whether Lua scripts in a sub-dir are run before parents */</comment>
    <decl_stmt><decl><type><name>ap_lua_inherit_t</name></type> <name>inherit</name></decl>;</decl_stmt>
    
    <comment type="block">/**
     * AP_LUA_CACHE_NEVER | AP_LUA_CACHE_STAT | AP_LUA_CACHE_FOREVER
     */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>codecache</name></decl>;</decl_stmt>

}</block></struct></type> <name>ap_lua_dir_cfg</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <comment type="block">/* value of the LuaRoot directive */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_path</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_lua_server_cfg</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_lua_vm_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
}</block></struct></type> <name>mapped_request_details</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>mapped_request_details</name> *</type><name>mapped_request_details</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>request_scoped_vms</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_lua_request_cfg</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>lua_State</name> *</type><name>L</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_lua_filter_ctx</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>lua_module</name></decl>;</decl_stmt>

<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ap_lua</argument>, <argument>AP_LUA</argument>, <argument>int</argument>, <argument>lua_open</argument>,
                          <argument>(lua_State *L, apr_pool_t *p)</argument>)</argument_list></macro>

<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ap_lua</argument>, <argument>AP_LUA</argument>, <argument>int</argument>, <argument>lua_request</argument>,
                          <argument>(lua_State *L, request_rec *r)</argument>)</argument_list></macro>

<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ap_lua_ssl_val</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
                           <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>var</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ap_lua_ssl_is_https</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !_MOD_LUA_H_ */</comment>
</unit>
