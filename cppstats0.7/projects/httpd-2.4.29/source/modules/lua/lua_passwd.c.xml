<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/lua/lua_passwd.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua_passwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_errno.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDIO_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_sha1.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_TIME_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_CRYPT_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypt.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STRING_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IO_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_salt</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>errstr</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rnd</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>itoa64</name><index>[]</index></name> <init>=
        <expr>"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name> <init>= <expr>0</expr></init>, <name>bits</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> = (<name>size</name> * 6 + 7)/8</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>n</name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>errstr</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"generate_salt(): BUG: Buffer too small"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ERR_RANDOM</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>rv</name> = <call><name>apr_generate_random_bytes</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>errstr</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Unable to generate random bytes: %pm"</expr></argument>,
                               <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ERR_RANDOM</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
    <while>while <condition>(<expr><name>size</name> &gt; 0</expr>)</condition> <block>{
        <if>if <condition>(<expr><name>bits</name> &lt; 6</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>val</name> |= (<name><name>rnd</name><index>[<expr><name>n</name>++</expr>]</index></name> &lt;&lt; <name>bits</name>)</expr>;</expr_stmt>
            <expr_stmt><expr><name>bits</name> += 8</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr>*<name>s</name>++ = <name><name>itoa64</name><index>[<expr><name>val</name> &amp; 0x3f</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name>--</expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> &gt;&gt;= 6</expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> -= 6</expr>;</expr_stmt>
   }</block></while>
   <expr_stmt><expr>*<name>s</name> = '\0'</expr>;</expr_stmt>
   <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
 * Make a password record from the given information.  A zero return
 * indicates success; on failure, ctx-&gt;errstr points to the error message.
 */</comment>
<function><type><name>int</name></type> <name>mk_password_hash</name><parameter_list>(<param><decl><type><name>passwd_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>pw</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>salt</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CRYPT_ALGO_SUPPORTED</name></expr></cpp:if>
    <decl_stmt><decl><type><name>char</name> *</type><name>cbuf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>pw</name> = <name><name>ctx</name>-&gt;<name>passwd</name></name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>ctx</name>-&gt;<name>alg</name></name></expr>)</condition> <block>{
    <case>case <expr><name>ALG_APSHA</name></expr>:
        <comment type="block">/* XXX out &gt;= 28 + strlen(sha1) chars - fixed len SHA */</comment>
        <expr_stmt><expr><call><name>apr_sha1_base64</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    </case><case>case <expr><name>ALG_APMD5</name></expr>:
        <expr_stmt><expr><name>ret</name> = <call><name>generate_salt</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>errstr</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ret</name> = <name>ERR_GENERAL</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <expr_stmt><expr><name>rv</name> = <call><name>apr_md5_encode</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>out</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>out_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>,
                                       <argument><expr>"could not encode password: %pm"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> = <name>ERR_GENERAL</name></expr>;</expr_stmt>
        }</block></then></if>
        <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CRYPT_ALGO_SUPPORTED</name></expr></cpp:if>
    </case><case>case <expr><name>ALG_CRYPT</name></expr>:
        <expr_stmt><expr><name>ret</name> = <call><name>generate_salt</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>errstr</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then>
            <break>break;</break></then></if>
        <expr_stmt><expr><name>cbuf</name> = <call><name>crypt</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>cbuf</name> == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"crypt() failed: %pm"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> = <name>ERR_PWMISMATCH</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>out</name></name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>out_len</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call> &gt; 8</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>char</name> *</type><name>truncpw</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>truncpw</name><index>[<expr>8</expr>]</index></name> = '\0'</expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>out</name></name></expr></argument>, <argument><expr><call><name>crypt</name><argument_list>(<argument><expr><name>truncpw</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>,
                                           <argument><expr>"Warning: Password truncated to 8 "
                                           "characters by CRYPT algorithm."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>truncpw</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CRYPT_ALGO_SUPPORTED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BCRYPT_ALGO_SUPPORTED</name></expr></cpp:if>
    </case><case>case <expr><name>ALG_BCRYPT</name></expr>:
        <expr_stmt><expr><name>rv</name> = <call><name>apr_generate_random_bytes</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name>*)<name>salt</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unable to generate random "
                                       "bytes: %pm"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> = <name>ERR_RANDOM</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cost</name></name> == 0</expr>)</condition><then>
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>cost</name></name> = <name>BCRYPT_DEFAULT_COST</name></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>rv</name> = <call><name>apr_bcrypt_encode</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cost</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name>*)<name>salt</name></expr></argument>, <argument><expr>16</expr></argument>,
                               <argument><expr><name><name>ctx</name>-&gt;<name>out</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>out_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unable to encode with "
                                       "bcrypt: %pm"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> = <name>ERR_PWMISMATCH</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BCRYPT_ALGO_SUPPORTED */</comment>

    </case><default>default:
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>,
                                  <argument><expr>"mk_password_hash(): unsupported algorithm %d"</expr></argument>,
                                  <argument><expr><name><name>ctx</name>-&gt;<name>alg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> = <name>ERR_GENERAL</name></expr>;</expr_stmt>
    </default>}</block></switch>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>


</unit>
