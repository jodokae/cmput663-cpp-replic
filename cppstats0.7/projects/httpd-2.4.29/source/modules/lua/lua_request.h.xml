<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/lua/lua_request.h"><comment type="block">/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_LUA_REQUEST_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LUA_REQUEST_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_varbuf.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ap_lua_load_request_lmodule</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ap_lua_push_connection</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ap_lua_push_server</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ap_lua_push_request</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APL_REQ_FUNTYPE_STRING</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APL_REQ_FUNTYPE_INT</name></cpp:macro>         <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APL_REQ_FUNTYPE_TABLE</name></cpp:macro>       <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APL_REQ_FUNTYPE_LUACFUN</name></cpp:macro>     <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APL_REQ_FUNTYPE_BOOLEAN</name></cpp:macro>     <cpp:value>5</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>fun</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>req_fun_t</name>;</typedef>


<comment type="block">/* Struct to use as userdata for request_rec tables */</comment>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt> <comment type="block">/* Request_rec */</comment>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>t</name></decl>;</decl_stmt> <comment type="block">/* apr_table_t* */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  *</type><name>n</name></decl>;</decl_stmt> <comment type="block">/* name of table */</comment>
}</block></struct></type> <name>req_table_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>vb_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lua_Number</name></type> <name>number</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>ap_varbuf</name></type> <name>vb</name></decl>;</decl_stmt>
}</block></struct></type> <name>lua_ivm_object</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !_LUA_REQUEST_H_ */</comment>
</unit>
