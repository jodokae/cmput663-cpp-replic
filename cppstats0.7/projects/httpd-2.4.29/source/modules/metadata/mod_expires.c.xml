<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/metadata/mod_expires.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * mod_expires.c
 * version 0.0.11
 * status beta
 *
 * Andrew Wilson &lt;Andrew.Wilson@cm.cf.ac.uk&gt; 26.Jan.96
 *
 * This module allows you to control the form of the Expires: header
 * that Apache issues for each access.  Directives can appear in
 * configuration files or in .htaccess files so expiry semantics can
 * be defined on a per-directory basis.
 *
 * DIRECTIVE SYNTAX
 *
 * Valid directives are:
 *
 *     ExpiresActive on | off
 *     ExpiresDefault &lt;code&gt;&lt;seconds&gt;
 *     ExpiresByType type/encoding &lt;code&gt;&lt;seconds&gt;
 *
 * Valid values for &lt;code&gt; are:
 *
 *     'M'      expires header shows file modification date + &lt;seconds&gt;
 *     'A'      expires header shows access time + &lt;seconds&gt;
 *
 *              [I'm not sure which of these is best under different
 *              circumstances, I guess it's for other people to explore.
 *              The effects may be indistinguishable for a number of cases]
 *
 * &lt;seconds&gt; should be an integer value [acceptable to atoi()]
 *
 * There is NO space between the &lt;code&gt; and &lt;seconds&gt;.
 *
 * For example, a directory which contains information which changes
 * frequently might contain:
 *
 *     # reports generated by cron every hour.  don't let caches
 *     # hold onto stale information
 *     ExpiresDefault M3600
 *
 * Another example, our html pages can change all the time, the gifs
 * tend not to change often:
 *
 *     # pages are hot (1 week), images are cold (1 month)
 *     ExpiresByType text/html A604800
 *     ExpiresByType image/gif A2592000
 *
 * Expires can be turned on for all URLs on the server by placing the
 * following directive in a conf file:
 *
 *     ExpiresActive on
 *
 * ExpiresActive can also appear in .htaccess files, enabling the
 * behaviour to be turned on or off for each chosen directory.
 *
 *     # turn off Expires behaviour in this directory
 *     # and subdirectories
 *     ExpiresActive off
 *
 * Directives defined for a directory are valid in subdirectories
 * unless explicitly overridden by new directives in the subdirectory
 * .htaccess files.
 *
 * ALTERNATIVE DIRECTIVE SYNTAX
 *
 * Directives can also be defined in a more readable syntax of the form:
 *
 *     ExpiresDefault "&lt;base&gt; [plus] {&lt;num&gt; &lt;type&gt;}*"
 *     ExpiresByType type/encoding "&lt;base&gt; [plus] {&lt;num&gt; &lt;type&gt;}*"
 *
 * where &lt;base&gt; is one of:
 *      access
 *      now             equivalent to 'access'
 *      modification
 *
 * where the 'plus' keyword is optional
 *
 * where &lt;num&gt; should be an integer value [acceptable to atoi()]
 *
 * where &lt;type&gt; is one of:
 *      years
 *      months
 *      weeks
 *      days
 *      hours
 *      minutes
 *      seconds
 *
 * For example, any of the following directives can be used to make
 * documents expire 1 month after being accessed, by default:
 *
 *      ExpiresDefault "access plus 1 month"
 *      ExpiresDefault "access plus 4 weeks"
 *      ExpiresDefault "access plus 30 days"
 *
 * The expiry time can be fine-tuned by adding several '&lt;num&gt; &lt;type&gt;'
 * clauses:
 *
 *      ExpiresByType text/html "access plus 1 month 15 days 2 hours"
 *      ExpiresByType image/gif "modification plus 5 hours 3 minutes"
 *
 * ---
 *
 * Change-log:
 * 29.Jan.96    Hardened the add_* functions.  Server will now bail out
 *              if bad directives are given in the conf files.
 * 02.Feb.96    Returns DECLINED if not 'ExpiresActive on', giving other
 *              expires-aware modules a chance to play with the same
 *              directives. [Michael Rutman]
 * 03.Feb.96    Call tzset() before localtime().  Trying to get the module
 *              to work properly in non GMT timezones.
 * 12.Feb.96    Modified directive syntax to allow more readable commands:
 *                ExpiresDefault "now plus 10 days 20 seconds"
 *                ExpiresDefault "access plus 30 days"
 *                ExpiresDefault "modification plus 1 year 10 months 30 days"
 * 13.Feb.96    Fix call to table_get() with NULL 2nd parameter [Rob Hartill]
 * 19.Feb.96    Call gm_timestr_822() to get time formatted correctly, can't
 *              rely on presence of HTTP_TIME_FORMAT in Apache 1.1+.
 * 21.Feb.96    This version (0.0.9) reverses assumptions made in 0.0.8
 *              about star/star handlers.  Reverting to 0.0.7 behaviour.
 * 08.Jun.96    allows ExpiresDefault to be used with responses that use
 *              the DefaultType by not DECLINING, but instead skipping
 *              the table_get check and then looking for an ExpiresDefault.
 *              [Rob Hartill]
 * 04.Nov.96    'const' definitions added.
 *
 * TODO
 * add support for Cache-Control: max-age=20 from the HTTP/1.1
 * proposal (in this case, a ttl of 20 seconds) [ask roy]
 * add per-file expiry and explicit expiry times - duplicates some
 * of the mod_cern_meta.c functionality.  eg:
 *              ExpiresExplicit index.html "modification plus 30 days"
 *
 * BUGS
 * Hi, welcome to the internet.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>wildcards</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>expiresdefault</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>expiresbytype</name></decl>;</decl_stmt>
}</block></struct></type> <name>expires_dir_config</name>;</typedef>

<comment type="block">/* from mod_dir, why is this alias used?
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_CMD_PERMS</name></cpp:macro> <cpp:value>OR_INDEXES</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_ON</name></cpp:macro>       <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_OFF</name></cpp:macro>      <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_DONTCARE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>expires_module</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_dir_expires_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>new</name> <init>=
    <expr>(<name>expires_dir_config</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expires_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>active</name></name> = <name>ACTIVE_DONTCARE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>wildcards</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>expiresdefault</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>expiresbytype</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>void</name> *) <name>new</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_expiresactive</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_dir_config</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>dir_config</name> <init>= <expr><name>in_dir_config</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* if we're here at all it's because someone explicitly
     * set the active flag
     */</comment>
    <expr_stmt><expr><name><name>dir_config</name>-&gt;<name>active</name></name> = <name>ACTIVE_ON</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>arg</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>dir_config</name>-&gt;<name>active</name></name> = <name>ACTIVE_OFF</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/* check_code() parse 'code' and return NULL or an error response
 * string.  If we return NULL then real_code contains code converted
 * to the cnnnn format.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>check_code</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>code</name></decl></param>, <param><decl><type><name>char</name> **</type><name>real_code</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>word</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>base</name> <init>= <expr>'X'</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>modifier</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>factor</name></decl>;</decl_stmt>

    <comment type="block">/* 0.0.4 compatibility?
     */</comment>
    <if>if <condition>(<expr>(<name><name>code</name><index>[<expr>0</expr>]</index></name> == 'A') || (<name><name>code</name><index>[<expr>0</expr>]</index></name> == 'M')</expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>real_code</name> = (<name>char</name> *)<name>code</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* &lt;base&gt; [plus] {&lt;num&gt; &lt;type&gt;}*
     */</comment>

    <comment type="block">/* &lt;base&gt;
     */</comment>
    <expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"now"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> ||
        !<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"access"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>base</name> = 'A'</expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"modification"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>base</name> = 'M'</expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"bad expires code, unrecognised &lt;base&gt; '"</expr></argument>,
                       <argument><expr><name>word</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if></else></if>

    <comment type="block">/* [plus]
     */</comment>
    <expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"plus"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* {&lt;num&gt; &lt;type&gt;}*
     */</comment>
    <while>while <condition>(<expr><name><name>word</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
        <comment type="block">/* &lt;num&gt;
         */</comment>
        <if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>word</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>num</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"bad expires code, numeric value expected &lt;num&gt; '"</expr></argument>,
                           <argument><expr><name>word</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>

        <comment type="block">/* &lt;type&gt;
         */</comment>
        <expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>word</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
            <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"bad expires code, missing &lt;type&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"years"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>factor</name> = 60 * 60 * 24 * 365</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"months"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>factor</name> = 60 * 60 * 24 * 30</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"weeks"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>factor</name> = 60 * 60 * 24 * 7</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"days"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>factor</name> = 60 * 60 * 24</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"hours"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>factor</name> = 60 * 60</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"minutes"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>factor</name> = 60</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"seconds"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>factor</name> = 1</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"bad expires code, unrecognised &lt;type&gt;"</expr></argument>,
                           <argument><expr>"'"</expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

        <expr_stmt><expr><name>modifier</name> = <name>modifier</name> + <name>factor</name> * <name>num</name></expr>;</expr_stmt>

        <comment type="block">/* next &lt;num&gt;
         */</comment>
        <expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr>*<name>real_code</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%c%d"</expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>modifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_expiresbytype</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_dir_config</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>code</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>dir_config</name> <init>= <expr><name>in_dir_config</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>response</name></decl>, *<decl><type ref="prev"/><name>real_code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>check</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>check</name> = <call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>mime</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>check</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr>"Invalid mimetype: should contain a slash"</expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>(<call><name>strlen</name><argument_list>(<argument><expr>++<name>check</name></expr></argument>)</argument_list></call> == 1) &amp;&amp; (*<name>check</name> == '*')</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>dir_config</name>-&gt;<name>wildcards</name></name> = 1</expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>response</name> = <call><name>check_code</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr>&amp;<name>real_code</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>dir_config</name>-&gt;<name>expiresbytype</name></name></expr></argument>, <argument><expr><name>mime</name></expr></argument>, <argument><expr><name>real_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
                 <argument><expr>"'ExpiresByType "</expr></argument>, <argument><expr><name>mime</name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr>"': "</expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_expiresdefault</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_dir_config</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>code</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>expires_dir_config</name> *</type> <name>dir_config</name> <init>= <expr><name>in_dir_config</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>response</name></decl>, *<decl><type ref="prev"/><name>real_code</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>response</name> = <call><name>check_code</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr>&amp;<name>real_code</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>dir_config</name>-&gt;<name>expiresdefault</name></name> = <name>real_code</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
                   <argument><expr>"'ExpiresDefault "</expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr>"': "</expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>expires_cmds</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ExpiresActive"</expr></argument>, <argument><expr><name>set_expiresactive</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
                 <argument><expr>"Limited to 'on' or 'off'"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"ExpiresByType"</expr></argument>, <argument><expr><name>set_expiresbytype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
                  <argument><expr>"a MIME type followed by an expiry date code"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ExpiresDefault"</expr></argument>, <argument><expr><name>set_expiresdefault</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
                  <argument><expr>"an expiry date code"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_expires_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>new</name> <init>= <expr>(<name>expires_dir_config</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expires_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>base</name> <init>= <expr>(<name>expires_dir_config</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>add</name> <init>= <expr>(<name>expires_dir_config</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>add</name>-&gt;<name>active</name></name> == <name>ACTIVE_DONTCARE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>new</name>-&gt;<name>active</name></name> = <name><name>base</name>-&gt;<name>active</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>new</name>-&gt;<name>active</name></name> = <name><name>add</name>-&gt;<name>active</name></name></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>add</name>-&gt;<name>expiresdefault</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>new</name>-&gt;<name>expiresdefault</name></name> = <name><name>add</name>-&gt;<name>expiresdefault</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>new</name>-&gt;<name>expiresdefault</name></name> = <name><name>base</name>-&gt;<name>expiresdefault</name></name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>wildcards</name></name> = <name><name>add</name>-&gt;<name>wildcards</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>expiresbytype</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>expiresbytype</name></name></expr></argument>,
                                        <argument><expr><name><name>base</name>-&gt;<name>expiresbytype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>new</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Handle the setting of the expiration response header fields according
 * to our criteria.
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_expiration_fields</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>code</name></decl></param>,
                                 <param><decl><type><name>apr_table_t</name> *</type><name>t</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>base</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>additional</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>expires</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>additional_sec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>timestr</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>code</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
    <case>case <expr>'M'</expr>:
        <if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name></expr>)</condition><then> <block>{
            <comment type="block">/* file doesn't exist on disk, so we can't do anything based on
             * modification time.  Note that this does _not_ log an error.
             */</comment>
            <return>return <expr><name>DECLINED</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>base</name> = <name><name>r</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>additional_sec</name> = <call><name>atoi</name><argument_list>(<argument><expr>&amp;<name><name>code</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>additional</name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>additional_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </case><case>case <expr>'A'</expr>:
        <comment type="block">/* there's been some discussion and it's possible that
         * 'access time' will be stored in request structure
         */</comment>
        <expr_stmt><expr><name>base</name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>additional_sec</name> = <call><name>atoi</name><argument_list>(<argument><expr>&amp;<name><name>code</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>additional</name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>additional_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </case><default>default:
        <comment type="block">/* expecting the add_* routines to be case-hardened this
         * is just a reminder that module is beta
         */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01500</expr></argument>)</argument_list></call>
                    "internal error: bad expires code: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
    </default>}</block></switch>

    <expr_stmt><expr><name>expires</name> = <name>base</name> + <name>additional</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>expires</name> &lt; <name><name>r</name>-&gt;<name>request_time</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>expires</name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>,
                     <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"max-age=%" <name>APR_TIME_T_FMT</name></expr></argument>,
                                  <argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name>expires</name> - <name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>timestr</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>APR_RFC822_DATE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_rfc822_date</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"Expires"</expr></argument>, <argument><expr><name>timestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Output filter to set the Expires response header field
 * according to the content-type of the response -- if it hasn't
 * already been set.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>expires_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
                                   <param><decl><type><name>apr_bucket_brigade</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expiry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>t</name></decl>;</decl_stmt>

    <comment type="block">/* Don't add Expires headers to errors */</comment>
    <if>if <condition>(<expr><call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>r</name> = <name><name>f</name>-&gt;<name>r</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>conf</name> = (<name>expires_dir_config</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                       <argument><expr>&amp;<name>expires_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check to see which output header table we should use;
     * mod_cgi loads script fields into r-&gt;err_headers_out,
     * for instance.
     */</comment>
    <expr_stmt><expr><name>expiry</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Expires"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>expiry</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>t</name> = <name><name>r</name>-&gt;<name>err_headers_out</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>expiry</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Expires"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> = <name><name>r</name>-&gt;<name>headers_out</name></name></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>expiry</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * No expiration has been set, so we can apply any managed by
         * this module.  First, check to see if there is an applicable
         * ExpiresByType directive.
         */</comment>
        <expr_stmt><expr><name>expiry</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>expiresbytype</name></name></expr></argument>,
                               <argument><expr><call><name>ap_field_noparam</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>expiry</name> == <name>NULL</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>usedefault</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
            <comment type="block">/*
             * See if we have a wildcard entry for the major type.
             */</comment>
            <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>wildcards</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>char</name> *</type><name>checkmime</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name> *</type><name>spos</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>checkmime</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>spos</name> = <name>checkmime</name> ? <call><name>ap_strchr</name><argument_list>(<argument><expr><name>checkmime</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>spos</name> != <name>NULL</name></expr>)</condition><then> <block>{
                    <comment type="block">/*
                     * Without a '/' character, nothing we have will match.
                     * However, we have one.
                     */</comment>
                    <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr>++<name>spos</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr>*<name>spos</name>++ = '*'</expr>;</expr_stmt>
                        <expr_stmt><expr>*<name>spos</name> = '\0'</expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>checkmime</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>checkmime</name></expr></argument>, <argument><expr>"*"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>expiry</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>expiresbytype</name></name></expr></argument>, <argument><expr><name>checkmime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>usedefault</name> = (<name>expiry</name> == <name>NULL</name>)</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>usedefault</name></expr>)</condition><then> <block>{
                <comment type="block">/*
                 * Use the ExpiresDefault directive
                 */</comment>
                <expr_stmt><expr><name>expiry</name> = <name><name>conf</name>-&gt;<name>expiresdefault</name></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>expiry</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>set_expiration_fields</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>expiry</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expires_insert_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>

    <comment type="block">/* Don't add Expires headers to errors */</comment>
    <if>if <condition>(<expr><call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then></if>
    <comment type="block">/* Say no to subrequests */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main != <name>NULL</name></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name>conf</name> = (<name>expires_dir_config</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                       <argument><expr>&amp;<name>expires_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check to see if the filter is enabled and if there are any applicable
     * config directives for this directory scope
     */</comment>
    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>active</name></name> != <name>ACTIVE_ON</name> ||
        (<call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>expiresbytype</name></name></expr></argument>)</argument_list></call> &amp;&amp; !<name><name>conf</name>-&gt;<name>expiresdefault</name></name>)</expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"MOD_EXPIRES"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* mod_expires needs to run *before* the cache save filter which is
     * AP_FTYPE_CONTENT_SET-1.  Otherwise, our expires won't be honored.
     */</comment>
    <expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"MOD_EXPIRES"</expr></argument>, <argument><expr><name>expires_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>AP_FTYPE_CONTENT_SET</name>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_insert_error_filter</name><argument_list>(<argument><expr><name>expires_insert_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>expires_insert_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>expires</name></expr></argument>)</argument_list></call> =
<block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>create_dir_expires_config</name></expr>,  <comment type="block">/* dir config creater */</comment>
    <expr><name>merge_expires_dir_configs</name></expr>,  <comment type="block">/* dir merger --- default is to override */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* server config */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* merge server configs */</comment>
    <expr><name>expires_cmds</name></expr>,               <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hooks</name></expr>              <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
