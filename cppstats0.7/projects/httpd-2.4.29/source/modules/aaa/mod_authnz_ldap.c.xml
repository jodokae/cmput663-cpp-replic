<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/aaa/mod_authnz_ldap.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ldap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_xlate.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_HAS_LDAP</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> mod_authnz_ldap requires APR-util to have LDAP support built in. To fix add --with-ldap to ./configure.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>default_attributes</name><index>[<expr>3</expr>]</index></name> <init>= <expr><block>{ <expr>"member"</expr>, <expr>"uniqueMember"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>               <comment type="block">/* Pool that this config is allocated from */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
    <decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>lock</name></decl>;</decl_stmt>       <comment type="block">/* Lock for this config */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* These parameters are all derived from the AuthLDAPURL directive */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>url</name></decl>;</decl_stmt>                      <comment type="block">/* String representation of the URL */</comment>

    <decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>;</decl_stmt>                     <comment type="block">/* Name of the LDAP server (or space separated list) */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>                       <comment type="block">/* Port of the LDAP server */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>basedn</name></decl>;</decl_stmt>                   <comment type="block">/* Base DN to do all searches from */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>attribute</name></decl>;</decl_stmt>                <comment type="block">/* Attribute to search for */</comment>
    <decl_stmt><decl><type><name>char</name> **</type><name>attributes</name></decl>;</decl_stmt>              <comment type="block">/* Array of all the attributes to return */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>scope</name></decl>;</decl_stmt>                      <comment type="block">/* Scope of the search */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>filter</name></decl>;</decl_stmt>                   <comment type="block">/* Filter to further limit the search  */</comment>
    <decl_stmt><decl><type><name>deref_options</name></type> <name>deref</name></decl>;</decl_stmt>            <comment type="block">/* how to handle alias dereferening */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>binddn</name></decl>;</decl_stmt>                   <comment type="block">/* DN to bind to server (can be NULL) */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>bindpw</name></decl>;</decl_stmt>                   <comment type="block">/* Password to bind to server (can be NULL) */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>bind_authoritative</name></decl>;</decl_stmt>         <comment type="block">/* If true, will return errors when bind fails */</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>user_is_dn</name></decl>;</decl_stmt>                 <comment type="block">/* If true, r-&gt;user is replaced by DN during authn */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>remote_user_attribute</name></decl>;</decl_stmt>    <comment type="block">/* If set, r-&gt;user is replaced by this attribute during authn */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>compare_dn_on_server</name></decl>;</decl_stmt>       <comment type="block">/* If true, will use server to do DN compare */</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>have_ldap_url</name></decl>;</decl_stmt>              <comment type="block">/* Set if we have found an LDAP url */</comment>

    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>groupattr</name></decl>;</decl_stmt>  <comment type="block">/* List of Group attributes identifying user members. Default:"member uniqueMember" */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>group_attrib_is_dn</name></decl>;</decl_stmt>         <comment type="block">/* If true, the group attribute is the DN, otherwise,
                                        it's the exact string passed by the HTTP client */</comment>
    <decl_stmt><decl><type><name>char</name> **</type><name>sgAttributes</name></decl>;</decl_stmt>            <comment type="block">/* Array of strings constructed (post-config) from subgroupattrs. Last entry is NULL. */</comment>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>subgroupclasses</name></decl>;</decl_stmt> <comment type="block">/* List of object classes of sub-groups. Default:"groupOfNames groupOfUniqueNames" */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>maxNestingDepth</name></decl>;</decl_stmt>            <comment type="block">/* Maximum recursive nesting depth permitted during subgroup processing. Default: 10 */</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>secure</name></decl>;</decl_stmt>                     <comment type="block">/* True if SSL connections are requested */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>authz_prefix</name></decl>;</decl_stmt>             <comment type="block">/* Prefix for environment variables added during authz */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>initial_bind_as_user</name></decl>;</decl_stmt>               <comment type="block">/* true if we should try to bind (to lookup DN) directly with the basic auth username */</comment>
    <decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>bind_regex</name></decl>;</decl_stmt>         <comment type="block">/* basic auth -&gt; bind'able username regex */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bind_subst</name></decl>;</decl_stmt>         <comment type="block">/* basic auth -&gt; bind'able username substitution */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>search_as_user</name></decl>;</decl_stmt>             <comment type="block">/* true if authz searches should be done with the users credentials (when we did authn) */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>compare_as_user</name></decl>;</decl_stmt>            <comment type="block">/* true if authz compares should be done with the users credentials (when we did authn) */</comment>
}</block></struct></type> <name>authn_ldap_config_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>dn</name></decl>;</decl_stmt>                       <comment type="block">/* The saved dn from a successful search */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>user</name></decl>;</decl_stmt>                     <comment type="block">/* The username provided by the client */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vals</name></decl>;</decl_stmt>              <comment type="block">/* The additional values pulled during the DN search*/</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>password</name></decl>;</decl_stmt>                 <comment type="block">/* if this module successfully authenticates, the basic auth password, else null */</comment>
}</block></struct></type> <name>authn_ldap_request_t</name>;</typedef>

<enum>enum <name>auth_ldap_phase</name> <block>{
    <decl><name>LDAP_AUTHN</name></decl>, <decl><name>LDAP_AUTHZ</name></decl>
}</block>;</enum>

<enum>enum <name>auth_ldap_optype</name> <block>{
    <decl><name>LDAP_SEARCH</name></decl>, <decl><name>LDAP_COMPARE</name></decl>, <decl><name>LDAP_COMPARE_AND_SEARCH</name></decl> <comment type="block">/* nested groups */</comment>
}</block>;</enum>

<comment type="block">/* maximum group elements supported */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUPATTR_MAX_ELTS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>authnz_ldap_module</name></decl>;</decl_stmt>

<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>uldap_connection_close</name></expr></argument>)</argument_list></call> *<name>util_ldap_connection_close</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>uldap_connection_find</name></expr></argument>)</argument_list></call> *<name>util_ldap_connection_find</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>uldap_cache_comparedn</name></expr></argument>)</argument_list></call> *<name>util_ldap_cache_comparedn</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>uldap_cache_compare</name></expr></argument>)</argument_list></call> *<name>util_ldap_cache_compare</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>uldap_cache_check_subgroups</name></expr></argument>)</argument_list></call> *<name>util_ldap_cache_check_subgroups</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>uldap_cache_checkuserid</name></expr></argument>)</argument_list></call> *<name>util_ldap_cache_checkuserid</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>uldap_cache_getuserdn</name></expr></argument>)</argument_list></call> *<name>util_ldap_cache_getuserdn</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>uldap_ssl_supported</name></expr></argument>)</argument_list></call> *<name>util_ldap_ssl_supported</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>charset_conversions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>to_charset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>           <comment type="block">/* UTF-8 identifier derived from the charset.conv file */</comment>


<comment type="block">/* Derive a code page ID give a language name or ID */</comment>
<function><type><specifier>static</specifier> <name>char</name>*</type> <name>derive_codepage_from_lang</name> <parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>language</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>charset</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>language</name></expr>)</condition><then>          <comment type="block">/* our default codepage */</comment>
        <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"ISO-8859-1"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr><name>charset</name> = (<name>char</name>*) <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>charset_conversions</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>charset</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>language</name><index>[<expr>2</expr>]</index></name> = '\0'</expr>;</expr_stmt>
        <expr_stmt><expr><name>charset</name> = (<name>char</name>*) <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>charset_conversions</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>charset</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>charset</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>charset</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_xlate_t</name>*</type> <name>get_conv_set</name> <parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>lang_line</name> <init>= <expr>(<name>char</name>*)<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"accept-language"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>lang</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xlate_t</name> *</type><name>convset</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>lang_line</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>lang_line</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>lang_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><expr><name>lang</name> = <name>lang_line</name></expr>;</init><condition><expr>*<name>lang</name></expr>;</condition><incr><expr><name>lang</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr>(*<name>lang</name> == ',') || (*<name>lang</name> == ';')</expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>lang</name> = '\0'</expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>lang</name> = <call><name>derive_codepage_from_lang</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>lang_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>lang</name> &amp;&amp; (<call><name>apr_xlate_open</name><argument_list>(<argument><expr>&amp;<name>convset</name></expr></argument>, <argument><expr><name>to_charset</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
            <return>return <expr><name>convset</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>authn_ldap_xlate_password</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>sent_password</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_xlate_t</name> *</type><name>convset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>inbytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>outbytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>outbuf</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>charset_conversions</name> &amp;&amp; (<name>convset</name> = <call><name>get_conv_set</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr> )</condition><then> <block>{
        <expr_stmt><expr><name>inbytes</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>sent_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>outbytes</name> = (<name>inbytes</name>+1)*3</expr>;</expr_stmt>
        <expr_stmt><expr><name>outbuf</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>outbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Convert the password to UTF-8. */</comment>
        <if>if <condition>(<expr><call><name>apr_xlate_conv_buffer</name><argument_list>(<argument><expr><name>convset</name></expr></argument>, <argument><expr><name>sent_password</name></expr></argument>, <argument><expr>&amp;<name>inbytes</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>,
                                  <argument><expr>&amp;<name>outbytes</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then>
            <return>return <expr><name>outbuf</name></expr>;</return></then></if>
    }</block></then></if>

    <return>return <expr><name>sent_password</name></expr>;</return>
}</block></function>


<comment type="block">/*
 * Build the search filter, or at least as much of the search filter that
 * will fit in the buffer. We don't worry about the buffer not being able
 * to hold the entire filter. If the buffer wasn't big enough to hold the
 * filter, ldap_search_s will complain, but the only situation where this
 * is likely to happen is if the client sent a really, really long
 * username, most likely as part of an attack.
 *
 * The search filter consists of the filter provided with the URL,
 * combined with a filter made up of the attribute provided with the URL,
 * and the actual username passed by the HTTP client. For example, assume
 * that the LDAP URL is
 *
 *   ldap://ldap.airius.com/ou=People, o=Airius?uid??(posixid=*)
 *
 * Further, assume that the userid passed by the client was `userj'.  The
 * search filter will be (&amp;(posixid=*)(uid=userj)).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_LENGTH</name></cpp:macro> <cpp:value>MAX_STRING_LEN</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>authn_ldap_build_filter</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>filtbuf</name></decl></param>,
                             <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>sent_user</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>sent_filter</name></decl></param>,
                             <param><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>q</name></decl>, *<decl><type ref="prev"/><name>filtbuf_end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>user</name></decl>, *<decl><type ref="prev"/><name>filter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xlate_t</name> *</type><name>convset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>inbytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>outbytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>outbuf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nofilter</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>sent_user</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>user</name> = <call><name>apr_pstrdup</name> <argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
        <return>return;</return></else></if>

    <if>if <condition>(<expr><name>sent_filter</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>filter</name> = <call><name>apr_pstrdup</name> <argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sent_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
        <expr_stmt><expr><name>filter</name> = <name><name>sec</name>-&gt;<name>filter</name></name></expr>;</expr_stmt></else></if>

    <if>if <condition>(<expr><name>charset_conversions</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>convset</name> = <call><name>get_conv_set</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>convset</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>inbytes</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>outbytes</name> = (<name>inbytes</name>+1)*3</expr>;</expr_stmt>
        <expr_stmt><expr><name>outbuf</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>outbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Convert the user name to UTF-8.  This is only valid for LDAP v3 */</comment>
        <if>if <condition>(<expr><call><name>apr_xlate_conv_buffer</name><argument_list>(<argument><expr><name>convset</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr>&amp;<name>inbytes</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>, <argument><expr>&amp;<name>outbytes</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>user</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/*
     * Create the first part of the filter, which consists of the
     * config-supplied portions.
     */</comment>

    <if>if <condition>(<expr>(<name>nofilter</name> = (<name>filter</name> &amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{ 
        <expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name>FILTER_LENGTH</name></expr></argument>, <argument><expr>"(%s="</expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>attribute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{ 
        <expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name>FILTER_LENGTH</name></expr></argument>, <argument><expr>"(&amp;(%s)(%s="</expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>attribute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/*
     * Now add the client-supplied username to the filter, ensuring that any
     * LDAP filter metachars are escaped.
     */</comment>
    <expr_stmt><expr><name>filtbuf_end</name> = <name>filtbuf</name> + <name>FILTER_LENGTH</name> - 1</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MICROSOFT_LDAPSDK</name></expr></cpp:if>
    <for>for (<init><expr><name>p</name> = <name>user</name></expr>, <expr><name>q</name>=<name>filtbuf</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>)</argument_list></call></expr>;</init>
         <condition><expr>*<name>p</name> &amp;&amp; <name>q</name> &lt; <name>filtbuf_end</name></expr>;</condition> <incr/>) <block>{
        <if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr>"*()\\"</expr></argument>, <argument><expr>*<name>p</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
            <if>if <condition>( <expr><name>q</name> + 3 &gt;= <name>filtbuf_end</name></expr>)</condition><then>
              <break>break;</break></then></if>  <comment type="block">/* Don't write part of escape sequence if we can't write all of it */</comment>
            <expr_stmt><expr>*<name>q</name>++ = '\\'</expr>;</expr_stmt>
            <switch>switch <condition>( <expr>*<name>p</name>++</expr> )</condition>
            <block>{
              <case>case <expr>'*'</expr>:
                <expr_stmt><expr>*<name>q</name>++ = '2'</expr>;</expr_stmt>
                <expr_stmt><expr>*<name>q</name>++ = 'a'</expr>;</expr_stmt>
                <break>break;</break>
              </case><case>case <expr>'('</expr>:
                <expr_stmt><expr>*<name>q</name>++ = '2'</expr>;</expr_stmt>
                <expr_stmt><expr>*<name>q</name>++ = '8'</expr>;</expr_stmt>
                <break>break;</break>
              </case><case>case <expr>')'</expr>:
                <expr_stmt><expr>*<name>q</name>++ = '2'</expr>;</expr_stmt>
                <expr_stmt><expr>*<name>q</name>++ = '9'</expr>;</expr_stmt>
                <break>break;</break>
              </case><case>case <expr>'\\'</expr>:
                <expr_stmt><expr>*<name>q</name>++ = '5'</expr>;</expr_stmt>
                <expr_stmt><expr>*<name>q</name>++ = 'c'</expr>;</expr_stmt>
                <break>break;</break>
                        </case>}</block></switch>
        }</block></then>
        <else>else
            <expr_stmt><expr>*<name>q</name>++ = *<name>p</name>++</expr>;</expr_stmt></else></if>
    }</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <for>for (<init><expr><name>p</name> = <name>user</name></expr>, <expr><name>q</name>=<name>filtbuf</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>)</argument_list></call></expr>;</init>
         <condition><expr>*<name>p</name> &amp;&amp; <name>q</name> &lt; <name>filtbuf_end</name></expr>;</condition> <incr><expr>*<name>q</name>++ = *<name>p</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr>"*()\\"</expr></argument>, <argument><expr>*<name>p</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>q</name>++ = '\\'</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>q</name> &gt;= <name>filtbuf_end</name></expr>)</condition><then> <block>{
              <break>break;</break>
            }</block></then></if>
        }</block></then></if>
    }</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr>*<name>q</name> = '\0'</expr>;</expr_stmt>

    <comment type="block">/*
     * Append the closing parens of the filter, unless doing so would
     * overrun the buffer.
     */</comment>

    <if>if <condition>(<expr><name>nofilter</name></expr>)</condition><then> <block>{ 
        <if>if <condition>(<expr><name>q</name> + 1 &lt;= <name>filtbuf_end</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>, <argument><expr>")"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then> 
    <else>else <block>{ 
        <if>if <condition>(<expr><name>q</name> + 2 &lt;= <name>filtbuf_end</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>, <argument><expr>"))"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>

}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_authnz_ldap_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>d</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>=
        <expr>(<name>authn_ldap_config_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_ldap_config_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>sec</name>-&gt;<name>pool</name></name> = <name>p</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
    <expr_stmt><expr><call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>sec</name>-&gt;<name>lock</name></name></expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
    sec-&gt;authz_enabled = 1;
*/</comment>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>groupattr</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>GROUPATTR_MAX_ELTS</name></expr></argument>,
                                    <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>mod_auth_ldap_groupattr_entry_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>subgroupclasses</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>GROUPATTR_MAX_ELTS</name></expr></argument>,
                                    <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>mod_auth_ldap_groupattr_entry_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sec</name>-&gt;<name>have_ldap_url</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>url</name></name> = ""</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>host</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>binddn</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>bindpw</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>bind_authoritative</name></name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>deref</name></name> = <name>always</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>group_attrib_is_dn</name></name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>secure</name></name> = -1</expr>;</expr_stmt>   <comment type="block">/*Initialize to unset*/</comment>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>maxNestingDepth</name></name> = 10</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>sgAttributes</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * <name>GROUPATTR_MAX_ELTS</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sec</name>-&gt;<name>user_is_dn</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>remote_user_attribute</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>compare_dn_on_server</name></name> = 0</expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sec</name>-&gt;<name>authz_prefix</name></name> = <name>AUTHZ_PREFIX</name></expr>;</expr_stmt>

    <return>return <expr><name>sec</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>authnz_ldap_cleanup_connection_close</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>param</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>util_ldap_connection_close</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>set_request_vars</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument>enum <expr><name>auth_ldap_phase</name> <name>phase</name></expr></argument>)</argument_list> <block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>prefix_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>remote_user_attribute_set</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_request_t</name> *</type><name>req</name> <init>=
        <expr>(<name>authn_ldap_request_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>=
        <expr>(<name>authn_ldap_config_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vals</name> <init>= <expr><name><name>req</name>-&gt;<name>vals</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>prefix</name> = (<name>phase</name> == <name>LDAP_AUTHN</name>) ? <name>AUTHN_PREFIX</name> : <name><name>sec</name>-&gt;<name>authz_prefix</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>prefix_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>attributes</name></name> &amp;&amp; <name>vals</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>e</name> <init>= <expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name><name>sec</name>-&gt;<name>attributes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>char</name> *</type><name>str</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>attributes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>prefix_len</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{
                <expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> = <call><name>apr_toupper</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> ? <name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* handle remote_user_attribute, if set */</comment>
            <if>if <condition>(<expr>(<name>phase</name> == <name>LDAP_AUTHN</name>) &amp;&amp;
                <name><name>sec</name>-&gt;<name>remote_user_attribute</name></name> &amp;&amp;
                !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>remote_user_attribute</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>attributes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = (<name>char</name> *)<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>remote_user_attribute_set</name> = 1</expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
        }</block></while>
    }</block></then></if>
    <return>return <expr><name>remote_user_attribute_set</name></expr>;</return>
}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ldap_determine_binddn</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>=
        <expr>(<name>authn_ldap_config_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>result</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>regm</name><index>[<expr><name>AP_MAX_REG_MATCH</name></expr>]</index></name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>NULL</name> == <name>user</name> || <name>NULL</name> == <name>sec</name> || !<name><name>sec</name>-&gt;<name>bind_regex</name></name> || !<name><name>sec</name>-&gt;<name>bind_subst</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>bind_regex</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>substituted</name> <init>= <expr><call><name>ap_pregsub</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>bind_subst</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>NULL</name> != <name>substituted</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name>substituted</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"LDAP_BINDASUSER"</expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
}</block></function>


<comment type="block">/* Some LDAP servers restrict who can search or compare, and the hard-coded ID
 * might be good for the DN lookup but not for later operations.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>util_ldap_connection_t</name> *</type><name>get_connection_for_authz</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument>enum <expr><name>auth_ldap_optype</name> <name>type</name></expr></argument>)</argument_list> <block>{
    <decl_stmt><decl><type><name>authn_ldap_request_t</name> *</type><name>req</name> <init>=
        <expr>(<name>authn_ldap_request_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>=
        <expr>(<name>authn_ldap_config_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> *</type><name>binddn</name> <init>= <expr><name><name>sec</name>-&gt;<name>binddn</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>bindpw</name> <init>= <expr><name><name>sec</name>-&gt;<name>bindpw</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* If the per-request config isn't set, we didn't authenticate this user, and leave the default credentials */</comment>
    <if>if <condition>(<expr><name>req</name> &amp;&amp; <name><name>req</name>-&gt;<name>password</name></name> &amp;&amp;
         ((<name>type</name> == <name>LDAP_SEARCH</name> &amp;&amp; <name><name>sec</name>-&gt;<name>search_as_user</name></name>)    ||
          (<name>type</name> == <name>LDAP_COMPARE</name> &amp;&amp; <name><name>sec</name>-&gt;<name>compare_as_user</name></name>)  ||
          (<name>type</name> == <name>LDAP_COMPARE_AND_SEARCH</name> &amp;&amp; <name><name>sec</name>-&gt;<name>compare_as_user</name></name> &amp;&amp; <name><name>sec</name>-&gt;<name>search_as_user</name></name>))</expr>)</condition><then><block>{
            <expr_stmt><expr><name>binddn</name> = <name><name>req</name>-&gt;<name>dn</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bindpw</name> = <name><name>req</name>-&gt;<name>password</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name>util_ldap_connection_find</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>host</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>port</name></name></expr></argument>,
                                     <argument><expr><name>binddn</name></expr></argument>, <argument><expr><name>bindpw</name></expr></argument>,
                                     <argument><expr><name><name>sec</name>-&gt;<name>deref</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>secure</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></decl></decl_stmt>
<comment type="block">/*
 * Authentication Phase
 * --------------------
 *
 * This phase authenticates the credentials the user has sent with
 * the request (ie the username and password are checked). This is done
 * by making an attempt to bind to the LDAP server using this user's
 * DN and the supplied password.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>authn_status</name></type> <name>authn_ldap_check_password</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
                                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>filtbuf</name><index>[<expr><name>FILTER_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>=
        <expr>(<name>authn_ldap_config_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>remote_user_attribute_set</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>utfpassword</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>authn_ldap_request_t</name> *</type><name>req</name> <init>=
        <expr>(<name>authn_ldap_request_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_ldap_request_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
    if (!sec-&gt;enabled) {
        return AUTH_USER_NOT_FOUND;
    }
*/</comment>

    <comment type="block">/*
     * Basic sanity checks before any LDAP operations even happen.
     */</comment>
    <if>if <condition>(<expr>!<name><name>sec</name>-&gt;<name>have_ldap_url</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02558</expr></argument>)</argument_list></call> 
                      "no AuthLDAPURL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* There is a good AuthLDAPURL, right? */</comment>
    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>host</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>binddn</name> <init>= <expr><name><name>sec</name>-&gt;<name>binddn</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bindpw</name> <init>= <expr><name><name>sec</name>-&gt;<name>bindpw</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>initial_bind_as_user</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bindpw</name> = <name>password</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>binddn</name> = <call><name>ldap_determine_binddn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>ldc</name> = <call><name>util_ldap_connection_find</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>host</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>port</name></name></expr></argument>,
                                       <argument><expr><name>binddn</name></expr></argument>, <argument><expr><name>bindpw</name></expr></argument>,
                                       <argument><expr><name><name>sec</name>-&gt;<name>deref</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>secure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01690</expr></argument>)</argument_list></call>
                      "auth_ldap authenticate: no sec-&gt;host - weird...?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
    }</block></else></if>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01691</expr></argument>)</argument_list></call>
                  "auth_ldap authenticate: using URL %s"</expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get the password that the client sent */</comment>
    <if>if <condition>(<expr><name>password</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01692</expr></argument>)</argument_list></call>
                      "auth_ldap authenticate: no password specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>util_ldap_connection_close</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>user</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01693</expr></argument>)</argument_list></call>
                      "auth_ldap authenticate: no user specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>util_ldap_connection_close</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* build the username filter */</comment>
    <expr_stmt><expr><call><name>authn_ldap_build_filter</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
                      <argument><expr>"auth_ldap authenticate: final authn filter is %s"</expr></argument>, <argument><expr><name>filtbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* convert password to utf-8 */</comment>
    <expr_stmt><expr><name>utfpassword</name> = <call><name>authn_ldap_xlate_password</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* do the user search */</comment>
    <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_checkuserid</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>basedn</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>scope</name></name></expr></argument>,
                                         <argument><expr><name><name>sec</name>-&gt;<name>attributes</name></name></expr></argument>, <argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name>utfpassword</name></expr></argument>,
                                         <argument><expr>&amp;<name>dn</name></expr></argument>, <argument><expr>&amp;(<name><name>req</name>-&gt;<name>vals</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>util_ldap_connection_close</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* handle bind failure */</comment>
    <if>if <condition>(<expr><name>result</name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<name><name>sec</name>-&gt;<name>bind_authoritative</name></name></expr>)</condition><then> <block>{
           <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01694</expr></argument>)</argument_list></call>
                      "auth_ldap authenticate: user %s authentication failed; "
                      "URI %s [%s][%s] (not authoritative)"</expr></argument>,
                      <argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <return>return <expr><name>AUTH_USER_NOT_FOUND</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01695</expr></argument>)</argument_list></call>
                      "auth_ldap authenticate: "
                      "user %s authentication failed; URI %s [%s][%s]"</expr></argument>,
                      <argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* talking to a primitive LDAP server (like RACF-over-LDAP) that doesn't return specific errors */</comment>
        <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>filter</name></name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call> &amp;&amp; <name>LDAP_OTHER</name> == <name>result</name></expr>)</condition><then> <block>{ 
            <return>return <expr><name>AUTH_USER_NOT_FOUND</name></expr>;</return>
        }</block></then></if>

        <return>return <expr>(<name>LDAP_NO_SUCH_OBJECT</name> == <name>result</name>) ? <name>AUTH_USER_NOT_FOUND</name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LDAP_SECURITY_ERROR</name></cpp:ifdef>
                 : (<call><name>LDAP_SECURITY_ERROR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call>) ? <name>AUTH_DENIED</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                 : (<name>LDAP_INAPPROPRIATE_AUTH</name> == <name>result</name>) ? <name>AUTH_DENIED</name>
                 : (<name>LDAP_INVALID_CREDENTIALS</name> == <name>result</name>) ? <name>AUTH_DENIED</name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LDAP_INSUFFICIENT_ACCESS</name></cpp:ifdef>
                 : (<name>LDAP_INSUFFICIENT_ACCESS</name> == <name>result</name>) ? <name>AUTH_DENIED</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LDAP_INSUFFICIENT_RIGHTS</name></cpp:ifdef>
                 : (<name>LDAP_INSUFFICIENT_RIGHTS</name> == <name>result</name>) ? <name>AUTH_DENIED</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LDAP_CONSTRAINT_VIOLATION</name></cpp:ifdef>
    <comment type="block">/* At least Sun Directory Server sends this if a user is
     * locked. This is not covered by LDAP_SECURITY_ERROR.
     */</comment>
                 : (<name>LDAP_CONSTRAINT_VIOLATION</name> == <name>result</name>) ? <name>AUTH_DENIED</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                 : <name>AUTH_GENERAL_ERROR</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* mark the user and DN */</comment>
    <expr_stmt><expr><name><name>req</name>-&gt;<name>dn</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name>-&gt;<name>user</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name>-&gt;<name>password</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>user_is_dn</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = <name><name>req</name>-&gt;<name>dn</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* add environment variables */</comment>
    <expr_stmt><expr><name>remote_user_attribute_set</name> = <call><name>set_request_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_AUTHN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* sanity check */</comment>
    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>remote_user_attribute</name></name> &amp;&amp; !<name>remote_user_attribute_set</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01696</expr></argument>)</argument_list></call>
                  "auth_ldap authenticate: "
                  "REMOTE_USER was to be set with attribute '%s', "
                  "but this attribute was not requested for in the "
                  "LDAP query for the user. REMOTE_USER will fall "
                  "back to username or DN as appropriate."</expr></argument>,
                  <argument><expr><name><name>sec</name>-&gt;<name>remote_user_attribute</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01697</expr></argument>)</argument_list></call>
                  "auth_ldap authenticate: accepting %s"</expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>AUTH_GRANTED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>ldapuser_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_args</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_request_t</name> *</type><name>req</name> <init>=
        <expr>(<name>authn_ldap_request_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>=
        <expr>(<name>authn_ldap_config_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ap_expr_info_t</name> *</type><name>expr</name> <init>= <expr><name>parsed_require_args</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>w</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>filtbuf</name><index>[<expr><name>FILTER_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>AUTHZ_DENIED_NO_USER</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>sec</name>-&gt;<name>have_ldap_url</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>host</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ldc</name> = <call><name>get_connection_for_authz</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_COMPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>,
                                  <argument><expr><name>authnz_ldap_cleanup_connection_close</name></expr></argument>,
                                  <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01698</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: no sec-&gt;host - weird...?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></else></if>

    <comment type="block">/*
     * If we have been authenticated by some other module than mod_authnz_ldap,
     * the req structure needed for authorization needs to be created
     * and populated with the userid and DN of the account in LDAP
     */</comment>


    <if>if <condition>(<expr>!<call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01699</expr></argument>)</argument_list></call>
            "ldap authorize: Userid is blank, AuthType=%s"</expr></argument>,
            <argument><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if<condition>(<expr>!<name>req</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01700</expr></argument>)</argument_list></call>
            "ldap authorize: Creating LDAP req structure"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>req</name> = (<name>authn_ldap_request_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_ldap_request_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Build the username filter */</comment>
        <expr_stmt><expr><call><name>authn_ldap_build_filter</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Search for the user DN */</comment>
        <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_getuserdn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>basedn</name></name></expr></argument>,
             <argument><expr><name><name>sec</name>-&gt;<name>scope</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>attributes</name></name></expr></argument>, <argument><expr><name>filtbuf</name></expr></argument>, <argument><expr>&amp;<name>dn</name></expr></argument>, <argument><expr>&amp;(<name><name>req</name>-&gt;<name>vals</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Search failed, log error and return failure */</comment>
        <if>if<condition>(<expr><name>result</name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01701</expr></argument>)</argument_list></call>
                "auth_ldap authorise: User DN not found, %s"</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name>-&gt;<name>dn</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name>-&gt;<name>user</name></name> = <name><name>r</name>-&gt;<name>user</name></name></expr>;</expr_stmt>

    }</block></then></if>

    <if>if <condition>(<expr><name><name>req</name>-&gt;<name>dn</name></name> == <name>NULL</name> || <call><name>strlen</name><argument_list>(<argument><expr><name><name>req</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01702</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: require user: user's DN has not "
                      "been defined; failing authorization"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>require</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02585</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: require user: Can't evaluate expression: %s"</expr></argument>,
                      <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * First do a whole-line compare, in case it's something like
     *   require user Babs Jensen
     */</comment>
    <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_compare</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>dn</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>attribute</name></name></expr></argument>, <argument><expr><name>require</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch<condition>(<expr><name>result</name></expr>)</condition> <block>{
        <case>case <expr><name>LDAP_COMPARE_TRUE</name></expr>: <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01703</expr></argument>)</argument_list></call>
                          "auth_ldap authorize: require user: authorization "
                          "successful"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>set_request_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_AUTHZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
        }</block>
        </case><default>default: <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01704</expr></argument>)</argument_list></call>
                          "auth_ldap authorize: require user: "
                          "authorization failed [%s][%s]"</expr></argument>,
                          <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
    </default>}</block></switch>

    <comment type="block">/*
     * Now break apart the line and compare each word on it
     */</comment>
    <expr_stmt><expr><name>t</name> = <name>require</name></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call>) &amp;&amp; <name><name>w</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
        <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_compare</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>dn</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>attribute</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch<condition>(<expr><name>result</name></expr>)</condition> <block>{
            <case>case <expr><name>LDAP_COMPARE_TRUE</name></expr>: <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01705</expr></argument>)</argument_list></call>
                              "auth_ldap authorize: "
                              "require user: authorization successful"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>set_request_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_AUTHZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
            }</block>
            </case><default>default: <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01706</expr></argument>)</argument_list></call>
                              "auth_ldap authorize: "
                              "require user: authorization failed [%s][%s]"</expr></argument>,
                              <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
        </default>}</block></switch>
    }</block></while>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01707</expr></argument>)</argument_list></call>
                  "auth_ldap authorize user: authorization denied for "
                  "user %s to %s"</expr></argument>,
                  <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>ldapgroup_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_args</name></decl></param>,
                                                  <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_request_t</name> *</type><name>req</name> <init>=
        <expr>(<name>authn_ldap_request_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>=
        <expr>(<name>authn_ldap_config_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ap_expr_info_t</name> *</type><name>expr</name> <init>= <expr><name>parsed_require_args</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>filtbuf</name><index>[<expr><name>FILTER_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>mod_auth_ldap_groupattr_entry_t</name> *</type><name>ent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>AUTHZ_DENIED_NO_USER</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>sec</name>-&gt;<name>have_ldap_url</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>host</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ldc</name> = <call><name>get_connection_for_authz</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_COMPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* for the top-level group only */</comment>
        <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>,
                                  <argument><expr><name>authnz_ldap_cleanup_connection_close</name></expr></argument>,
                                  <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01708</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: no sec-&gt;host - weird...?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></else></if>

    <comment type="block">/*
     * If there are no elements in the group attribute array, the default should be
     * member and uniquemember; populate the array now.
     */</comment>
    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>groupattr</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type>struct <name>mod_auth_ldap_groupattr_entry_t</name> *</type><name>grp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
        <expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>grp</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>groupattr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>grp</name>-&gt;<name>name</name></name> = "member"</expr>;</expr_stmt>
        <expr_stmt><expr><name>grp</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>groupattr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>grp</name>-&gt;<name>name</name></name> = "uniqueMember"</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
        <expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>

    <comment type="block">/*
     * If there are no elements in the sub group classes array, the default
     * should be groupOfNames and groupOfUniqueNames; populate the array now.
     */</comment>
    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>subgroupclasses</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type>struct <name>mod_auth_ldap_groupattr_entry_t</name> *</type><name>grp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
        <expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>grp</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>subgroupclasses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>grp</name>-&gt;<name>name</name></name> = "groupOfNames"</expr>;</expr_stmt>
        <expr_stmt><expr><name>grp</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>subgroupclasses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>grp</name>-&gt;<name>name</name></name> = "groupOfUniqueNames"</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
        <expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>

    <comment type="block">/*
     * If we have been authenticated by some other module than mod_auth_ldap,
     * the req structure needed for authorization needs to be created
     * and populated with the userid and DN of the account in LDAP
     */</comment>

    <if>if <condition>(<expr>!<call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01709</expr></argument>)</argument_list></call>
            "ldap authorize: Userid is blank, AuthType=%s"</expr></argument>,
            <argument><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if<condition>(<expr>!<name>req</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01710</expr></argument>)</argument_list></call>
            "ldap authorize: Creating LDAP req structure"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>req</name> = (<name>authn_ldap_request_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_ldap_request_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Build the username filter */</comment>
        <expr_stmt><expr><call><name>authn_ldap_build_filter</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Search for the user DN */</comment>
        <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_getuserdn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>basedn</name></name></expr></argument>,
             <argument><expr><name><name>sec</name>-&gt;<name>scope</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>attributes</name></name></expr></argument>, <argument><expr><name>filtbuf</name></expr></argument>, <argument><expr>&amp;<name>dn</name></expr></argument>, <argument><expr>&amp;(<name><name>req</name>-&gt;<name>vals</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Search failed, log error and return failure */</comment>
        <if>if<condition>(<expr><name>result</name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01711</expr></argument>)</argument_list></call>
                "auth_ldap authorise: User DN not found, %s"</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name>-&gt;<name>dn</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name>-&gt;<name>user</name></name> = <name><name>r</name>-&gt;<name>user</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>ent</name> = (struct <name>mod_auth_ldap_groupattr_entry_t</name> *) <name><name>sec</name>-&gt;<name>groupattr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>group_attrib_is_dn</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>req</name>-&gt;<name>dn</name></name> == <name>NULL</name> || <call><name>strlen</name><argument_list>(<argument><expr><name><name>req</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01712</expr></argument>)</argument_list></call>
                          "auth_ldap authorize: require group: user's DN has "
                          "not been defined; failing authorization for user %s"</expr></argument>,
                          <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
        }</block></then></if>
    }</block></then>
    <else>else <block>{
        <if>if <condition>(<expr><name><name>req</name>-&gt;<name>user</name></name> == <name>NULL</name> || <call><name>strlen</name><argument_list>(<argument><expr><name><name>req</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <comment type="block">/* We weren't called in the authentication phase, so we didn't have a
             * chance to set the user field. Do so now. */</comment>
            <expr_stmt><expr><name><name>req</name>-&gt;<name>user</name></name> = <name><name>r</name>-&gt;<name>user</name></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if>

    <expr_stmt><expr><name>require</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02586</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: require group: Can't evaluate expression: %s"</expr></argument>,
                      <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>t</name> = <name>require</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01713</expr></argument>)</argument_list></call>
                  "auth_ldap authorize: require group: testing for group "
                  "membership in \"%s\""</expr></argument>,
                  <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* PR52464 exhaust attrs in base group before checking subgroups */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>sec</name>-&gt;<name>groupattr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01714</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: require group: testing for %s: "
                      "%s (%s)"</expr></argument>,
                      <argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>,
                      <argument><expr><name><name>sec</name>-&gt;<name>group_attrib_is_dn</name></name> ? <name><name>req</name>-&gt;<name>dn</name></name> : <name><name>req</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_compare</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>,
                             <argument><expr><name><name>sec</name>-&gt;<name>group_attrib_is_dn</name></name> ? <name><name>req</name>-&gt;<name>dn</name></name> : <name><name>req</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>LDAP_COMPARE_TRUE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01715</expr></argument>)</argument_list></call>
                          "auth_ldap authorize: require group: "
                          "authorization successful (attribute %s) "
                          "[%s][%d - %s]"</expr></argument>,
                          <argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>,
                          <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>set_request_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_AUTHZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
        }</block></then>
        <else>else <block>{ 
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01719</expr></argument>)</argument_list></call>
                              "auth_ldap authorize: require group \"%s\": "
                              "didn't match with attr %s [%s][%d - %s]"</expr></argument>,
                              <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, 
                              <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>sec</name>-&gt;<name>groupattr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <comment type="block">/* nested groups need searches and compares, so grab a new handle */</comment>
        <expr_stmt><expr><call><name>authnz_ldap_cleanup_connection_close</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>,<argument><expr><name>authnz_ldap_cleanup_connection_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ldc</name> = <call><name>get_connection_for_authz</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_COMPARE_AND_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>,
                                  <argument><expr><name>authnz_ldap_cleanup_connection_close</name></expr></argument>,
                                  <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01716</expr></argument>)</argument_list></call>
                       "auth_ldap authorise: require group \"%s\": "
                       "failed [%s][%d - %s], checking sub-groups"</expr></argument>,
                       <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_check_subgroups</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>,
                                                 <argument><expr><name><name>sec</name>-&gt;<name>group_attrib_is_dn</name></name> ? <name><name>req</name>-&gt;<name>dn</name></name> : <name><name>req</name>-&gt;<name>user</name></name></expr></argument>,
                                                 <argument><expr><name><name>sec</name>-&gt;<name>sgAttributes</name><index>[<expr>0</expr>]</index></name> ? <name><name>sec</name>-&gt;<name>sgAttributes</name></name> : <name>default_attributes</name></expr></argument>,
                                                 <argument><expr><name><name>sec</name>-&gt;<name>subgroupclasses</name></name></expr></argument>,
                                                 <argument><expr>0</expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>maxNestingDepth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>LDAP_COMPARE_TRUE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01717</expr></argument>)</argument_list></call>
                          "auth_ldap authorise: require group "
                          "(sub-group): authorisation successful "
                          "(attribute %s) [%s][%d - %s]"</expr></argument>,
                          <argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>,
                          <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>set_request_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_AUTHZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01718</expr></argument>)</argument_list></call>
                          "auth_ldap authorise: require group "
                          "(sub-group) \"%s\": didn't match with attr %s "
                          "[%s][%d - %s]"</expr></argument>,
                          <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, 
                          <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01720</expr></argument>)</argument_list></call>
                  "auth_ldap authorize group: authorization denied for "
                  "user %s to %s"</expr></argument>,
                  <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>ldapdn_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_args</name></decl></param>,
                                               <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_request_t</name> *</type><name>req</name> <init>=
        <expr>(<name>authn_ldap_request_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>=
        <expr>(<name>authn_ldap_config_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ap_expr_info_t</name> *</type><name>expr</name> <init>= <expr><name>parsed_require_args</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>filtbuf</name><index>[<expr><name>FILTER_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>AUTHZ_DENIED_NO_USER</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>sec</name>-&gt;<name>have_ldap_url</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>host</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ldc</name> = <call><name>get_connection_for_authz</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* _comparedn is a searche */</comment>
        <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>,
                                  <argument><expr><name>authnz_ldap_cleanup_connection_close</name></expr></argument>,
                                  <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01721</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: no sec-&gt;host - weird...?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></else></if>

    <comment type="block">/*
     * If we have been authenticated by some other module than mod_auth_ldap,
     * the req structure needed for authorization needs to be created
     * and populated with the userid and DN of the account in LDAP
     */</comment>

    <if>if <condition>(<expr>!<call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01722</expr></argument>)</argument_list></call>
            "ldap authorize: Userid is blank, AuthType=%s"</expr></argument>,
            <argument><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if<condition>(<expr>!<name>req</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01723</expr></argument>)</argument_list></call>
            "ldap authorize: Creating LDAP req structure"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>req</name> = (<name>authn_ldap_request_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_ldap_request_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Build the username filter */</comment>
        <expr_stmt><expr><call><name>authn_ldap_build_filter</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Search for the user DN */</comment>
        <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_getuserdn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>basedn</name></name></expr></argument>,
             <argument><expr><name><name>sec</name>-&gt;<name>scope</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>attributes</name></name></expr></argument>, <argument><expr><name>filtbuf</name></expr></argument>, <argument><expr>&amp;<name>dn</name></expr></argument>, <argument><expr>&amp;(<name><name>req</name>-&gt;<name>vals</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Search failed, log error and return failure */</comment>
        <if>if<condition>(<expr><name>result</name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01724</expr></argument>)</argument_list></call>
                "auth_ldap authorise: User DN not found with filter %s: %s"</expr></argument>, <argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name>-&gt;<name>dn</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name>-&gt;<name>user</name></name> = <name><name>r</name>-&gt;<name>user</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>require</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02587</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: require dn: Can't evaluate expression: %s"</expr></argument>,
                      <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>t</name> = <name>require</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>req</name>-&gt;<name>dn</name></name> == <name>NULL</name> || <call><name>strlen</name><argument_list>(<argument><expr><name><name>req</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01725</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: require dn: user's DN has not "
                      "been defined; failing authorization"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_comparedn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>dn</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>compare_dn_on_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch<condition>(<expr><name>result</name></expr>)</condition> <block>{
        <case>case <expr><name>LDAP_COMPARE_TRUE</name></expr>: <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01726</expr></argument>)</argument_list></call>
                          "auth_ldap authorize: "
                          "require dn: authorization successful"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>set_request_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_AUTHZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
        }</block>
        </case><default>default: <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01727</expr></argument>)</argument_list></call>
                          "auth_ldap authorize: "
                          "require dn \"%s\": LDAP error [%s][%s]"</expr></argument>,
                          <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
    </default>}</block></switch>


    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01728</expr></argument>)</argument_list></call>
                  "auth_ldap authorize dn: authorization denied for "
                  "user %s to %s"</expr></argument>,
                  <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>ldapattribute_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_args</name></decl></param>,
                                                      <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_request_t</name> *</type><name>req</name> <init>=
        <expr>(<name>authn_ldap_request_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>=
        <expr>(<name>authn_ldap_config_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ap_expr_info_t</name> *</type><name>expr</name> <init>= <expr><name>parsed_require_args</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>w</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>filtbuf</name><index>[<expr><name>FILTER_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>AUTHZ_DENIED_NO_USER</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>sec</name>-&gt;<name>have_ldap_url</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>host</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ldc</name> = <call><name>get_connection_for_authz</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_COMPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>,
                                  <argument><expr><name>authnz_ldap_cleanup_connection_close</name></expr></argument>,
                                  <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01729</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: no sec-&gt;host - weird...?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></else></if>

    <comment type="block">/*
     * If we have been authenticated by some other module than mod_auth_ldap,
     * the req structure needed for authorization needs to be created
     * and populated with the userid and DN of the account in LDAP
     */</comment>

    <if>if <condition>(<expr>!<call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01730</expr></argument>)</argument_list></call>
            "ldap authorize: Userid is blank, AuthType=%s"</expr></argument>,
            <argument><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if<condition>(<expr>!<name>req</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01731</expr></argument>)</argument_list></call>
            "ldap authorize: Creating LDAP req structure"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>req</name> = (<name>authn_ldap_request_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_ldap_request_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Build the username filter */</comment>
        <expr_stmt><expr><call><name>authn_ldap_build_filter</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Search for the user DN */</comment>
        <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_getuserdn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>basedn</name></name></expr></argument>,
             <argument><expr><name><name>sec</name>-&gt;<name>scope</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>attributes</name></name></expr></argument>, <argument><expr><name>filtbuf</name></expr></argument>, <argument><expr>&amp;<name>dn</name></expr></argument>, <argument><expr>&amp;(<name><name>req</name>-&gt;<name>vals</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Search failed, log error and return failure */</comment>
        <if>if<condition>(<expr><name>result</name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01732</expr></argument>)</argument_list></call>
                "auth_ldap authorise: User DN not found with filter %s: %s"</expr></argument>, <argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name>-&gt;<name>dn</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name>-&gt;<name>user</name></name> = <name><name>r</name>-&gt;<name>user</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>req</name>-&gt;<name>dn</name></name> == <name>NULL</name> || <call><name>strlen</name><argument_list>(<argument><expr><name><name>req</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01733</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: require ldap-attribute: user's DN "
                      "has not been defined; failing authorization"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>require</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02588</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: require ldap-attribute: Can't "
                      "evaluate expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>t</name> = <name>require</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name><name>t</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
        <expr_stmt><expr><name>w</name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01734</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: checking attribute %s has value %s"</expr></argument>,
                      <argument><expr><name>w</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_compare</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>dn</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch<condition>(<expr><name>result</name></expr>)</condition> <block>{
            <case>case <expr><name>LDAP_COMPARE_TRUE</name></expr>: <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01735</expr></argument>)</argument_list></call>
                              "auth_ldap authorize: "
                              "require attribute: authorization successful"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>set_request_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_AUTHZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
            }</block>
            </case><default>default: <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01736</expr></argument>)</argument_list></call>
                              "auth_ldap authorize: require attribute: "
                              "authorization failed [%s][%s]"</expr></argument>,
                              <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
        </default>}</block></switch>
    }</block></while>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01737</expr></argument>)</argument_list></call>
                  "auth_ldap authorize attribute: authorization denied for "
                  "user %s to %s"</expr></argument>,
                  <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>ldapfilter_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_args</name></decl></param>,
                                                   <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_request_t</name> *</type><name>req</name> <init>=
        <expr>(<name>authn_ldap_request_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>=
        <expr>(<name>authn_ldap_config_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ap_expr_info_t</name> *</type><name>expr</name> <init>= <expr><name>parsed_require_args</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>filtbuf</name><index>[<expr><name>FILTER_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>AUTHZ_DENIED_NO_USER</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>sec</name>-&gt;<name>have_ldap_url</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>host</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ldc</name> = <call><name>get_connection_for_authz</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>,
                                  <argument><expr><name>authnz_ldap_cleanup_connection_close</name></expr></argument>,
                                  <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01738</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: no sec-&gt;host - weird...?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></else></if>

    <comment type="block">/*
     * If we have been authenticated by some other module than mod_auth_ldap,
     * the req structure needed for authorization needs to be created
     * and populated with the userid and DN of the account in LDAP
     */</comment>

    <if>if <condition>(<expr>!<call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01739</expr></argument>)</argument_list></call>
            "ldap authorize: Userid is blank, AuthType=%s"</expr></argument>,
            <argument><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if<condition>(<expr>!<name>req</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01740</expr></argument>)</argument_list></call>
            "ldap authorize: Creating LDAP req structure"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>req</name> = (<name>authn_ldap_request_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_ldap_request_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Build the username filter */</comment>
        <expr_stmt><expr><call><name>authn_ldap_build_filter</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Search for the user DN */</comment>
        <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_getuserdn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>basedn</name></name></expr></argument>,
             <argument><expr><name><name>sec</name>-&gt;<name>scope</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>attributes</name></name></expr></argument>, <argument><expr><name>filtbuf</name></expr></argument>, <argument><expr>&amp;<name>dn</name></expr></argument>, <argument><expr>&amp;(<name><name>req</name>-&gt;<name>vals</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Search failed, log error and return failure */</comment>
        <if>if<condition>(<expr><name>result</name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01741</expr></argument>)</argument_list></call>
                "auth_ldap authorise: User DN not found with filter %s: %s"</expr></argument>, <argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name>-&gt;<name>dn</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name>-&gt;<name>user</name></name> = <name><name>r</name>-&gt;<name>user</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>req</name>-&gt;<name>dn</name></name> == <name>NULL</name> || <call><name>strlen</name><argument_list>(<argument><expr><name><name>req</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01742</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: require ldap-filter: user's DN "
                      "has not been defined; failing authorization"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>require</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02589</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: require ldap-filter: Can't "
                      "evaluate require expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>t</name> = <name>require</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>t</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01743</expr></argument>)</argument_list></call>
                      "auth_ldap authorize: checking filter %s"</expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Build the username filter */</comment>
        <expr_stmt><expr><call><name>authn_ldap_build_filter</name><argument_list>(<argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Search for the user DN */</comment>
        <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_getuserdn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>basedn</name></name></expr></argument>,
             <argument><expr><name><name>sec</name>-&gt;<name>scope</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>attributes</name></name></expr></argument>, <argument><expr><name>filtbuf</name></expr></argument>, <argument><expr>&amp;<name>dn</name></expr></argument>, <argument><expr>&amp;(<name><name>req</name>-&gt;<name>vals</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Make sure that the filtered search returned the correct user dn */</comment>
        <if>if <condition>(<expr><name>result</name> == <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01744</expr></argument>)</argument_list></call>
                          "auth_ldap authorize: checking dn match %s"</expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>compare_as_user</name></name></expr>)</condition><then> <block>{
                <comment type="block">/* ldap-filter is the only authz that requires a search and a compare */</comment>
                <expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name>authnz_ldap_cleanup_connection_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>authnz_ldap_cleanup_connection_close</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ldc</name> = <call><name>get_connection_for_authz</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_COMPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_comparedn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>dn</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>,
                                               <argument><expr><name><name>sec</name>-&gt;<name>compare_dn_on_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <switch>switch<condition>(<expr><name>result</name></expr>)</condition> <block>{
            <case>case <expr><name>LDAP_COMPARE_TRUE</name></expr>: <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01745</expr></argument>)</argument_list></call>
                              "auth_ldap authorize: require ldap-filter: "
                              "authorization successful"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>set_request_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>LDAP_AUTHZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
            }</block>
            </case><case>case <expr><name>LDAP_FILTER_ERROR</name></expr>: <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01746</expr></argument>)</argument_list></call>
                              "auth_ldap authorize: require ldap-filter: "
                              "%s authorization failed [%s][%s]"</expr></argument>,
                              <argument><expr><name>filtbuf</name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
            </case><default>default: <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01747</expr></argument>)</argument_list></call>
                              "auth_ldap authorize: require ldap-filter: "
                              "authorization failed [%s][%s]"</expr></argument>,
                              <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
        </default>}</block></switch>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01748</expr></argument>)</argument_list></call>
                  "auth_ldap authorize filter: authorization denied for "
                  "user %s to %s"</expr></argument>,
                  <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ldap_parse_config</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>void</name> **</type><name>parsed_require_line</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>expr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>expr</name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>require_line</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
            <argument><expr>&amp;<name>expr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>expr_err</name></expr>)</condition><then>
        <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
                           <argument><expr>"Cannot parse expression in require line: "</expr></argument>,
                           <argument><expr><name>expr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr>*<name>parsed_require_line</name> = <name>expr</name></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>


<comment type="block">/*
 * Use the ldap url parsing routines to break up the ldap url into
 * host and port.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>mod_auth_ldap_parse_url</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
                                    <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mode</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_ldap_url_desc_t</name> *</type><name>urld</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_ldap_err_t</name> *</type><name>result</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>rc</name> = <call><name>apr_ldap_url_parse</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;(<name>urld</name>)</expr></argument>, <argument><expr>&amp;(<name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name><name>result</name>-&gt;<name>reason</name></name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set all the values, or at least some sane defaults */</comment>
    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>host</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>host</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>urld</name>-&gt;<name>lud_host</name></name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>host</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>host</name></name> = <name><name>urld</name>-&gt;<name>lud_host</name></name>? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>urld</name>-&gt;<name>lud_host</name></name></expr></argument>)</argument_list></call> : "localhost"</expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>basedn</name></name> = <name><name>urld</name>-&gt;<name>lud_dn</name></name>? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>urld</name>-&gt;<name>lud_dn</name></name></expr></argument>)</argument_list></call> : ""</expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>urld</name>-&gt;<name>lud_attrs</name></name> &amp;&amp; <name><name>urld</name>-&gt;<name>lud_attrs</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name><name>urld</name>-&gt;<name>lud_attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>attributes</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * (<name>i</name>+1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>urld</name>-&gt;<name>lud_attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{
            <expr_stmt><expr><name><name>sec</name>-&gt;<name>attributes</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>urld</name>-&gt;<name>lud_attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>attribute</name></name> = <name><name>sec</name>-&gt;<name>attributes</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>attribute</name></name> = "uid"</expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name><name>sec</name>-&gt;<name>scope</name></name> = <name><name>urld</name>-&gt;<name>lud_scope</name></name> == <name>LDAP_SCOPE_ONELEVEL</name> ?
        <name>LDAP_SCOPE_ONELEVEL</name> : <name>LDAP_SCOPE_SUBTREE</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>urld</name>-&gt;<name>lud_filter</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>urld</name>-&gt;<name>lud_filter</name><index>[<expr>0</expr>]</index></name> == '('</expr>)</condition><then> <block>{
            <comment type="block">/*
             * Get rid of the surrounding parens; later on when generating the
             * filter, they'll be put back.
             */</comment>
            <expr_stmt><expr><name><name>sec</name>-&gt;<name>filter</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>urld</name>-&gt;<name>lud_filter</name></name>+1</expr></argument>,
                                                    <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>urld</name>-&gt;<name>lud_filter</name></name></expr></argument>)</argument_list></call>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>sec</name>-&gt;<name>filter</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>urld</name>-&gt;<name>lud_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>filter</name></name> = "objectclass=*"</expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name>mode</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"NONE"</expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>sec</name>-&gt;<name>secure</name></name> = <name>APR_LDAP_NONE</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"SSL"</expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>sec</name>-&gt;<name>secure</name></name> = <name>APR_LDAP_SSL</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"TLS"</expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> || 0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"STARTTLS"</expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>sec</name>-&gt;<name>secure</name></name> = <name>APR_LDAP_STARTTLS</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <return>return <expr>"Invalid LDAP connection mode setting: must be one of NONE, "
                   "SSL, or TLS/STARTTLS"</expr>;</return>
        }</block></else></if></else></if></else></if>
    }</block></then></if>

      <comment type="block">/* "ldaps" indicates secure ldap connections desired
      */</comment>
    <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"ldaps"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>secure</name></name> = <name>APR_LDAP_SSL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>port</name></name> = <name><name>urld</name>-&gt;<name>lud_port</name></name>? <name><name>urld</name>-&gt;<name>lud_port</name></name> : <name>LDAPS_PORT</name></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>port</name></name> = <name><name>urld</name>-&gt;<name>lud_port</name></name>? <name><name>urld</name>-&gt;<name>lud_port</name></name> : <name>LDAP_PORT</name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name><name>sec</name>-&gt;<name>have_ldap_url</name></name> = 1</expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>,
                 <argument><expr>"auth_ldap url parse: `%s', Host: %s, Port: %d, DN: %s, "
                 "attrib: %s, scope: %s, filter: %s, connection mode: %s"</expr></argument>,
                 <argument><expr><name>url</name></expr></argument>,
                 <argument><expr><name><name>urld</name>-&gt;<name>lud_host</name></name></expr></argument>,
                 <argument><expr><name><name>urld</name>-&gt;<name>lud_port</name></name></expr></argument>,
                 <argument><expr><name><name>urld</name>-&gt;<name>lud_dn</name></name></expr></argument>,
                 <argument><expr><name><name>urld</name>-&gt;<name>lud_attrs</name></name>? <name><name>urld</name>-&gt;<name>lud_attrs</name><index>[<expr>0</expr>]</index></name> : "(null)"</expr></argument>,
                 <argument><expr>(<name><name>urld</name>-&gt;<name>lud_scope</name></name> == <name>LDAP_SCOPE_SUBTREE</name>? "subtree" :
                  <name><name>urld</name>-&gt;<name>lud_scope</name></name> == <name>LDAP_SCOPE_BASE</name>? "base" :
                  <name><name>urld</name>-&gt;<name>lud_scope</name></name> == <name>LDAP_SCOPE_ONELEVEL</name>? "onelevel" : "unknown")</expr></argument>,
                 <argument><expr><name><name>urld</name>-&gt;<name>lud_filter</name></name></expr></argument>,
                 <argument><expr><name><name>sec</name>-&gt;<name>secure</name></name> == <name>APR_LDAP_SSL</name>  ? "using SSL": "not using SSL"</expr></argument>
                 )</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>mod_auth_ldap_set_deref</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"never"</expr></argument>)</argument_list></call> == 0 || <call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>deref</name></name> = <name>never</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"searching"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>deref</name></name> = <name>searching</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"finding"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>deref</name></name> = <name>finding</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"always"</expr></argument>)</argument_list></call> == 0 || <call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>deref</name></name> = <name>always</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <return>return <expr>"Unrecognized value for AuthLDAPDereferenceAliases directive"</expr>;</return>
    }</block></else></if></else></if></else></if></else></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>mod_auth_ldap_add_subgroup_attribute</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>sec</name>-&gt;<name>sgAttributes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <empty_stmt>;</empty_stmt>
    }</block></for>
    <if>if <condition>(<expr><name>i</name> == <name>GROUPATTR_MAX_ELTS</name></expr>)</condition><then>
        <return>return <expr>"Too many AuthLDAPSubGroupAttribute values"</expr>;</return></then></if>

    <expr_stmt><expr><name><name>sec</name>-&gt;<name>sgAttributes</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>mod_auth_ldap_add_subgroup_class</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type>struct <name>mod_auth_ldap_groupattr_entry_t</name> *</type><name>new</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>subgroupclasses</name>-&gt;<name>nelts</name></name> &gt; <name>GROUPATTR_MAX_ELTS</name></expr>)</condition><then>
        <return>return <expr>"Too many AuthLDAPSubGroupClass values"</expr>;</return></then></if>

    <expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>subgroupclasses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>mod_auth_ldap_set_subgroup_maxdepth</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
                                                       <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
                                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>max_depth</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>sec</name>-&gt;<name>maxNestingDepth</name></name> = <call><name>atol</name><argument_list>(<argument><expr><name>max_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>mod_auth_ldap_add_group_attribute</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type>struct <name>mod_auth_ldap_groupattr_entry_t</name> *</type><name>new</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>sec</name>-&gt;<name>groupattr</name>-&gt;<name>nelts</name></name> &gt; <name>GROUPATTR_MAX_ELTS</name></expr>)</condition><then>
        <return>return <expr>"Too many AuthLDAPGroupAttribute directives"</expr>;</return></then></if>

    <expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>groupattr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_charset_config</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>,
                         <argument><expr>(<name>void</name> *)<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_bind_pattern</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>exp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>subst</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>= <expr><name>_cfg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>regexp</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>regexp</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>regexp</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"AuthLDAPInitialBindPattern: cannot compile regular "
                                      "expression '"</expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>sec</name>-&gt;<name>bind_regex</name></name> = <name>regexp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sec</name>-&gt;<name>bind_subst</name></name> = <name>subst</name></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_bind_password</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>authn_ldap_config_t</name> *</type><name>sec</name> <init>= <expr><name>_cfg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>arglen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> **</type><name>argv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>arglen</name> &gt; 5) &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"exec:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>apr_tokenize_to_argv</name><argument_list>(<argument><expr><name>arg</name>+5</expr></argument>, <argument><expr>&amp;<name>argv</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
                               <argument><expr>"Unable to parse exec arguments from "</expr></argument>,
                               <argument><expr><name>arg</name>+5</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
                               <argument><expr>"Invalid AuthLDAPBindPassword exec location:"</expr></argument>,
                               <argument><expr><name>arg</name>+5</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>result</name> = <call><name>ap_get_exec_line</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
                                  <argument><expr>(const <name>char</name>*)<name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(const <name>char</name> * const *)<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
                               <argument><expr>"Unable to get bind password from exec of "</expr></argument>,
                               <argument><expr><name>arg</name>+5</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>bindpw</name></name> = <name>result</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>sec</name>-&gt;<name>bindpw</name></name> = (<name>char</name> *)<name>arg</name></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>authnz_ldap_cmds</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"AuthLDAPURL"</expr></argument>, <argument><expr><name>mod_auth_ldap_parse_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                  <argument><expr>"URL to define LDAP connection. This should be an RFC 2255 compliant\n"
                  "URL of the form ldap://host[:port]/basedn[?attrib[?scope[?filter]]].\n"
                  "&lt;ul&gt;\n"
                  "&lt;li&gt;Host is the name of the LDAP server. Use a space separated list of hosts \n"
                  "to specify redundant servers.\n"
                  "&lt;li&gt;Port is optional, and specifies the port to connect to.\n"
                  "&lt;li&gt;basedn specifies the base DN to start searches from\n"
                  "&lt;li&gt;Attrib specifies what attribute to search for in the directory. If not "
                  "provided, it defaults to &lt;b&gt;uid&lt;/b&gt;.\n"
                  "&lt;li&gt;Scope is the scope of the search, and can be either &lt;b&gt;sub&lt;/b&gt; or "
                  "&lt;b&gt;one&lt;/b&gt;. If not provided, the default is &lt;b&gt;sub&lt;/b&gt;.\n"
                  "&lt;li&gt;Filter is a filter to use in the search. If not provided, "
                  "defaults to &lt;b&gt;(objectClass=*)&lt;/b&gt;.\n"
                  "&lt;/ul&gt;\n"
                  "Searches are performed using the attribute and the filter combined. "
                  "For example, assume that the\n"
                  "LDAP URL is &lt;b&gt;ldap://ldap.airius.com/ou=People, o=Airius?uid?sub?(posixid=*)&lt;/b&gt;. "
                  "Searches will\n"
                  "be done using the filter &lt;b&gt;(&amp;((posixid=*))(uid=&lt;i&gt;username&lt;/i&gt;))&lt;/b&gt;, "
                  "where &lt;i&gt;username&lt;/i&gt;\n"
                  "is the user name passed by the HTTP client. The search will be a subtree "
                  "search on the branch &lt;b&gt;ou=People, o=Airius&lt;/b&gt;."</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthLDAPBindDN"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
                  <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_ldap_config_t</name></expr></argument>, <argument><expr><name>binddn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                  <argument><expr>"DN to use to bind to LDAP server. If not provided, will do an anonymous bind."</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthLDAPBindPassword"</expr></argument>, <argument><expr><name>set_bind_password</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                  <argument><expr>"Password to use to bind to LDAP server. If not provided, will do an anonymous bind."</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthLDAPBindAuthoritative"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
                  <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_ldap_config_t</name></expr></argument>, <argument><expr><name>bind_authoritative</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                  <argument><expr>"Set to 'on' to return failures when user-specific bind fails - defaults to on."</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthLDAPRemoteUserIsDN"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
                 <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_ldap_config_t</name></expr></argument>, <argument><expr><name>user_is_dn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                 <argument><expr>"Set to 'on' to set the REMOTE_USER environment variable to be the full "
                 "DN of the remote user. By default, this is set to off, meaning that "
                 "the REMOTE_USER variable will contain whatever value the remote user sent."</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthLDAPRemoteUserAttribute"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
                 <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_ldap_config_t</name></expr></argument>, <argument><expr><name>remote_user_attribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                 <argument><expr>"Override the user supplied username and place the "
                 "contents of this attribute in the REMOTE_USER "
                 "environment variable."</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthLDAPCompareDNOnServer"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
                 <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_ldap_config_t</name></expr></argument>, <argument><expr><name>compare_dn_on_server</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                 <argument><expr>"Set to 'on' to force auth_ldap to do DN compares (for the \"require dn\" "
                 "directive) using the server, and set it 'off' to do the compares locally "
                 "(at the expense of possible false matches). See the documentation for "
                 "a complete description of this option."</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"AuthLDAPSubGroupAttribute"</expr></argument>, <argument><expr><name>mod_auth_ldap_add_subgroup_attribute</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                    <argument><expr>"Attribute labels used to define sub-group (or nested group) membership in groups - "
                    "defaults to member and uniqueMember"</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"AuthLDAPSubGroupClass"</expr></argument>, <argument><expr><name>mod_auth_ldap_add_subgroup_class</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                     <argument><expr>"LDAP objectClass values used to identify sub-group instances - "
                     "defaults to groupOfNames and groupOfUniqueNames"</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthLDAPMaxSubGroupDepth"</expr></argument>, <argument><expr><name>mod_auth_ldap_set_subgroup_maxdepth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                      <argument><expr>"Maximum subgroup nesting depth to be evaluated - defaults to 10 (top-level group = 0)"</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"AuthLDAPGroupAttribute"</expr></argument>, <argument><expr><name>mod_auth_ldap_add_group_attribute</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                    <argument><expr>"A list of attribute labels used to identify the user members of groups - defaults to "
                    "member and uniquemember"</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthLDAPGroupAttributeIsDN"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
                 <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_ldap_config_t</name></expr></argument>, <argument><expr><name>group_attrib_is_dn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                 <argument><expr>"If set to 'on', auth_ldap uses the DN that is retrieved from the server for"
                 "subsequent group comparisons. If set to 'off', auth_ldap uses the string"
                 "provided by the client directly. Defaults to 'on'."</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthLDAPDereferenceAliases"</expr></argument>, <argument><expr><name>mod_auth_ldap_set_deref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                  <argument><expr>"Determines how aliases are handled during a search. Can be one of the"
                  "values \"never\", \"searching\", \"finding\", or \"always\". "
                  "Defaults to always."</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthLDAPCharsetConfig"</expr></argument>, <argument><expr><name>set_charset_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
                  <argument><expr>"Character set conversion configuration file. If omitted, character set"
                  "conversion is disabled."</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthLDAPAuthorizePrefix"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
                  <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_ldap_config_t</name></expr></argument>, <argument><expr><name>authz_prefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                  <argument><expr>"The prefix to add to environment variables set during "
                  "successful authorization, default '" <name>AUTHZ_PREFIX</name> "'"</expr></argument>)</argument_list></call></expr>,

    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthLDAPInitialBindAsUser"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
                 <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_ldap_config_t</name></expr></argument>, <argument><expr><name>initial_bind_as_user</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                 <argument><expr>"Set to 'on' to perform the initial DN lookup with the basic auth credentials "
                 "instead of anonymous or hard-coded credentials"</expr></argument>)</argument_list></call></expr>,

     <expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"AuthLDAPInitialBindPattern"</expr></argument>, <argument><expr><name>set_bind_pattern</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                   <argument><expr>"The regex and substitution to determine a username that can bind based on an HTTP basic auth username"</expr></argument>)</argument_list></call></expr>,

     <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthLDAPSearchAsUser"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
                  <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_ldap_config_t</name></expr></argument>, <argument><expr><name>search_as_user</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                   <argument><expr>"Set to 'on' to perform authorization-based searches with the users credentials, when this module"
                   " has also performed authentication.  Does not affect nested groups lookup."</expr></argument>)</argument_list></call></expr>,
     <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthLDAPCompareAsUser"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
                  <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_ldap_config_t</name></expr></argument>, <argument><expr><name>compare_as_user</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
                  <argument><expr>"Set to 'on' to perform authorization-based compares with the users credentials, when this module"
                  " has also performed authentication.  Does not affect nested groups lookups."</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>authnz_ldap_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ap_configfile_t</name> *</type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>l</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>charset_confname</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
                                                      <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

    <comment type="block">/*
    authn_ldap_config_t *sec = (authn_ldap_config_t *)
                                    ap_get_module_config(s-&gt;module_config,
                                                         &amp;authnz_ldap_module);

    if (sec-&gt;secure)
    {
        if (!util_ldap_ssl_supported(s))
        {
            ap_log_error(APLOG_MARK, APLOG_CRIT, 0, s, APLOGNO(03159)
                         "LDAP: SSL connections (ldaps://) not supported by utilLDAP");
            return(!OK);
        }
    }
    */</comment>

    <comment type="block">/* make sure that mod_ldap (util_ldap) is loaded */</comment>
    <if>if <condition>(<expr><call><name>ap_find_linked_module</name><argument_list>(<argument><expr>"util_ldap.c"</expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01749</expr></argument>)</argument_list></call>
                     "Module mod_ldap missing. Mod_ldap (aka. util_ldap) "
                     "must be loaded in order for mod_authnz_ldap to function properly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>

    }</block></then></if>

    <if>if <condition>(<expr>!<name>charset_confname</name></expr>)</condition><then> <block>{
        <return>return <expr><name>OK</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>charset_confname</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>charset_confname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>charset_confname</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EBADPATH</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01750</expr></argument>)</argument_list></call>
                     "Invalid charset conversion config path %s"</expr></argument>,
                     <argument><expr>(const <name>char</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
                                                        <argument><expr>&amp;<name>authnz_ldap_module</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>(<name>status</name> = <call><name>ap_pcfg_openfile</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>charset_confname</name></expr></argument>)</argument_list></call>)
                != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01751</expr></argument>)</argument_list></call>
                     "could not open charset conversion config file %s."</expr></argument>,
                     <argument><expr><name>charset_confname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>charset_conversions</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr>!(<call><name>ap_cfg_getline</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ll</name> <init>= <expr><name>l</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> *</type><name>lang</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>l</name><index>[<expr>0</expr>]</index></name> == '#'</expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>lang</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>ll</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>char</name> *</type><name>charset</name> <init>= <expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>ll</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>charset_conversions</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>
    <expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>to_charset</name> = <call><name>derive_codepage_from_lang</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"utf-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>to_charset</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01752</expr></argument>)</argument_list></call>
                     "could not find the UTF-8 charset in the file %s."</expr></argument>,
                     <argument><expr><name>charset_confname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authn_provider</name></type> <name>authn_ldap_provider</name> <init>=
<expr><block>{
    <expr>&amp;<name>authn_ldap_check_password</name></expr>,
    <expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_ldapuser_provider</name> <init>=
<expr><block>{
    <expr>&amp;<name>ldapuser_check_authorization</name></expr>,
    <expr>&amp;<name>ldap_parse_config</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_ldapgroup_provider</name> <init>=
<expr><block>{
    <expr>&amp;<name>ldapgroup_check_authorization</name></expr>,
    <expr>&amp;<name>ldap_parse_config</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_ldapdn_provider</name> <init>=
<expr><block>{
    <expr>&amp;<name>ldapdn_check_authorization</name></expr>,
    <expr>&amp;<name>ldap_parse_config</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_ldapattribute_provider</name> <init>=
<expr><block>{
    <expr>&amp;<name>ldapattribute_check_authorization</name></expr>,
    <expr>&amp;<name>ldap_parse_config</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_ldapfilter_provider</name> <init>=
<expr><block>{
    <expr>&amp;<name>ldapfilter_check_authorization</name></expr>,
    <expr>&amp;<name>ldap_parse_config</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ImportULDAPOptFn</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>util_ldap_connection_close</name>  = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_connection_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>util_ldap_connection_find</name>   = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_connection_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>util_ldap_cache_comparedn</name>   = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_cache_comparedn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>util_ldap_cache_compare</name>     = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_cache_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>util_ldap_cache_checkuserid</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_cache_checkuserid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>util_ldap_cache_getuserdn</name>   = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_cache_getuserdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>util_ldap_ssl_supported</name>     = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_ssl_supported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>util_ldap_cache_check_subgroups</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_cache_check_subgroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* Register authn provider */</comment>
    <expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"ldap"</expr></argument>,
                              <argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>,
                              <argument><expr>&amp;<name>authn_ldap_provider</name></expr></argument>, <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Register authz providers */</comment>
    <expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"ldap-user"</expr></argument>,
                              <argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
                              <argument><expr>&amp;<name>authz_ldapuser_provider</name></expr></argument>,
                              <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"ldap-group"</expr></argument>,
                              <argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
                              <argument><expr>&amp;<name>authz_ldapgroup_provider</name></expr></argument>,
                              <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"ldap-dn"</expr></argument>,
                              <argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
                              <argument><expr>&amp;<name>authz_ldapdn_provider</name></expr></argument>,
                              <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"ldap-attribute"</expr></argument>,
                              <argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
                              <argument><expr>&amp;<name>authz_ldapattribute_provider</name></expr></argument>,
                              <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"ldap-filter"</expr></argument>,
                              <argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
                              <argument><expr>&amp;<name>authz_ldapfilter_provider</name></expr></argument>,
                              <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>authnz_ldap_post_config</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_hook_optional_fn_retrieve</name><argument_list>(<argument><expr><name>ImportULDAPOptFn</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>authnz_ldap</name></expr></argument>)</argument_list></call> =
<block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>create_authnz_ldap_dir_config</name></expr>,   <comment type="block">/* dir config creater */</comment>
    <expr><name>NULL</name></expr>,                            <comment type="block">/* dir merger --- default is to override */</comment>
    <expr><name>NULL</name></expr>,                            <comment type="block">/* server config */</comment>
    <expr><name>NULL</name></expr>,                            <comment type="block">/* merge server config */</comment>
    <expr><name>authnz_ldap_cmds</name></expr>,                <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hooks</name></expr>                   <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
