<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/aaa/mod_allowmethods.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>

<comment type="block">/**
 * This module makes it easy to restrict what HTTP methods can be ran against
 * a server.
 *
 * It provides one command:
 *    AllowMethods
 * This command takes a list of HTTP methods to allow.
 *
 *  The most common configuration should be like this:
 *   &lt;Directory /&gt;
 *    AllowMethods GET HEAD OPTIONS
 *   &lt;/Directory&gt;
 *   &lt;Directory /special/cgi-bin&gt;
 *      AllowMethods GET HEAD OPTIONS POST
 *   &lt;/Directory&gt;
 *  Non-matching methods will be returned a status 405 (method not allowed)
 *
 *  To allow all methods, and effectively turn off mod_allowmethods, use:
 *    AllowMethods reset
 */</comment>

<typedef>typedef <type><struct>struct <name>am_conf_t</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>allowed_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_int64_t</name></type> <name>allowed</name></decl>;</decl_stmt>
}</block></struct></type> <name>am_conf_t</name>;</typedef>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>allowmethods_module</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>am_check_access</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>method</name> <init>= <expr><name><name>r</name>-&gt;<name>method_number</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>am_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>conf</name> = (<name>am_conf_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                              <argument><expr>&amp;<name>allowmethods_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>conf</name> || <name><name>conf</name>-&gt;<name>allowed</name></name> == 0</expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>r</name>-&gt;<name>allowed</name></name> = <name><name>conf</name>-&gt;<name>allowed</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>allowed</name></name> &amp; (<name>AP_METHOD_BIT</name> &lt;&lt; <name>method</name>)</expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01623</expr></argument>)</argument_list></call>
                  "client method denied by server configuration: '%s' to %s%s"</expr></argument>,
                  <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>,
                  <argument><expr><name><name>r</name>-&gt;<name>filename</name></name> ? "" : "uri "</expr></argument>,
                  <argument><expr><name><name>r</name>-&gt;<name>filename</name></name> ? <name><name>r</name>-&gt;<name>filename</name></name> : <name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>am_create_conf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>am_conf_t</name> *</type><name>conf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>am_conf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name>-&gt;<name>allowed</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>allowed_set</name></name> = 0</expr>;</expr_stmt>
    <return>return <expr><name>conf</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>am_merge_conf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>am_conf_t</name> *</type><name>base</name> <init>= <expr>(<name>am_conf_t</name> *)<name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>am_conf_t</name> *</type><name>add</name> <init>= <expr>(<name>am_conf_t</name> *)<name>b</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>am_conf_t</name> *</type><name>conf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>am_conf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>add</name>-&gt;<name>allowed_set</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>allowed</name></name> = <name><name>add</name>-&gt;<name>allowed</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>allowed_set</name></name> = <name><name>add</name>-&gt;<name>allowed_set</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>allowed</name></name> = <name><name>base</name>-&gt;<name>allowed</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>allowed_set</name></name> = <name><name>base</name>-&gt;<name>allowed_set</name></name></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><name>conf</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>am_allowmethods</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
                                   <param><decl><type><name>char</name> *<specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>am_conf_t</name> *</type><name>conf</name> <init>= <expr>(<name>am_conf_t</name> *)<name>d</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
        <return>return <expr>"AllowMethods: No method or 'reset' keyword given"</expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>argc</name> == 1</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr>"reset"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>conf</name>-&gt;<name>allowed</name></name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>conf</name>-&gt;<name>allowed_set</name></name> = 1</expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>m</name> = <call><name>ap_method_number_of</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>m</name> == <name>M_INVALID</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"AllowMethods: Invalid Method '"</expr></argument>,
                               <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name><name>conf</name>-&gt;<name>allowed</name></name> |= (<name>AP_METHOD_BIT</name> &lt;&lt; <name>m</name>)</expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>allowed_set</name></name> = 1</expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>am_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_hook_access_checker</name><argument_list>(<argument><expr><name>am_check_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>am_cmds</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>AP_INIT_TAKE_ARGV</name><argument_list>(<argument><expr>"AllowMethods"</expr></argument>, <argument><expr><name>am_allowmethods</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                      <argument><expr><name>ACCESS_CONF</name></expr></argument>,
                      <argument><expr>"only allow specific methods"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>allowmethods</name></expr></argument>)</argument_list></call> = <block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>am_create_conf</name></expr>,
    <expr><name>am_merge_conf</name></expr>,
    <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,
    <expr><name>am_cmds</name></expr>,
    <expr><name>am_register_hooks</name></expr>,
}</block></expr>;</expr_stmt>
</unit>
