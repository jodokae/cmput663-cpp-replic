<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/aaa/mod_authz_dbm.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_dbm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>   <comment type="block">/* for ap_hook_(check_user_id | auth_checker)*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_authz_owner.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>grpfile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dbmtype</name></decl>;</decl_stmt>
}</block></struct></type> <name>authz_dbm_config_rec</name>;</typedef>


<comment type="block">/* This should go into APR; perhaps with some nice
 * caching/locking/flocking of the open dbm file.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>get_dbm_entry_as_str</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>apr_dbm_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>char</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_datum_t</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>q</name>.<name>dptr</name></name> = <name>key</name></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETSCAPE_DBM_COMPAT</name></cpp:ifndef>
    <expr_stmt><expr><name><name>q</name>.<name>dsize</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>q</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name><name>q</name>.<name>dsize</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>q</name>.<name>dptr</name></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><call><name>apr_dbm_fetch</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name> &amp;&amp; <name><name>d</name>.<name>dptr</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>d</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>d</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_authz_dbm_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>d</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>authz_dbm_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name>-&gt;<name>grpfile</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>dbmtype</name></name> = "default"</expr>;</expr_stmt>

    <return>return <expr><name>conf</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>authz_dbm_cmds</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthDBMGroupFile"</expr></argument>, <argument><expr><name>ap_set_file_slot</name></expr></argument>,
     <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authz_dbm_config_rec</name></expr></argument>, <argument><expr><name>grpfile</name></expr></argument>)</argument_list></call></expr></argument>,
     <argument><expr><name>OR_AUTHCFG</name></expr></argument>, <argument><expr>"database file containing group names and member user IDs"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthzDBMType"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
     <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authz_dbm_config_rec</name></expr></argument>, <argument><expr><name>dbmtype</name></expr></argument>)</argument_list></call></expr></argument>,
     <argument><expr><name>OR_AUTHCFG</name></expr></argument>, <argument><expr>"what type of DBM file the group file is"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>authz_dbm_module</name></decl>;</decl_stmt>

<comment type="block">/* We do something strange with the group file.  If the group file
 * contains any : we assume the format is
 *      key=username value=":"groupname [":"anything here is ignored]
 * otherwise we now (0.8.14+) assume that the format is
 *      key=username value=groupname
 * The first allows the password and group files to be the same
 * physical DBM file;   key=username value=password":"groupname[":"anything]
 *
 * mark@telescope.org, 22Sep95
 */</comment>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>get_dbm_grp</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>key1</name></decl></param>, <param><decl><type><name>char</name> *</type><name>key2</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dbmgrpfile</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dbtype</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> **</type> <name>out</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>grp_colon</name></decl>, *<decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>retval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dbm_t</name> *</type><name>f</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>retval</name> = <call><name>apr_dbm_open_ex</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>dbtype</name></expr></argument>, <argument><expr><name>dbmgrpfile</name></expr></argument>, <argument><expr><name>APR_DBM_READONLY</name></expr></argument>,
                             <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>retval</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name>retval</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Try key2 only if key1 failed */</comment>
    <if>if <condition>(<expr>!(<name>val</name> = <call><name>get_dbm_entry_as_str</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>key1</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>val</name> = <call><name>get_dbm_entry_as_str</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>val</name> &amp;&amp; (<name>grp_colon</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>grp_colon2</name> <init>= <expr><call><name>ap_strchr</name><argument_list>(<argument><expr>++<name>grp_colon</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>grp_colon2</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>grp_colon2</name> = '\0'</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr>*<name>out</name> = <name>grp_colon</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr>*<name>out</name> = <name>val</name></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>dbmgroup_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_args</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>authz_dbm_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                      <argument><expr>&amp;<name>authz_dbm_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>user</name> <init>= <expr><name><name>r</name>-&gt;<name>user</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ap_expr_info_t</name> *</type><name>expr</name> <init>= <expr><name>parsed_require_args</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>w</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>orig_groups</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name> <init>= <expr><call><name>ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>groups</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>v</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>user</name></expr>)</condition><then> <block>{
        <return>return <expr><name>AUTHZ_DENIED_NO_USER</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>grpfile</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01798</expr></argument>)</argument_list></call>
                        "No group file was specified in the configuration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* fetch group data from dbm file only once. */</comment>
    <if>if <condition>(<expr>!<name>orig_groups</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>status</name> = <call><name>get_dbm_grp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>grpfile</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>dbmtype</name></name></expr></argument>, <argument><expr>&amp;<name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01799</expr></argument>)</argument_list></call>
                          "could not open dbm (type %s) group access "
                          "file: %s"</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>dbmtype</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>grpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>groups</name> == <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* no groups available, so exit immediately */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01800</expr></argument>)</argument_list></call>
                          "Authorization of user %s to access %s failed, reason: "
                          "user doesn't appear in DBM group file (%s)."</expr></argument>,
                          <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>grpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>orig_groups</name> = <name>groups</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>require</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02591</expr></argument>)</argument_list></call>
                      "authz_dbm authorize: require dbm-group: Can't "
                      "evaluate require expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>t</name> = <name>require</name></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>w</name> = <call><name>ap_getword_white</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call>) &amp;&amp; <name><name>w</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
        <expr_stmt><expr><name>groups</name> = <name>orig_groups</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>groups</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
            <expr_stmt><expr><name>v</name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>groups</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
            }</block></then></if>
        }</block></while>
    }</block></while>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01801</expr></argument>)</argument_list></call>
                  "Authorization of user %s to access %s failed, reason: "
                  "user is not part of the 'require'ed group(s)."</expr></argument>,
                  <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></function>

<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>authz_owner_get_file_group</name></expr></argument>)</argument_list></call> *<name>authz_owner_get_file_group</name></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>dbmfilegroup_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_args</name></decl></param>,
                                                     <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>authz_dbm_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                      <argument><expr>&amp;<name>authz_dbm_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>user</name> <init>= <expr><name><name>r</name>-&gt;<name>user</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name> <init>= <expr><call><name>ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filegroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>groups</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>v</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>user</name></expr>)</condition><then> <block>{
        <return>return <expr><name>AUTHZ_DENIED_NO_USER</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>grpfile</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01802</expr></argument>)</argument_list></call>
                        "No group file was specified in the configuration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* fetch group data from dbm file. */</comment>
    <expr_stmt><expr><name>status</name> = <call><name>get_dbm_grp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>grpfile</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>dbmtype</name></name></expr></argument>, <argument><expr>&amp;<name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01803</expr></argument>)</argument_list></call>
                      "could not open dbm (type %s) group access "
                      "file: %s"</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>dbmtype</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>grpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>groups</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* no groups available, so exit immediately */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01804</expr></argument>)</argument_list></call>
                      "Authorization of user %s to access %s failed, reason: "
                      "user doesn't appear in DBM group file (%s)."</expr></argument>,
                      <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>grpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>filegroup</name> = <call><name>authz_owner_get_file_group</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>filegroup</name></expr>)</condition><then> <block>{
        <while>while <condition>(<expr><name><name>groups</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
            <expr_stmt><expr><name>v</name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>groups</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>filegroup</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
            }</block></then></if>
        }</block></while>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01805</expr></argument>)</argument_list></call>
                  "Authorization of user %s to access %s failed, reason: "
                  "user is not part of the 'require'ed group(s)."</expr></argument>,
                  <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dbm_parse_config</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>void</name> **</type><name>parsed_require_line</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>expr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>expr</name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>require_line</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
            <argument><expr>&amp;<name>expr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>expr_err</name></expr>)</condition><then>
        <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
                           <argument><expr>"Cannot parse expression in require line: "</expr></argument>,
                           <argument><expr><name>expr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr>*<name>parsed_require_line</name> = <name>expr</name></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_dbmgroup_provider</name> <init>=
<expr><block>{
    <expr>&amp;<name>dbmgroup_check_authorization</name></expr>,
    <expr>&amp;<name>dbm_parse_config</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_dbmfilegroup_provider</name> <init>=
<expr><block>{
    <expr>&amp;<name>dbmfilegroup_check_authorization</name></expr>,
    <expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>authz_dbm_getfns</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>authz_owner_get_file_group</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>authz_owner_get_file_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"dbm-group"</expr></argument>,
                              <argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
                              <argument><expr>&amp;<name>authz_dbmgroup_provider</name></expr></argument>,
                              <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"dbm-file-group"</expr></argument>,
                              <argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
                              <argument><expr>&amp;<name>authz_dbmfilegroup_provider</name></expr></argument>,
                              <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_optional_fn_retrieve</name><argument_list>(<argument><expr><name>authz_dbm_getfns</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>authz_dbm</name></expr></argument>)</argument_list></call> =
<block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>create_authz_dbm_dir_config</name></expr>, <comment type="block">/* dir config creater */</comment>
    <expr><name>NULL</name></expr>,                        <comment type="block">/* dir merger --- default is to override */</comment>
    <expr><name>NULL</name></expr>,                        <comment type="block">/* server config */</comment>
    <expr><name>NULL</name></expr>,                        <comment type="block">/* merge server config */</comment>
    <expr><name>authz_dbm_cmds</name></expr>,              <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hooks</name></expr>               <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
