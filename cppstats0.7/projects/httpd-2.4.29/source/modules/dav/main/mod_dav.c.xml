<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/dav/main/mod_dav.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * DAV extension module for Apache 2.0.*
 *
 * This module is repository-independent. It depends on hooks provided by a
 * repository implementation.
 *
 * APACHE ISSUES:
 *   - within a DAV hierarchy, if an unknown method is used and we default
 *     to Apache's implementation, it sends back an OPTIONS with the wrong
 *     set of methods -- there is NO HOOK for us.
 *     therefore: we need to manually handle the HTTP_METHOD_NOT_ALLOWED
 *       and HTTP_NOT_IMPLEMENTED responses (not ap_send_error_response).
 *   - process_mkcol_body() had to dup code from ap_setup_client_block().
 *   - it would be nice to get status lines from Apache for arbitrary
 *     status codes
 *   - it would be nice to be able to extend Apache's set of response
 *     codes so that it doesn't return 500 when an unknown code is placed
 *     into r-&gt;status.
 *   - http_vhost functions should apply "const" to their params
 *
 * DESIGN NOTES:
 *   - For PROPFIND, we batch up the entire response in memory before
 *     sending it. We may want to reorganize around sending the information
 *     as we suck it in from the propdb. Alternatively, we should at least
 *     generate a total Content-Length if we're going to buffer in memory
 *     so that we can keep the connection open.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>            <comment type="block">/* for apr_is* */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_dav.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>


<comment type="block">/* ### what is the best way to set this? */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DEFAULT_PROVIDER</name></cpp:macro>    <cpp:value>"filesystem"</cpp:value></cpp:define>

<comment type="block">/* used to denote that mod_dav will be handling this request */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_HANDLER_NAME</name></cpp:macro> <cpp:value>"dav-handler"</cpp:value></cpp:define>

<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>dav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<enum>enum <block>{
    <decl><name>DAV_ENABLED_UNSET</name> <init>= <expr>0</expr></init></decl>,
    <decl><name>DAV_ENABLED_OFF</name></decl>,
    <decl><name>DAV_ENABLED_ON</name></decl>
}</block>;</enum>

<comment type="block">/* per-dir configuration */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_provider</name> *</type><name>provider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>locktimeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>allow_depthinfinity</name></decl>;</decl_stmt>

}</block></struct></type> <name>dav_dir_conf</name>;</typedef>

<comment type="block">/* per-server configuration */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>unused</name></decl>;</decl_stmt>

}</block></struct></type> <name>dav_server_conf</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_INHERIT_VALUE</name><parameter_list>(<param><type><name>parent</name></type></param>, <param><type><name>child</name></type></param>, <param><type><name>field</name></type></param>)</parameter_list></cpp:macro> \
                <cpp:value>((child)-&gt;field ? (child)-&gt;field : (parent)-&gt;field)</cpp:value></cpp:define>


<comment type="block">/* forward-declare for use in configuration lookup */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>module</name> <name>DAV_DECLARE_DATA</name></type> <name>dav_module</name></decl>;</decl_stmt>

<comment type="block">/* DAV methods */</comment>
<enum>enum <block>{
    <decl><name>DAV_M_BIND</name> <init>= <expr>0</expr></init></decl>,
    <decl><name>DAV_M_SEARCH</name></decl>,
    <decl><name>DAV_M_LAST</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>dav_methods</name><index>[<expr><name>DAV_M_LAST</name></expr>]</index></name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_init_handler</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
                             <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* DBG0("dav_init_handler"); */</comment>

    <comment type="block">/* Register DAV methods */</comment>
    <expr_stmt><expr><name><name>dav_methods</name><index>[<expr><name>DAV_M_BIND</name></expr>]</index></name> = <call><name>ap_method_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"BIND"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dav_methods</name><index>[<expr><name>DAV_M_SEARCH</name></expr>]</index></name> = <call><name>ap_method_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"SEARCH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>dav_create_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_server_conf</name> *</type><name>newconf</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>newconf</name> = (<name>dav_server_conf</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newconf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* ### this isn't used at the moment... */</comment>

    <return>return <expr><name>newconf</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>dav_merge_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>base</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overrides</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
    dav_server_conf *child = overrides;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>dav_server_conf</name> *</type><name>newconf</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>newconf</name> = (<name>dav_server_conf</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newconf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* ### nothing to merge right now... */</comment>

    <return>return <expr><name>newconf</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>dav_create_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dir</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* NOTE: dir==NULL creates the default per-dir config */</comment>

    <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>conf</name> = (<name>dav_dir_conf</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* clean up the directory to remove any trailing slash */</comment>
    <if>if <condition>(<expr><name>dir</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>d</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>l</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>l</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>l</name> &gt; 1 &amp;&amp; <name><name>d</name><index>[<expr><name>l</name> - 1</expr>]</index></name> == '/'</expr>)</condition><then>
            <expr_stmt><expr><name><name>d</name><index>[<expr><name>l</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>dir</name></name> = <name>d</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>conf</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>dav_merge_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>base</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overrides</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>parent</name> <init>= <expr><name>base</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>child</name> <init>= <expr><name>overrides</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>newconf</name> <init>= <expr>(<name>dav_dir_conf</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newconf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* DBG3("dav_merge_dir_config: new=%08lx  base=%08lx  overrides=%08lx",
       (long)newconf, (long)base, (long)overrides); */</comment>

    <expr_stmt><expr><name><name>newconf</name>-&gt;<name>provider_name</name></name> = <call><name>DAV_INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>provider_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newconf</name>-&gt;<name>provider</name></name> = <call><name>DAV_INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>parent</name>-&gt;<name>provider_name</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>child</name>-&gt;<name>provider_name</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00578</expr></argument>)</argument_list></call>
                         "\"DAV Off\" cannot be used to turn off a subtree "
                         "of a DAV-enabled location."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>provider_name</name></name></expr></argument>,
                            <argument><expr><name><name>parent</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00579</expr></argument>)</argument_list></call>
                         "A subtree cannot specify a different DAV provider "
                         "than its parent."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></then></if>

    <expr_stmt><expr><name><name>newconf</name>-&gt;<name>locktimeout</name></name> = <call><name>DAV_INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>locktimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newconf</name>-&gt;<name>dir</name></name> = <call><name>DAV_INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newconf</name>-&gt;<name>allow_depthinfinity</name></name> = <call><name>DAV_INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>,
                                                     <argument><expr><name>allow_depthinfinity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>newconf</name></expr>;</return>
}</block></function>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>dav_get_provider_name</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>conf</name> ? <name><name>conf</name>-&gt;<name>provider_name</name></name> : <name>NULL</name></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_provider</name> *</type><name>dav_get_provider</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* assert: conf-&gt;provider_name != NULL
       (otherwise, DAV is disabled, and we wouldn't be here) */</comment>

    <comment type="block">/* assert: conf-&gt;provider != NULL
       (checked when conf-&gt;provider_name is set) */</comment>
    <return>return <expr><name><name>conf</name>-&gt;<name>provider</name></name></expr>;</return>
}</block></function>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_hooks_locks *</argument>)</argument_list></macro> <macro><name>dav_get_lock_hooks</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>dav_get_provider</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>-&gt;<name>locks</name></expr>;</return>
}</block>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_hooks_propdb *</argument>)</argument_list></macro> <macro><name>dav_get_propdb_hooks</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>dav_get_provider</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>-&gt;<name>propdb</name></expr>;</return>
}</block>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_hooks_vsn *</argument>)</argument_list></macro> <macro><name>dav_get_vsn_hooks</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>dav_get_provider</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>-&gt;<name>vsn</name></expr>;</return>
}</block>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_hooks_binding *</argument>)</argument_list></macro> <macro><name>dav_get_binding_hooks</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>dav_get_provider</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>-&gt;<name>binding</name></expr>;</return>
}</block>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_hooks_search *</argument>)</argument_list></macro> <macro><name>dav_get_search_hooks</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>dav_get_provider</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>-&gt;<name>search</name></expr>;</return>
}</block>

<comment type="block">/*
 * Command handler for the DAV directive, which is TAKE1.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dav_cmd_dav</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>conf</name> <init>= <expr>(<name>dav_dir_conf</name> *)<name>config</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>provider_name</name></name> = <name>DAV_DEFAULT_PROVIDER</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>provider_name</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>provider</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>provider_name</name></name> = <name>arg1</name></expr>;</expr_stmt>
    }</block></else></if></else></if>

    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>provider_name</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* lookup and cache the actual provider now */</comment>
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>provider</name></name> = <call><name>dav_lookup_provider</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>provider</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* by the time they use it, the provider should be loaded and
               registered with us. */</comment>
            <return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
                                <argument><expr>"Unknown DAV provider: %s"</expr></argument>,
                                <argument><expr><name><name>conf</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Command handler for the DAVDepthInfinity directive, which is FLAG.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dav_cmd_davdepthinfinity</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
                                            <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>conf</name> <init>= <expr>(<name>dav_dir_conf</name> *)<name>config</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>arg</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>allow_depthinfinity</name></name> = <name>DAV_ENABLED_ON</name></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>allow_depthinfinity</name></name> = <name>DAV_ENABLED_OFF</name></expr>;</expr_stmt></else></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Command handler for DAVMinTimeout directive, which is TAKE1
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dav_cmd_davmintimeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>conf</name> <init>= <expr>(<name>dav_dir_conf</name> *)<name>config</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name>-&gt;<name>locktimeout</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>locktimeout</name></name> &lt; 0</expr>)</condition><then>
        <return>return <expr>"DAVMinTimeout requires a non-negative integer."</expr>;</return></then></if>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/*
** dav_error_response()
**
** Send a nice response back to the user. In most cases, Apache doesn't
** allow us to provide details in the body about what happened. This
** function allows us to completely specify the response body.
**
** ### this function is not logging any errors! (e.g. the body)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_error_response</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/html; charset=ISO-8859-1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* begin the response now... */</comment>
    <expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
              <argument><expr><name>DAV_RESPONSE_BODY_1</name></expr></argument>,
              <argument><expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></argument>,
              <argument><expr><name>DAV_RESPONSE_BODY_2</name></expr></argument>,
              <argument><expr>&amp;<name><name>r</name>-&gt;<name>status_line</name><index>[<expr>4</expr>]</index></name></expr></argument>,
              <argument><expr><name>DAV_RESPONSE_BODY_3</name></expr></argument>,
              <argument><expr><name>body</name></expr></argument>,
              <argument><expr><name>DAV_RESPONSE_BODY_4</name></expr></argument>,
              <argument><expr><call><name>ap_psignature</name><argument_list>(<argument><expr>"&lt;hr /&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><name>DAV_RESPONSE_BODY_5</name></expr></argument>,
              <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* the response has been sent. */</comment>
    <comment type="block">/*
     * ### Use of DONE obviates logging..!
     */</comment>
    <return>return <expr><name>DONE</name></expr>;</return>
}</block></function>


<comment type="block">/*
 * Send a "standardized" error response based on the error's namespace &amp; tag
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_error_response_tag</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                  <param><decl><type><name>dav_error</name> *</type><name>err</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name><name>err</name>-&gt;<name>status</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DAV_XML_CONTENT_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>ap_rputs</name><argument_list>(<argument>DAV_XML_HEADER DEBUG_CR
             "&lt;D:error xmlns:D=\"DAV:\""</argument>, <argument>r</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <if>if <condition>(<expr><name><name>err</name>-&gt;<name>desc</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### should move this namespace somewhere (with the others!) */</comment>
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" xmlns:m=\"http://apache.org/dav/xmlns\""</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>err</name>-&gt;<name>childtags</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>err</name>-&gt;<name>namespace</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
                    <argument><expr>" xmlns:C=\"%s\"&gt;" <name>DEBUG_CR</name>
                    "&lt;C:%s&gt;%s&lt;/C:%s&gt;" <name>DEBUG_CR</name></expr></argument>,
                    <argument><expr><name><name>err</name>-&gt;<name>namespace</name></name></expr></argument>,
                    <argument><expr><name><name>err</name>-&gt;<name>tagname</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>childtags</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>tagname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
                    <argument><expr>"&gt;" <name>DEBUG_CR</name>
                    "&lt;D:%s&gt;%s&lt;/D:%s&gt;" <name>DEBUG_CR</name></expr></argument>,
                    <argument><expr><name><name>err</name>-&gt;<name>tagname</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>childtags</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>tagname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
    <else>else <block>{
        <if>if <condition>(<expr><name><name>err</name>-&gt;<name>namespace</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
                    <argument><expr>" xmlns:C=\"%s\"&gt;" <name>DEBUG_CR</name>
                    "&lt;C:%s/&gt;" <name>DEBUG_CR</name></expr></argument>,
                    <argument><expr><name><name>err</name>-&gt;<name>namespace</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>tagname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
                    <argument><expr>"&gt;" <name>DEBUG_CR</name>
                    "&lt;D:%s/&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>tagname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

    <comment type="block">/* here's our mod_dav specific tag: */</comment>
    <if>if <condition>(<expr><name><name>err</name>-&gt;<name>desc</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
                   <argument><expr>"&lt;m:human-readable errcode=\"%d\"&gt;" <name>DEBUG_CR</name>
                   "%s" <name>DEBUG_CR</name>
                   "&lt;/m:human-readable&gt;" <name>DEBUG_CR</name></expr></argument>,
                   <argument><expr><name><name>err</name>-&gt;<name>error_id</name></name></expr></argument>,
                   <argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>desc</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/D:error&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* the response has been sent. */</comment>
    <comment type="block">/*
     * ### Use of DONE obviates logging..!
     */</comment>
    <return>return <expr><name>DONE</name></expr>;</return>
}</block></function>


<comment type="block">/*
 * Apache's URI escaping does not replace '&amp;' since that is a valid character
 * in a URI (to form a query section). We must explicitly handle it so that
 * we can embed the URI into an XML document.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dav_xml_escape_uri</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>e_uri</name> <init>= <expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* check the easy case... */</comment>
    <if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>e_uri</name></expr></argument>, <argument><expr>'&amp;'</expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>e_uri</name></expr>;</return></then></if>

    <comment type="block">/* there was a '&amp;', so more work is needed... sigh. */</comment>

    <comment type="block">/*
     * Note: this is a teeny bit of overkill since we know there are no
     * '&lt;' or '&gt;' characters, but who cares.
     */</comment>
    <return>return <expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>e_uri</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Write a complete RESPONSE object out as a &lt;DAV:repsonse&gt; xml
   element.  Data is sent into brigade BB, which is auto-flushed into
   the output filter stack for request R.  Use POOL for any temporary
   allocations.

   [Presumably the &lt;multistatus&gt; tag has already been written;  this
   routine is shared by dav_send_multistatus and dav_stream_response.]
*/</comment>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_send_one_response</name><argument_list>(<argument>dav_response *response</argument>,
                                        <argument>apr_bucket_brigade *bb</argument>,
                                        <argument>request_rec *r</argument>,
                                        <argument>apr_pool_t *pool</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>apr_text</name> *</type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>response</name>-&gt;<name>propresult</name>.<name>xmlns</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>"&lt;D:response&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>"&lt;D:response"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>t</name> = <name><name>response</name>-&gt;<name>propresult</name>.<name>xmlns</name></name></expr>;</init> <condition><expr><name>t</name></expr>;</condition> <incr><expr><name>t</name> = <name><name>t</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>t</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
      <expr_stmt><expr><call><name>ap_fputc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name>ap_fputstrs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
                <argument><expr><name>DEBUG_CR</name> "&lt;D:href&gt;"</expr></argument>,
                <argument><expr><call><name>dav_xml_escape_uri</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>response</name>-&gt;<name>href</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr>"&lt;/D:href&gt;" <name>DEBUG_CR</name></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>response</name>-&gt;<name>propresult</name>.<name>propstats</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
      <comment type="block">/* use the Status-Line text from Apache.  Note, this will
       * default to 500 Internal Server Error if first-&gt;status
       * is not a known (or valid) status code.
       */</comment>
      <expr_stmt><expr><call><name>ap_fputstrs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
                  <argument><expr>"&lt;D:status&gt;HTTP/1.1 "</expr></argument>,
                  <argument><expr><call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>response</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr>"&lt;/D:status&gt;" <name>DEBUG_CR</name></expr></argument>,
                  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <comment type="block">/* assume this includes &lt;propstat&gt; and is quoted properly */</comment>
      <for>for (<init><expr><name>t</name> = <name><name>response</name>-&gt;<name>propresult</name>.<name>propstats</name></name></expr>;</init> <condition><expr><name>t</name></expr>;</condition> <incr><expr><name>t</name> = <name><name>t</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>t</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>response</name>-&gt;<name>desc</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
      <comment type="block">/*
       * We supply the description, so we know it doesn't have to
       * have any escaping/encoding applied to it.
       */</comment>
      <expr_stmt><expr><call><name>ap_fputstrs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
                  <argument><expr>"&lt;D:responsedescription&gt;"</expr></argument>,
                  <argument><expr><name><name>response</name>-&gt;<name>desc</name></name></expr></argument>,
                  <argument><expr>"&lt;/D:responsedescription&gt;" <name>DEBUG_CR</name></expr></argument>,
                  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>"&lt;/D:response&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>


<comment type="block">/* Factorized helper function: prep request_rec R for a multistatus
   response and write &lt;multistatus&gt; tag into BB, destined for
   R-&gt;output_filters.  Use xml NAMESPACES in initial tag, if
   non-NULL. */</comment>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_begin_multistatus</name><argument_list>(<argument>apr_bucket_brigade *bb</argument>,
                                        <argument>request_rec *r</argument>, <argument>int status</argument>,
                                        <argument>apr_array_header_t *namespaces</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* Set the correct status and Content-Type */</comment>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DAV_XML_CONTENT_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send the headers and actual multistatus response now... */</comment>
    <macro><name>ap_fputs</name><argument_list>(<argument>r-&gt;output_filters</argument>, <argument>bb</argument>, <argument>DAV_XML_HEADER DEBUG_CR
             "&lt;D:multistatus xmlns:D=\"DAV:\""</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <if>if <condition>(<expr><name>namespaces</name> != <name>NULL</name></expr>)</condition><then> <block>{
       <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

       <for>for (<init><expr><name>i</name> = <name><name>namespaces</name>-&gt;<name>nelts</name></name></expr>;</init> <condition><expr><name>i</name>--</expr>;</condition> <incr/>) <block>{
           <expr_stmt><expr><call><name>ap_fprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>" xmlns:ns%d=\"%s\""</expr></argument>, <argument><expr><name>i</name></expr></argument>,
                      <argument><expr><call><name>APR_XML_GET_URI_ITEM</name><argument_list>(<argument><expr><name>namespaces</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></for>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>"&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<comment type="block">/* Finish a multistatus response started by dav_begin_multistatus: */</comment>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>dav_finish_multistatus</name><argument_list>(<argument>request_rec *r</argument>,
                                                 <argument>apr_bucket_brigade *bb</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>"&lt;/D:multistatus&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* indicate the end of the response body */</comment>
    <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* deliver whatever might be remaining in the brigade */</comment>
    <return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_send_multistatus</name><argument_list>(<argument>request_rec *r</argument>, <argument>int status</argument>,
                                       <argument>dav_response *first</argument>,
                                       <argument>apr_array_header_t *namespaces</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name> <init>= <expr><call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                                <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>dav_begin_multistatus</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>namespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>subpool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init>;</init> <condition><expr><name>first</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>first</name> = <name><name>first</name>-&gt;<name>next</name></name></expr></incr>) <block>{
      <expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dav_send_one_response</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>dav_finish_multistatus</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<comment type="block">/*
 * dav_log_err()
 *
 * Write error information to the log.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dav_log_err</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>dav_error</name> *</type><name>err</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>errscan</name></decl>;</decl_stmt>

    <comment type="block">/* Log the errors */</comment>
    <comment type="block">/* ### should have a directive to log the first or all */</comment>
    <for>for (<init><expr><name>errscan</name> = <name>err</name></expr>;</init> <condition><expr><name>errscan</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>errscan</name> = <name><name>errscan</name>-&gt;<name>prev</name></name></expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>errscan</name>-&gt;<name>desc</name></name> == <name>NULL</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>

        <comment type="block">/* Intentional no APLOGNO */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name><name>errscan</name>-&gt;<name>aprerr</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s  [%d, #%d]"</expr></argument>,
                      <argument><expr><name><name>errscan</name>-&gt;<name>desc</name></name></expr></argument>, <argument><expr><name><name>errscan</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr><name><name>errscan</name>-&gt;<name>error_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<comment type="block">/*
 * dav_handle_err()
 *
 * Handle the standard error processing. &lt;err&gt; must be non-NULL.
 *
 * &lt;response&gt; is set by the following:
 *   - dav_validate_request()
 *   - dav_add_lock()
 *   - repos_hooks-&gt;remove_resource
 *   - repos_hooks-&gt;move_resource
 *   - repos_hooks-&gt;copy_resource
 *   - vsn_hooks-&gt;update
 */</comment>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>dav_handle_err</name><argument_list>(<argument>request_rec *r</argument>, <argument>dav_error *err</argument>,
                                <argument>dav_response *response</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* log the errors */</comment>
    <expr_stmt><expr><call><name>dav_log_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>ap_is_HTTP_VALID_RESPONSE</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* we have responded already */</comment>
        <return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>response</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>dav_error</name> *</type><name>stackerr</name> <init>= <expr><name>err</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* our error messages are safe; tell Apache this */</comment>
        <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"verbose-error-to"</expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Didn't get a multistatus response passed in, but we still
           might be able to generate a standard &lt;D:error&gt; response.
           Search the error stack for an errortag. */</comment>
        <while>while <condition>(<expr><name>stackerr</name> != <name>NULL</name> &amp;&amp; <name><name>stackerr</name>-&gt;<name>tagname</name></name> == <name>NULL</name></expr>)</condition>
            <expr_stmt><expr><name>stackerr</name> = <name><name>stackerr</name>-&gt;<name>prev</name></name></expr>;</expr_stmt></while>

        <if>if <condition>(<expr><name>stackerr</name> != <name>NULL</name> &amp;&amp; <name><name>stackerr</name>-&gt;<name>tagname</name></name> != <name>NULL</name></expr>)</condition><then>
            <return>return <expr><call><name>dav_error_response_tag</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>stackerr</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

        <return>return <expr><name><name>err</name>-&gt;<name>status</name></name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* send the multistatus and tell Apache the request/response is DONE. */</comment>
    <expr_stmt><expr><call><name>dav_send_multistatus</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DONE</name></expr>;</return>
}</block>

<comment type="block">/* handy function for return values of methods that (may) create things.
 * locn if provided is assumed to be escaped. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_created</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>locn</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>what</name></decl></param>,
                       <param><decl><type><name>int</name></type> <name>replaced</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>locn</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>locn</name> = <name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* did the target resource already exist? */</comment>
    <if>if <condition>(<expr><name>replaced</name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default message */</comment>
        <return>return <expr><name>HTTP_NO_CONTENT</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Per HTTP/1.1, S10.2.2: add a Location header to contain the
     * URI that was created. */</comment>

    <comment type="block">/* Convert locn to an absolute URI, and return in Location header */</comment>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>locn</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* ### insert an ETag header? see HTTP/1.1 S10.2.2 */</comment>

    <comment type="block">/* Apache doesn't allow us to set a variable body for HTTP_CREATED, so
     * we must manufacture the entire response. */</comment>
    <expr_stmt><expr><name>body</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s %s has been created."</expr></argument>,
                        <argument><expr><name>what</name></expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>locn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CREATED</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* ### move to dav_util? */</comment>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>dav_get_depth</name><argument_list>(<argument>request_rec *r</argument>, <argument>int def_depth</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depth</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Depth"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>depth</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>def_depth</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>depth</name></expr></argument>, <argument><expr>"infinity"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <return>return <expr><name>DAV_INFINITY</name></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>depth</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>depth</name></expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <return>return <expr>1</expr>;</return>
    }</block></then></if></else></if></else></if>

    <comment type="block">/* The caller will return an HTTP_BAD_REQUEST. This will augment the
     * default message that Apache provides. */</comment>
    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00580</expr></argument>)</argument_list></call>
                  "An invalid Depth header was specified."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>-1</expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_get_overwrite</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>overwrite</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Overwrite"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>overwrite</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr>1</expr>;</return> <comment type="block">/* default is "T" */</comment>
    }</block></then></if>

    <if>if <condition>(<expr>(*<name>overwrite</name> == 'F' || *<name>overwrite</name> == 'f') &amp;&amp; <name><name>overwrite</name><index>[<expr>1</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(*<name>overwrite</name> == 'T' || *<name>overwrite</name> == 't') &amp;&amp; <name><name>overwrite</name><index>[<expr>1</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
        <return>return <expr>1</expr>;</return>
    }</block></then></if>

    <comment type="block">/* The caller will return an HTTP_BAD_REQUEST. This will augment the
     * default message that Apache provides. */</comment>
    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00581</expr></argument>)</argument_list></call>
                  "An invalid Overwrite header was specified."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>-1</expr>;</return>
}</block></function>

<comment type="block">/* resolve a request URI to a resource descriptor.
 *
 * If label_allowed != 0, then allow the request target to be altered by
 * a Label: header.
 *
 * If use_checked_in is true, then the repository provider should return
 * the resource identified by the DAV:checked-in property of the resource
 * identified by the Request-URI.
 */</comment>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type><name>dav_get_resource</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>label_allowed</name></decl></param>,
                                   <param><decl><type><name>int</name></type> <name>use_checked_in</name></decl></param>, <param><decl><type><name>dav_resource</name> **</type><name>res_p</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>

    <comment type="block">/* if the request target can be overridden, get any target selector */</comment>
    <if>if <condition>(<expr><name>label_allowed</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>label</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"label"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* assert: conf-&gt;provider != NULL */</comment>
    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>provider</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                             <argument><expr>"DAV not enabled for %s"</expr></argument>,
                             <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call>(*<name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>repos</name>-&gt;<name>get_resource</name></name>)<argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>dir</name></name></expr></argument>,
                                                 <argument><expr><name>label</name></expr></argument>, <argument><expr><name>use_checked_in</name></expr></argument>,
                                                 <argument><expr><name>res_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"Could not fetch resource information."</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Note: this shouldn't happen, but just be sure... */</comment>
    <if>if <condition>(<expr>*<name>res_p</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### maybe use HTTP_INTERNAL_SERVER_ERROR */</comment>
        <return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_NOT_FOUND</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"The provider did not define a "
                                          "resource for %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### hmm. this doesn't feel like the right place or thing to do */</comment>
    <comment type="block">/* if there were any input headers requiring a Vary header in the response,
     * add it now */</comment>
    <expr_stmt><expr><call><name>dav_add_vary_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>*<name>res_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_open_lockdb</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>ro</name></decl></param>, <param><decl><type><name>dav_lockdb</name> **</type><name>lockdb</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_locks</name> *</type><name>hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_LOCKS</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>hooks</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>lockdb</name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* open the thing lazily */</comment>
    <return>return <expr><call>(*<name><name>hooks</name>-&gt;<name>open_lockdb</name></name>)<argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ro</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>lockdb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/**
 * @return  1 if valid content-range,
 *          0 if no content-range,
 *         -1 if malformed content-range
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_parse_range</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                           <param><decl><type><name>apr_off_t</name> *</type><name>range_start</name></decl></param>, <param><decl><type><name>apr_off_t</name> *</type><name>range_end</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>range_c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>range</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>dash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>slash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>errp</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>range_c</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"content-range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>range_c</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr>0</expr>;</return></then></if>

    <expr_stmt><expr><name>range</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>range_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr>"bytes "</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> != 0
        || (<name>dash</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr>'-'</expr></argument>)</argument_list></call>) == <name>NULL</name>
        || (<name>slash</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* malformed header */</comment>
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>dash</name>++ = *<name>slash</name>++ = '\0'</expr>;</expr_stmt>

    <comment type="block">/* detect invalid ranges */</comment>
    <if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr><name>range_start</name></expr></argument>, <argument><expr><name>range</name> + 6</expr></argument>, <argument><expr>&amp;<name>errp</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call>
        || *<name>errp</name> || *<name>range_start</name> &lt; 0</expr>)</condition><then> <block>{
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr><name>range_end</name></expr></argument>, <argument><expr><name>dash</name></expr></argument>, <argument><expr>&amp;<name>errp</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call>
        || *<name>errp</name> || *<name>range_end</name> &lt; 0 || *<name>range_end</name> &lt; *<name>range_start</name></expr>)</condition><then> <block>{
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>*<name>slash</name> != '*'</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_off_t</name></type> <name>dummy</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>dummy</name></expr></argument>, <argument><expr><name>slash</name></expr></argument>, <argument><expr>&amp;<name>errp</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call>
            || *<name>errp</name> || <name>dummy</name> &lt;= *<name>range_end</name></expr>)</condition><then> <block>{
            <return>return <expr>-1</expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* we now have a valid range */</comment>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/* handle the GET method */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_get</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

    <comment type="block">/* This method should only be called when the resource is not
     * visible to Apache. We will fetch the resource from the repository,
     * then create a subrequest for Apache to handle.
     */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* set up the HTTP headers for the response */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>set_headers</name></name>)<argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"Unable to set up HTTP headers."</expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Handle conditional requests */</comment>
    <expr_stmt><expr><name>status</name> = <call><name>ap_meets_conditions</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
      <return>return <expr><name>status</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>DONE</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* okay... time to deliver the content */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>deliver</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>,
                                           <argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"Unable to deliver content."</expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>DONE</name></expr>;</return>
}</block></function>

<comment type="block">/* validate resource/locks on POST, then pass to the default handler */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_post</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* Note: depth == 0. Implies no need for a multistatus response. */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_validate_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr><name>DAV_VALIDATE_RESOURCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/* handle the PUT method */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_put</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>resource_state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_auto_version_info</name></type> <name>av_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_locks</name> *</type><name>locks_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_LOCKS</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_stream_mode</name></type> <name>mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_response</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>has_range</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>range_start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>range_end</name></decl>;</decl_stmt>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* If not a file or collection resource, PUT not allowed */</comment>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name>
        &amp;&amp; <name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_WORKING</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>body</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                            <argument><expr>"Cannot create resource %s with PUT."</expr></argument>,
                            <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Cannot PUT a collection */</comment>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
                                  <argument><expr>"Cannot PUT to a collection."</expr></argument>)</argument_list></call></expr>;</return>

    }</block></then></if>

    <expr_stmt><expr><name>resource_state</name> = <call><name>dav_get_resource_state</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Note: depth == 0 normally requires no multistatus response. However,
     * if we pass DAV_VALIDATE_PARENT, then we could get an error on a URI
     * other than the Request-URI, thereby requiring a multistatus.
     *
     * If the resource does not exist (DAV_RESOURCE_NULL), then we must
     * check the resource *and* its parent. If the resource exists or is
     * a locknull resource, then we check only the resource.
     */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_validate_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>multi_response</name></expr></argument>,
                                    <argument><expr><name>resource_state</name> == <name>DAV_RESOURCE_NULL</name> ?
                                    <name>DAV_VALIDATE_PARENT</name> :
                                    <name>DAV_VALIDATE_RESOURCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_response</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>has_range</name> = <call><name>dav_parse_range</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>range_start</name></expr></argument>, <argument><expr>&amp;<name>range_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>has_range</name> &lt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* RFC 2616 14.16: If we receive an invalid Content-Range we must
         * not use the content.
         */</comment>
        <expr_stmt><expr><name>body</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                            <argument><expr>"Malformed Content-Range header for PUT %s."</expr></argument>,
                            <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <if>if <condition>(<expr><name>has_range</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mode</name> = <name>DAV_MODE_WRITE_SEEKABLE</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>mode</name> = <name>DAV_MODE_WRITE_TRUNC</name></expr>;</expr_stmt>
    }</block></else></if></else></if>

    <comment type="block">/* make sure the resource can be modified (if versioning repository) */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_auto_checkout</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>,
                                 <argument><expr>0</expr></argument> <comment type="block">/* not parent_only */</comment>,
                                 <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Create the new file in the repository */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>open_stream</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
                                               <argument><expr>&amp;<name>stream</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### assuming FORBIDDEN is probably not quite right... */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Unable to PUT new contents for %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>err</name> == <name>NULL</name> &amp;&amp; <name>has_range</name></expr>)</condition><then> <block>{
        <comment type="block">/* a range was provided. seek to the start */</comment>
        <expr_stmt><expr><name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>seek_stream</name></name>)<argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>range_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>err</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seen_eos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <do>do <block>{
            <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>rc</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
                                <argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr><name>DAV_READ_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>http_err</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name> *</type><name>msg</name> <init>= <expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>http_err</name> = <call><name>ap_map_http_request_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>msg</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"An error occurred while reading "
                                            "the request body (URI: %s)"</expr></argument>,
                                            <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>http_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>

            <for>for (<init><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init>
                 <condition><expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</condition>
                 <incr><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></incr>)
            <block>{
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>seen_eos</name> = 1</expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>

                <if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>

                <if>if <condition>(<expr><name>err</name> == <name>NULL</name></expr>)</condition><then> <block>{
                    <comment type="block">/* write whatever we read, until we see an error */</comment>
                    <expr_stmt><expr><name>rc</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                       <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rc</name></expr></argument>,
                                           <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                                        <argument><expr>"An error occurred while"
                                                        " reading the request body"
                                                        " from the bucket (URI: %s)"</expr></argument>,
                                                        <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>

                    <expr_stmt><expr><name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>write_stream</name></name>)<argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

            <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> while <condition>(<expr>!<name>seen_eos</name></expr>)</condition>;</do>

        <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>err2</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>close_stream</name></name>)<argument_list>(<argument><expr><name>stream</name></expr></argument>,
                                                <argument><expr><name>err</name> == <name>NULL</name></expr></argument> <comment type="block">/* commit */</comment>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = <call><name>dav_join_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
     * Ensure that we think the resource exists now.
     * ### eek. if an error occurred during the write and we did not commit,
     * ### then the resource might NOT exist (e.g. dav_fs_repos.c)
     */</comment>
    <if>if <condition>(<expr><name>err</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>resource</name>-&gt;<name>exists</name></name> = 1</expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* restore modifiability of resources back to what they were */</comment>
    <expr_stmt><expr><name>err2</name> = <call><name>dav_auto_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>err</name> != <name>NULL</name></expr></argument> <comment type="block">/* undo if error */</comment>,
                            <argument><expr>0</expr></argument> <comment type="block">/*unlock*/</comment>, <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check for errors now */</comment>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_join_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* don't forget err2 */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>err2</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* just log a warning */</comment>
        <expr_stmt><expr><name>err2</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err2</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                              <argument><expr>"The PUT was successful, but there "
                              "was a problem automatically checking in "
                              "the resource or its parent collection."</expr></argument>,
                              <argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dav_log_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err2</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* ### place the Content-Type and Content-Language into the propdb */</comment>

    <if>if <condition>(<expr><name>locks_hooks</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>locks_hooks</name>-&gt;<name>open_lockdb</name></name>)<argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>lockdb</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* The file creation was successful, but the locking failed. */</comment>
            <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                 <argument><expr>"The file was PUT successfully, but there "
                                 "was a problem opening the lock database "
                                 "which prevents inheriting locks from the "
                                 "parent resources."</expr></argument>,
                                 <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="block">/* notify lock system that we have created/replaced a resource */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_notify_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>resource_state</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call>(*<name><name>locks_hooks</name>-&gt;<name>close_lockdb</name></name>)<argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* The file creation was successful, but the locking failed. */</comment>
            <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                 <argument><expr>"The file was PUT successfully, but there "
                                 "was a problem updating its lock "
                                 "information."</expr></argument>,
                                 <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* NOTE: WebDAV spec, S8.7.1 states properties should be unaffected */</comment>

    <comment type="block">/* return an appropriate response (HTTP_CREATED or HTTP_NO_CONTENT) */</comment>
    <return>return <expr><call><name>dav_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Resource"</expr></argument>, <argument><expr><name>resource_state</name> == <name>DAV_RESOURCE_EXISTS</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Use POOL to temporarily construct a dav_response object (from WRES
   STATUS, and PROPSTATS) and stream it via WRES's ctx-&gt;brigade. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dav_stream_response</name><parameter_list>(<param><decl><type><name>dav_walk_resource</name> *</type><name>wres</name></decl></param>,
                                <param><decl><type><name>int</name></type> <name>status</name></decl></param>,
                                <param><decl><type><name>dav_get_props_result</name> *</type><name>propstats</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_response</name></type> <name>resp</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_walker_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>wres</name>-&gt;<name>walk_ctx</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>resp</name>.<name>href</name></name> = <name><name>wres</name>-&gt;<name>resource</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>resp</name>.<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>propstats</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>resp</name>.<name>propresult</name></name> = *<name>propstats</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>dav_send_one_response</name><argument_list>(<argument><expr>&amp;<name>resp</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block">/* ### move this to dav_util? */</comment>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_add_response</name><argument_list>(<argument>dav_walk_resource *wres</argument>,
                                   <argument>int status</argument>, <argument>dav_get_props_result *propstats</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>dav_response</name> *</type><name>resp</name></decl>;</decl_stmt>

    <comment type="block">/* just drop some data into an dav_response */</comment>
    <expr_stmt><expr><name>resp</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>wres</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>resp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>resp</name>-&gt;<name>href</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>wres</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>wres</name>-&gt;<name>resource</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>resp</name>-&gt;<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>propstats</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>resp</name>-&gt;<name>propresult</name></name> = *<name>propstats</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>resp</name>-&gt;<name>next</name></name> = <name><name>wres</name>-&gt;<name>response</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wres</name>-&gt;<name>response</name></name> = <name>resp</name></expr>;</expr_stmt>
}</block>


<comment type="block">/* handle the DELETE method */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_delete</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_auto_version_info</name></type> <name>av_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_response</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

    <comment type="block">/* We don't use the request body right now, so torch it. */</comment>
    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_discard_request_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* 2518 says that depth must be infinity only for collections.
     * For non-collections, depth is ignored, unless it is an illegal value (1).
     */</comment>
    <expr_stmt><expr><name>depth</name> = <call><name>dav_get_depth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DAV_INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name> &amp;&amp; <name>depth</name> != <name>DAV_INFINITY</name></expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default message. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00582</expr></argument>)</argument_list></call>
                      "Depth must be \"infinity\" for DELETE of a collection."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>collection</name></name> &amp;&amp; <name>depth</name> == 1</expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default message. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00583</expr></argument>)</argument_list></call>
                      "Depth of \"1\" is not allowed for DELETE."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
    ** If any resources fail the lock/If: conditions, then we must fail
    ** the delete. Each of the failing resources will be listed within
    ** a DAV:multistatus body, wrapped into a 424 response.
    **
    ** Note that a failure on the resource itself does not generate a
    ** multistatus response -- only internal members/collections.
    */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_validate_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr>&amp;<name>multi_response</name></expr></argument>,
                                    <argument><expr><name>DAV_VALIDATE_PARENT</name>
                                    | <name>DAV_VALIDATE_USE_424</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not DELETE %s due to a failed "
                                          "precondition (e.g. locks)."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_response</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### RFC 2518 s. 8.10.5 says to remove _all_ locks, not just those
     *     locked by the token(s) in the if_header.
     */</comment>
    <if>if <condition>(<expr>(<name>result</name> = <call><name>dav_unlock</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* if versioned resource, make sure parent is checked out */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_auto_checkout</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/* parent_only */</comment>,
                                 <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* try to remove the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>remove_resource</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr>&amp;<name>multi_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* restore writability of parent back to what it was */</comment>
    <expr_stmt><expr><name>err2</name> = <call><name>dav_auto_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name> != <name>NULL</name></expr></argument> <comment type="block">/* undo if error */</comment>,
                            <argument><expr>0</expr></argument> <comment type="block">/*unlock*/</comment>, <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check for errors now */</comment>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not DELETE %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_response</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>err2</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* just log a warning */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err2</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"The DELETE was successful, but there "
                             "was a problem automatically checking in "
                             "the parent collection."</expr></argument>,
                             <argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dav_log_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* ### HTTP_NO_CONTENT if no body, HTTP_OK if there is a body (some day) */</comment>

    <comment type="block">/* Apache will supply a default error for this. */</comment>
    <return>return <expr><name>HTTP_NO_CONTENT</name></expr>;</return>
}</block></function>

<comment type="block">/* generate DAV:supported-method-set OPTIONS response */</comment>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type><name>dav_gen_supported_methods</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>apr_table_t</name> *</type><name>methods</name></decl></param>,
                                            <param><decl><type><name>apr_text_header</name> *</type><name>body</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>arr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>child</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_attr</name> *</type><name>attr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;D:supported-method-set&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>elem</name>-&gt;<name>first_child</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* show all supported methods */</comment>
        <expr_stmt><expr><name>arr</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>elts</name> = (const <name>apr_table_entry_t</name> *)<name><name>arr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>

        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name> == <name>NULL</name></expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                             <argument><expr>"&lt;D:supported-method D:name=\"%s\"/&gt;"
                             <name>DEBUG_CR</name></expr></argument>,
                             <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then>
    <else>else <block>{
        <comment type="block">/* check for support of specific methods */</comment>
        <for>for (<init><expr><name>child</name> = <name><name>elem</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>child</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>APR_XML_NS_DAV_ID</name>
                &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"supported-method"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <comment type="block">/* go through attributes to find method name */</comment>
                <for>for (<init><expr><name>attr</name> = <name><name>child</name>-&gt;<name>attr</name></name></expr>;</init> <condition><expr><name>attr</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>attr</name> = <name><name>attr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
                    <if>if <condition>(<expr><name><name>attr</name>-&gt;<name>ns</name></name> == <name>APR_XML_NS_DAV_ID</name>
                        &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                            <expr_stmt><expr><name>name</name> = <name><name>attr</name>-&gt;<name>value</name></name></expr>;</expr_stmt></then></if>
                }</block></for>

                <if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then> <block>{
                    <return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                                         <argument><expr>"A DAV:supported-method element "
                                         "does not have a \"name\" attribute"</expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>

                <comment type="block">/* see if method is supported */</comment>
                <if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                     <argument><expr>"&lt;D:supported-method D:name=\"%s\"/&gt;"
                                     <name>DEBUG_CR</name></expr></argument>,
                                     <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></else></if>

    <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;/D:supported-method-set&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/* generate DAV:supported-live-property-set OPTIONS response */</comment>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type><name>dav_gen_supported_live_props</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                               <param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
                                               <param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
                                               <param><decl><type><name>apr_text_header</name> *</type><name>body</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_propdb</name> *</type><name>propdb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>child</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_attr</name> *</type><name>attr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>

    <comment type="block">/* open lock database, to report on supported lock properties */</comment>
    <comment type="block">/* ### should open read-only */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_open_lockdb</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>lockdb</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                              <argument><expr>"The lock database could not be opened, "
                              "preventing the reporting of supported lock "
                              "properties."</expr></argument>,
                              <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* open the property database (readonly) for the resource */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_open_propdb</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr>&amp;<name>propdb</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>lockdb</name> != <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr><call>(*<name><name>lockdb</name>-&gt;<name>hooks</name>-&gt;<name>close_lockdb</name></name>)<argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <return>return <expr><call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                              <argument><expr>"The property database could not be opened, "
                              "preventing report of supported properties."</expr></argument>,
                              <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;D:supported-live-property-set&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>elem</name>-&gt;<name>first_child</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* show all supported live properties */</comment>
        <decl_stmt><decl><type><name>dav_get_props_result</name></type> <name>props</name> <init>= <expr><call><name>dav_get_allprops</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr><name>DAV_PROP_INSERT_SUPPORTED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>body</name>-&gt;<name>last</name>-&gt;<name>next</name></name> = <name><name>props</name>.<name>propstats</name></name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>body</name>-&gt;<name>last</name>-&gt;<name>next</name></name> != <name>NULL</name></expr>)</condition>
            <expr_stmt><expr><name><name>body</name>-&gt;<name>last</name></name> = <name><name>body</name>-&gt;<name>last</name>-&gt;<name>next</name></name></expr>;</expr_stmt></while>
    }</block></then>
    <else>else <block>{
        <comment type="block">/* check for support of specific live property */</comment>
        <for>for (<init><expr><name>child</name> = <name><name>elem</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>child</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>APR_XML_NS_DAV_ID</name>
                &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"supported-live-property"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nmspace</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <comment type="block">/* go through attributes to find name and namespace */</comment>
                <for>for (<init><expr><name>attr</name> = <name><name>child</name>-&gt;<name>attr</name></name></expr>;</init> <condition><expr><name>attr</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>attr</name> = <name><name>attr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
                    <if>if <condition>(<expr><name><name>attr</name>-&gt;<name>ns</name></name> == <name>APR_XML_NS_DAV_ID</name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                            <expr_stmt><expr><name>name</name> = <name><name>attr</name>-&gt;<name>value</name></name></expr>;</expr_stmt></then>
                        <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"namespace"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                            <expr_stmt><expr><name>nmspace</name> = <name><name>attr</name>-&gt;<name>value</name></name></expr>;</expr_stmt></then></if></else></if>
                    }</block></then></if>
                }</block></for>

                <if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                                        <argument><expr>"A DAV:supported-live-property "
                                        "element does not have a \"name\" "
                                        "attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>

                <comment type="block">/* default namespace to DAV: */</comment>
                <if>if <condition>(<expr><name>nmspace</name> == <name>NULL</name></expr>)</condition><then>
                    <expr_stmt><expr><name>nmspace</name> = "DAV:"</expr>;</expr_stmt></then></if>

                <comment type="block">/* check for support of property */</comment>
                <expr_stmt><expr><call><name>dav_get_liveprop_supported</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr><name>nmspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></else></if>

    <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;/D:supported-live-property-set&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>dav_close_propdb</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>lockdb</name> != <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><call>(*<name><name>lockdb</name>-&gt;<name>hooks</name>-&gt;<name>close_lockdb</name></name>)<argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* generate DAV:supported-report-set OPTIONS response */</comment>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type><name>dav_gen_supported_reports</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name></decl></param>,
                                            <param><decl><type><name>apr_text_header</name> *</type><name>body</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>child</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_attr</name> *</type><name>attr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;D:supported-report-set&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>vsn_hooks</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>dav_report_elem</name> *</type><name>reports</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>dav_report_elem</name> *</type><name>rp</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>vsn_hooks</name>-&gt;<name>avail_reports</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr>&amp;<name>reports</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                  <argument><expr>"DAV:supported-report-set could not be "
                                  "determined due to a problem fetching the "
                                  "available reports for this resource."</expr></argument>,
                                  <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>reports</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>elem</name>-&gt;<name>first_child</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
                <comment type="block">/* show all supported reports */</comment>
                <for>for (<init><expr><name>rp</name> = <name>reports</name></expr>;</init> <condition><expr><name><name>rp</name>-&gt;<name>nmspace</name></name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>rp</name></expr></incr>) <block>{
                    <comment type="block">/* Note: we presume reports-&gt;namespace is
                     * properly XML/URL quoted */</comment>
                    <expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                     <argument><expr>"&lt;D:supported-report D:name=\"%s\" "
                                     "D:namespace=\"%s\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
                                     <argument><expr><name><name>rp</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>rp</name>-&gt;<name>nmspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then>
            <else>else <block>{
                <comment type="block">/* check for support of specific report */</comment>
                <for>for (<init><expr><name>child</name> = <name><name>elem</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>child</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>) <block>{
                    <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>APR_XML_NS_DAV_ID</name>
                        &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"supported-report"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nmspace</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                        <comment type="block">/* go through attributes to find name and namespace */</comment>
                        <for>for (<init><expr><name>attr</name> = <name><name>child</name>-&gt;<name>attr</name></name></expr>;</init> <condition><expr><name>attr</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>attr</name> = <name><name>attr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
                            <if>if <condition>(<expr><name><name>attr</name>-&gt;<name>ns</name></name> == <name>APR_XML_NS_DAV_ID</name></expr>)</condition><then> <block>{
                                <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                                    <expr_stmt><expr><name>name</name> = <name><name>attr</name>-&gt;<name>value</name></name></expr>;</expr_stmt></then>
                                <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"namespace"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                                    <expr_stmt><expr><name>nmspace</name> = <name><name>attr</name>-&gt;<name>value</name></name></expr>;</expr_stmt></then></if></else></if>
                            }</block></then></if>
                        }</block></for>

                        <if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then> <block>{
                            <return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                                                 <argument><expr>"A DAV:supported-report element "
                                                 "does not have a \"name\" attribute"</expr></argument>)</argument_list></call></expr>;</return>
                        }</block></then></if>

                        <comment type="block">/* default namespace to DAV: */</comment>
                        <if>if <condition>(<expr><name>nmspace</name> == <name>NULL</name></expr>)</condition><then>
                            <expr_stmt><expr><name>nmspace</name> = "DAV:"</expr>;</expr_stmt></then></if>

                        <for>for (<init><expr><name>rp</name> = <name>reports</name></expr>;</init> <condition><expr><name><name>rp</name>-&gt;<name>nmspace</name></name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>rp</name></expr></incr>) <block>{
                            <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>rp</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call> == 0
                                &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>nmspace</name></expr></argument>, <argument><expr><name><name>rp</name>-&gt;<name>nmspace</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                                <comment type="block">/* Note: we presume reports-&gt;nmspace is
                                 * properly XML/URL quoted
                                 */</comment>
                                <expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                                 <argument><expr>"&lt;D:supported-report "
                                                 "D:name=\"%s\" "
                                                 "D:namespace=\"%s\"/&gt;"
                                                 <name>DEBUG_CR</name></expr></argument>,
                                                 <argument><expr><name><name>rp</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>rp</name>-&gt;<name>nmspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <break>break;</break>
                            }</block></then></if>
                        }</block></for>
                    }</block></then></if>
                }</block></for>
            }</block></else></if>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;/D:supported-report-set&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>


<comment type="block">/* handle the SEARCH method */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_search</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_search</name> *</type><name>search_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_SEARCH</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_status</name></decl>;</decl_stmt>

    <comment type="block">/* If no search provider, decline the request */</comment>
    <if>if <condition>(<expr><name>search_hooks</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <comment type="block">/* This method should only be called when the resource is not
     * visible to Apache. We will fetch the resource from the repository,
     * then create a subrequest for Apache to handle.
     */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* set up the HTTP headers for the response */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>set_headers</name></name>)<argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"Unable to set up HTTP headers."</expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>DONE</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* okay... time to search the content */</comment>
    <comment type="block">/* Let's validate XML and process walk function
     * in the hook function
     */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>search_hooks</name>-&gt;<name>search_resource</name></name>)<argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>multi_status</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* We have results in multi_status */</comment>
    <comment type="block">/* Should I pass namespace?? */</comment>
    <expr_stmt><expr><call><name>dav_send_multistatus</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_MULTI_STATUS</name></expr></argument>, <argument><expr><name>multi_status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>DONE</name></expr>;</return>
}</block></function>


<comment type="block">/* handle the OPTIONS method */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_options</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_locks</name> *</type><name>locks_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_LOCKS</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_VSN</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_binding</name> *</type><name>binding_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_BINDING</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_search</name> *</type><name>search_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_SEARCH</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dav_level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>allow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>arr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>methods</name> <init>= <expr><call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_text_header</name></type> <name>vsn_options</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_text_header</name></type> <name>body</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_text</name> *</type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>text_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>uri_ary</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>extensions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_list_provider_names_t</name> *</type><name>entry</name></decl>;</decl_stmt>

    <comment type="block">/* resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* parse any request body */</comment>
    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_xml_parse_input</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>
    <comment type="block">/* note: doc == NULL if no request body */</comment>

    <if>if <condition>(<expr><name>doc</name> &amp;&amp; !<call><name>dav_validate_root</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"options"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00584</expr></argument>)</argument_list></call>
                      "The \"options\" element was not found."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* determine which providers are available */</comment>
    <expr_stmt><expr><name>dav_level</name> = "1"</expr>;</expr_stmt>

    <if>if <condition>(<expr><name>locks_hooks</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>dav_level</name> = "1,2"</expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>binding_hooks</name> != <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name>dav_level</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dav_level</name></expr></argument>, <argument><expr>",bindings"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <comment type="block">/* DAV header additions registered by external modules */</comment>
    <expr_stmt><expr><name>extensions</name> = <call><name>ap_list_provider_names</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>DAV_OPTIONS_EXTENSION_GROUP</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>entry</name> = (<name>ap_list_provider_names_t</name> *)<name><name>extensions</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>extensions</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>entry</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>dav_options_provider</name> *</type><name>options</name> <init>=
            <expr><call><name>dav_get_options_providers</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>options</name> &amp;&amp; <name><name>options</name>-&gt;<name>dav_header</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_text_header</name></type> <name>hoptions</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>options</name>-&gt;<name>dav_header</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>&amp;<name>hoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><expr><name>t</name> = <name><name>hoptions</name>.<name>first</name></name></expr>;</init> <condition><expr><name>t</name> &amp;&amp; <name><name>t</name>-&gt;<name>text</name></name></expr>;</condition> <incr><expr><name>t</name> = <name><name>t</name>-&gt;<name>next</name></name></expr></incr>)
                <expr_stmt><expr><name>dav_level</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dav_level</name></expr></argument>, <argument><expr>","</expr></argument>, <argument><expr><name><name>t</name>-&gt;<name>text</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></then></if>
    }</block></for>

    <comment type="block">/* ###
     * MSFT Web Folders chokes if length of DAV header value &gt; 63 characters!
     * To workaround that, we use separate DAV headers for versioning and
     * live prop provider namespace URIs.
     * ###
     */</comment>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"DAV"</expr></argument>, <argument><expr><name>dav_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If there is a versioning provider, generate DAV headers
     * for versioning options.
     */</comment>
    <if>if <condition>(<expr><name>vsn_hooks</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call>(*<name><name>vsn_hooks</name>-&gt;<name>get_vsn_options</name></name>)<argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>vsn_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><expr><name>t</name> = <name><name>vsn_options</name>.<name>first</name></name></expr>;</init> <condition><expr><name>t</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>t</name> = <name><name>t</name>-&gt;<name>next</name></name></expr></incr>)
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"DAV"</expr></argument>, <argument><expr><name><name>t</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></then></if>

    <comment type="block">/*
     * Gather property set URIs from all the liveprop providers,
     * and generate a separate DAV header for each URI, to avoid
     * problems with long header lengths.
     */</comment>
    <expr_stmt><expr><name>uri_ary</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dav_run_gather_propsets</name><argument_list>(<argument><expr><name>uri_ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>uri_ary</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr>((<name>char</name> **)<name><name>uri_ary</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index> != <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"DAV"</expr></argument>, <argument><expr>((<name>char</name> **)<name><name>uri_ary</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></for>

    <comment type="block">/* this tells MSFT products to skip looking for FrontPage extensions */</comment>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"MS-Author-Via"</expr></argument>, <argument><expr>"DAV"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Determine which methods are allowed on the resource.
     * Three cases:  resource is null (3), is lock-null (7.4), or exists.
     *
     * All cases support OPTIONS, and if there is a lock provider, LOCK.
     * (Lock-) null resources also support MKCOL and PUT.
     * Lock-null supports PROPFIND and UNLOCK.
     * Existing resources support lots of stuff.
     */</comment>

    <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"OPTIONS"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* ### take into account resource type */</comment>
    <switch>switch <condition>(<expr><call><name>dav_get_resource_state</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{
    <case>case <expr><name>DAV_RESOURCE_EXISTS</name></expr>:
        <comment type="block">/* resource exists */</comment>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"GET"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"HEAD"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"POST"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"DELETE"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"TRACE"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"PROPFIND"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"PROPPATCH"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"COPY"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"MOVE"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"PUT"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><name>locks_hooks</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"LOCK"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"UNLOCK"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <break>break;</break>

    </case><case>case <expr><name>DAV_RESOURCE_LOCK_NULL</name></expr>:
        <comment type="block">/* resource is lock-null. */</comment>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"MKCOL"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"PROPFIND"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"PUT"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>locks_hooks</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"LOCK"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"UNLOCK"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <break>break;</break>

    </case><case>case <expr><name>DAV_RESOURCE_NULL</name></expr>:
        <comment type="block">/* resource is null. */</comment>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"MKCOL"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"PUT"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>locks_hooks</name> != <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"LOCK"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <break>break;</break>

    </case><default>default:
        <comment type="block">/* ### internal error! */</comment>
        <break>break;</break>
    </default>}</block></switch>

    <comment type="block">/* If there is a versioning provider, add versioning methods */</comment>
    <if>if <condition>(<expr><name>vsn_hooks</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call>(*<name><name>vsn_hooks</name>-&gt;<name>versionable</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"VERSION-CONTROL"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <if>if <condition>(<expr><name><name>vsn_hooks</name>-&gt;<name>can_be_workspace</name></name> != <name>NULL</name>
                &amp;&amp; <call>(*<name><name>vsn_hooks</name>-&gt;<name>can_be_workspace</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"MKWORKSPACE"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <if>if <condition>(<expr><name><name>vsn_hooks</name>-&gt;<name>can_be_activity</name></name> != <name>NULL</name>
                &amp;&amp; <call>(*<name><name>vsn_hooks</name>-&gt;<name>can_be_activity</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"MKACTIVITY"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>versioned</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call>(*<name><name>vsn_hooks</name>-&gt;<name>versionable</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"VERSION-CONTROL"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>working</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"CHECKIN"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* ### we might not support this DeltaV option */</comment>
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"UNCHECKOUT"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>vsn_hooks</name>-&gt;<name>add_label</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"CHECKOUT"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"LABEL"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"CHECKOUT"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if></else></if>
    }</block></then></if>

    <comment type="block">/* If there is a bindings provider, see if resource is bindable */</comment>
    <if>if <condition>(<expr><name>binding_hooks</name> != <name>NULL</name>
        &amp;&amp; <call>(*<name><name>binding_hooks</name>-&gt;<name>is_bindable</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"BIND"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* If there is a search provider, set SEARCH in option */</comment>
    <if>if <condition>(<expr><name>search_hooks</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>"SEARCH"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* additional methods registered by external modules */</comment>
    <expr_stmt><expr><name>extensions</name> = <call><name>ap_list_provider_names</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>DAV_OPTIONS_EXTENSION_GROUP</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>entry</name> = (<name>ap_list_provider_names_t</name> *)<name><name>extensions</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>extensions</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>entry</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>dav_options_provider</name> *</type><name>options</name> <init>=
            <expr><call><name>dav_get_options_providers</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>options</name> &amp;&amp; <name><name>options</name>-&gt;<name>dav_method</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_text_header</name></type> <name>hoptions</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>options</name>-&gt;<name>dav_method</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>&amp;<name>hoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><expr><name>t</name> = <name><name>hoptions</name>.<name>first</name></name></expr>;</init> <condition><expr><name>t</name> &amp;&amp; <name><name>t</name>-&gt;<name>text</name></name></expr>;</condition> <incr><expr><name>t</name> = <name><name>t</name>-&gt;<name>next</name></name></expr></incr>)
                <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr><name><name>t</name>-&gt;<name>text</name></name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></then></if>
    }</block></for>

    <comment type="block">/* Generate the Allow header */</comment>
    <expr_stmt><expr><name>arr</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>elts</name> = (const <name>apr_table_entry_t</name> *)<name><name>arr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>text_size</name> = 0</expr>;</expr_stmt>

    <comment type="block">/* first, compute total length */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name> == <name>NULL</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>

        <comment type="block">/* add 1 for comma or null */</comment>
        <expr_stmt><expr><name>text_size</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>s</name> = <name>allow</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>text_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name> == <name>NULL</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>

        <if>if <condition>(<expr><name>s</name> != <name>allow</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>s</name>++ = ','</expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Allow"</expr></argument>, <argument><expr><name>allow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block">/* If there is search set_option_head function, set head */</comment>
    <comment type="block">/* DASL: &lt;DAV:basicsearch&gt;
     * DASL: &lt;http://foo.bar.com/syntax1&gt;
     * DASL: &lt;http://akuma.com/syntax2&gt;
     */</comment>
    <if>if <condition>(<expr><name>search_hooks</name> != <name>NULL</name>
        &amp;&amp; *<name><name>search_hooks</name>-&gt;<name>set_option_head</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>search_hooks</name>-&gt;<name>set_option_head</name></name>)<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* if there was no request body, then there is no response body */</comment>
    <if>if <condition>(<expr><name>doc</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_set_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* ### this sends a Content-Type. the default OPTIONS does not. */</comment>

        <comment type="block">/* ### the default (ap_send_http_options) returns OK, but I believe
         * ### that is because it is the default handler and nothing else
         * ### will run after the thing. */</comment>
        <return>return <expr><name>DONE</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* handle each options request */</comment>
    <for>for (<init><expr><name>elem</name> = <name><name>doc</name>-&gt;<name>root</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>elem</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>elem</name> = <name><name>elem</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <comment type="block">/* check for something we recognize first */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>core_option</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>elem</name>-&gt;<name>ns</name></name> == <name>APR_XML_NS_DAV_ID</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>elem</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"supported-method-set"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>err</name> = <call><name>dav_gen_supported_methods</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr>&amp;<name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>core_option</name> = 1</expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>elem</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"supported-live-property-set"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>err</name> = <call><name>dav_gen_supported_live_props</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr>&amp;<name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>core_option</name> = 1</expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>elem</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"supported-report-set"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>err</name> = <call><name>dav_gen_supported_reports</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr><name>vsn_hooks</name></expr></argument>, <argument><expr>&amp;<name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>core_option</name> = 1</expr>;</expr_stmt>
            }</block></then></if></else></if></else></if>
        }</block></then></if>

        <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

        <comment type="block">/* if unrecognized option, pass to versioning provider */</comment>
        <if>if <condition>(<expr>!<name>core_option</name> &amp;&amp; <name>vsn_hooks</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>vsn_hooks</name>-&gt;<name>get_option</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr>&amp;<name>body</name></expr></argument>)</argument_list></call>)
                != <name>NULL</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block></then></if>
    }</block></for>

    <comment type="block">/* send the options response */</comment>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DAV_XML_CONTENT_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* send the headers and response body */</comment>
    <macro><name>ap_rputs</name><argument_list>(<argument>DAV_XML_HEADER DEBUG_CR
             "&lt;D:options-response xmlns:D=\"DAV:\"&gt;" DEBUG_CR</argument>, <argument>r</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <for>for (<init><expr><name>t</name> = <name><name>body</name>.<name>first</name></name></expr>;</init> <condition><expr><name>t</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>t</name> = <name><name>t</name>-&gt;<name>next</name></name></expr></incr>)
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name><name>t</name>-&gt;<name>text</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/D:options-response&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* we've sent everything necessary to the client. */</comment>
    <return>return <expr><name>DONE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dav_cache_badprops</name><parameter_list>(<param><decl><type><name>dav_walker_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_text_header</name></type> <name>hdr</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/* just return if we built the thing already */</comment>
    <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>propstat_404</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>w</name>.<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>,
                    <argument><expr>"&lt;D:propstat&gt;" <name>DEBUG_CR</name>
                    "&lt;D:prop&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>elem</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"prop"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>elem</name> = <name><name>elem</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>elem</name></expr>;</condition> <incr><expr><name>elem</name> = <name><name>elem</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>w</name>.<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>,
                        <argument><expr><call><name>apr_xml_empty_elem</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>w</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>w</name>.<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>,
                    <argument><expr>"&lt;/D:prop&gt;" <name>DEBUG_CR</name>
                    "&lt;D:status&gt;HTTP/1.1 404 Not Found&lt;/D:status&gt;" <name>DEBUG_CR</name>
                    "&lt;/D:propstat&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>propstat_404</name></name> = <name><name>hdr</name>.<name>first</name></name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_propfind_walker</name><parameter_list>(<param><decl><type><name>dav_walk_resource</name> *</type><name>wres</name></decl></param>, <param><decl><type><name>int</name></type> <name>calltype</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_walker_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>wres</name>-&gt;<name>walk_ctx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_propdb</name> *</type><name>propdb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_get_props_result</name></type> <name>propstats</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
    ** Note: ctx-&gt;doc can only be NULL for DAV_PROPFIND_IS_ALLPROP. Since
    ** dav_get_allprops() does not need to do namespace translation,
    ** we're okay.
    **
    ** Note: we cast to lose the "const". The propdb won't try to change
    ** the resource, however, since we are opening readonly.
    */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_open_propdb</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>w</name>.<name>lockdb</name></name></expr></argument>, <argument><expr><name><name>wres</name>-&gt;<name>resource</name></name></expr></argument>, <argument><expr>1</expr></argument>,
                          <argument><expr><name><name>ctx</name>-&gt;<name>doc</name></name> ? <name><name>ctx</name>-&gt;<name>doc</name>-&gt;<name>namespaces</name></name> : <name>NULL</name></expr></argument>, <argument><expr>&amp;<name>propdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### do something with err! */</comment>

        <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>propfind_type</name></name> == <name>DAV_PROPFIND_IS_PROP</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>dav_get_props_result</name></type> <name>badprops</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>

            <comment type="block">/* some props were expected on this collection/resource */</comment>
            <expr_stmt><expr><call><name>dav_cache_badprops</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>badprops</name>.<name>propstats</name></name> = <name><name>ctx</name>-&gt;<name>propstat_404</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dav_stream_response</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>badprops</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="block">/* no props on this collection/resource */</comment>
            <expr_stmt><expr><call><name>dav_stream_response</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <comment type="block">/* ### what to do about closing the propdb on server failure? */</comment>

    <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>propfind_type</name></name> == <name>DAV_PROPFIND_IS_PROP</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>propstats</name> = <call><name>dav_get_props</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <decl_stmt><decl><type><name>dav_prop_insert</name></type> <name>what</name> <init>= <expr><name><name>ctx</name>-&gt;<name>propfind_type</name></name> == <name>DAV_PROPFIND_IS_ALLPROP</name>
                                 ? <name>DAV_PROP_INSERT_VALUE</name>
                                 : <name>DAV_PROP_INSERT_NAME</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>propstats</name> = <call><name>dav_get_allprops</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>dav_close_propdb</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>dav_stream_response</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>propstats</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* at this point, ctx-&gt;scratchpool has been used to stream a
       single response.  this function fully controls the pool, and
       thus has the right to clear it for the next iteration of this
       callback. */</comment>
    <expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/* handle the PROPFIND method */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_propfind</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_walker_ctx</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><block>{ <expr>0</expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_status</name></decl>;</decl_stmt>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>dav_get_resource_state</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call> == <name>DAV_RESOURCE_NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>depth</name> = <call><name>dav_get_depth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DAV_INFINITY</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* dav_get_depth() supplies additional information for the
         * default message. */</comment>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>depth</name> == <name>DAV_INFINITY</name> &amp;&amp; <name><name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>conf</name> = (<name>dav_dir_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                    <argument><expr>&amp;<name>dav_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* default is to DISALLOW these requests */</comment>
        <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>allow_depthinfinity</name></name> != <name>DAV_ENABLED_ON</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>,
                                      <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                                   <argument><expr>"PROPFIND requests with a "
                                                   "Depth of \"infinity\" are "
                                                   "not allowed for %s."</expr></argument>,
                                                   <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                                                  <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_xml_parse_input</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>
    <comment type="block">/* note: doc == NULL if no request body */</comment>

    <if>if <condition>(<expr><name>doc</name> &amp;&amp; !<call><name>dav_validate_root</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"propfind"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default message. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00585</expr></argument>)</argument_list></call>
                      "The \"propfind\" element was not found."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### validate that only one of these three elements is present */</comment>

    <if>if <condition>(<expr><name>doc</name> == <name>NULL</name> || <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"allprop"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* note: no request body implies allprop */</comment>
        <expr_stmt><expr><name><name>ctx</name>.<name>propfind_type</name></name> = <name>DAV_PROPFIND_IS_ALLPROP</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"propname"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ctx</name>.<name>propfind_type</name></name> = <name>DAV_PROPFIND_IS_PROPNAME</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"prop"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ctx</name>.<name>propfind_type</name></name> = <name>DAV_PROPFIND_IS_PROP</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <comment type="block">/* "propfind" element must have one of the above three children */</comment>

        <comment type="block">/* This supplies additional information for the default message. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00586</expr></argument>)</argument_list></call>
                      "The \"propfind\" element does not contain one of "
                      "the required child elements (the specific command)."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></else></if></else></if></else></if>

    <expr_stmt><expr><name><name>ctx</name>.<name>w</name>.<name>walk_type</name></name> = <name>DAV_WALKTYPE_NORMAL</name> | <name>DAV_WALKTYPE_AUTH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>w</name>.<name>func</name></name> = <name>dav_propfind_walker</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>w</name>.<name>walk_ctx</name></name> = &amp;<name>ctx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>w</name>.<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>w</name>.<name>root</name></name> = <name>resource</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name>.<name>doc</name></name> = <name>doc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>.<name>scratchpool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* ### should open read-only */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_open_lockdb</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name><name>ctx</name>.<name>w</name>.<name>lockdb</name></name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"The lock database could not be opened, "
                             "preventing access to the various lock "
                             "properties for the PROPFIND."</expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>ctx</name>.<name>w</name>.<name>lockdb</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* if we have a lock database, then we can walk locknull resources */</comment>
        <expr_stmt><expr><name><name>ctx</name>.<name>w</name>.<name>walk_type</name></name> |= <name>DAV_WALKTYPE_LOCKNULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* send &lt;multistatus&gt; tag, with all doc-&gt;namespaces attached.  */</comment>

    <comment type="block">/* NOTE: we *cannot* leave out the doc's namespaces from the
       initial &lt;multistatus&gt; tag.  if a 404 was generated for an HREF,
       then we need to spit out the doc's namespaces for use by the
       404. Note that &lt;response&gt; elements will override these ns0,
       ns1, etc, but NOT within the &lt;response&gt; scope for the
       badprops. */</comment>
    <expr_stmt><expr><call><name>dav_begin_multistatus</name><argument_list>(<argument><expr><name><name>ctx</name>.<name>bb</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_MULTI_STATUS</name></expr></argument>,
                          <argument><expr><name>doc</name> ? <name><name>doc</name>-&gt;<name>namespaces</name></name> : <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Have the provider walk the resource. */</comment>
    <expr_stmt><expr><name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>walk</name></name>)<argument_list>(<argument><expr>&amp;<name><name>ctx</name>.<name>w</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr>&amp;<name>multi_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>ctx</name>.<name>w</name>.<name>lockdb</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call>(*<name><name>ctx</name>.<name>w</name>.<name>lockdb</name>-&gt;<name>hooks</name>-&gt;<name>close_lockdb</name></name>)<argument_list>(<argument><expr><name><name>ctx</name>.<name>w</name>.<name>lockdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* If an error occurred during the resource walk, there's
           basically nothing we can do but abort the connection and
           log an error.  This is one of the limitations of HTTP; it
           needs to "know" the entire status of the response before
           generating it, which is just impossible in these streamy
           response situations. */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"Provider encountered an error while streaming"
                             " a multistatus PROPFIND response."</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dav_log_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
        <return>return <expr><name>DONE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>dav_finish_multistatus</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ctx</name>.<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* the response has been sent. */</comment>
    <return>return <expr><name>DONE</name></expr>;</return>
}</block></function>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>apr_text *</argument>)</argument_list></macro> <macro><name>dav_failed_proppatch</name><argument_list>(<argument>apr_pool_t *p</argument>,
                                             <argument>apr_array_header_t *prop_ctx</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>apr_text_header</name></type> <name>hdr</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>prop_ctx</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_prop_ctx</name> *</type><name>ctx</name> <init>= <expr>(<name>dav_prop_ctx</name> *)<name><name>prop_ctx</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err424_set</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err424_delete</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>

    <comment type="block">/* ### might be nice to sort by status code and description */</comment>

    <for>for ( <init>;</init> <condition><expr><name>i</name>-- &gt; 0</expr>;</condition> <incr><expr>++<name>ctx</name></expr></incr> ) <block>{
        <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>,
                        <argument><expr>"&lt;D:propstat&gt;" <name>DEBUG_CR</name>
                        "&lt;D:prop&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>, <argument><expr><call><name>apr_xml_empty_elem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>prop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>, <argument><expr>"&lt;/D:prop&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>err</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* nothing was assigned here yet, so make it a 424 */</comment>

            <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>operation</name></name> == <name>DAV_PROP_OP_SET</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>err424_set</name> == <name>NULL</name></expr>)</condition><then>
                    <expr_stmt><expr><name>err424_set</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_FAILED_DEPENDENCY</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                                               <argument><expr>"Attempted DAV:set operation "
                                               "could not be completed due "
                                               "to other errors."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name><name>ctx</name>-&gt;<name>err</name></name> = <name>err424_set</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>operation</name></name> == <name>DAV_PROP_OP_DELETE</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>err424_delete</name> == <name>NULL</name></expr>)</condition><then>
                    <expr_stmt><expr><name>err424_delete</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_FAILED_DEPENDENCY</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                                                  <argument><expr>"Attempted DAV:remove "
                                                  "operation could not be "
                                                  "completed due to other "
                                                  "errors."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name><name>ctx</name>-&gt;<name>err</name></name> = <name>err424_delete</name></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then></if>

        <expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
                         <argument><expr>"&lt;D:status&gt;"
                         "HTTP/1.1 %d (status)"
                         "&lt;/D:status&gt;" <name>DEBUG_CR</name></expr></argument>,
                         <argument><expr><name><name>ctx</name>-&gt;<name>err</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* ### we should use compute_desc if necessary... */</comment>
        <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>err</name>-&gt;<name>desc</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>, <argument><expr>"&lt;D:responsedescription&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>err</name>-&gt;<name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>, <argument><expr>"&lt;/D:responsedescription&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>, <argument><expr>"&lt;/D:propstat&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name><name>hdr</name>.<name>first</name></name></expr>;</return>
}</block>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>apr_text *</argument>)</argument_list></macro> <macro><name>dav_success_proppatch</name><argument_list>(<argument>apr_pool_t *p</argument>,
                                              <argument>apr_array_header_t *prop_ctx</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>apr_text_header</name></type> <name>hdr</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>prop_ctx</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_prop_ctx</name> *</type><name>ctx</name> <init>= <expr>(<name>dav_prop_ctx</name> *)<name><name>prop_ctx</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * ### we probably need to revise the way we assemble the response...
     * ### this code assumes everything will return status==200.
     */</comment>

    <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>,
                    <argument><expr>"&lt;D:propstat&gt;" <name>DEBUG_CR</name>
                    "&lt;D:prop&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for ( <init>;</init> <condition><expr><name>i</name>-- &gt; 0</expr>;</condition> <incr><expr>++<name>ctx</name></expr></incr> ) <block>{
        <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>, <argument><expr><call><name>apr_xml_empty_elem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>prop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>,
                   <argument><expr>"&lt;/D:prop&gt;" <name>DEBUG_CR</name>
                   "&lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;" <name>DEBUG_CR</name>
                   "&lt;/D:propstat&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>hdr</name>.<name>first</name></name></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dav_prop_log_errors</name><parameter_list>(<param><decl><type><name>dav_prop_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>dav_log_err</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>err</name></name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Call &lt;func&gt; for each context. This can stop when an error occurs, or
 * simply iterate through the whole list.
 *
 * Returns 1 if an error occurs (and the iteration is aborted). Returns 0
 * if all elements are processed.
 *
 * If &lt;reverse&gt; is true (non-zero), then the list is traversed in
 * reverse order.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_process_ctx_list</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>dav_prop_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list></function_decl></param>,
                                <param><decl><type><name>apr_array_header_t</name> *</type><name>ctx_list</name></decl></param>, <param><decl><type><name>int</name></type> <name>stop_on_error</name></decl></param>,
                                <param><decl><type><name>int</name></type> <name>reverse</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>ctx_list</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_prop_ctx</name> *</type><name>ctx</name> <init>= <expr>(<name>dav_prop_ctx</name> *)<name><name>ctx_list</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>reverse</name></expr>)</condition><then>
        <expr_stmt><expr><name>ctx</name> += <name>i</name></expr>;</expr_stmt></then></if>

    <while>while <condition>(<expr><name>i</name>--</expr>)</condition> <block>{
        <if>if <condition>(<expr><name>reverse</name></expr>)</condition><then>
            <expr_stmt><expr>--<name>ctx</name></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call>(*<name>func</name>)<argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>stop_on_error</name> &amp;&amp; <call><name>DAV_PROP_CTX_HAS_ERR</name><argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!<name>reverse</name></expr>)</condition><then>
            <expr_stmt><expr>++<name>ctx</name></expr>;</expr_stmt></then></if>
    }</block></while>

    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/* handle the PROPPATCH method */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_proppatch</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>child</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_propdb</name> *</type><name>propdb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>failure</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_response</name></type> <name>resp</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_text</name> *</type><name>propstat_text</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ctx_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_prop_ctx</name> *</type><name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_auto_version_info</name></type> <name>av_info</name></decl>;</decl_stmt>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_xml_parse_input</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>
    <comment type="block">/* note: doc == NULL if no request body */</comment>

    <if>if <condition>(<expr><name>doc</name> == <name>NULL</name> || !<call><name>dav_validate_root</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"propertyupdate"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default message. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00587</expr></argument>)</argument_list></call>
                      "The request body does not contain "
                      "a \"propertyupdate\" element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Check If-Headers and existing locks */</comment>
    <comment type="block">/* Note: depth == 0. Implies no need for a multistatus response. */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_validate_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr><name>DAV_VALIDATE_RESOURCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* make sure the resource can be modified (if versioning repository) */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_auto_checkout</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>,
                                 <argument><expr>0</expr></argument> <comment type="block">/* not parent_only */</comment>,
                                 <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_open_propdb</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>doc</name>-&gt;<name>namespaces</name></name></expr></argument>,
                               <argument><expr>&amp;<name>propdb</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* undo any auto-checkout */</comment>
        <expr_stmt><expr><call><name>dav_auto_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/*undo*/</comment>, <argument><expr>0</expr></argument> <comment type="block">/*unlock*/</comment>, <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not open the property "
                                          "database for %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <comment type="block">/* ### what to do about closing the propdb on server failure? */</comment>

    <comment type="block">/* ### validate "live" properties */</comment>

    <comment type="block">/* set up an array to hold property operation contexts */</comment>
    <expr_stmt><expr><name>ctx_list</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dav_prop_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* do a first pass to ensure that all "remove" properties exist */</comment>
    <for>for (<init><expr><name>child</name> = <name><name>doc</name>-&gt;<name>root</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>child</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>is_remove</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>prop_group</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>one_prop</name></decl>;</decl_stmt>

        <comment type="block">/* Ignore children that are not set/remove */</comment>
        <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> != <name>APR_XML_NS_DAV_ID</name>
            || (!(<name>is_remove</name> = (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"remove"</expr></argument>)</argument_list></call> == 0))
                &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"set"</expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>

        <comment type="block">/* make sure that a "prop" child exists for set/remove */</comment>
        <if>if <condition>(<expr>(<name>prop_group</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr>"prop"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>dav_close_propdb</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* undo any auto-checkout */</comment>
            <expr_stmt><expr><call><name>dav_auto_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/*undo*/</comment>, <argument><expr>0</expr></argument> <comment type="block">/*unlock*/</comment>, <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* This supplies additional information for the default message. */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00588</expr></argument>)</argument_list></call>
                          "A \"prop\" element is missing inside "
                          "the propertyupdate command."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then></if>

        <for>for (<init><expr><name>one_prop</name> = <name><name>prop_group</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>one_prop</name></expr>;</condition>
             <incr><expr><name>one_prop</name> = <name><name>one_prop</name>-&gt;<name>next</name></name></expr></incr>) <block>{

            <expr_stmt><expr><name>ctx</name> = (<name>dav_prop_ctx</name> *)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>ctx_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>propdb</name></name> = <name>propdb</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>operation</name></name> = <name>is_remove</name> ? <name>DAV_PROP_OP_DELETE</name> : <name>DAV_PROP_OP_SET</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>prop</name></name> = <name>one_prop</name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>         <comment type="block">/* for later use by dav_prop_log_errors() */</comment>

            <expr_stmt><expr><call><name>dav_prop_validate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>( <expr><call><name>DAV_PROP_CTX_HAS_ERR</name><argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
                <expr_stmt><expr><name>failure</name> = 1</expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>

    <comment type="block">/* ### should test that we found at least one set/remove */</comment>

    <comment type="block">/* execute all of the operations */</comment>
    <if>if <condition>(<expr>!<name>failure</name> &amp;&amp; <call><name>dav_process_ctx_list</name><argument_list>(<argument><expr><name>dav_prop_exec</name></expr></argument>, <argument><expr><name>ctx_list</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>failure</name> = 1</expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* generate a failure/success response */</comment>
    <if>if <condition>(<expr><name>failure</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>(<name>void</name>)<call><name>dav_process_ctx_list</name><argument_list>(<argument><expr><name>dav_prop_rollback</name></expr></argument>, <argument><expr><name>ctx_list</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>propstat_text</name> = <call><name>dav_failed_proppatch</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ctx_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr>(<name>void</name>)<call><name>dav_process_ctx_list</name><argument_list>(<argument><expr><name>dav_prop_commit</name></expr></argument>, <argument><expr><name>ctx_list</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>propstat_text</name> = <call><name>dav_success_proppatch</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ctx_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/* make sure this gets closed! */</comment>
    <expr_stmt><expr><call><name>dav_close_propdb</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* complete any auto-versioning */</comment>
    <expr_stmt><expr><call><name>dav_auto_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>failure</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/*unlock*/</comment>, <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* log any errors that occurred */</comment>
    <expr_stmt><expr>(<name>void</name>)<call><name>dav_process_ctx_list</name><argument_list>(<argument><expr><name>dav_prop_log_errors</name></expr></argument>, <argument><expr><name>ctx_list</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>resp</name>.<name>href</name></name> = <name><name>resource</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>

    <comment type="block">/* ### should probably use something new to pass along this text... */</comment>
    <expr_stmt><expr><name><name>resp</name>.<name>propresult</name>.<name>propstats</name></name> = <name>propstat_text</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>dav_send_multistatus</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_MULTI_STATUS</name></expr></argument>, <argument><expr>&amp;<name>resp</name></expr></argument>, <argument><expr><name><name>doc</name>-&gt;<name>namespaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* the response has been sent. */</comment>
    <return>return <expr><name>DONE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_mkcol_body</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* This is snarfed from ap_setup_client_block(). We could get pretty
     * close to this behavior by passing REQUEST_NO_BODY, but we need to
     * return HTTP_UNSUPPORTED_MEDIA_TYPE (while ap_setup_client_block
     * returns HTTP_REQUEST_ENTITY_TOO_LARGE). */</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tenc</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lenp</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* make sure to set the Apache request fields properly. */</comment>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>read_body</name></name> = <name>REQUEST_NO_BODY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>read_chunked</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>remaining</name></name> = 0</expr>;</expr_stmt>

    <if>if <condition>(<expr><name>tenc</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>tenc</name></expr></argument>, <argument><expr>"chunked"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/* Use this instead of Apache's default error string */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00589</expr></argument>)</argument_list></call>
                          "Unknown Transfer-Encoding %s"</expr></argument>, <argument><expr><name>tenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_NOT_IMPLEMENTED</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name><name>r</name>-&gt;<name>read_chunked</name></name> = 1</expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>lenp</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pos</name> <init>= <expr><name>lenp</name></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>pos</name></expr></argument>)</argument_list></call> || <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr>++<name>pos</name></expr>;</expr_stmt>
        }</block></while>

        <if>if <condition>(<expr>*<name>pos</name> != '\0'</expr>)</condition><then> <block>{
            <comment type="block">/* This supplies additional information for the default message. */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00590</expr></argument>)</argument_list></call>
                          "Invalid Content-Length %s"</expr></argument>, <argument><expr><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name><name>r</name>-&gt;<name>remaining</name></name> = <call><name>apr_atoi64</name><argument_list>(<argument><expr><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>read_chunked</name></name> || <name><name>r</name>-&gt;<name>remaining</name></name> &gt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* ### log something? */</comment>

        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_UNSUPPORTED_MEDIA_TYPE</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Get rid of the body. this will call ap_setup_client_block(), but
     * our copy above has already verified its work.
     */</comment>
    <return>return <expr><call><name>ap_discard_request_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* handle the MKCOL method */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_mkcol</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>resource_state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_auto_version_info</name></type> <name>av_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_locks</name> *</type><name>locks_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_LOCKS</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_status</name></decl>;</decl_stmt>

    <comment type="block">/* handle the request body */</comment>
    <comment type="block">/* ### this may move lower once we start processing bodies */</comment>
    <if>if <condition>(<expr>(<name>result</name> = <call><name>process_mkcol_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* oops. something was already there! */</comment>

        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <comment type="block">/* ### we should provide a specific error message! */</comment>
        <return>return <expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>resource_state</name> = <call><name>dav_get_resource_state</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check If-Headers and existing locks.
     *
     * Note: depth == 0 normally requires no multistatus response. However,
     * if we pass DAV_VALIDATE_PARENT, then we could get an error on a URI
     * other than the Request-URI, thereby requiring a multistatus.
     *
     * If the resource does not exist (DAV_RESOURCE_NULL), then we must
     * check the resource *and* its parent. If the resource exists or is
     * a locknull resource, then we check only the resource.
     */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_validate_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>multi_status</name></expr></argument>,
                                    <argument><expr><name>resource_state</name> == <name>DAV_RESOURCE_NULL</name> ?
                                    <name>DAV_VALIDATE_PARENT</name> :
                                    <name>DAV_VALIDATE_RESOURCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_status</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* if versioned resource, make sure parent is checked out */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_auto_checkout</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/* parent_only */</comment>,
                                 <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* try to create the collection */</comment>
    <expr_stmt><expr><name><name>resource</name>-&gt;<name>collection</name></name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>create_collection</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* restore modifiability of parent back to what it was */</comment>
    <expr_stmt><expr><name>err2</name> = <call><name>dav_auto_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name> != <name>NULL</name></expr></argument> <comment type="block">/* undo if error */</comment>,
                            <argument><expr>0</expr></argument> <comment type="block">/*unlock*/</comment>, <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check for errors now */</comment>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>err2</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* just log a warning */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err2</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"The MKCOL was successful, but there "
                             "was a problem automatically checking in "
                             "the parent collection."</expr></argument>,
                             <argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dav_log_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>locks_hooks</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>locks_hooks</name>-&gt;<name>open_lockdb</name></name>)<argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>lockdb</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* The directory creation was successful, but the locking failed. */</comment>
            <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                 <argument><expr>"The MKCOL was successful, but there "
                                 "was a problem opening the lock database "
                                 "which prevents inheriting locks from the "
                                 "parent resources."</expr></argument>,
                                 <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="block">/* notify lock system that we have created/replaced a resource */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_notify_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>resource_state</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call>(*<name><name>locks_hooks</name>-&gt;<name>close_lockdb</name></name>)<argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* The dir creation was successful, but the locking failed. */</comment>
            <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                 <argument><expr>"The MKCOL was successful, but there "
                                 "was a problem updating its lock "
                                 "information."</expr></argument>,
                                 <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* return an appropriate response (HTTP_CREATED) */</comment>
    <return>return <expr><call><name>dav_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Collection"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* handle the COPY and MOVE methods */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_copymove</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>is_move</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resnew</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_auto_version_info</name></type> <name>src_av_info</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_auto_version_info</name></type> <name>dst_av_info</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_response</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_lookup_result</name></type> <name>lookup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_dir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>overwrite</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>replace_dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>resnew_state</name></decl>;</decl_stmt>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>!<name>is_move</name></expr></argument> <comment type="block">/* label_allowed */</comment>,
                           <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>, <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* If not a file or collection resource, COPY/MOVE not allowed */</comment>
    <comment type="block">/* ### allow COPY/MOVE of DeltaV resource types */</comment>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>body</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                            <argument><expr>"Cannot COPY/MOVE resource %s."</expr></argument>,
                            <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* get the destination URI */</comment>
    <expr_stmt><expr><name>dest</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Destination"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>dest</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* Look in headers provided by Netscape's Roaming Profiles */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nscp_host</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Host"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nscp_path</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"New-uri"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>nscp_host</name> != <name>NULL</name> &amp;&amp; <name>nscp_path</name> != <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr><name>dest</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"http://%s%s"</expr></argument>, <argument><expr><name>nscp_host</name></expr></argument>, <argument><expr><name>nscp_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <if>if <condition>(<expr><name>dest</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default message. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00591</expr></argument>)</argument_list></call>
                      "The request is missing a Destination header."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>lookup</name> = <call><name>dav_lookup_uri</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/* must_be_absolute */</comment>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>lookup</name>.<name>rnew</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>lookup</name>.<name>err</name>.<name>status</name></name> == <name>HTTP_BAD_REQUEST</name></expr>)</condition><then> <block>{
            <comment type="block">/* This supplies additional information for the default message. */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00592</expr></argument>)</argument_list></call>
                          "%s"</expr></argument>, <argument><expr><name><name>lookup</name>.<name>err</name>.<name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/* ### this assumes that dav_lookup_uri() only generates a status
         * ### that Apache can provide a status line for!! */</comment>

        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>err</name>.<name>status</name></name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>err</name>.<name>desc</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>lookup</name>.<name>rnew</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>lookup</name>.<name>rnew</name>-&gt;<name>err_headers_out</name></name></expr></argument>,
                                        <argument><expr>"WWW-Authenticate"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>lookup</name>.<name>rnew</name>-&gt;<name>status</name></name> == <name>HTTP_UNAUTHORIZED</name> &amp;&amp; <name>auth</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* propagate the WWW-Authorization header up from the
             * subreq so the client sees it. */</comment>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"WWW-Authenticate"</expr></argument>,
                           <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* ### how best to report this... */</comment>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>rnew</name>-&gt;<name>status</name></name></expr></argument>,
                                  <argument><expr>"Destination URI had an error."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Resolve destination resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name><name>lookup</name>.<name>rnew</name></name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>,
                           <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>, <argument><expr>&amp;<name>resnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* are the two resources handled by the same repository? */</comment>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>hooks</name></name> != <name><name>resnew</name>-&gt;<name>hooks</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* ### this message exposes some backend config, but screw it... */</comment>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
                                  <argument><expr>"Destination URI is handled by a "
                                  "different repository than the source URI. "
                                  "MOVE or COPY between repositories is "
                                  "not possible."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* get and parse the overwrite header value */</comment>
    <if>if <condition>(<expr>(<name>overwrite</name> = <call><name>dav_get_overwrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* dav_get_overwrite() supplies additional information for the
         * default message. */</comment>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* quick failure test: if dest exists and overwrite is false. */</comment>
    <if>if <condition>(<expr><name><name>resnew</name>-&gt;<name>exists</name></name> &amp;&amp; !<name>overwrite</name></expr>)</condition><then> <block>{
        <comment type="block">/* Supply some text for the error response body. */</comment>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_PRECONDITION_FAILED</name></expr></argument>,
                                  <argument><expr>"Destination is not empty and "
                                  "Overwrite is not \"T\""</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* are the source and destination the same? */</comment>
    <if>if <condition>(<expr><call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>is_same_resource</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>resnew</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* Supply some text for the error response body. */</comment>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>,
                                  <argument><expr>"Source and Destination URIs are the same."</expr></argument>)</argument_list></call></expr>;</return>

    }</block></then></if>

    <expr_stmt><expr><name>is_dir</name> = <name><name>resource</name>-&gt;<name>collection</name></name></expr>;</expr_stmt>

    <comment type="block">/* get and parse the Depth header value. "0" and "infinity" are legal. */</comment>
    <if>if <condition>(<expr>(<name>depth</name> = <call><name>dav_get_depth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DAV_INFINITY</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* dav_get_depth() supplies additional information for the
         * default message. */</comment>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>depth</name> == 1</expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default message. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00593</expr></argument>)</argument_list></call>
                      "Depth must be \"0\" or \"infinity\" for COPY or MOVE."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>is_move</name> &amp;&amp; <name>is_dir</name> &amp;&amp; <name>depth</name> != <name>DAV_INFINITY</name></expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default message. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00594</expr></argument>)</argument_list></call>
                      "Depth must be \"infinity\" when moving a collection."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Check If-Headers and existing locks for each resource in the source.
     * We will return a 424 response with a DAV:multistatus body.
     * The multistatus responses will contain the information about any
     * resource that fails the validation.
     *
     * We check the parent resource, too, if this is a MOVE. Moving the
     * resource effectively removes it from the parent collection, so we
     * must ensure that we have met the appropriate conditions.
     *
     * If a problem occurs with the Request-URI itself, then a plain error
     * (rather than a multistatus) will be returned.
     */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_validate_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr>&amp;<name>multi_response</name></expr></argument>,
                                    <argument><expr>(<name>is_move</name> ? <name>DAV_VALIDATE_PARENT</name>
                                             : <name>DAV_VALIDATE_RESOURCE</name>
                                               | <name>DAV_VALIDATE_NO_MODIFY</name>)
                                    | <name>DAV_VALIDATE_USE_424</name></expr></argument>,
                                    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not %s %s due to a failed "
                                          "precondition on the source "
                                          "(e.g. locks)."</expr></argument>,
                                          <argument><expr><name>is_move</name> ? "MOVE" : "COPY"</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_response</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Check If-Headers and existing locks for destination. Note that we
     * use depth==infinity since the target (hierarchy) will be deleted
     * before the move/copy is completed.
     *
     * Note that we are overwriting the target, which implies a DELETE, so
     * we are subject to the error/response rules as a DELETE. Namely, we
     * will return a 424 error if any of the validations fail.
     * (see dav_method_delete() for more information)
     */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_validate_request</name><argument_list>(<argument><expr><name><name>lookup</name>.<name>rnew</name></name></expr></argument>, <argument><expr><name>resnew</name></expr></argument>, <argument><expr><name>DAV_INFINITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr>&amp;<name>multi_response</name></expr></argument>,
                                    <argument><expr><name>DAV_VALIDATE_PARENT</name>
                                    | <name>DAV_VALIDATE_USE_424</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not MOVE/COPY %s due to a "
                                          "failed precondition on the "
                                          "destination (e.g. locks)."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_response</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>is_dir</name>
        &amp;&amp; <name>depth</name> == <name>DAV_INFINITY</name>
        &amp;&amp; <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>is_parent_resource</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>resnew</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* Supply some text for the error response body. */</comment>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>,
                                  <argument><expr>"Source collection contains the "
                                  "Destination."</expr></argument>)</argument_list></call></expr>;</return>

    }</block></then></if>
    <if>if <condition>(<expr><name>is_dir</name>
        &amp;&amp; <call>(*<name><name>resnew</name>-&gt;<name>hooks</name>-&gt;<name>is_parent_resource</name></name>)<argument_list>(<argument><expr><name>resnew</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* The destination must exist (since it contains the source), and
         * a condition above implies Overwrite==T. Obviously, we cannot
         * delete the Destination before the MOVE/COPY, as that would
         * delete the Source.
         */</comment>

        <comment type="block">/* Supply some text for the error response body. */</comment>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>,
                                  <argument><expr>"Destination collection contains the Source "
                                  "and Overwrite has been specified."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### for now, we don't need anything in the body */</comment>
    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_discard_request_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_open_lockdb</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>lockdb</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* remove any locks from the old resources */</comment>
    <comment type="block">/*
     * ### this is Yet Another Traversal. if we do a rename(), then we
     * ### really don't have to do this in some cases since the inode
     * ### values will remain constant across the move. but we can't
     * ### know that fact from outside the provider :-(
     *
     * ### note that we now have a problem atomicity in the move/copy
     * ### since a failure after this would have removed locks (technically,
     * ### this is okay to do, but really...)
     */</comment>
    <if>if <condition>(<expr><name>is_move</name> &amp;&amp; <name>lockdb</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### this is wrong! it blasts direct locks on parent resources */</comment>
        <comment type="block">/* ### pass lockdb! */</comment>
        <expr_stmt><expr>(<name>void</name>)<call><name>dav_unlock</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* if this is a move, then the source parent collection will be modified */</comment>
    <if>if <condition>(<expr><name>is_move</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_auto_checkout</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/* parent_only */</comment>,
                                     <argument><expr>&amp;<name>src_av_info</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>lockdb</name> != <name>NULL</name></expr>)</condition><then>
                <expr_stmt><expr><call>(*<name><name>lockdb</name>-&gt;<name>hooks</name>-&gt;<name>close_lockdb</name></name>)<argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <comment type="block">/* ### add a higher-level description? */</comment>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/*
     * Remember the initial state of the destination, so the lock system
     * can be notified as to how it changed.
     */</comment>
    <expr_stmt><expr><name>resnew_state</name> = <call><name>dav_get_resource_state</name><argument_list>(<argument><expr><name><name>lookup</name>.<name>rnew</name></name></expr></argument>, <argument><expr><name>resnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* In a MOVE operation, the destination is replaced by the source.
     * In a COPY operation, if the destination exists, is under version
     * control, and is the same resource type as the source,
     * then it should not be replaced, but modified to be a copy of
     * the source.
     */</comment>
    <if>if <condition>(<expr>!<name><name>resnew</name>-&gt;<name>exists</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>replace_dest</name> = 0</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>is_move</name> || !<name><name>resource</name>-&gt;<name>versioned</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>replace_dest</name> = 1</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name><name>resnew</name>-&gt;<name>type</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>replace_dest</name> = 1</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr>(<name><name>resource</name>-&gt;<name>collection</name></name> == 0) != (<name><name>resnew</name>-&gt;<name>collection</name></name> == 0)</expr>)</condition><then>
        <expr_stmt><expr><name>replace_dest</name> = 1</expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name>replace_dest</name> = 0</expr>;</expr_stmt></else></if></else></if></else></if></else></if>

    <comment type="block">/* If the destination must be created or replaced,
     * make sure the parent collection is writable
     */</comment>
    <if>if <condition>(<expr>!<name><name>resnew</name>-&gt;<name>exists</name></name> || <name>replace_dest</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_auto_checkout</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resnew</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/*parent_only*/</comment>,
                                     <argument><expr>&amp;<name>dst_av_info</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* could not make destination writable:
             * if move, restore state of source parent
             */</comment>
            <if>if <condition>(<expr><name>is_move</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>(<name>void</name>)<call><name>dav_auto_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/* undo */</comment>,
                                       <argument><expr>0</expr></argument> <comment type="block">/*unlock*/</comment>, <argument><expr>&amp;<name>src_av_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name>lockdb</name> != <name>NULL</name></expr>)</condition><then>
                <expr_stmt><expr><call>(*<name><name>lockdb</name>-&gt;<name>hooks</name>-&gt;<name>close_lockdb</name></name>)<argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <comment type="block">/* ### add a higher-level description? */</comment>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* If source and destination parents are the same, then
     * use the same resource object, so status updates to one are reflected
     * in the other, when doing auto-versioning. Otherwise,
     * we may try to checkin the parent twice.
     */</comment>
    <if>if <condition>(<expr><name><name>src_av_info</name>.<name>parent_resource</name></name> != <name>NULL</name>
        &amp;&amp; <name><name>dst_av_info</name>.<name>parent_resource</name></name> != <name>NULL</name>
        &amp;&amp; <call>(*<name><name>src_av_info</name>.<name>parent_resource</name>-&gt;<name>hooks</name>-&gt;<name>is_same_resource</name></name>)
            <argument_list>(<argument><expr><name><name>src_av_info</name>.<name>parent_resource</name></name></expr></argument>, <argument><expr><name><name>dst_av_info</name>.<name>parent_resource</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

        <expr_stmt><expr><name><name>dst_av_info</name>.<name>parent_resource</name></name> = <name><name>src_av_info</name>.<name>parent_resource</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* If destination is being replaced, remove it first
     * (we know Ovewrite must be TRUE). Then try to copy/move the resource.
     */</comment>
    <if>if <condition>(<expr><name>replace_dest</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call>(*<name><name>resnew</name>-&gt;<name>hooks</name>-&gt;<name>remove_resource</name></name>)<argument_list>(<argument><expr><name>resnew</name></expr></argument>, <argument><expr>&amp;<name>multi_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><name>err</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>is_move</name></expr>)</condition><then>
            <expr_stmt><expr><name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>move_resource</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>resnew</name></expr></argument>,
                                                    <argument><expr>&amp;<name>multi_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>copy_resource</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>resnew</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
                                                    <argument><expr>&amp;<name>multi_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>

    <comment type="block">/* perform any auto-versioning cleanup */</comment>
    <expr_stmt><expr><name>err2</name> = <call><name>dav_auto_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name> != <name>NULL</name></expr></argument> <comment type="block">/* undo if error */</comment>,
                            <argument><expr>0</expr></argument> <comment type="block">/*unlock*/</comment>, <argument><expr>&amp;<name>dst_av_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>is_move</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err3</name> = <call><name>dav_auto_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name> != <name>NULL</name></expr></argument> <comment type="block">/* undo if error */</comment>,
                                <argument><expr>0</expr></argument> <comment type="block">/*unlock*/</comment>, <argument><expr>&amp;<name>src_av_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
        <expr_stmt><expr><name>err3</name> = <name>NULL</name></expr>;</expr_stmt></else></if>

    <comment type="block">/* check for error from remove/copy/move operations */</comment>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>lockdb</name> != <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr><call>(*<name><name>lockdb</name>-&gt;<name>hooks</name>-&gt;<name>close_lockdb</name></name>)<argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not MOVE/COPY %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_response</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* check for errors from auto-versioning */</comment>
    <if>if <condition>(<expr><name>err2</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* just log a warning */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err2</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"The MOVE/COPY was successful, but there was a "
                             "problem automatically checking in the "
                             "source parent collection."</expr></argument>,
                             <argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dav_log_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>err3</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* just log a warning */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err3</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"The MOVE/COPY was successful, but there was a "
                             "problem automatically checking in the "
                             "destination or its parent collection."</expr></argument>,
                             <argument><expr><name>err3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dav_log_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* propagate any indirect locks at the target */</comment>
    <if>if <condition>(<expr><name>lockdb</name> != <name>NULL</name></expr>)</condition><then> <block>{

        <comment type="block">/* notify lock system that we have created/replaced a resource */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_notify_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>resnew</name></expr></argument>, <argument><expr><name>resnew_state</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call>(*<name><name>lockdb</name>-&gt;<name>hooks</name>-&gt;<name>close_lockdb</name></name>)<argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* The move/copy was successful, but the locking failed. */</comment>
            <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                 <argument><expr>"The MOVE/COPY was successful, but there "
                                 "was a problem updating the lock "
                                 "information."</expr></argument>,
                                 <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* return an appropriate response (HTTP_CREATED or HTTP_NO_CONTENT) */</comment>
    <return>return <expr><call><name>dav_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>rnew</name>-&gt;<name>unparsed_uri</name></name></expr></argument>, <argument><expr>"Destination"</expr></argument>,
                       <argument><expr><name>resnew_state</name> == <name>DAV_RESOURCE_EXISTS</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* dav_method_lock:  Handler to implement the DAV LOCK method
 *    Returns appropriate HTTP_* response.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_lock</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_locks</name> *</type><name>locks_hooks</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>new_lock_request</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_lock</name> *</type><name>lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>resource_state</name></decl>;</decl_stmt>

    <comment type="block">/* If no locks provider, decline the request */</comment>
    <expr_stmt><expr><name>locks_hooks</name> = <call><name>DAV_GET_HOOKS_LOCKS</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>locks_hooks</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_xml_parse_input</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then>
        <return>return <expr><name>result</name></expr>;</return></then></if>

    <expr_stmt><expr><name>depth</name> = <call><name>dav_get_depth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DAV_INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>depth</name> != 0 &amp;&amp; <name>depth</name> != <name>DAV_INFINITY</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00595</expr></argument>)</argument_list></call>
                      "Depth must be 0 or \"infinity\" for LOCK."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* Check if parent collection exists */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>get_parent_resource</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr>&amp;<name>parent</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>parent</name> &amp;&amp; (!<name><name>parent</name>-&gt;<name>exists</name></name> || <name><name>parent</name>-&gt;<name>collection</name></name> != 1)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                           <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                        <argument><expr>"The parent resource of %s does not "
                                        "exist or is not a collection."</expr></argument>,
                                        <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Open writable. Unless an error occurs, we'll be
     * writing into the database.
     */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>locks_hooks</name>-&gt;<name>open_lockdb</name></name>)<argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>lockdb</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>doc</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_lock_parse_lockinfo</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>,
                                               <argument><expr>&amp;<name>lock</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* ### add a higher-level description to err? */</comment>
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><name>new_lock_request</name> = 1</expr>;</expr_stmt>

        <expr_stmt><expr><name><name>lock</name>-&gt;<name>auth_user</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>resource_state</name> = <call><name>dav_get_resource_state</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check If-Headers and existing locks.
     *
     * If this will create a locknull resource, then the LOCK will affect
     * the parent collection (much like a PUT/MKCOL). For that case, we must
     * validate the parent resource's conditions.
     */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_validate_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>multi_response</name></expr></argument>,
                                    <argument><expr>(<name>resource_state</name> == <name>DAV_RESOURCE_NULL</name>
                                     ? <name>DAV_VALIDATE_PARENT</name>
                                     : <name>DAV_VALIDATE_RESOURCE</name>)
                                    | (<name>new_lock_request</name> ? <name><name>lock</name>-&gt;<name>scope</name></name> : 0)
                                    | <name>DAV_VALIDATE_ADD_LD</name></expr></argument>,
                                    <argument><expr><name>lockdb</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not LOCK %s due to a failed "
                                          "precondition (e.g. other locks)."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>

    <if>if <condition>(<expr><name>new_lock_request</name> == 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>dav_locktoken_list</name> *</type><name>ltl</name></decl>;</decl_stmt>

        <comment type="block">/*
         * Refresh request
         * ### Assumption:  We can renew multiple locks on the same resource
         * ### at once. First harvest all the positive lock-tokens given in
         * ### the If header. Then modify the lock entries for this resource
         * ### with the new Timeout val.
         */</comment>

        <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_get_locktoken_list</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>ltl</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                 <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                              <argument><expr>"The lock refresh for %s failed "
                                              "because no lock tokens were "
                                              "specified in an \"If:\" "
                                              "header."</expr></argument>,
                                              <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>locks_hooks</name>-&gt;<name>refresh_locks</name></name>)<argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>ltl</name></expr></argument>,
                                                 <argument><expr><call><name>dav_get_timeout</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr>&amp;<name>lock</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* ### add a higher-level description to err? */</comment>
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>
    }</block></then> <else>else <block>{
        <comment type="block">/* New lock request */</comment>
        <decl_stmt><decl><type><name>char</name> *</type><name>locktoken_txt</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>conf</name> = (<name>dav_dir_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                    <argument><expr>&amp;<name>dav_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* apply lower bound (if any) from DAVMinTimeout directive */</comment>
        <if>if <condition>(<expr><name><name>lock</name>-&gt;<name>timeout</name></name> != <name>DAV_TIMEOUT_INFINITE</name>
            &amp;&amp; <name><name>lock</name>-&gt;<name>timeout</name></name> &lt; <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> + <name><name>conf</name>-&gt;<name>locktimeout</name></name></expr>)</condition><then>
            <expr_stmt><expr><name><name>lock</name>-&gt;<name>timeout</name></name> = <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> + <name><name>conf</name>-&gt;<name>locktimeout</name></name></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><name>err</name> = <call><name>dav_add_lock</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr>&amp;<name>multi_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* ### add a higher-level description to err? */</comment>
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>

        <expr_stmt><expr><name>locktoken_txt</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"&lt;"</expr></argument>,
                                    <argument><expr><call>(*<name><name>locks_hooks</name>-&gt;<name>format_locktoken</name></name>)<argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                        <argument><expr><name><name>lock</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr>"&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Lock-Token"</expr></argument>, <argument><expr><name>locktoken_txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call>(*<name><name>locks_hooks</name>-&gt;<name>close_lockdb</name></name>)<argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DAV_XML_CONTENT_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>ap_rputs</name><argument_list>(<argument>DAV_XML_HEADER DEBUG_CR "&lt;D:prop xmlns:D=\"DAV:\"&gt;" DEBUG_CR</argument>, <argument>r</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <if>if <condition>(<expr><name>lock</name> == <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;D:lockdiscovery/&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
                   <argument><expr>"&lt;D:lockdiscovery&gt;" <name>DEBUG_CR</name>
                   "%s" <name>DEBUG_CR</name>
                   "&lt;/D:lockdiscovery&gt;" <name>DEBUG_CR</name></expr></argument>,
                   <argument><expr><call><name>dav_lock_get_activelock</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/D:prop&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* the response has been sent. */</comment>
    <return>return <expr><name>DONE</name></expr>;</return>

  <label><name>error</name>:</label>
    <expr_stmt><expr><call>(*<name><name>locks_hooks</name>-&gt;<name>close_lockdb</name></name>)<argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_response</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* dav_method_unlock:  Handler to implement the DAV UNLOCK method
 *    Returns appropriate HTTP_* response.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_unlock</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_locks</name> *</type><name>locks_hooks</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>const_locktoken_txt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>locktoken_txt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_locktoken</name> *</type><name>locktoken</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>resource_state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_response</name></decl>;</decl_stmt>

    <comment type="block">/* If no locks provider, decline the request */</comment>
    <expr_stmt><expr><name>locks_hooks</name> = <call><name>DAV_GET_HOOKS_LOCKS</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>locks_hooks</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <if>if <condition>(<expr>(<name>const_locktoken_txt</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>,
                                             <argument><expr>"Lock-Token"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00596</expr></argument>)</argument_list></call>
                      "Unlock failed (%s):  "
                      "No Lock-Token specified in header"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>locktoken_txt</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>const_locktoken_txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>locktoken_txt</name><index>[<expr>0</expr>]</index></name> != '&lt;'</expr>)</condition><then> <block>{
        <comment type="block">/* ### should provide more specifics... */</comment>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>locktoken_txt</name>++</expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>locktoken_txt</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>locktoken_txt</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> != '&gt;'</expr>)</condition><then> <block>{
        <comment type="block">/* ### should provide more specifics... */</comment>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>locktoken_txt</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>locktoken_txt</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>locks_hooks</name>-&gt;<name>parse_locktoken</name></name>)<argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>locktoken_txt</name></expr></argument>,
                                               <argument><expr>&amp;<name>locktoken</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"The UNLOCK on %s failed -- an "
                                          "invalid lock token was specified "
                                          "in the \"If:\" header."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr><name>resource_state</name> = <call><name>dav_get_resource_state</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check If-Headers and existing locks.
     *
     * Note: depth == 0 normally requires no multistatus response. However,
     * if we pass DAV_VALIDATE_PARENT, then we could get an error on a URI
     * other than the Request-URI, thereby requiring a multistatus.
     *
     * If the resource is a locknull resource, then the UNLOCK will affect
     * the parent collection (much like a delete). For that case, we must
     * validate the parent resource's conditions.
     */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_validate_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>locktoken</name></expr></argument>,
                                    <argument><expr>&amp;<name>multi_response</name></expr></argument>,
                                    <argument><expr><name>resource_state</name> == <name>DAV_RESOURCE_LOCK_NULL</name>
                                    ? <name>DAV_VALIDATE_PARENT</name>
                                    : <name>DAV_VALIDATE_RESOURCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### add a higher-level description? */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_response</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### RFC 2518 s. 8.11: If this resource is locked by locktoken,
     *     _all_ resources locked by locktoken are released.  It does not say
     *     resource has to be the root of an infinte lock.  Thus, an UNLOCK
     *     on any part of an infinte lock will remove the lock on all resources.
     *
     *     For us, if r-&gt;filename represents an indirect lock (part of an infinity lock),
     *     we must actually perform an UNLOCK on the direct lock for this resource.
     */</comment>
    <if>if <condition>(<expr>(<name>result</name> = <call><name>dav_unlock</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>locktoken</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>HTTP_NO_CONTENT</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_vsn_control</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>resource_state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_auto_version_info</name></type> <name>av_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_locks</name> *</type><name>locks_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_LOCKS</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_VSN</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

    <comment type="block">/* if no versioning provider, decline the request */</comment>
    <if>if <condition>(<expr><name>vsn_hooks</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <comment type="block">/* ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* remember the pre-creation resource state */</comment>
    <expr_stmt><expr><name>resource_state</name> = <call><name>dav_get_resource_state</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* parse the request body (may be a version-control element) */</comment>
    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_xml_parse_input</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>
    <comment type="block">/* note: doc == NULL if no request body */</comment>

    <if>if <condition>(<expr><name>doc</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>child</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>tsize</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<call><name>dav_validate_root</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"version-control"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00597</expr></argument>)</argument_list></call>
                          "The request body does not contain "
                          "a \"version-control\" element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/* get the version URI */</comment>
        <if>if <condition>(<expr>(<name>child</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"version"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00598</expr></argument>)</argument_list></call>
                          "The \"version-control\" element does not contain "
                          "a \"version\" element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>child</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00599</expr></argument>)</argument_list></call>
                          "The \"version\" element does not contain "
                          "an \"href\" element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/* get version URI */</comment>
        <expr_stmt><expr><call><name>apr_xml_to_text</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>APR_XML_X2T_INNER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr>&amp;<name>target</name></expr></argument>, <argument><expr>&amp;<name>tsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tsize</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00600</expr></argument>)</argument_list></call>
                          "An \"href\" element does not contain a URI."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* Check request preconditions */</comment>

    <comment type="block">/* ### need a general mechanism for reporting precondition violations
     * ### (should be returning XML document for 403/409 responses)
     */</comment>

    <comment type="block">/* if not versioning existing resource, must specify version to select */</comment>
    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name> &amp;&amp; <name>target</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                            <argument><expr>"&lt;DAV:initial-version-required/&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* cannot add resource to existing version history */</comment>
        <if>if <condition>(<expr><name>target</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                                <argument><expr>"&lt;DAV:cannot-add-to-existing-history/&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="block">/* resource must be unversioned and versionable, or version selector */</comment>
        <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name>
            || (!<name><name>resource</name>-&gt;<name>versioned</name></name> &amp;&amp; !<call>(<name><name>vsn_hooks</name>-&gt;<name>versionable</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                                <argument><expr>"&lt;DAV:must-be-versionable/&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="block">/* the DeltaV spec says if resource is a version selector,
         * then VERSION-CONTROL is a no-op
         */</comment>
        <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>versioned</name></name></expr>)</condition><then> <block>{
            <comment type="block">/* set the Cache-Control header, per the spec */</comment>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* no body */</comment>
            <expr_stmt><expr><call><name>ap_set_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>DONE</name></expr>;</return>
        }</block></then></if>
    }</block></then></if></else></if>

    <comment type="block">/* Check If-Headers and existing locks */</comment>
    <comment type="block">/* Note: depth == 0. Implies no need for a multistatus response. */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_validate_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr><name>resource_state</name> == <name>DAV_RESOURCE_NULL</name> ?
                                    <name>DAV_VALIDATE_PARENT</name> :
                                    <name>DAV_VALIDATE_RESOURCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* if in versioned collection, make sure parent is checked out */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_auto_checkout</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/* parent_only */</comment>,
                                 <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* attempt to version-control the resource */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>vsn_hooks</name>-&gt;<name>vsn_control</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>dav_auto_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/*undo*/</comment>, <argument><expr>0</expr></argument> <comment type="block">/*unlock*/</comment>, <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not VERSION-CONTROL resource %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* revert writability of parent directory */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_auto_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/*undo*/</comment>, <argument><expr>0</expr></argument> <comment type="block">/*unlock*/</comment>, <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* just log a warning */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"The VERSION-CONTROL was successful, but there "
                             "was a problem automatically checking in "
                             "the parent collection."</expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dav_log_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* if the resource is lockable, let lock system know of new resource */</comment>
    <if>if <condition>(<expr><name>locks_hooks</name> != <name>NULL</name>
        &amp;&amp; <call>(*<name><name>locks_hooks</name>-&gt;<name>get_supportedlock</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>locks_hooks</name>-&gt;<name>open_lockdb</name></name>)<argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>lockdb</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* The resource creation was successful, but the locking failed. */</comment>
            <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                 <argument><expr>"The VERSION-CONTROL was successful, but there "
                                 "was a problem opening the lock database "
                                 "which prevents inheriting locks from the "
                                 "parent resources."</expr></argument>,
                                 <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="block">/* notify lock system that we have created/replaced a resource */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_notify_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>resource_state</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call>(*<name><name>locks_hooks</name>-&gt;<name>close_lockdb</name></name>)<argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <comment type="block">/* The dir creation was successful, but the locking failed. */</comment>
            <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                 <argument><expr>"The VERSION-CONTROL was successful, but there "
                                 "was a problem updating its lock "
                                 "information."</expr></argument>,
                                 <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* set the Cache-Control header, per the spec */</comment>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* return an appropriate response (HTTP_CREATED) */</comment>
    <return>return <expr><call><name>dav_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"Version selector"</expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/*replaced*/</comment>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* handle the CHECKOUT method */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_checkout</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>working_resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_VSN</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>apply_to_vsn</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_unreserved</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_fork_ok</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>create_activity</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>activities</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* If no versioning provider, decline the request */</comment>
    <if>if <condition>(<expr><name>vsn_hooks</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_xml_parse_input</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then>
        <return>return <expr><name>result</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>doc</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>aset</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<call><name>dav_validate_root</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"checkout"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/* This supplies additional information for the default msg. */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00601</expr></argument>)</argument_list></call>
                          "The request body, if present, must be a "
                          "DAV:checkout element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"apply-to-version"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"label"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
                <comment type="block">/* ### we want generic 403/409 XML reporting here */</comment>
                <comment type="block">/* ### DAV:must-not-have-label-and-apply-to-version */</comment>
                <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
                                          <argument><expr>"DAV:apply-to-version cannot be "
                                          "used in conjunction with a "
                                          "Label header."</expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>apply_to_vsn</name> = 1</expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>is_unreserved</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"unreserved"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>is_fork_ok</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"fork-ok"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>;</expr_stmt>

        <if>if <condition>(<expr>(<name>aset</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"activity-set"</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>dav_find_child</name><argument_list>(<argument><expr><name>aset</name></expr></argument>, <argument><expr>"new"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>create_activity</name> = 1</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>child</name> <init>= <expr><name><name>aset</name>-&gt;<name>first_child</name></name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>activities</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for (<init>;</init> <condition><expr><name>child</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>) <block>{
                    <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>APR_XML_NS_DAV_ID</name>
                        &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>href</name></decl>;</decl_stmt>

                        <expr_stmt><expr><name>href</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                                 <argument><expr>1</expr></argument> <comment type="block">/* strip_white */</comment>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>activities</name></expr></argument>)</argument_list></call> = <name>href</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>

                <if>if <condition>(<expr><name><name>activities</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then> <block>{
                    <comment type="block">/* no href's is a DTD violation:
                       &lt;!ELEMENT activity-set (href+ | new)&gt;
                    */</comment>

                    <comment type="block">/* This supplies additional info for the default msg. */</comment>
                    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00602</expr></argument>)</argument_list></call>
                                  "Within the DAV:activity-set element, the "
                                  "DAV:new element must be used, or at least "
                                  "one DAV:href must be specified."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
                }</block></then></if>
            }</block></else></if>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/*label_allowed*/</comment>, <argument><expr><name>apply_to_vsn</name></expr></argument>, <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Check the state of the resource: must be a file or collection,
     * must be versioned, and must not already be checked out.
     */</comment>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name>
        &amp;&amp; <name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_VERSION</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
                                  <argument><expr>"Cannot checkout this type of resource."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>versioned</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
                                  <argument><expr>"Cannot checkout unversioned resource."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>working</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
                                  <argument><expr>"The resource is already checked out to the workspace."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### do lock checks, once behavior is defined */</comment>

    <comment type="block">/* Do the checkout */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>vsn_hooks</name>-&gt;<name>checkout</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/*auto_checkout*/</comment>,
                                      <argument><expr><name>is_unreserved</name></expr></argument>, <argument><expr><name>is_fork_ok</name></expr></argument>,
                                      <argument><expr><name>create_activity</name></expr></argument>, <argument><expr><name>activities</name></expr></argument>,
                                      <argument><expr>&amp;<name>working_resource</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not CHECKOUT resource %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* set the Cache-Control header, per the spec */</comment>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if no working resource created, return OK,
     * else return CREATED with working resource URL in Location header
     */</comment>
    <if>if <condition>(<expr><name>working_resource</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* no body */</comment>
        <expr_stmt><expr><call><name>ap_set_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DONE</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name>dav_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>working_resource</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"Checked-out resource"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* handle the UNCHECKOUT method */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_uncheckout</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_VSN</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

    <comment type="block">/* If no versioning provider, decline the request */</comment>
    <if>if <condition>(<expr><name>vsn_hooks</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_discard_request_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Check the state of the resource: must be a file or collection,
     * must be versioned, and must be checked out.
     */</comment>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
                                  <argument><expr>"Cannot uncheckout this type of resource."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>versioned</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
                                  <argument><expr>"Cannot uncheckout unversioned resource."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>working</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
                                  <argument><expr>"The resource is not checked out to the workspace."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### do lock checks, once behavior is defined */</comment>

    <comment type="block">/* Do the uncheckout */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>vsn_hooks</name>-&gt;<name>uncheckout</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not UNCHECKOUT resource %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* no body */</comment>
    <expr_stmt><expr><call><name>ap_set_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>DONE</name></expr>;</return>
}</block></function>

<comment type="block">/* handle the CHECKIN method */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_checkin</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>new_version</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_VSN</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>keep_checked_out</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="block">/* If no versioning provider, decline the request */</comment>
    <if>if <condition>(<expr><name>vsn_hooks</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_xml_parse_input</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then>
        <return>return <expr><name>result</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>doc</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>dav_validate_root</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"checkin"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/* This supplies additional information for the default msg. */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00603</expr></argument>)</argument_list></call>
                          "The request body, if present, must be a "
                          "DAV:checkin element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>keep_checked_out</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"keep-checked-out"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Check the state of the resource: must be a file or collection,
     * must be versioned, and must be checked out.
     */</comment>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
                                  <argument><expr>"Cannot checkin this type of resource."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>versioned</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
                                  <argument><expr>"Cannot checkin unversioned resource."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>working</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
                                  <argument><expr>"The resource is not checked out."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### do lock checks, once behavior is defined */</comment>

    <comment type="block">/* Do the checkin */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>vsn_hooks</name>-&gt;<name>checkin</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>keep_checked_out</name></expr></argument>, <argument><expr>&amp;<name>new_version</name></expr></argument>)</argument_list></call>)
        != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not CHECKIN resource %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name>dav_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>new_version</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"Version"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_update</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>version</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_VSN</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>child</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_label</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>tsize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_response</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_lookup_result</name></type> <name>lookup</name></decl>;</decl_stmt>

    <comment type="block">/* If no versioning provider, or UPDATE not supported,
     * decline the request */</comment>
    <if>if <condition>(<expr><name>vsn_hooks</name> == <name>NULL</name> || <name><name>vsn_hooks</name>-&gt;<name>update</name></name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <if>if <condition>(<expr>(<name>depth</name> = <call><name>dav_get_depth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* dav_get_depth() supplies additional information for the
         * default message. */</comment>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* parse the request body */</comment>
    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_xml_parse_input</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>doc</name> == <name>NULL</name> || !<call><name>dav_validate_root</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"update"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default message. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00604</expr></argument>)</argument_list></call>
                      "The request body does not contain "
                      "an \"update\" element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* check for label-name or version element, but not both */</comment>
    <if>if <condition>(<expr>(<name>child</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"label-name"</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name>is_label</name> = 1</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr>(<name>child</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"version"</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* get the href element */</comment>
        <if>if <condition>(<expr>(<name>child</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00605</expr></argument>)</argument_list></call>
                          "The version element does not contain "
                          "an \"href\" element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then></if>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00606</expr></argument>)</argument_list></call>
                      "The \"update\" element does not contain "
                      "a \"label-name\" or \"version\" element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></else></if></else></if>

    <comment type="block">/* a depth greater than zero is only allowed for a label */</comment>
    <if>if <condition>(<expr>!<name>is_label</name> &amp;&amp; <name>depth</name> != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00607</expr></argument>)</argument_list></call>
                      "Depth must be zero for UPDATE with a version"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* get the target value (a label or a version URI) */</comment>
    <expr_stmt><expr><call><name>apr_xml_to_text</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>APR_XML_X2T_INNER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                    <argument><expr>&amp;<name>target</name></expr></argument>, <argument><expr>&amp;<name>tsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>tsize</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00608</expr></argument>)</argument_list></call>
                      "A \"label-name\" or \"href\" element does not contain "
                      "any content."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### need a general mechanism for reporting precondition violations
     * ### (should be returning XML document for 403/409 responses)
     */</comment>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name>
        || !<name><name>resource</name>-&gt;<name>versioned</name></name> || <name><name>resource</name>-&gt;<name>working</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
                                  <argument><expr>"&lt;DAV:must-be-checked-in-version-controlled-resource&gt;"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* if target is a version, resolve the version resource */</comment>
    <comment type="block">/* ### dav_lookup_uri only allows absolute URIs; is that OK? */</comment>
    <if>if <condition>(<expr>!<name>is_label</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>lookup</name> = <call><name>dav_lookup_uri</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* must_be_absolute */</comment>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>lookup</name>.<name>rnew</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>lookup</name>.<name>err</name>.<name>status</name></name> == <name>HTTP_BAD_REQUEST</name></expr>)</condition><then> <block>{
                <comment type="block">/* This supplies additional information for the default message. */</comment>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00609</expr></argument>)</argument_list></call>
                              "%s"</expr></argument>, <argument><expr><name><name>lookup</name>.<name>err</name>.<name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
            }</block></then></if>

            <comment type="block">/* ### this assumes that dav_lookup_uri() only generates a status
             * ### that Apache can provide a status line for!! */</comment>

            <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>err</name>.<name>status</name></name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>err</name>.<name>desc</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>lookup</name>.<name>rnew</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
            <comment type="block">/* ### how best to report this... */</comment>
            <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>rnew</name>-&gt;<name>status</name></name></expr></argument>,
                                      <argument><expr>"Version URI had an error."</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="block">/* resolve version resource */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name><name>lookup</name>.<name>rnew</name></name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>,
                               <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>, <argument><expr>&amp;<name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
            <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

        <comment type="block">/* NULL out target, since we're using a version resource */</comment>
        <expr_stmt><expr><name>target</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* do the UPDATE operation */</comment>
    <expr_stmt><expr><name>err</name> = <call>(*<name><name>vsn_hooks</name>-&gt;<name>update</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr>&amp;<name>multi_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not UPDATE %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_response</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* set the Cache-Control header, per the spec */</comment>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* no body */</comment>
    <expr_stmt><expr><call><name>ap_set_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>DONE</name></expr>;</return>
}</block></function>

<comment type="block">/* context maintained during LABEL treewalk */</comment>
<typedef>typedef <type><struct>struct <name>dav_label_walker_ctx</name>
<block>{
    <comment type="block">/* input: */</comment>
    <decl_stmt><decl><type><name>dav_walk_params</name></type> <name>w</name></decl>;</decl_stmt>

    <comment type="block">/* label being manipulated */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl>;</decl_stmt>

    <comment type="block">/* label operation */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>label_op</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_LABEL_ADD</name></cpp:macro>           <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_LABEL_SET</name></cpp:macro>           <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_LABEL_REMOVE</name></cpp:macro>        <cpp:value>3</cpp:value></cpp:define>

    <comment type="block">/* version provider hooks */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name></decl>;</decl_stmt>

}</block></struct></type> <name>dav_label_walker_ctx</name>;</typedef>

<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_label_walker</name><parameter_list>(<param><decl><type><name>dav_walk_resource</name> *</type><name>wres</name></decl></param>, <param><decl><type><name>int</name></type> <name>calltype</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_label_walker_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>wres</name>-&gt;<name>walk_ctx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Check the state of the resource: must be a version or
     * non-checkedout version selector
     */</comment>
    <comment type="block">/* ### need a general mechanism for reporting precondition violations
     * ### (should be returning XML document for 403/409 responses)
     */</comment>
    <if>if <condition>(<expr><name><name>wres</name>-&gt;<name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_VERSION</name> &amp;&amp;
        (<name><name>wres</name>-&gt;<name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name>
         || !<name><name>wres</name>-&gt;<name>resource</name>-&gt;<name>versioned</name></name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>w</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                            <argument><expr>"&lt;DAV:must-be-version-or-version-selector/&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name><name>wres</name>-&gt;<name>resource</name>-&gt;<name>working</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>w</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                            <argument><expr>"&lt;DAV:must-not-be-checked-out/&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <comment type="block">/* do the label operation */</comment>
        <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>label_op</name></name> == <name>DAV_LABEL_REMOVE</name></expr>)</condition><then>
            <expr_stmt><expr><name>err</name> = <call>(*<name><name>ctx</name>-&gt;<name>vsn_hooks</name>-&gt;<name>remove_label</name></name>)<argument_list>(<argument><expr><name><name>wres</name>-&gt;<name>resource</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>err</name> = <call>(*<name><name>ctx</name>-&gt;<name>vsn_hooks</name>-&gt;<name>add_label</name></name>)<argument_list>(<argument><expr><name><name>wres</name>-&gt;<name>resource</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>label</name></name></expr></argument>,
                                               <argument><expr><name><name>ctx</name>-&gt;<name>label_op</name></name> == <name>DAV_LABEL_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></else></if></else></if>

    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### need utility routine to add response with description? */</comment>
        <expr_stmt><expr><call><name>dav_add_response</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>wres</name>-&gt;<name>response</name>-&gt;<name>desc</name></name> = <name><name>err</name>-&gt;<name>desc</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_label</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_VSN</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>child</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>tsize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_label_walker_ctx</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><block>{ <expr>0</expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_status</name></decl>;</decl_stmt>

    <comment type="block">/* If no versioning provider, or the provider doesn't support
     * labels, decline the request */</comment>
    <if>if <condition>(<expr><name>vsn_hooks</name> == <name>NULL</name> || <name><name>vsn_hooks</name>-&gt;<name>add_label</name></name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>depth</name> = <call><name>dav_get_depth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* dav_get_depth() supplies additional information for the
         * default message. */</comment>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* parse the request body */</comment>
    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_xml_parse_input</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>doc</name> == <name>NULL</name> || !<call><name>dav_validate_root</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"label"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default message. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00610</expr></argument>)</argument_list></call>
                      "The request body does not contain "
                      "a \"label\" element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* check for add, set, or remove element */</comment>
    <if>if <condition>(<expr>(<name>child</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"add"</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ctx</name>.<name>label_op</name></name> = <name>DAV_LABEL_ADD</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>(<name>child</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"set"</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ctx</name>.<name>label_op</name></name> = <name>DAV_LABEL_SET</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>(<name>child</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"remove"</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ctx</name>.<name>label_op</name></name> = <name>DAV_LABEL_REMOVE</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00611</expr></argument>)</argument_list></call>
                      "The \"label\" element does not contain "
                      "an \"add\", \"set\", or \"remove\" element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></else></if></else></if></else></if>

    <comment type="block">/* get the label string */</comment>
    <if>if <condition>(<expr>(<name>child</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr>"label-name"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00612</expr></argument>)</argument_list></call>
                      "The label command element does not contain "
                      "a \"label-name\" element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>apr_xml_to_text</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>APR_XML_X2T_INNER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                    <argument><expr>&amp;<name><name>ctx</name>.<name>label</name></name></expr></argument>, <argument><expr>&amp;<name>tsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>tsize</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00613</expr></argument>)</argument_list></call>
                      "A \"label-name\" element does not contain "
                      "a label name."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* do the label operation walk */</comment>
    <expr_stmt><expr><name><name>ctx</name>.<name>w</name>.<name>walk_type</name></name> = <name>DAV_WALKTYPE_NORMAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>w</name>.<name>func</name></name> = <name>dav_label_walker</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>w</name>.<name>walk_ctx</name></name> = &amp;<name>ctx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>w</name>.<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>w</name>.<name>root</name></name> = <name>resource</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>.<name>vsn_hooks</name></name> = <name>vsn_hooks</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>walk</name></name>)<argument_list>(<argument><expr>&amp;<name><name>ctx</name>.<name>w</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr>&amp;<name>multi_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* some sort of error occurred which terminated the walk */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"The LABEL operation was terminated prematurely."</expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_status</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>multi_status</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* One or more resources had errors. If depth was zero, convert
         * response to simple error, else make sure there is an
         * overall error to pass to dav_handle_err()
         */</comment>
        <if>if <condition>(<expr><name>depth</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>multi_status</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                                <argument><expr><name><name>multi_status</name>-&gt;<name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>multi_status</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_MULTI_STATUS</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                                <argument><expr>"Errors occurred during the LABEL operation."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_status</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* set the Cache-Control header, per the spec */</comment>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* no body */</comment>
    <expr_stmt><expr><call><name>ap_set_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>DONE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_report</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_VSN</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>label_allowed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>

    <comment type="block">/* If no versioning provider, decline the request */</comment>
    <if>if <condition>(<expr><name>vsn_hooks</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_xml_parse_input</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then>
        <return>return <expr><name>result</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>doc</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default msg. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00614</expr></argument>)</argument_list></call>
                      "The request body must specify a report."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Ask repository module to resolve the resource.
     * First determine whether a Target-Selector header is allowed
     * for this report.
     */</comment>
    <expr_stmt><expr><name>label_allowed</name> = <call>(*<name><name>vsn_hooks</name>-&gt;<name>report_label_header_allowed</name></name>)<argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>label_allowed</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* set up defaults for the report response */</comment>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DAV_XML_CONTENT_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* run report hook */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>vsn_hooks</name>-&gt;<name>deliver_report</name></name>)<argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>,
                                            <argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>! <name><name>r</name>-&gt;<name>sent_bodyct</name></name></expr>)</condition><then>
          <comment type="block">/* No data has been sent to client yet;  throw normal error. */</comment>
          <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

        <comment type="block">/* If an error occurred during the report delivery, there's
           basically nothing we can do but abort the connection and
           log an error.  This is one of the limitations of HTTP; it
           needs to "know" the entire status of the response before
           generating it, which is just impossible in these streamy
           response situations. */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"Provider encountered an error while streaming"
                             " a REPORT response."</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dav_log_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
        <return>return <expr><name>DONE</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>DONE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_make_workspace</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_VSN</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

    <comment type="block">/* if no versioning provider, or the provider does not support workspaces,
     * decline the request
     */</comment>
    <if>if <condition>(<expr><name>vsn_hooks</name> == <name>NULL</name> || <name><name>vsn_hooks</name>-&gt;<name>make_workspace</name></name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <comment type="block">/* ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* parse the request body (must be a mkworkspace element) */</comment>
    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_xml_parse_input</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>doc</name> == <name>NULL</name>
        || !<call><name>dav_validate_root</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"mkworkspace"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00615</expr></argument>)</argument_list></call>
                      "The request body does not contain "
                      "a \"mkworkspace\" element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Check request preconditions */</comment>

    <comment type="block">/* ### need a general mechanism for reporting precondition violations
     * ### (should be returning XML document for 403/409 responses)
     */</comment>

    <comment type="block">/* resource must not already exist */</comment>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                            <argument><expr>"&lt;DAV:resource-must-be-null/&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### what about locking? */</comment>

    <comment type="block">/* attempt to create the workspace */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>vsn_hooks</name>-&gt;<name>make_workspace</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not create workspace %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* set the Cache-Control header, per the spec */</comment>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* return an appropriate response (HTTP_CREATED) */</comment>
    <return>return <expr><call><name>dav_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"Workspace"</expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/*replaced*/</comment>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_make_activity</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_VSN</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

    <comment type="block">/* if no versioning provider, or the provider does not support activities,
     * decline the request
     */</comment>
    <if>if <condition>(<expr><name>vsn_hooks</name> == <name>NULL</name> || <name><name>vsn_hooks</name>-&gt;<name>make_activity</name></name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <comment type="block">/* ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* MKACTIVITY does not have a defined request body. */</comment>
    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_discard_request_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <return>return <expr><name>result</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Check request preconditions */</comment>

    <comment type="block">/* ### need a general mechanism for reporting precondition violations
     * ### (should be returning XML document for 403/409 responses)
     */</comment>

    <comment type="block">/* resource must not already exist */</comment>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                            <argument><expr>"&lt;DAV:resource-must-be-null/&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* the provider must say whether the resource can be created as
       an activity, i.e. whether the location is ok.  */</comment>
    <if>if <condition>(<expr><name><name>vsn_hooks</name>-&gt;<name>can_be_activity</name></name> != <name>NULL</name>
        &amp;&amp; !<call>(*<name><name>vsn_hooks</name>-&gt;<name>can_be_activity</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                          <argument><expr>"&lt;DAV:activity-location-ok/&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### what about locking? */</comment>

    <comment type="block">/* attempt to create the activity */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>vsn_hooks</name>-&gt;<name>make_activity</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not create activity %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* set the Cache-Control header, per the spec */</comment>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* return an appropriate response (HTTP_CREATED) */</comment>
    <return>return <expr><call><name>dav_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"Activity"</expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/*replaced*/</comment>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_baseline_control</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* ### */</comment>
    <return>return <expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_merge</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>source_resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_VSN</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>source_elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>href_elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>prop_elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>no_auto_merge</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>no_checkout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_lookup_result</name></type> <name>lookup</name></decl>;</decl_stmt>

    <comment type="block">/* If no versioning provider, decline the request */</comment>
    <if>if <condition>(<expr><name>vsn_hooks</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <if>if <condition>(<expr>(<name>result</name> = <call><name>ap_xml_parse_input</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>doc</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then>
        <return>return <expr><name>result</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>doc</name> == <name>NULL</name> || !<call><name>dav_validate_root</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"merge"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default msg. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00616</expr></argument>)</argument_list></call>
                      "The request body must be present and must be a "
                      "DAV:merge element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>source_elem</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"source"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default msg. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00617</expr></argument>)</argument_list></call>
                      "The DAV:merge element must contain a DAV:source "
                      "element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>(<name>href_elem</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name>source_elem</name></expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default msg. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00618</expr></argument>)</argument_list></call>
                      "The DAV:source element must contain a DAV:href "
                      "element."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>source</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>href_elem</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/* strip_white */</comment>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* get a subrequest for the source, so that we can get a dav_resource
       for that source. */</comment>
    <expr_stmt><expr><name>lookup</name> = <call><name>dav_lookup_uri</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* must_be_absolute */</comment>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>lookup</name>.<name>rnew</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>lookup</name>.<name>err</name>.<name>status</name></name> == <name>HTTP_BAD_REQUEST</name></expr>)</condition><then> <block>{
            <comment type="block">/* This supplies additional information for the default message. */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00619</expr></argument>)</argument_list></call>
                          "%s"</expr></argument>, <argument><expr><name><name>lookup</name>.<name>err</name>.<name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/* ### this assumes that dav_lookup_uri() only generates a status
         * ### that Apache can provide a status line for!! */</comment>

        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>err</name>.<name>status</name></name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>err</name>.<name>desc</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>lookup</name>.<name>rnew</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### how best to report this... */</comment>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>rnew</name>-&gt;<name>status</name></name></expr></argument>,
                                  <argument><expr>"Merge source URI had an error."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name><name>lookup</name>.<name>rnew</name></name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>,
                           <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>, <argument><expr>&amp;<name>source_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr><name>no_auto_merge</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"no-auto-merge"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>no_checkout</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"no-checkout"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>prop_elem</name> = <call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"prop"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* ### check RFC. I believe the DAV:merge element may contain any
       ### element also allowed within DAV:checkout. need to extract them
       ### here, and pass them along.
       ### if so, then refactor the CHECKOUT method handling so we can reuse
       ### the code. maybe create a structure to hold CHECKOUT parameters
       ### which can be passed to the checkout() and merge() hooks. */</comment>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### check the source and target resources flags/types */</comment>

    <comment type="block">/* ### do lock checks, once behavior is defined */</comment>

    <comment type="block">/* set the Cache-Control header, per the spec */</comment>
    <comment type="block">/* ### correct? */</comment>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Initialize these values for a standard MERGE response. If the MERGE
       is going to do something different (i.e. an error), then it must
       return a dav_error, and we'll reset these values properly. */</comment>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* ### should we do any preliminary response generation? probably not,
       ### because we may have an error, thus demanding something else in
       ### the response body. */</comment>

    <comment type="block">/* Do the merge, including any response generation. */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>vsn_hooks</name>-&gt;<name>merge</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>source_resource</name></expr></argument>,
                                   <argument><expr><name>no_auto_merge</name></expr></argument>, <argument><expr><name>no_checkout</name></expr></argument>,
                                   <argument><expr><name>prop_elem</name></expr></argument>,
                                   <argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### is err-&gt;status the right error here? */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not MERGE resource \"%s\" "
                                          "into \"%s\"."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* the response was fully generated by the merge() hook. */</comment>
    <comment type="block">/* ### urk. does this prevent logging? need to check... */</comment>
    <return>return <expr><name>DONE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_method_bind</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_resource</name> *</type><name>binding</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_auto_version_info</name></type> <name>av_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_binding</name> *</type><name>binding_hooks</name> <init>= <expr><call><name>DAV_GET_HOOKS_BINDING</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_error</name> *</type><name>err2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dav_lookup_result</name></type> <name>lookup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>overwrite</name></decl>;</decl_stmt>

    <comment type="block">/* If no bindings provider, decline the request */</comment>
    <if>if <condition>(<expr><name>binding_hooks</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <comment type="block">/* Ask repository module to resolve the resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>, <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>,
                           <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Apache will supply a default error for this. */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* get the destination URI */</comment>
    <expr_stmt><expr><name>dest</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Destination"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>dest</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* This supplies additional information for the default message. */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00620</expr></argument>)</argument_list></call>
                      "The request is missing a Destination header."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>lookup</name> = <call><name>dav_lookup_uri</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* must_be_absolute */</comment>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>lookup</name>.<name>rnew</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>lookup</name>.<name>err</name>.<name>status</name></name> == <name>HTTP_BAD_REQUEST</name></expr>)</condition><then> <block>{
            <comment type="block">/* This supplies additional information for the default message. */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00621</expr></argument>)</argument_list></call>
                          "%s"</expr></argument>, <argument><expr><name><name>lookup</name>.<name>err</name>.<name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>lookup</name>.<name>err</name>.<name>status</name></name> == <name>HTTP_BAD_GATEWAY</name></expr>)</condition><then> <block>{
            <comment type="block">/* ### Bindings protocol draft 02 says to return 507
             * ### (Cross Server Binding Forbidden); Apache already defines 507
             * ### as HTTP_INSUFFICIENT_STORAGE. So, for now, we'll return
             * ### HTTP_FORBIDDEN
             */</comment>
             <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>,
                                       <argument><expr>"Cross server bindings are not "
                                       "allowed by this server."</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></else></if>

        <comment type="block">/* ### this assumes that dav_lookup_uri() only generates a status
         * ### that Apache can provide a status line for!! */</comment>

        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>err</name>.<name>status</name></name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>err</name>.<name>desc</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>lookup</name>.<name>rnew</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
        <comment type="block">/* ### how best to report this... */</comment>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>rnew</name>-&gt;<name>status</name></name></expr></argument>,
                                  <argument><expr>"Destination URI had an error."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* resolve binding resource */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>dav_get_resource</name><argument_list>(<argument><expr><name><name>lookup</name>.<name>rnew</name></name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* label_allowed */</comment>,
                           <argument><expr>0</expr></argument> <comment type="block">/* use_checked_in */</comment>, <argument><expr>&amp;<name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* are the two resources handled by the same repository? */</comment>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>hooks</name></name> != <name><name>binding</name>-&gt;<name>hooks</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* ### this message exposes some backend config, but screw it... */</comment>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
                                  <argument><expr>"Destination URI is handled by a "
                                  "different repository than the source URI. "
                                  "BIND between repositories is not possible."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* get and parse the overwrite header value */</comment>
    <if>if <condition>(<expr>(<name>overwrite</name> = <call><name>dav_get_overwrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* dav_get_overwrite() supplies additional information for the
         * default message. */</comment>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* quick failure test: if dest exists and overwrite is false. */</comment>
    <if>if <condition>(<expr><name><name>binding</name>-&gt;<name>exists</name></name> &amp;&amp; !<name>overwrite</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_PRECONDITION_FAILED</name></expr></argument>,
                                  <argument><expr>"Destination is not empty and "
                                  "Overwrite is not \"T\""</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* are the source and destination the same? */</comment>
    <if>if <condition>(<expr><call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>is_same_resource</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>,
                                  <argument><expr>"Source and Destination URIs are the same."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Check If-Headers and existing locks for destination. Note that we
     * use depth==infinity since the target (hierarchy) will be deleted
     * before the move/copy is completed.
     *
     * Note that we are overwriting the target, which implies a DELETE, so
     * we are subject to the error/response rules as a DELETE. Namely, we
     * will return a 424 error if any of the validations fail.
     * (see dav_method_delete() for more information)
     */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_validate_request</name><argument_list>(<argument><expr><name><name>lookup</name>.<name>rnew</name></name></expr></argument>, <argument><expr><name>binding</name></expr></argument>, <argument><expr><name>DAV_INFINITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr>&amp;<name>multi_response</name></expr></argument>,
                                    <argument><expr><name>DAV_VALIDATE_PARENT</name>
                                    | <name>DAV_VALIDATE_USE_424</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not BIND %s due to a "
                                          "failed precondition on the "
                                          "destination (e.g. locks)."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_response</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* guard against creating circular bindings */</comment>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name>
        &amp;&amp; <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>is_parent_resource</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>,
                                  <argument><expr>"Source collection contains the Destination."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name>
        &amp;&amp; <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>is_parent_resource</name></name>)<argument_list>(<argument><expr><name>binding</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* The destination must exist (since it contains the source), and
         * a condition above implies Overwrite==T. Obviously, we cannot
         * delete the Destination before the BIND, as that would
         * delete the Source.
         */</comment>

        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>,
                                  <argument><expr>"Destination collection contains the Source and "
                                  "Overwrite has been specified."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* prepare the destination collection for modification */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>dav_auto_checkout</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>binding</name></expr></argument>, <argument><expr>1</expr></argument> <comment type="block">/* parent_only */</comment>,
                                 <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* could not make destination writable */</comment>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* If target exists, remove it first (we know Ovewrite must be TRUE).
     * Then try to bind to the resource.
     */</comment>
    <if>if <condition>(<expr><name><name>binding</name>-&gt;<name>exists</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call>(*<name><name>resource</name>-&gt;<name>hooks</name>-&gt;<name>remove_resource</name></name>)<argument_list>(<argument><expr><name>binding</name></expr></argument>, <argument><expr>&amp;<name>multi_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><name>err</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call>(*<name><name>binding_hooks</name>-&gt;<name>bind_resource</name></name>)<argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>binding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* restore parent collection states */</comment>
    <expr_stmt><expr><name>err2</name> = <call><name>dav_auto_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><name>err</name> != <name>NULL</name></expr></argument> <comment type="block">/* undo if error */</comment>,
                            <argument><expr>0</expr></argument> <comment type="block">/* unlock */</comment>, <argument><expr>&amp;<name>av_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check for error from remove/bind operations */</comment>
    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                          <argument><expr>"Could not BIND %s."</expr></argument>,
                                          <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>multi_response</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* check for errors from reverting writability */</comment>
    <if>if <condition>(<expr><name>err2</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* just log a warning */</comment>
        <expr_stmt><expr><name>err</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>err2</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr>"The BIND was successful, but there was a "
                             "problem automatically checking in the "
                             "source parent collection."</expr></argument>,
                             <argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dav_log_err</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* return an appropriate response (HTTP_CREATED) */</comment>
    <comment type="block">/* ### spec doesn't say what happens when destination was replaced */</comment>
    <return>return <expr><call><name>dav_created</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>lookup</name>.<name>rnew</name>-&gt;<name>unparsed_uri</name></name></expr></argument>, <argument><expr>"Binding"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/*
 * Response handler for DAV resources
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr><name>DAV_HANDLER_NAME</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

    <comment type="block">/* Reject requests with an unescaped hash character, as these may
     * be more destructive than the user intended. */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>fragment</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00622</expr></argument>)</argument_list></call>
                     "buggy client used un-escaped hash in Request-URI"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dav_error_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>,
                                  <argument><expr>"The request was invalid: the URI included "
                                  "an un-escaped hash character"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### do we need to do anything with r-&gt;proxyreq ?? */</comment>

    <comment type="block">/*
     * ### anything else to do here? could another module and/or
     * ### config option "take over" the handler here? i.e. how do
     * ### we lock down this hierarchy so that we are the ultimate
     * ### arbiter? (or do we simply depend on the administrator
     * ### to avoid conflicting configurations?)
     */</comment>

    <comment type="block">/*
     * Set up the methods mask, since that's one of the reasons this handler
     * gets called, and lower-level things may need the info.
     *
     * First, set the mask to the methods we handle directly.  Since by
     * definition we own our managed space, we unconditionally set
     * the r-&gt;allowed field rather than ORing our values with anything
     * any other module may have put in there.
     *
     * These are the HTTP-defined methods that we handle directly.
     */</comment>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>allowed</name></name> = 0
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_GET</name>)
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_PUT</name>)
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_DELETE</name>)
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_OPTIONS</name>)
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_INVALID</name>)</expr>;</expr_stmt>

    <comment type="block">/*
     * These are the DAV methods we handle.
     */</comment>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>allowed</name></name> |= 0
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_COPY</name>)
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_LOCK</name>)
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_UNLOCK</name>)
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_MKCOL</name>)
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_MOVE</name>)
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_PROPFIND</name>)
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_PROPPATCH</name>)</expr>;</expr_stmt>

    <comment type="block">/*
     * These are methods that we don't handle directly, but let the
     * server's default handler do for us as our agent.
     */</comment>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>allowed</name></name> |= 0
        | (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_POST</name>)</expr>;</expr_stmt>

    <comment type="block">/* ### hrm. if we return HTTP_METHOD_NOT_ALLOWED, then an Allow header
     * ### is sent; it will need the other allowed states; since the default
     * ### handler is not called on error, then it doesn't add the other
     * ### allowed states, so we must
     */</comment>

    <comment type="block">/* ### we might need to refine this for just where we return the error.
     * ### also, there is the issue with other methods (see ISSUES)
     */</comment>

    <comment type="block">/* dispatch the appropriate method handler */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_GET</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_get</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_PUT</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_put</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_POST</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_post</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_DELETE</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_delete</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_OPTIONS</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_options</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_PROPFIND</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_propfind</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_PROPPATCH</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_proppatch</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_MKCOL</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_mkcol</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_COPY</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_copymove</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DAV_DO_COPY</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_MOVE</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_copymove</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DAV_DO_MOVE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_LOCK</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_lock</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_UNLOCK</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_unlock</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_VERSION_CONTROL</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_vsn_control</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_CHECKOUT</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_checkout</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_UNCHECKOUT</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_uncheckout</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_CHECKIN</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_checkin</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_UPDATE</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_update</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_LABEL</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_label</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_REPORT</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_report</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_MKWORKSPACE</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_make_workspace</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_MKACTIVITY</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_make_activity</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_BASELINE_CONTROL</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_baseline_control</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_MERGE</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_merge</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* BIND method */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name><name>dav_methods</name><index>[<expr><name>DAV_M_BIND</name></expr>]</index></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_bind</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* DASL method */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name><name>dav_methods</name><index>[<expr><name>DAV_M_SEARCH</name></expr>]</index></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>dav_method_search</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ### add'l methods for Advanced Collections, ACLs */</comment>

    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_fixups</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dav_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>

    <comment type="block">/* quickly ignore any HTTP/0.9 requests which aren't subreqs. */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>assbackwards</name></name> &amp;&amp; !<name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>conf</name> = (<name>dav_dir_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                <argument><expr>&amp;<name>dav_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if DAV is not enabled, then we've got nothing to do */</comment>
    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>provider</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* We are going to handle almost every request. In certain cases,
       the provider maps to the filesystem (thus, handle_get is
       FALSE), and core Apache will handle it. a For that case, we
       just return right away.  */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_GET</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * ### need some work to pull Content-Type and Content-Language
         * ### from the property database.
         */</comment>

        <comment type="block">/*
         * If the repository hasn't indicated that it will handle the
         * GET method, then just punt.
         *
         * ### this isn't quite right... taking over the response can break
         * ### things like mod_negotiation. need to look into this some more.
         */</comment>
        <if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>repos</name>-&gt;<name>handle_get</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name>DECLINED</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* ### this is wrong.  We should only be setting the r-&gt;handler for the
     * requests that mod_dav knows about.  If we set the handler for M_POST
     * requests, then CGI scripts that use POST will return the source for the
     * script.  However, mod_dav DOES handle POST, so something else needs
     * to be fixed.
     */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_POST</name></expr>)</condition><then> <block>{

        <comment type="block">/* We are going to be handling the response for this resource. */</comment>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = <name>DAV_HANDLER_NAME</name></expr>;</expr_stmt>
        <return>return <expr><name>OK</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>dav_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>dav_init_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>dav_fixups</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>dav_hook_find_liveprop</name><argument_list>(<argument><expr><name>dav_core_find_liveprop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dav_hook_insert_all_liveprops</name><argument_list>(<argument><expr><name>dav_core_insert_all_liveprops</name></expr></argument>,
                                  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>dav_core_register_uris</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*---------------------------------------------------------------------------
 *
 * Configuration info for the module
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>dav_cmds</name><index>[]</index></name> <init>=
<expr><block>{
    <comment type="block">/* per directory/location */</comment>
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DAV"</expr></argument>, <argument><expr><name>dav_cmd_dav</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
                  <argument><expr>"specify the DAV provider for a directory or location"</expr></argument>)</argument_list></call></expr>,

    <comment type="block">/* per directory/location, or per server */</comment>
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DAVMinTimeout"</expr></argument>, <argument><expr><name>dav_cmd_davmintimeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                  <argument><expr><name>ACCESS_CONF</name>|<name>RSRC_CONF</name></expr></argument>,
                  <argument><expr>"specify minimum allowed timeout"</expr></argument>)</argument_list></call></expr>,

    <comment type="block">/* per directory/location, or per server */</comment>
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"DAVDepthInfinity"</expr></argument>, <argument><expr><name>dav_cmd_davdepthinfinity</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                 <argument><expr><name>ACCESS_CONF</name>|<name>RSRC_CONF</name></expr></argument>,
                 <argument><expr>"allow Depth infinity PROPFIND requests"</expr></argument>)</argument_list></call></expr>,

    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module</name> <name>DAV_DECLARE_DATA</name></type> <name>dav_module</name> <init>=
<expr><block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>dav_create_dir_config</name></expr>,      <comment type="block">/* dir config creater */</comment>
    <expr><name>dav_merge_dir_config</name></expr>,       <comment type="block">/* dir merger --- default is to override */</comment>
    <expr><name>dav_create_server_config</name></expr>,   <comment type="block">/* server config */</comment>
    <expr><name>dav_merge_server_config</name></expr>,    <comment type="block">/* merge server config */</comment>
    <expr><name>dav_cmds</name></expr>,                   <comment type="block">/* command table */</comment>
    <expr><name>register_hooks</name></expr>,             <comment type="block">/* register hooks */</comment>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>APR_HOOK_STRUCT</name><argument_list>(
    <argument>APR_HOOK_LINK(gather_propsets)
    APR_HOOK_LINK(find_liveprop)
    APR_HOOK_LINK(insert_all_liveprops)</argument>
    )</argument_list></macro>

<macro><name>APR_IMPLEMENT_EXTERNAL_HOOK_VOID</name><argument_list>(<argument>dav</argument>, <argument>DAV</argument>, <argument>gather_propsets</argument>,
                                 <argument>(apr_array_header_t *uris)</argument>,
                                 <argument>(uris)</argument>)</argument_list></macro>

<macro><name>APR_IMPLEMENT_EXTERNAL_HOOK_RUN_FIRST</name><argument_list>(<argument>dav</argument>, <argument>DAV</argument>, <argument>int</argument>, <argument>find_liveprop</argument>,
                                      <argument>(const dav_resource *resource,
                                       const char *ns_uri, const char *name,
                                       const dav_hooks_liveprop **hooks)</argument>,
                                      <argument>(resource, ns_uri, name, hooks)</argument>, <argument>0</argument>)</argument_list></macro>

<macro><name>APR_IMPLEMENT_EXTERNAL_HOOK_VOID</name><argument_list>(<argument>dav</argument>, <argument>DAV</argument>, <argument>insert_all_liveprops</argument>,
                                 <argument>(request_rec *r, const dav_resource *resource,
                                  dav_prop_insert what, apr_text_header *phdr)</argument>,
                                 <argument>(r, resource, what, phdr)</argument>)</argument_list></macro>
</unit>
