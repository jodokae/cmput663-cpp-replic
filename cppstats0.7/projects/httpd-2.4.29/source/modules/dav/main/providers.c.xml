<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/dav/main/providers.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_dav.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROVIDER_GROUP</name></cpp:macro> <cpp:value>"dav"</cpp:value></cpp:define>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_register_provider</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *name</argument>,
                                        <argument>const dav_provider *provider</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DAV_PROVIDER_GROUP</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_provider *</argument>)</argument_list></macro> <macro><name>dav_lookup_provider</name><argument_list>(<argument>const char *name</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>DAV_PROVIDER_GROUP</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_options_provider_register</name><argument_list>(<argument>apr_pool_t *p</argument>,
                        <argument>const char *name</argument>,
                        <argument>const dav_options_provider *provider</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DAV_OPTIONS_EXTENSION_GROUP</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_options_provider *</argument>)</argument_list></macro> <macro><name>dav_get_options_providers</name><argument_list>(<argument>const char *name</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>DAV_OPTIONS_EXTENSION_GROUP</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</return>
}</block>


<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_resource_type_provider_register</name><argument_list>(<argument>apr_pool_t *p</argument>,
                          <argument>const char *name</argument>,
                          <argument>const dav_resource_type_provider *provider</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DAV_RESOURCE_TYPE_GROUP</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_resource_type_provider *</argument>)</argument_list></macro> <macro><name>dav_get_resource_type_providers</name><argument_list>(<argument>const char *name</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>DAV_RESOURCE_TYPE_GROUP</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</return>
}</block>
</unit>
