<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/dav/fs/repos.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  repos.h
 * @brief Declarations for the filesystem repository implementation
 *
 * @addtogroup MOD_DAV
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_DAV_FS_REPOS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DAV_FS_REPOS_H_</name></cpp:macro></cpp:define>

<comment type="block">/* the subdirectory to hold all DAV-related information for a directory */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_FS_STATE_DIR</name></cpp:macro>                <cpp:value>".DAV"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_FS_STATE_FILE_FOR_DIR</name></cpp:macro>       <cpp:value>".state_for_dir"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_FS_LOCK_NULL_FILE</name></cpp:macro>           <cpp:value>".locknull"</cpp:value></cpp:define>


<comment type="block">/* ensure that our state subdirectory is present */</comment>
<function_decl><type><name>void</name></type> <name>dav_fs_ensure_state_dir</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dirname</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* return the storage pool associated with a resource */</comment>
<function_decl><type><name>apr_pool_t</name> *</type><name>dav_fs_pool</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* return the full pathname for a resource */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>dav_fs_pathname</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* return the directory and filename for a resource */</comment>
<function_decl><type><name>dav_error</name> *</type> <name>dav_fs_dir_file_name</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dirpath</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>fname</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* return the list of locknull members in this resource's directory */</comment>
<function_decl><type><name>dav_error</name> *</type> <name>dav_fs_get_locknull_members</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
                                        <param><decl><type><name>dav_buffer</name> *</type><name>pbuf</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* DBM functions used by the repository and locking providers */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dav_hooks_db</name></type> <name>dav_hooks_db_dbm</name></decl>;</decl_stmt>

<function_decl><type><name>dav_error</name> *</type> <name>dav_dbm_open_direct</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name></decl></param>, <param><decl><type><name>int</name></type> <name>ro</name></decl></param>,
                                <param><decl><type><name>dav_db</name> **</type><name>pdb</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dav_dbm_get_statefiles</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>state1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>state2</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> <name>dav_dbm_delete</name><parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><name>apr_datum_t</name></type> <name>key</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> <name>dav_dbm_store</name><parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><name>apr_datum_t</name></type> <name>key</name></decl></param>, <param><decl><type><name>apr_datum_t</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> <name>dav_dbm_fetch</name><parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><name>apr_datum_t</name></type> <name>key</name></decl></param>, <param><decl><type><name>apr_datum_t</name> *</type><name>pvalue</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dav_dbm_freedatum</name><parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><name>apr_datum_t</name></type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dav_dbm_exists</name><parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><name>apr_datum_t</name></type> <name>key</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dav_dbm_close</name><parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* where is the lock database located? */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>dav_get_lockdb_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>dav_hooks_locks</name> *</type><name>dav_fs_get_lock_hooks</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>dav_hooks_propdb</name> *</type><name>dav_fs_get_propdb_hooks</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>dav_fs_gather_propsets</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>uris</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dav_fs_find_liveprop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns_uri</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>dav_hooks_liveprop</name> **</type><name>hooks</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dav_fs_insert_all_liveprops</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
                                 <param><decl><type><name>dav_prop_insert</name></type> <name>what</name></decl></param>, <param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>dav_fs_register</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _DAV_FS_REPOS_H_ */</comment>
<comment type="block">/** @} */</comment>

</unit>
