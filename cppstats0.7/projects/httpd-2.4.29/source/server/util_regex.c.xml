<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/server/util_regex.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>rxplus_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>preg</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_regfree</name><argument_list>(<argument><expr>(<name>ap_regex_t</name> *) <name>preg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_rxplus_t*</argument>)</argument_list></macro> <macro><name>ap_rxplus_compile</name><argument_list>(<argument>apr_pool_t *pool</argument>,
                                           <argument>const char *pattern</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* perl style patterns
     * add support for more as and when wanted
     * substitute: s/rx/subs/
     * match: m/rx/ or just /rx/
     */</comment>

    <comment type="block">/* allow any nonalnum delimiter as first or second char.
     * If we ever use this with non-string pattern we'll need an extra check
     */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name> <init>= <expr><name>pattern</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rxstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_rxplus_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_rxplus_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>delim</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <enum>enum <block>{ <decl><name>SUBSTITUTE</name> <init>= <expr>'s'</expr></init></decl>, <decl><name>MATCH</name> <init>= <expr>'m'</expr></init></decl>}</block> <decl><name>action</name> <init>= <expr><name>MATCH</name></expr></init></decl>;</enum>

    <if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr><name><name>pattern</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>delim</name> = *<name>str</name>++</expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name><name>pattern</name><index>[<expr>0</expr>]</index></name> == 's' &amp;&amp; !<call><name>apr_isalnum</name><argument_list>(<argument><expr><name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>action</name> = <name>SUBSTITUTE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>delim</name> = <name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>str</name> += 2</expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name><name>pattern</name><index>[<expr>0</expr>]</index></name> == 'm' &amp;&amp; !<call><name>apr_isalnum</name><argument_list>(<argument><expr><name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>delim</name> = <name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>str</name> += 2</expr>;</expr_stmt>
    }</block></then></if></else></if></else></if>
    <comment type="block">/* TODO: support perl's after/before */</comment>
    <comment type="block">/* FIXME: fix these simplminded delims */</comment>

    <comment type="block">/* we think there's a delimiter.  Allow for it not to be if unmatched */</comment>
    <if>if <condition>(<expr><name>delim</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>endp</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>endp</name></expr>)</condition><then> <block>{ <comment type="block">/* there's no delim or flags */</comment>
        <if>if <condition>(<expr><call><name>ap_regcomp</name><argument_list>(<argument><expr>&amp;<name><name>ret</name>-&gt;<name>rx</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>ret</name>-&gt;<name>rx</name></name></expr></argument>, <argument><expr><name>rxplus_cleanup</name></expr></argument>,
                                      <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>ret</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></else></if>
    }</block></then></if>

    <comment type="block">/* We have a delimiter.  Use it to extract the regexp */</comment>
    <expr_stmt><expr><name>rxstr</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>endp</name>-<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If it's a substitution, we need the replacement string
     * TODO: possible future enhancement - support other parsing
     * in the replacement string.
     */</comment>
    <if>if <condition>(<expr><name>action</name> == <name>SUBSTITUTE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>str</name> = <name>endp</name>+1</expr>;</expr_stmt>
        <if>if <condition>(<expr>!*<name>str</name> || (<name>endp</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call>, !<name>endp</name>)</expr>)</condition><then> <block>{
            <comment type="block">/* missing replacement string is an error */</comment>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>ret</name>-&gt;<name>subs</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>endp</name>-<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* anything after the current delimiter is flags */</comment>
    <while>while <condition>(<expr>*++<name>endp</name></expr>)</condition> <block>{
        <switch>switch <condition>(<expr>*<name>endp</name></expr>)</condition> <block>{
        <case>case <expr>'i'</expr>: <expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_ICASE</name></expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr>'m'</expr>: <expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_NEWLINE</name></expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr>'n'</expr>: <expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_NOMEM</name></expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr>'g'</expr>: <expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_MULTI</name></expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr>'s'</expr>: <expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_DOTALL</name></expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr>'^'</expr>: <expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_NOTBOL</name></expr>;</expr_stmt> <break>break;</break>
        </case><case>case <expr>'$'</expr>: <expr_stmt><expr><name><name>ret</name>-&gt;<name>flags</name></name> |= <name>AP_REG_NOTEOL</name></expr>;</expr_stmt> <break>break;</break>
        </case><default>default: <break>break;</break> <comment type="block">/* we should probably be stricter here */</comment>
        </default>}</block></switch>
    }</block></while>
    <if>if <condition>(<expr><call><name>ap_regcomp</name><argument_list>(<argument><expr>&amp;<name><name>ret</name>-&gt;<name>rx</name></name></expr></argument>, <argument><expr><name>rxstr</name></expr></argument>, <argument><expr><name><name>ret</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>ret</name>-&gt;<name>rx</name></name></expr></argument>, <argument><expr><name>rxplus_cleanup</name></expr></argument>,
                                  <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></else></if>
    <if>if <condition>(<expr>!(<name><name>ret</name>-&gt;<name>flags</name></name> &amp; <name>AP_REG_NOMEM</name>)</expr>)</condition><then> <block>{
        <comment type="block">/* count size of memory required, starting at 1 for the whole-match
         * Simpleminded should be fine 'cos regcomp already checked syntax
         */</comment>
        <expr_stmt><expr><name><name>ret</name>-&gt;<name>nmatch</name></name> = 1</expr>;</expr_stmt>
        <while>while <condition>(<expr>*<name>rxstr</name></expr>)</condition> <block>{
            <switch>switch <condition>(<expr>*<name>rxstr</name>++</expr>)</condition> <block>{
            <case>case <expr>'\\'</expr>:  <comment type="block">/* next char is escaped - skip it */</comment>
                <if>if <condition>(<expr>*<name>rxstr</name> != 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr>++<name>rxstr</name></expr>;</expr_stmt>
                }</block></then></if>
                <break>break;</break>
            </case><case>case <expr>'('</expr>:   <comment type="block">/* unescaped bracket implies memory */</comment>
                <expr_stmt><expr>++<name><name>ret</name>-&gt;<name>nmatch</name></name></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <break>break;</break>
            </default>}</block></switch>
        }</block></while>
        <expr_stmt><expr><name><name>ret</name>-&gt;<name>pmatch</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ret</name>-&gt;<name>nmatch</name></name>*<sizeof>sizeof<argument_list>(<argument><expr><name>ap_regmatch_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>ret</name></expr>;</return>
}</block>

<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_rxplus_exec</name><argument_list>(<argument>apr_pool_t *pool</argument>, <argument>ap_rxplus_t *rx</argument>,
                               <argument>const char *pattern</argument>, <argument>char **newpattern</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>startl</name></decl>, <decl><type ref="prev"/><name>oldl</name></decl>, <decl><type ref="prev"/><name>newl</name></decl>, <decl><type ref="prev"/><name>diffsz</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>remainder</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>subs</name></decl>;</decl_stmt>
<comment type="block">/* snrf process_regexp from mod_headers */</comment>
    <if>if <condition>(<expr><call><name>ap_regexec</name><argument_list>(<argument><expr>&amp;<name><name>rx</name>-&gt;<name>rx</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name><name>rx</name>-&gt;<name>nmatch</name></name></expr></argument>, <argument><expr><name><name>rx</name>-&gt;<name>pmatch</name></name></expr></argument>, <argument><expr><name><name>rx</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>rx</name>-&gt;<name>match</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return> <comment type="block">/* no match, nothing to do */</comment>
    }</block></then></if>
    <expr_stmt><expr><name><name>rx</name>-&gt;<name>match</name></name> = <name>pattern</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>rx</name>-&gt;<name>subs</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>newpattern</name> = <call><name>ap_pregsub</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>rx</name>-&gt;<name>subs</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>,
                                 <argument><expr><name><name>rx</name>-&gt;<name>nmatch</name></name></expr></argument>, <argument><expr><name><name>rx</name>-&gt;<name>pmatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!*<name>newpattern</name></expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return> <comment type="block">/* FIXME - should we do more to handle error? */</comment>
        }</block></then></if>
        <expr_stmt><expr><name>startl</name> = <name><name>rx</name>-&gt;<name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>oldl</name> = <name><name>rx</name>-&gt;<name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name> - <name>startl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>newl</name> = <call><name>strlen</name><argument_list>(<argument><expr>*<name>newpattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>diffsz</name> = <name>newl</name> - <name>oldl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>remainder</name> = <name>pattern</name> + <name>startl</name> + <name>oldl</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>rx</name>-&gt;<name>flags</name></name> &amp; <name>AP_REG_MULTI</name></expr>)</condition><then> <block>{
            <comment type="block">/* recurse to do any further matches */</comment>
            <expr_stmt><expr><name>ret</name> += <call><name>ap_rxplus_exec</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>, <argument><expr>&amp;<name>subs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ret</name> &gt; 1</expr>)</condition><then> <block>{
                <comment type="block">/* a further substitution happened */</comment>
                <expr_stmt><expr><name>diffsz</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>subs</name></expr></argument>)</argument_list></call> - <call><name>strlen</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>remainder</name> = <name>subs</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>subs</name>  = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call> + 1 + <name>diffsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subs</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>startl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subs</name>+<name>startl</name></expr></argument>, <argument><expr>*<name>newpattern</name></expr></argument>, <argument><expr><name>newl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>subs</name>+<name>startl</name>+<name>newl</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>newpattern</name> = <name>subs</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>ret</name></expr>;</return>
}</block>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DOXYGEN</name></cpp:ifdef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_rxplus_nmatch</name><argument_list>(<argument>ap_rxplus_t *rx</argument>)</argument_list></macro>
<block>{
    <return>return <expr>(<name><name>rx</name>-&gt;<name>match</name></name> != <name>NULL</name>) ? <name><name>rx</name>-&gt;<name>nmatch</name></name> : 0</expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* If this blows up on you, see the notes in the header/apidoc
 * rx-&gt;match is a pointer and it's your responsibility to ensure
 * it hasn't gone out-of-scope since the last ap_rxplus_exec
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_rxplus_match</name><argument_list>(<argument>ap_rxplus_t *rx</argument>, <argument>int n</argument>, <argument>int *len</argument>,
                                 <argument>const char **match</argument>)</argument_list></macro>
<block>{
    <if>if <condition>(<expr><name>n</name> &gt;= 0 &amp;&amp; <name>n</name> &lt; <call><name>ap_rxplus_nmatch</name><argument_list>(<argument><expr><name>rx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>match</name> = <name><name>rx</name>-&gt;<name>match</name></name> + <name><name>rx</name>-&gt;<name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name>.<name>rm_so</name></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>len</name> = <name><name>rx</name>-&gt;<name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name>.<name>rm_eo</name> - <name><name>rx</name>-&gt;<name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name>.<name>rm_so</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr>*<name>len</name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr>*<name>match</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char*</argument>)</argument_list></macro> <macro><name>ap_rxplus_pmatch</name><argument_list>(<argument>apr_pool_t *pool</argument>, <argument>ap_rxplus_t *rx</argument>, <argument>int n</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>match</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ap_rxplus_match</name><argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
</unit>
