<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/server/mpm/event/fdqueue.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  event/fdqueue.h
 * @brief fd queue declarations
 *
 * @addtogroup APACHE_MPM_EVENT
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FDQUEUE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDQUEUE_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_mutex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_cond.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_SOCKET_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>

<typedef>typedef <type>struct <name>fd_queue_info_t</name></type> <name>fd_queue_info_t</name>;</typedef>
<typedef>typedef <type>struct <name>event_conn_state_t</name></type> <name>event_conn_state_t</name>;</typedef>

<function_decl><type><name>apr_status_t</name></type> <name>ap_queue_info_create</name><parameter_list>(<param><decl><type><name>fd_queue_info_t</name> **</type> <name>queue_info</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type> <name>pool</name></decl></param>, <param><decl><type><name>int</name></type> <name>max_idlers</name></decl></param>,
                                  <param><decl><type><name>int</name></type> <name>max_recycled_pools</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ap_queue_info_set_idle</name><parameter_list>(<param><decl><type><name>fd_queue_info_t</name> *</type> <name>queue_info</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type> <name>pool_to_recycle</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ap_queue_info_try_get_idler</name><parameter_list>(<param><decl><type><name>fd_queue_info_t</name> *</type> <name>queue_info</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ap_queue_info_wait_for_idler</name><parameter_list>(<param><decl><type><name>fd_queue_info_t</name> *</type> <name>queue_info</name></decl></param>,
                                          <param><decl><type><name>int</name> *</type><name>had_to_block</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ap_queue_info_term</name><parameter_list>(<param><decl><type><name>fd_queue_info_t</name> *</type> <name>queue_info</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_uint32_t</name></type> <name>ap_queue_info_get_idlers</name><parameter_list>(<param><decl><type><name>fd_queue_info_t</name> *</type> <name>queue_info</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ap_free_idle_pools</name><parameter_list>(<param><decl><type><name>fd_queue_info_t</name> *</type><name>queue_info</name></decl></param>)</parameter_list>;</function_decl>

<struct>struct <name>fd_queue_elem_t</name>
<block>{
    <decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>event_conn_state_t</name> *</type><name>ecs</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>fd_queue_elem_t</name></type> <name>fd_queue_elem_t</name>;</typedef>

<typedef>typedef <type>struct <name>timer_event_t</name></type> <name>timer_event_t</name>;</typedef>

<struct>struct <name>timer_event_t</name> <block>{
    <macro><name>APR_RING_ENTRY</name><argument_list>(<argument>timer_event_t</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>when</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_mpm_callback_fn_t</name> *</type><name>cbfunc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>fd_queue_t</name>
<block>{
    <macro><name>APR_RING_HEAD</name><argument_list>(<argument>timers_t</argument>, <argument>timer_event_t</argument>)</argument_list></macro> <expr_stmt><expr><name>timers</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>fd_queue_elem_t</name> *</type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nelts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bounds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>one_big_mutex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_thread_cond_t</name> *</type><name>not_empty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>terminated</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>fd_queue_t</name></type> <name>fd_queue_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ap_pop_pool</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> **</type> <name>recycled_pool</name></decl></param>, <param><decl><type><name>fd_queue_info_t</name> *</type> <name>queue_info</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ap_push_pool</name><parameter_list>(<param><decl><type><name>fd_queue_info_t</name> *</type> <name>queue_info</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type> <name>pool_to_recycle</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>apr_status_t</name></type> <name>ap_queue_init</name><parameter_list>(<param><decl><type><name>fd_queue_t</name> *</type> <name>queue</name></decl></param>, <param><decl><type><name>int</name></type> <name>queue_capacity</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ap_queue_push</name><parameter_list>(<param><decl><type><name>fd_queue_t</name> *</type> <name>queue</name></decl></param>, <param><decl><type><name>apr_socket_t</name> *</type> <name>sd</name></decl></param>,
                           <param><decl><type><name>event_conn_state_t</name> *</type> <name>ecs</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ap_queue_push_timer</name><parameter_list>(<param><decl><type><name>fd_queue_t</name> *</type><name>queue</name></decl></param>, <param><decl><type><name>timer_event_t</name> *</type><name>te</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ap_queue_pop_something</name><parameter_list>(<param><decl><type><name>fd_queue_t</name> *</type> <name>queue</name></decl></param>, <param><decl><type><name>apr_socket_t</name> **</type> <name>sd</name></decl></param>,
                                    <param><decl><type><name>event_conn_state_t</name> **</type> <name>ecs</name></decl></param>, <param><decl><type><name>apr_pool_t</name> **</type> <name>p</name></decl></param>,
                                    <param><decl><type><name>timer_event_t</name> **</type> <name>te</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ap_queue_interrupt_all</name><parameter_list>(<param><decl><type><name>fd_queue_t</name> *</type> <name>queue</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ap_queue_interrupt_one</name><parameter_list>(<param><decl><type><name>fd_queue_t</name> *</type> <name>queue</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ap_queue_term</name><parameter_list>(<param><decl><type><name>fd_queue_t</name> *</type> <name>queue</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FDQUEUE_H */</comment>
<comment type="block">/** @} */</comment>
</unit>
