<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/server/mpm/mpmt_os2/mpmt_os2.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/* Multi-process, multi-threaded MPM for OS/2
 *
 * Server consists of
 * - a main, parent process
 * - a small, static number of child processes
 *
 * The parent process's job is to manage the child processes. This involves
 * spawning children as required to ensure there are always ap_daemons_to_start
 * processes accepting connections.
 *
 * Each child process consists of a pool of worker threads and a
 * main thread that accepts connections &amp; passes them to the workers via
 * a work queue. The worker thread pool is dynamic, managed by a maintanence
 * thread so that the number of idle threads is kept between
 * min_spare_threads &amp; max_spare_threads.
 *
 */</comment>

<comment type="block">/*
 Todo list
 - Enforce MaxRequestWorkers somehow
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_NOPMAPI</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOSERRORS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_default.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>  <comment type="block">/* for get_remote_host */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_listen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>

<comment type="block">/* We don't need many processes,
 * they're only for redundancy in the event of a crash
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HARD_SERVER_LIMIT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<comment type="block">/* Limit on the total number of threads per process
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARD_THREAD_LIMIT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HARD_THREAD_LIMIT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>server_rec</name> *</type><name>ap_server_conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>pconf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Pool for config stuff */</comment>

<comment type="block">/* Config globals */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>one_process</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ap_daemons_to_start</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ap_thread_limit</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ap_min_spare_threads</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ap_max_spare_threads</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<comment type="block">/* Keep track of a few interesting statistics */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>ap_max_daemons_limit</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>

<comment type="block">/* volatile just in case */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <specifier>volatile</specifier></type> <name>shutdown_pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <specifier>volatile</specifier></type> <name>restart_pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <specifier>volatile</specifier></type> <name>is_graceful</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_generation_t</name> <specifier>volatile</specifier></type> <name>ap_my_generation</name><init>=<expr>0</expr></init></decl>;</decl_stmt> <comment type="block">/* Used by the scoreboard */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>is_parent_process</name><init>=<expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMTX</name></type> <name>ap_mpm_accept_mutex</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<comment type="block">/* An array of these is stored in a shared memory area for passing
 * sockets from the parent to child processes
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type>struct <name>sockaddr_in</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_os_sock_t</name></type> <name>listen_fd</name></decl>;</decl_stmt>
}</block></struct></type> <name>listen_socket_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>HMTX</name></type> <name>accept_mutex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>listen_socket_t</name></type> <name><name>listeners</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>parent_info_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>master_main</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>spawn_child</name><parameter_list>(<param><decl><type><name>int</name></type> <name>slot</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ap_mpm_child_main</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_signals</name><parameter_list>()</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>int</name></type> <name>mpmt_os2_run</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>_pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param> )</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>listener_shm_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>parent_info_t</name> *</type><name>parent_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pconf</name> = <name>_pconf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ap_server_conf</name> = <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>restart_pending</name> = 0</expr>;</expr_stmt>

    <expr_stmt><expr><call><name>DosSetMaxFH</name><argument_list>(<argument><expr><name>ap_thread_limit</name> * 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>listener_shm_name</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>"/sharemem/httpd/parent_info.%d"</expr></argument>, <argument><expr><call><name>getppid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> = <call><name>DosGetNamedSharedMem</name><argument_list>(<argument><expr>(<name>PPVOID</name>)&amp;<name>parent_info</name></expr></argument>, <argument><expr><name>listener_shm_name</name></expr></argument>, <argument><expr><name>PAG_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>is_parent_process</name> = <name>rc</name> != 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>ap_scoreboard_fname</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>"/sharemem/httpd/scoreboard.%d"</expr></argument>, <argument><expr><name>is_parent_process</name> ? <call><name>getpid</name><argument_list>()</argument_list></call> : <call><name>getppid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then> <block>{
        <comment type="block">/* Child process */</comment>
        <decl_stmt><decl><type><name>ap_listen_rec</name> *</type><name>lr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>num_listeners</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>ap_mpm_accept_mutex</name> = <name><name>parent_info</name>-&gt;<name>accept_mutex</name></name></expr>;</expr_stmt>

        <comment type="block">/* Set up a default listener if necessary */</comment>
        <if>if <condition>(<expr><name>ap_listeners</name> == <name>NULL</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ap_listen_rec</name> *</type><name>lr</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_listen_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>ap_listeners</name> = <name>lr</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name><name>lr</name>-&gt;<name>bind_addr</name></name></expr></argument>, <argument><expr>"0.0.0.0"</expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>,
                                  <argument><expr><name>DEFAULT_HTTP_PORT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_socket_create</name><argument_list>(<argument><expr>&amp;<name><name>lr</name>-&gt;<name>sd</name></name></expr></argument>, <argument><expr><name><name>lr</name>-&gt;<name>bind_addr</name>-&gt;<name>family</name></name></expr></argument>,
                              <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <for>for (<init><expr><name>lr</name> = <name>ap_listeners</name></expr>;</init> <condition><expr><name>lr</name></expr>;</condition> <incr><expr><name>lr</name> = <name><name>lr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>sa</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>apr_os_sock_put</name><argument_list>(<argument><expr>&amp;<name><name>lr</name>-&gt;<name>sd</name></name></expr></argument>, <argument><expr>&amp;<name><name>parent_info</name>-&gt;<name>listeners</name><index>[<expr><name>num_listeners</name></expr>]</index></name>.<name>listen_fd</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_socket_addr_get</name><argument_list>(<argument><expr>&amp;<name>sa</name></expr></argument>, <argument><expr><name>APR_LOCAL</name></expr></argument>, <argument><expr><name><name>lr</name>-&gt;<name>sd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>num_listeners</name>++</expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name>DosFreeMem</name><argument_list>(<argument><expr><name>parent_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Do the work */</comment>
        <expr_stmt><expr><call><name>ap_mpm_child_main</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Outta here */</comment>
        <return>return <expr><name>DONE</name></expr>;</return>
    }</block></then>
    <else>else <block>{
        <comment type="block">/* Parent process */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>is_parent_process</name> = <name>TRUE</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>ap_setup_listeners</name><argument_list>(<argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call> &lt; 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00200</expr></argument>)</argument_list></call>
                         "no listening sockets available, shutting down"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>!<name>OK</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name>ap_log_pid</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>ap_pid_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rc</name> = <call><name>master_main</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>++<name>ap_my_generation</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>running_generation</name></name> = <name>ap_my_generation</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>rc</name> != <name>OK</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_remove_pid</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>ap_pid_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00201</expr></argument>)</argument_list></call>
                         "caught %s, shutting down"</expr></argument>,
                         <argument><expr>(<name>rc</name> == <name>DONE</name>) ? "SIGTERM" : "error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>rc</name></expr>;</return>
        }</block></then></if>
    }</block></else></if>  <comment type="block">/* Parent process */</comment>

    <return>return <expr><name>OK</name></expr>;</return> <comment type="block">/* Restart */</comment>
}</block></function>



<comment type="block">/* Main processing of the parent process
 * returns TRUE if restarting
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>master_main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name>ap_server_conf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_listen_rec</name> *</type><name>lr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>parent_info_t</name> *</type><name>parent_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>listener_shm_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>listener_num</name></decl>, <decl><type ref="prev"/><name>num_listeners</name></decl>, <decl><type ref="prev"/><name>slot</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%s \n"</expr></argument>, <argument><expr><call><name>ap_get_server_description</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_signals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>ap_setup_listeners</name><argument_list>(<argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call> &lt; 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00202</expr></argument>)</argument_list></call>
                     "no listening sockets available, shutting down"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>!<name>OK</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Allocate a shared memory block for the array of listeners */</comment>
    <for>for (<init><expr><name>num_listeners</name> = 0</expr>, <expr><name>lr</name> = <name>ap_listeners</name></expr>;</init> <condition><expr><name>lr</name></expr>;</condition> <incr><expr><name>lr</name> = <name><name>lr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <expr_stmt><expr><name>num_listeners</name>++</expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>listener_shm_name</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>"/sharemem/httpd/parent_info.%d"</expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> = <call><name>DosAllocSharedMem</name><argument_list>(<argument><expr>(<name>PPVOID</name>)&amp;<name>parent_info</name></expr></argument>, <argument><expr><name>listener_shm_name</name></expr></argument>,
                           <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parent_info_t</name></expr></argument>)</argument_list></sizeof> + <name>num_listeners</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>listen_socket_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                           <argument><expr><name>PAG_READ</name>|<name>PAG_WRITE</name>|<name>PAG_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rc</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00203</expr></argument>)</argument_list></call>
                     "failure allocating shared memory, shutting down"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>!<name>OK</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Store the listener sockets in the shared memory area for our children to see */</comment>
    <for>for (<init><expr><name>listener_num</name> = 0</expr>, <expr><name>lr</name> = <name>ap_listeners</name></expr>;</init> <condition><expr><name>lr</name></expr>;</condition> <incr><expr><name>lr</name> = <name><name>lr</name>-&gt;<name>next</name></name></expr>, <expr><name>listener_num</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>apr_os_sock_get</name><argument_list>(<argument><expr>&amp;<name><name>parent_info</name>-&gt;<name>listeners</name><index>[<expr><name>listener_num</name></expr>]</index></name>.<name>listen_fd</name></expr></argument>, <argument><expr><name><name>lr</name>-&gt;<name>sd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <comment type="block">/* Create mutex to prevent multiple child processes from detecting
     * a connection with apr_poll()
     */</comment>

    <expr_stmt><expr><name>rc</name> = <call><name>DosCreateMutexSem</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>ap_mpm_accept_mutex</name></expr></argument>, <argument><expr><name>DC_SEM_SHARED</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rc</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00204</expr></argument>)</argument_list></call>
                     "failure creating accept mutex, shutting down"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>!<name>OK</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>parent_info</name>-&gt;<name>accept_mutex</name></name> = <name>ap_mpm_accept_mutex</name></expr>;</expr_stmt>

    <comment type="block">/* Allocate shared memory for scoreboard */</comment>
    <if>if <condition>(<expr><name>ap_scoreboard_image</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>void</name> *</type><name>sb_mem</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> = <call><name>DosAllocSharedMem</name><argument_list>(<argument><expr>&amp;<name>sb_mem</name></expr></argument>, <argument><expr><name>ap_scoreboard_fname</name></expr></argument>,
                               <argument><expr><call><name>ap_calc_scoreboard_size</name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><name>PAG_COMMIT</name>|<name>PAG_READ</name>|<name>PAG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>rc</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00205</expr></argument>)</argument_list></call>
                         "unable to allocate shared memory for scoreboard , exiting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>!<name>OK</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name>ap_init_scoreboard</name><argument_list>(<argument><expr><name>sb_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>restart_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00206</expr></argument>)</argument_list></call>
                "%s configured -- resuming normal operations"</expr></argument>,
                <argument><expr><call><name>ap_get_server_description</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00207</expr></argument>)</argument_list></call>
                "Server built: %s"</expr></argument>, <argument><expr><call><name>ap_get_server_built</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>one_process</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr>0</expr>]</index></name>.<name>pid</name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_mpm_child_main</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DONE</name></expr>;</return>
    }</block></then></if>

    <while>while <condition>(<expr>!<name>restart_pending</name> &amp;&amp; !<name>shutdown_pending</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>RESULTCODES</name></type> <name>proc_rc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PID</name></type> <name>child_pid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>active_children</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

        <comment type="block">/* Count number of active children */</comment>
        <for>for (<init><expr><name>slot</name>=0</expr>;</init> <condition><expr><name>slot</name> &lt; <name>HARD_SERVER_LIMIT</name></expr>;</condition> <incr><expr><name>slot</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>active_children</name> += <name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>slot</name></expr>]</index></name>.<name>pid</name> != 0 &amp;&amp;
                !<name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>slot</name></expr>]</index></name>.<name>quiescing</name></expr>;</expr_stmt>
        }</block></for>

        <comment type="block">/* Spawn children if needed */</comment>
        <for>for (<init><expr><name>slot</name>=0</expr>;</init> <condition><expr><name>slot</name> &lt; <name>HARD_SERVER_LIMIT</name> &amp;&amp; <name>active_children</name> &lt; <name>ap_daemons_to_start</name></expr>;</condition> <incr><expr><name>slot</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>slot</name></expr>]</index></name>.<name>pid</name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>spawn_child</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>active_children</name>++</expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <expr_stmt><expr><name>rc</name> = <call><name>DosWaitChild</name><argument_list>(<argument><expr><name>DCWA_PROCESSTREE</name></expr></argument>, <argument><expr><name>DCWW_NOWAIT</name></expr></argument>, <argument><expr>&amp;<name>proc_rc</name></expr></argument>, <argument><expr>&amp;<name>child_pid</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then> <block>{
            <comment type="block">/* A child has terminated, remove its scoreboard entry &amp; terminate if necessary */</comment>
            <for>for (<init><expr><name>slot</name>=0</expr>;</init> <condition><expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>slot</name></expr>]</index></name>.<name>pid</name> != <name>child_pid</name> &amp;&amp; <name>slot</name> &lt; <name>HARD_SERVER_LIMIT</name></expr>;</condition> <incr><expr><name>slot</name>++</expr></incr>)<empty_stmt>;</empty_stmt></for>

            <if>if <condition>(<expr><name>slot</name> &lt; <name>HARD_SERVER_LIMIT</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>slot</name></expr>]</index></name>.<name>pid</name> = 0</expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>slot</name></expr>]</index></name>.<name>quiescing</name> = 0</expr>;</expr_stmt>

                <if>if <condition>(<expr><name><name>proc_rc</name>.<name>codeTerminate</name></name> == <name>TC_EXIT</name></expr>)</condition><then> <block>{
                    <comment type="block">/* Child terminated normally, check its exit code and
                     * terminate server if child indicates a fatal error
                     */</comment>
                    <if>if <condition>(<expr><name><name>proc_rc</name>.<name>codeResult</name></name> == <name>APEXIT_CHILDFATAL</name></expr>)</condition><then>
                        <break>break;</break></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><name>rc</name> == <name>ERROR_CHILD_NOT_COMPLETE</name></expr>)</condition><then> <block>{
            <comment type="block">/* No child exited, lets sleep for a while.... */</comment>
            <expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name>SCOREBOARD_MAINTENANCE_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></while>

    <comment type="block">/* Signal children to shut down, either gracefully or immediately */</comment>
    <for>for (<init><expr><name>slot</name>=0</expr>;</init> <condition><expr><name>slot</name>&lt;<name>HARD_SERVER_LIMIT</name></expr>;</condition> <incr><expr><name>slot</name>++</expr></incr>) <block>{
      <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>slot</name></expr>]</index></name>.<name>pid</name></expr></argument>, <argument><expr><name>is_graceful</name> ? <name>SIGHUP</name> : <name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>DosFreeMem</name><argument_list>(<argument><expr><name>parent_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>restart_pending</name> ? <name>OK</name> : <name>DONE</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>spawn_child</name><parameter_list>(<param><decl><type><name>int</name></type> <name>slot</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PPIB</name></type> <name>ppib</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PTIB</name></type> <name>ptib</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>fail_module</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>progname</name><index>[<expr><name>CCHMAXPATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RESULTCODES</name></type> <name>proc_rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>slot</name></expr>]</index></name>.<name>generation</name> = <name>ap_my_generation</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DosGetInfoBlocks</name><argument_list>(<argument><expr>&amp;<name>ptib</name></expr></argument>, <argument><expr>&amp;<name>ppib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DosQueryModuleName</name><argument_list>(<argument><expr><name><name>ppib</name>-&gt;<name>pib_hmte</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>progname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> = <call><name>DosExecPgm</name><argument_list>(<argument><expr><name>fail_module</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fail_module</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>EXEC_ASYNCRESULT</name></expr></argument>,
                    <argument><expr><name><name>ppib</name>-&gt;<name>pib_pchcmd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>proc_rc</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rc</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00208</expr></argument>)</argument_list></call>
                     "error spawning child, slot %d"</expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>ap_max_daemons_limit</name> &lt; <name>slot</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ap_max_daemons_limit</name> = <name>slot</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>slot</name></expr>]</index></name>.<name>pid</name> = <name><name>proc_rc</name>.<name>codeTerminate</name></name></expr>;</expr_stmt>
}</block></function>



<comment type="block">/* Signal handling routines */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sig_term</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sig</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>shutdown_pending</name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>sig_restart</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sig</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>sig</name> == <name>SIGUSR1</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>is_graceful</name> = 1</expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>restart_pending</name> = 1</expr>;</expr_stmt>
}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>set_signals</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type>struct <name>sigaction</name></type> <name>sa</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr>&amp;<name><name>sa</name>.<name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sa</name>.<name>sa_flags</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sa</name>.<name>sa_handler</name></name> = <name>sig_term</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr>&amp;<name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00209</expr></argument>)</argument_list></call> "sigaction(SIGTERM)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr>&amp;<name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00210</expr></argument>)</argument_list></call> "sigaction(SIGINT)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name><name>sa</name>.<name>sa_handler</name></name> = <name>sig_restart</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr>&amp;<name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00211</expr></argument>)</argument_list></call> "sigaction(SIGHUP)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr>&amp;<name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00212</expr></argument>)</argument_list></call> "sigaction(SIGUSR1)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>



<comment type="block">/* Enquiry functions used get MPM status info */</comment>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>mpmt_os2_query</name><parameter_list>(<param><decl><type><name>int</name></type> <name>query_code</name></decl></param>, <param><decl><type><name>int</name> *</type><name>result</name></decl></param>, <param><decl><type><name>apr_status_t</name> *</type><name>rv</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>query_code</name></expr>)</condition> <block>{
        <case>case <expr><name>AP_MPMQ_MAX_DAEMON_USED</name></expr>:
            <expr_stmt><expr>*<name>result</name> = <name>ap_max_daemons_limit</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr><name>AP_MPMQ_IS_THREADED</name></expr>:
            <expr_stmt><expr>*<name>result</name> = <name>AP_MPMQ_DYNAMIC</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr><name>AP_MPMQ_IS_FORKED</name></expr>:
            <expr_stmt><expr>*<name>result</name> = <name>AP_MPMQ_NOT_SUPPORTED</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr><name>AP_MPMQ_HARD_LIMIT_DAEMONS</name></expr>:
            <expr_stmt><expr>*<name>result</name> = <name>HARD_SERVER_LIMIT</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr><name>AP_MPMQ_HARD_LIMIT_THREADS</name></expr>:
            <expr_stmt><expr>*<name>result</name> = <name>HARD_THREAD_LIMIT</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr><name>AP_MPMQ_MIN_SPARE_DAEMONS</name></expr>:
            <expr_stmt><expr>*<name>result</name> = 0</expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr><name>AP_MPMQ_MAX_SPARE_DAEMONS</name></expr>:
            <expr_stmt><expr>*<name>result</name> = 0</expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr><name>AP_MPMQ_MAX_REQUESTS_DAEMON</name></expr>:
            <expr_stmt><expr>*<name>result</name> = <name>ap_max_requests_per_child</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr><name>AP_MPMQ_GENERATION</name></expr>:
            <expr_stmt><expr>*<name>result</name> = <name>ap_my_generation</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><default>default:
            <expr_stmt><expr>*<name>rv</name> = <name>APR_ENOTIMPL</name></expr>;</expr_stmt>
            <break>break;</break>
    </default>}</block></switch>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>mpmt_os2_get_name</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <return>return <expr>"mpmt_os2"</expr>;</return>
}</block></function>




<comment type="block">/* Configuration handling stuff */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpmt_os2_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>one_process</name> = <call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"ONE_PROCESS"</expr></argument>)</argument_list></call> ||
                  <call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"DEBUG"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>is_graceful</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_listen_pre_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ap_daemons_to_start</name> = <name>DEFAULT_START_DAEMON</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ap_thread_limit</name> = <name>HARD_THREAD_LIMIT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ap_extended_status</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>ap_min_spare_threads</name> = <name>DEFAULT_MIN_SPARE_THREAD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ap_max_spare_threads</name> = <name>DEFAULT_MAX_SPARE_THREAD</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_sys_privileges_handlers</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>mpmt_os2_check_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>restart_num</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>startup</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="block">/* we want this only the first time around */</comment>
    <if>if <condition>(<expr><name>restart_num</name>++ == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>startup</name> = 1</expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>ap_daemons_to_start</name> &lt; 0</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>startup</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00213</expr></argument>)</argument_list></call>
                         "WARNING: StartServers of %d not allowed, "
                         "increasing to 1."</expr></argument>, <argument><expr><name>ap_daemons_to_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00214</expr></argument>)</argument_list></call>
                         "StartServers of %d not allowed, increasing to 1"</expr></argument>,
                         <argument><expr><name>ap_daemons_to_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>ap_daemons_to_start</name> = 1</expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>ap_min_spare_threads</name> &lt; 1</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>startup</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00215</expr></argument>)</argument_list></call>
                         "WARNING: MinSpareThreads of %d not allowed, "
                         "increasing to 1 to avoid almost certain server failure. "
                         "Please read the documentation."</expr></argument>, <argument><expr><name>ap_min_spare_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00216</expr></argument>)</argument_list></call>
                         "MinSpareThreads of %d not allowed, increasing to 1"</expr></argument>,
                         <argument><expr><name>ap_min_spare_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>ap_min_spare_threads</name> = 1</expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>mpmt_os2_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>mpmt_os2_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_config</name><argument_list>(<argument><expr><name>mpmt_os2_check_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_mpm</name><argument_list>(<argument><expr><name>mpmt_os2_run</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_mpm_query</name><argument_list>(<argument><expr><name>mpmt_os2_query</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_mpm_get_name</name><argument_list>(<argument><expr><name>mpmt_os2_get_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_daemons_to_start</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>ap_daemons_to_start</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_min_spare_threads</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>ap_min_spare_threads</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_max_spare_threads</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>ap_max_spare_threads</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ignore_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>mpmt_os2_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>LISTEN_COMMANDS</name></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>( <argument><expr>"StartServers"</expr></argument>, <argument><expr><name>set_daemons_to_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
  <argument><expr>"Number of child processes launched at server startup"</expr></argument> )</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"MinSpareThreads"</expr></argument>, <argument><expr><name>set_min_spare_threads</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
  <argument><expr>"Minimum number of idle children, to handle request spikes"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"MaxSpareThreads"</expr></argument>, <argument><expr><name>set_max_spare_threads</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
  <argument><expr>"Maximum number of idle children"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"User"</expr></argument>, <argument><expr><name>ignore_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
  <argument><expr>"Not applicable on this platform"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"Group"</expr></argument>, <argument><expr><name>ignore_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
  <argument><expr>"Not applicable on this platform"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ScoreBoardFile"</expr></argument>, <argument><expr><name>ignore_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>, \
  <argument><expr>"Not applicable on this platform"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>mpm_mpmt_os2</name></expr></argument>)</argument_list></call> = <block>{
    <expr><name>MPM20_MODULE_STUFF</name></expr>,
    <expr><name>NULL</name></expr>,            <comment type="block">/* hook to run before apache parses args */</comment>
    <expr><name>NULL</name></expr>,            <comment type="block">/* create per-directory config structure */</comment>
    <expr><name>NULL</name></expr>,            <comment type="block">/* merge per-directory config structures */</comment>
    <expr><name>NULL</name></expr>,            <comment type="block">/* create per-server config structure */</comment>
    <expr><name>NULL</name></expr>,            <comment type="block">/* merge per-server config structures */</comment>
    <expr><name>mpmt_os2_cmds</name></expr>,   <comment type="block">/* command apr_table_t */</comment>
    <expr><name>mpmt_os2_hooks</name></expr>,  <comment type="block">/* register_hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
