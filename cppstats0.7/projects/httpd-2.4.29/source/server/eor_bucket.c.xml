<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/server/eor_bucket.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>eor_bucket_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr>(<name>apr_bucket</name> *)<name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr>(<name>request_rec</name> *)<name><name>b</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>r</name> != <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * If eor_bucket_destroy is called after us, this prevents
         * eor_bucket_destroy from trying to destroy the pool again.
         */</comment>
        <expr_stmt><expr><name><name>b</name>-&gt;<name>data</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <comment type="block">/* Update child status and log the transaction */</comment>
        <expr_stmt><expr><call><name>ap_update_child_status</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_LOG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_run_log_transaction</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ap_extended_status</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_increment_counts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>eor_bucket_read</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>str</name></decl></param>,
                                    <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>, <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>str</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_bucket *</argument>)</argument_list></macro> <macro><name>ap_bucket_eor_make</name><argument_list>(<argument>apr_bucket *b</argument>, <argument>request_rec *r</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>b</name>-&gt;<name>length</name></name>      = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>start</name></name>       = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>data</name></name>        = <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>type</name></name>        = &amp;<name>ap_bucket_type_eor</name></expr>;</expr_stmt>

    <return>return <expr><name>b</name></expr>;</return>
}</block>

<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_bucket *</argument>)</argument_list></macro> <macro><name>ap_bucket_eor_create</name><argument_list>(<argument>apr_bucket_alloc_t *list</argument>,
                                              <argument>request_rec *r</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><call><name>apr_bucket_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>APR_BUCKET_INIT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>free</name></name> = <name>apr_bucket_free</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>list</name></name> = <name>list</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * Register a cleanup for the request pool as the eor bucket could
         * have been allocated from a different pool then the request pool
         * e.g. the parent pool of the request pool. In this case
         * eor_bucket_destroy might be called at a point of time when the
         * request pool had been already destroyed.
         * We need to use a pre-cleanup here because a module may create a
         * sub-pool which is still needed during the log_transaction hook.
         */</comment>
        <expr_stmt><expr><call><name>apr_pool_pre_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>void</name> *)<name>b</name></expr></argument>, <argument><expr><name>eor_bucket_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><call><name>ap_bucket_eor_make</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>eor_bucket_destroy</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr>(<name>request_rec</name> *)<name>data</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
        <comment type="block">/* eor_bucket_cleanup will be called when the pool gets destroyed */</comment>
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>const</specifier> <name>apr_bucket_type_t</name></type> <name>ap_bucket_type_eor</name> <init>= <expr><block>{
    <expr>"EOR"</expr>, <expr>5</expr>, <expr><name>APR_BUCKET_METADATA</name></expr>,
    <expr><name>eor_bucket_destroy</name></expr>,
    <expr><name>eor_bucket_read</name></expr>,
    <expr><name>apr_bucket_setaside_noop</name></expr>,
    <expr><name>apr_bucket_split_notimpl</name></expr>,
    <expr><name>apr_bucket_simple_copy</name></expr>
}</block></expr></init></decl>;</decl_stmt>

</unit>
