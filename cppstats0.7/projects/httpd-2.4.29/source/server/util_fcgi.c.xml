<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/server/util_fcgi.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_fcgi.h"</cpp:file></cpp:include>

<comment type="block">/* we know core's module_index is 0 */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APLOG_MODULE_INDEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>AP_CORE_MODULE_INDEX</cpp:value></cpp:define>

<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fcgi_header_to_array</name><argument_list>(<argument>ap_fcgi_header *h</argument>,
                                         <argument>unsigned char a[]</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_HDR_VERSION_OFFSET</name></expr>]</index></name>        = <name><name>h</name>-&gt;<name>version</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_HDR_TYPE_OFFSET</name></expr>]</index></name>           = <name><name>h</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_HDR_REQUEST_ID_B1_OFFSET</name></expr>]</index></name>  = <name><name>h</name>-&gt;<name>requestIdB1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_HDR_REQUEST_ID_B0_OFFSET</name></expr>]</index></name>  = <name><name>h</name>-&gt;<name>requestIdB0</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_HDR_CONTENT_LEN_B1_OFFSET</name></expr>]</index></name> = <name><name>h</name>-&gt;<name>contentLengthB1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_HDR_CONTENT_LEN_B0_OFFSET</name></expr>]</index></name> = <name><name>h</name>-&gt;<name>contentLengthB0</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_HDR_PADDING_LEN_OFFSET</name></expr>]</index></name>    = <name><name>h</name>-&gt;<name>paddingLength</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_HDR_RESERVED_OFFSET</name></expr>]</index></name>       = <name><name>h</name>-&gt;<name>reserved</name></name></expr>;</expr_stmt>
}</block>

<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fcgi_header_from_array</name><argument_list>(<argument>ap_fcgi_header *h</argument>,
                                           <argument>unsigned char a[]</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>h</name>-&gt;<name>version</name></name>         = <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_VERSION_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>type</name></name>            = <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_TYPE_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>requestIdB1</name></name>     = <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_REQUEST_ID_B1_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>requestIdB0</name></name>     = <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_REQUEST_ID_B0_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>contentLengthB1</name></name> = <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_CONTENT_LEN_B1_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>contentLengthB0</name></name> = <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_CONTENT_LEN_B0_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>paddingLength</name></name>   = <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_PADDING_LEN_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>reserved</name></name>        = <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_RESERVED_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
}</block>

<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fcgi_header_fields_from_array</name><argument_list>(<argument>unsigned char *version</argument>,
                                                  <argument>unsigned char *type</argument>,
                                                  <argument>apr_uint16_t *request_id</argument>,
                                                  <argument>apr_uint16_t *content_len</argument>,
                                                  <argument>unsigned char *padding_len</argument>,
                                                  <argument>unsigned char a[]</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr>*<name>version</name>         = <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_VERSION_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>type</name>            = <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_TYPE_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>request_id</name>      = (<name><name>a</name><index>[<expr><name>AP_FCGI_HDR_REQUEST_ID_B1_OFFSET</name></expr>]</index></name> &lt;&lt; 8)
                     +  <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_REQUEST_ID_B0_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>content_len</name>     = (<name><name>a</name><index>[<expr><name>AP_FCGI_HDR_CONTENT_LEN_B1_OFFSET</name></expr>]</index></name> &lt;&lt; 8)
                     +  <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_CONTENT_LEN_B0_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>padding_len</name>     = <name><name>a</name><index>[<expr><name>AP_FCGI_HDR_PADDING_LEN_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>
}</block>

<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fcgi_begin_request_body_to_array</name><argument_list>(<argument>ap_fcgi_begin_request_body *h</argument>,
                                                     <argument>unsigned char a[]</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_BRB_ROLEB1_OFFSET</name></expr>]</index></name>    = <name><name>h</name>-&gt;<name>roleB1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_BRB_ROLEB0_OFFSET</name></expr>]</index></name>    = <name><name>h</name>-&gt;<name>roleB0</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_BRB_FLAGS_OFFSET</name></expr>]</index></name>     = <name><name>h</name>-&gt;<name>flags</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_BRB_RESERVED0_OFFSET</name></expr>]</index></name> = <name><name>h</name>-&gt;<name>reserved</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_BRB_RESERVED1_OFFSET</name></expr>]</index></name> = <name><name>h</name>-&gt;<name>reserved</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_BRB_RESERVED2_OFFSET</name></expr>]</index></name> = <name><name>h</name>-&gt;<name>reserved</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_BRB_RESERVED3_OFFSET</name></expr>]</index></name> = <name><name>h</name>-&gt;<name>reserved</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>AP_FCGI_BRB_RESERVED4_OFFSET</name></expr>]</index></name> = <name><name>h</name>-&gt;<name>reserved</name><index>[<expr>4</expr>]</index></name></expr>;</expr_stmt>
}</block>

<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fcgi_fill_in_header</name><argument_list>(<argument>ap_fcgi_header *header</argument>,
                                        <argument>unsigned char type</argument>,
                                        <argument>apr_uint16_t request_id</argument>,
                                        <argument>apr_uint16_t content_len</argument>,
                                        <argument>unsigned char padding_len</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>header</name>-&gt;<name>version</name></name> = <name>AP_FCGI_VERSION_1</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>header</name>-&gt;<name>type</name></name> = <name>type</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>header</name>-&gt;<name>requestIdB1</name></name> = ((<name>request_id</name> &gt;&gt; 8) &amp; 0xff)</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name>-&gt;<name>requestIdB0</name></name> = ((<name>request_id</name>) &amp; 0xff)</expr>;</expr_stmt>

    <expr_stmt><expr><name><name>header</name>-&gt;<name>contentLengthB1</name></name> = ((<name>content_len</name> &gt;&gt; 8) &amp; 0xff)</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name>-&gt;<name>contentLengthB0</name></name> = ((<name>content_len</name>) &amp; 0xff)</expr>;</expr_stmt>

    <expr_stmt><expr><name><name>header</name>-&gt;<name>paddingLength</name></name> = <name>padding_len</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>header</name>-&gt;<name>reserved</name></name> = 0</expr>;</expr_stmt>
}</block>

<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fcgi_fill_in_request_body</name><argument_list>(<argument>ap_fcgi_begin_request_body *brb</argument>,
                                              <argument>int role</argument>,
                                              <argument>unsigned char flags</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>brb</name>-&gt;<name>roleB1</name></name> = ((<name>role</name> &gt;&gt; 8) &amp; 0xff)</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>brb</name>-&gt;<name>roleB0</name></name> = (<name>role</name> &amp; 0xff)</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>brb</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>brb</name>-&gt;<name>reserved</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>brb</name>-&gt;<name>reserved</name><index>[<expr>1</expr>]</index></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>brb</name>-&gt;<name>reserved</name><index>[<expr>2</expr>]</index></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>brb</name>-&gt;<name>reserved</name><index>[<expr>3</expr>]</index></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>brb</name>-&gt;<name>reserved</name><index>[<expr>4</expr>]</index></name> = 0</expr>;</expr_stmt>
}</block>

<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_size_t</argument>)</argument_list></macro> <macro><name>ap_fcgi_encoded_env_len</name><argument_list>(<argument>apr_table_t *env</argument>,
                                               <argument>apr_size_t maxlen</argument>,
                                               <argument>int *starting_elem</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>envarr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>envlen</name></decl>, <decl><type ref="prev"/><name>actualenvlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>maxlen</name> &gt; <name>AP_FCGI_MAX_CONTENT_LEN</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>maxlen</name> = <name>AP_FCGI_MAX_CONTENT_LEN</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>envarr</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>elts</name> = (const <name>apr_table_entry_t</name> *) <name><name>envarr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>

    <comment type="block">/* envlen - speculative, may overflow the limit
     * actualenvlen - len required without overflowing
     */</comment>
    <expr_stmt><expr><name>envlen</name> = <name>actualenvlen</name> = 0</expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = *<name>starting_elem</name></expr>;</init> <condition><expr><name>i</name> &lt; <name><name>envarr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr/>) <block>{
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>keylen</name></decl>, <decl><type ref="prev"/><name>vallen</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>(*<name>starting_elem</name>)++</expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <expr_stmt><expr><name>keylen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>keylen</name> &gt;&gt; 7 == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>envlen</name> += 1</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>envlen</name> += 4</expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name>envlen</name> += <name>keylen</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>vallen</name> = <name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name> ? <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>

        <if>if <condition>(<expr><name>vallen</name> &gt;&gt; 7 == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>envlen</name> += 1</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>envlen</name> += 4</expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name>envlen</name> += <name>vallen</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>envlen</name> &gt; <name>maxlen</name></expr>)</condition><then> <block>{
            <break>break;</break>
        }</block></then></if>

        <expr_stmt><expr><name>actualenvlen</name> = <name>envlen</name></expr>;</expr_stmt>
        <expr_stmt><expr>(*<name>starting_elem</name>)++</expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>actualenvlen</name></expr>;</return>
}</block>

<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_fcgi_encode_env</name><argument_list>(<argument>request_rec *r</argument>,
                                            <argument>apr_table_t *env</argument>,
                                            <argument>void *buffer</argument>,
                                            <argument>apr_size_t buflen</argument>,
                                            <argument>int *starting_elem</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>envarr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>itr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>envarr</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>elts</name> = (const <name>apr_table_entry_t</name> *) <name><name>envarr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>itr</name> = <name>buffer</name></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = *<name>starting_elem</name></expr>;</init> <condition><expr><name>i</name> &lt; <name><name>envarr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr/>) <block>{
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>keylen</name></decl>, <decl><type ref="prev"/><name>vallen</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>(*<name>starting_elem</name>)++</expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <expr_stmt><expr><name>keylen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>keylen</name> &gt;&gt; 7 == 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>buflen</name> &lt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rv</name> = <name>APR_ENOSPC</name></expr>;</expr_stmt> <comment type="block">/* overflow */</comment>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name><name>itr</name><index>[<expr>0</expr>]</index></name> = <name>keylen</name> &amp; 0xff</expr>;</expr_stmt>
            <expr_stmt><expr><name>itr</name> += 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>buflen</name> -= 1</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>buflen</name> &lt; 4</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rv</name> = <name>APR_ENOSPC</name></expr>;</expr_stmt> <comment type="block">/* overflow */</comment>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name><name>itr</name><index>[<expr>0</expr>]</index></name> = ((<name>keylen</name> &gt;&gt; 24) &amp; 0xff) | 0x80</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>itr</name><index>[<expr>1</expr>]</index></name> = ((<name>keylen</name> &gt;&gt; 16) &amp; 0xff)</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>itr</name><index>[<expr>2</expr>]</index></name> = ((<name>keylen</name> &gt;&gt; 8) &amp; 0xff)</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>itr</name><index>[<expr>3</expr>]</index></name> = ((<name>keylen</name>) &amp; 0xff)</expr>;</expr_stmt>
            <expr_stmt><expr><name>itr</name> += 4</expr>;</expr_stmt>
            <expr_stmt><expr><name>buflen</name> -= 4</expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name>vallen</name> = <name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name> ? <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>

        <if>if <condition>(<expr><name>vallen</name> &gt;&gt; 7 == 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>buflen</name> &lt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rv</name> = <name>APR_ENOSPC</name></expr>;</expr_stmt> <comment type="block">/* overflow */</comment>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name><name>itr</name><index>[<expr>0</expr>]</index></name> = <name>vallen</name> &amp; 0xff</expr>;</expr_stmt>
            <expr_stmt><expr><name>itr</name> += 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>buflen</name> -= 1</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>buflen</name> &lt; 4</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rv</name> = <name>APR_ENOSPC</name></expr>;</expr_stmt> <comment type="block">/* overflow */</comment>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name><name>itr</name><index>[<expr>0</expr>]</index></name> = ((<name>vallen</name> &gt;&gt; 24) &amp; 0xff) | 0x80</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>itr</name><index>[<expr>1</expr>]</index></name> = ((<name>vallen</name> &gt;&gt; 16) &amp; 0xff)</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>itr</name><index>[<expr>2</expr>]</index></name> = ((<name>vallen</name> &gt;&gt; 8) &amp; 0xff)</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>itr</name><index>[<expr>3</expr>]</index></name> = ((<name>vallen</name>) &amp; 0xff)</expr>;</expr_stmt>
            <expr_stmt><expr><name>itr</name> += 4</expr>;</expr_stmt>
            <expr_stmt><expr><name>buflen</name> -= 4</expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>buflen</name> &lt; <name>keylen</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <name>APR_ENOSPC</name></expr>;</expr_stmt> <comment type="block">/* overflow */</comment>
            <break>break;</break>
        }</block></then></if>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>itr</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>itr</name> += <name>keylen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buflen</name> -= <name>keylen</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>buflen</name> &lt; <name>vallen</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <name>APR_ENOSPC</name></expr>;</expr_stmt> <comment type="block">/* overflow */</comment>
            <break>break;</break>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>itr</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>itr</name> += <name>vallen</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>buflen</name> == <name>vallen</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>(*<name>starting_elem</name>)++</expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
            <break>break;</break> <comment type="block">/* filled up predicted space, as expected */</comment>
        }</block></then></if>

        <expr_stmt><expr><name>buflen</name> -= <name>vallen</name></expr>;</expr_stmt>

        <expr_stmt><expr>(*<name>starting_elem</name>)++</expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
    }</block></for>

    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02492</expr></argument>)</argument_list></call>
                      "ap_fcgi_encode_env: out of space "
                      "encoding environment"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>rv</name></expr>;</return>
}</block>
</unit>
