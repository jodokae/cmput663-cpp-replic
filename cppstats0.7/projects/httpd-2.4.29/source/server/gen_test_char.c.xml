<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/server/gen_test_char.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CROSS_COMPILE</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>apr_isalnum</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(isalnum(((unsigned char)(c))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>apr_isalpha</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(isalpha(((unsigned char)(c))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>apr_iscntrl</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(iscntrl(((unsigned char)(c))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>apr_isprint</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(isprint(((unsigned char)(c))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HAVE_STDIO_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HAVE_STRING_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_ENHANCED_ESCAPES</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDIO_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STRING_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* A bunch of functions in util.c scan strings looking for certain characters.
 * To make that more efficient we encode a lookup table.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ESCAPE_SHELL_CMD</name></cpp:macro>    <cpp:value>(0x01)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ESCAPE_PATH_SEGMENT</name></cpp:macro> <cpp:value>(0x02)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_OS_ESCAPE_PATH</name></cpp:macro>      <cpp:value>(0x04)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_HTTP_TOKEN_STOP</name></cpp:macro>     <cpp:value>(0x08)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ESCAPE_LOGITEM</name></cpp:macro>      <cpp:value>(0x10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ESCAPE_FORENSIC</name></cpp:macro>     <cpp:value>(0x20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ESCAPE_URLENCODED</name></cpp:macro>   <cpp:value>(0x40)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_HTTP_CTRLS</name></cpp:macro>          <cpp:value>(0x80)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_VCHAR_OBSTEXT</name></cpp:macro>      <cpp:value>(0x100)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> *</type><name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>unsigned</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>flags</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"/* this file is automatically generated by gen_test_char, "
           "do not edit */\n"
           "#define T_ESCAPE_SHELL_CMD     (%u)\n"
           "#define T_ESCAPE_PATH_SEGMENT  (%u)\n"
           "#define T_OS_ESCAPE_PATH       (%u)\n"
           "#define T_HTTP_TOKEN_STOP      (%u)\n"
           "#define T_ESCAPE_LOGITEM       (%u)\n"
           "#define T_ESCAPE_FORENSIC      (%u)\n"
           "#define T_ESCAPE_URLENCODED    (%u)\n"
           "#define T_HTTP_CTRLS           (%u)\n"
           "#define T_VCHAR_OBSTEXT        (%u)\n"
           "\n"
           "static const unsigned short test_char_table[256] = {"</expr></argument>,
           <argument><expr><name>T_ESCAPE_SHELL_CMD</name></expr></argument>,
           <argument><expr><name>T_ESCAPE_PATH_SEGMENT</name></expr></argument>,
           <argument><expr><name>T_OS_ESCAPE_PATH</name></expr></argument>,
           <argument><expr><name>T_HTTP_TOKEN_STOP</name></expr></argument>,
           <argument><expr><name>T_ESCAPE_LOGITEM</name></expr></argument>,
           <argument><expr><name>T_ESCAPE_FORENSIC</name></expr></argument>,
           <argument><expr><name>T_ESCAPE_URLENCODED</name></expr></argument>,
           <argument><expr><name>T_HTTP_CTRLS</name></expr></argument>,
           <argument><expr><name>T_VCHAR_OBSTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>c</name> = 0</expr>;</init> <condition><expr><name>c</name> &lt; 256</expr>;</condition> <incr><expr>++<name>c</name></expr></incr>) <block>{
        <expr_stmt><expr><name>flags</name> = 0</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>c</name> % 8 == 0</expr>)</condition><then>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n    "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <comment type="block">/* escape_shell_cmd */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NEED_ENHANCED_ESCAPES</name></cpp:ifdef>
        <comment type="block">/* Win32/OS2 have many of the same vulnerable characters
         * as Unix sh, plus the carriage return and percent char.
         * The proper escaping of these characters varies from unix
         * since Win32/OS2 use carets or doubled-double quotes,
         * and neither lf nor cr can be escaped.  We escape unix
         * specific as well, to assure that cross-compiled unix
         * applications behave similarly when invoked on win32/os2.
         *
         * Rem please keep in-sync with apr's list in win32/filesys.c
         */</comment>
        <if>if <condition>(<expr><name>c</name> &amp;&amp; <call><name>strchr</name><argument_list>(<argument><expr>"&amp;;`'\"|*?~&lt;&gt;^()[]{}$\\\n\r%"</expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flags</name> |= <name>T_ESCAPE_SHELL_CMD</name></expr>;</expr_stmt>
        }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <if>if <condition>(<expr><name>c</name> &amp;&amp; <call><name>strchr</name><argument_list>(<argument><expr>"&amp;;`'\"|*?~&lt;&gt;^()[]{}$\\\n"</expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flags</name> |= <name>T_ESCAPE_SHELL_CMD</name></expr>;</expr_stmt>
        }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>strchr</name><argument_list>(<argument><expr>"$-_.+!*'(),:@&amp;=~"</expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flags</name> |= <name>T_ESCAPE_PATH_SEGMENT</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>strchr</name><argument_list>(<argument><expr>"$-_.+!*'(),:;@&amp;=/~"</expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flags</name> |= <name>T_OS_ESCAPE_PATH</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>strchr</name><argument_list>(<argument><expr>".-*_ "</expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flags</name> |= <name>T_ESCAPE_URLENCODED</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* Stop for any non-'token' character, including ctrls, obs-text,
         * and "tspecials" (RFC2068) a.k.a. "separators" (RFC2616), which
         * is easer to express as characters remaining in the ASCII token set
         */</comment>
        <if>if <condition>(<expr>!<name>c</name> || !(<call><name>apr_isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> || <call><name>strchr</name><argument_list>(<argument><expr>"!#$%&amp;'*+-.^_`|~"</expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flags</name> |= <name>T_HTTP_TOKEN_STOP</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* Catch CTRLs other than VCHAR, HT and SP, and obs-text (RFC7230 3.2)
         * This includes only the C0 plane, not C1 (which is obs-text itself.)
         * XXX: We should verify that all ASCII C0 ctrls/DEL corresponding to
         * the current EBCDIC translation are captured, and ASCII C1 ctrls
         * corresponding are all permitted (as they fall under obs-text rule)
         */</comment>
        <if>if <condition>(<expr>!<name>c</name> || (<call><name>apr_iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> &amp;&amp; <name>c</name> != '\t')</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flags</name> |= <name>T_HTTP_CTRLS</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* From RFC3986, the specific sets of gen-delims, sub-delims (2.2),
         * and unreserved (2.3) that are possible somewhere within a URI.
         * Spec requires all others to be %XX encoded, including obs-text.
         */</comment>
        <if>if <condition>(<expr><name>c</name> &amp;&amp; !<call><name>apr_iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> &amp;&amp; <name>c</name> != ' '</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flags</name> |= <name>T_VCHAR_OBSTEXT</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* For logging, escape all control characters,
         * double quotes (because they delimit the request in the log file)
         * backslashes (because we use backslash for escaping)
         * and 8-bit chars with the high bit set
         */</comment>
        <if>if <condition>(<expr><name>c</name> &amp;&amp; (!<call><name>apr_isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> || <name>c</name> == '"' || <name>c</name> == '\\' || <call><name>apr_iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flags</name> |= <name>T_ESCAPE_LOGITEM</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* For forensic logging, escape all control characters, top bit set,
         * :, | (used as delimiters) and % (used for escaping).
         */</comment>
        <if>if <condition>(<expr>!<call><name>apr_isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> || <name>c</name> == ':' || <name>c</name> == '|' || <name>c</name> == '%'
            || <call><name>apr_iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> || !<name>c</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flags</name> |= <name>T_ESCAPE_FORENSIC</name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"0x%03x%c"</expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>(<name>c</name> &lt; 255) ? ',' : ' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n};\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>0</expr>;</return>
}</block></function>
</unit>
