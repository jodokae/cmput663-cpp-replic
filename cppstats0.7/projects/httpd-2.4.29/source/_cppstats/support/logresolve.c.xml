<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/support/logresolve.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_getopt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BUF_SIZE</name></cpp:macro> <cpp:value>128*1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_BUF_SIZE</name></cpp:macro> <cpp:value>128*1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_BUF_SIZE</name></cpp:macro> <cpp:value>128*1024</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_file_t</name> *</type><name>errfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>shortname</name> <init>= <expr>"logresolve"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cachehits</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cachesize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>entries</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>resolves</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>withname</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>doublefailed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>noreverse</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NL</name></cpp:macro> <cpp:value>APR_EOL_STR</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_statistics</name> <parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>output</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>"logresolve Statistics:" <name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>"Entries: %d" <name>NL</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>" With name : %d" <name>NL</name></expr></argument>, <argument><expr><name>withname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>" Resolves : %d" <name>NL</name></expr></argument>, <argument><expr><name>resolves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>noreverse</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>" - No reverse : %d" <name>NL</name></expr></argument>,
<argument><expr><name>noreverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>doublefailed</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>" - Double lookup failed : %d" <name>NL</name></expr></argument>,
<argument><expr><name>doublefailed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>"Cache hits : %d" <name>NL</name></expr></argument>, <argument><expr><name>cachehits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr>"Cache size : %d" <name>NL</name></expr></argument>, <argument><expr><name>cachesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>,
<argument>"%s -- Resolve IP-addresses to hostnames in Apache log files." NL
"Usage: %s [-s STATFILE] [-c]" NL
NL
"Options:" NL
" -s Record statistics to STATFILE when finished." NL
NL
" -c Perform double lookups when resolving IP addresses." NL</argument>,
<argument>shortname</argument>, <argument>shortname</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NL</name></cpp:undef>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type> <name>outfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type> <name>infile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_getopt_t</name> *</type> <name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type> <name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type> <name>stats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type> <name>inbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type> <name>outbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>doublelookups</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_app_initialize</name><argument_list>(<argument><expr>&amp;<name>argc</name></expr></argument>, <argument><expr>&amp;<name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>apr_terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>argc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>shortname</name> = <call><name>apr_filepath_name_get</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name>errfile</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_getopt_init</name><argument_list>(<argument><expr>&amp;<name>o</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>opt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_getopt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr>"s:c"</expr></argument>, <argument><expr>&amp;<name>opt</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_EOF</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{
<case>case <expr>'c'</expr>:
<if>if <condition>(<expr><name>doublelookups</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>doublelookups</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'s'</expr>:
<if>if <condition>(<expr><name>stats</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>stats</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
}</block></else></if></else></if>
}</block></while>
<expr_stmt><expr><call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>outfile</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_open_stdin</name><argument_list>(<argument><expr>&amp;<name>infile</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr>(<name>outbuffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>WRITE_BUF_SIZE</name></expr></argument>)</argument_list></call>) == <name>NULL</name>
|| (<name>inbuffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>READ_BUF_SIZE</name></expr></argument>)</argument_list></call>) == <name>NULL</name>
|| (<name>line</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>LINE_BUF_SIZE</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_buffer_set</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name>inbuffer</name></expr></argument>, <argument><expr><name>READ_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_buffer_set</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>outbuffer</name></expr></argument>, <argument><expr><name>WRITE_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pline</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><call><name>apr_file_gets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>LINE_BUF_SIZE</name></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>ipdouble</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dummy</name><index>[]</index></name> <init>= <expr>" " <name>APR_EOL_STR</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>line</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>entries</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_isxdigit</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>line</name><index>[<expr>0</expr>]</index></name> != ':'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>withname</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>(<name>space</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>space</name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>space</name> = <name>dummy</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>hostname</name> = (<name>char</name> *) <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hostname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr>"%s %s"</expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>space</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cachehits</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>ip</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>withname</name>++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>space</name> = ' '</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>resolves</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>cachesize</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_getnameinfo</name><argument_list>(<argument><expr>&amp;<name>hostname</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> || <name>hostname</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>space</name> = ' '</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>noreverse</name>++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>space</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>doublelookups</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>ipdouble</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>family</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>pline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> ||
<call><name>memcmp</name><argument_list>(<argument><expr><name><name>ipdouble</name>-&gt;<name>ipaddr_ptr</name></name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>ipaddr_ptr</name></name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>ipaddr_len</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>space</name> = ' '</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>doublefailed</name>++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>space</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr>"%s %s"</expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>space</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>pline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_file_flush</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stats</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>statsfile</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>statsfile</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>,
<argument><expr><name>APR_FOPEN_WRITE</name> | <name>APR_FOPEN_CREATE</name> | <name>APR_FOPEN_TRUNCATE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>, <argument><expr>"%s: Could not open %s for writing."</expr></argument>,
<argument><expr><name>shortname</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>print_statistics</name><argument_list>(<argument><expr><name>statsfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>statsfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
