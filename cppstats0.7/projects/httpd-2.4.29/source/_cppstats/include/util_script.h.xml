<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/include/util_script.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APACHE_UTIL_SCRIPT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_UTIL_SCRIPT_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APACHE_ARG_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_ARG_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_ARG_MAX</name></cpp:macro> <cpp:value>_POSIX_ARG_MAX</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_ARG_MAX</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char **</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_create_environment</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>apr_table_t</name> *<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_find_path_info</name><argument_list>(<argument><expr>const <name>char</name> *<name>uri</name></expr></argument>, <argument><expr>const <name>char</name> *<name>path_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_add_cgi_vars</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_add_common_vars</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_scan_script_header_err</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr><name>apr_file_t</name> *<name>f</name></expr></argument>, <argument><expr><name>char</name> *<name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err_ex</name><argument_list>(<argument>request_rec *r</argument>, <argument>apr_file_t *f</argument>,
<argument>char *buffer</argument>, <argument>int module_index</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_scan_script_header_err_brigade</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> *<name>bb</name></expr></argument>,
<argument><expr><name>char</name> *<name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err_brigade_ex</name><argument_list>(<argument>request_rec *r</argument>,
<argument>apr_bucket_brigade *bb</argument>,
<argument>char *buffer</argument>,
<argument>int module_index</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err_strs</name><argument_list>(<argument>request_rec *r</argument>,
<argument>char *buffer</argument>,
<argument>const char **termch</argument>,
<argument>int *termarg</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err_strs_ex</name><argument_list>(<argument>request_rec *r</argument>,
<argument>char *buffer</argument>,
<argument>int module_index</argument>,
<argument>const char **termch</argument>,
<argument>int *termarg</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_scan_script_header_err_core</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr><name>char</name> *<name>buffer</name></expr></argument>,
<argument><expr><call><call><name>int</name> <argument_list>(<argument><expr>*<name>getsfunc</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>void</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>void</name> *<name>getsfunc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_scan_script_header_err_core_ex</name><argument_list>(<argument>request_rec *r</argument>, <argument>char *buffer</argument>,
<argument>int (*getsfunc) (char *, int, void *)</argument>,
<argument>void *getsfunc_data</argument>, <argument>int module_index</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_args_to_table</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr><name>apr_table_t</name> **<name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
