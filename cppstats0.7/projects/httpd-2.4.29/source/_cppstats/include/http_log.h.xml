<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/include/http_log.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APACHE_HTTP_LOG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_HTTP_LOG_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYSLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LOG_PRIMASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_PRIMASK</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_EMERG</name></cpp:macro> <cpp:value>LOG_EMERG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_ALERT</name></cpp:macro> <cpp:value>LOG_ALERT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_CRIT</name></cpp:macro> <cpp:value>LOG_CRIT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_ERR</name></cpp:macro> <cpp:value>LOG_ERR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_WARNING</name></cpp:macro> <cpp:value>LOG_WARNING</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_NOTICE</name></cpp:macro> <cpp:value>LOG_NOTICE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_INFO</name></cpp:macro> <cpp:value>LOG_INFO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_DEBUG</name></cpp:macro> <cpp:value>LOG_DEBUG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE1</name></cpp:macro> <cpp:value>(LOG_DEBUG + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE2</name></cpp:macro> <cpp:value>(LOG_DEBUG + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE3</name></cpp:macro> <cpp:value>(LOG_DEBUG + 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE4</name></cpp:macro> <cpp:value>(LOG_DEBUG + 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE5</name></cpp:macro> <cpp:value>(LOG_DEBUG + 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE6</name></cpp:macro> <cpp:value>(LOG_DEBUG + 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE7</name></cpp:macro> <cpp:value>(LOG_DEBUG + 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE8</name></cpp:macro> <cpp:value>(LOG_DEBUG + 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_LEVELMASK</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_EMERG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_ALERT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_CRIT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_ERR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_WARNING</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_NOTICE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_INFO</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_DEBUG</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE1</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE2</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE3</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE4</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE5</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE6</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE7</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TRACE8</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_LEVELMASK</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_NOERRNO</name></cpp:macro> <cpp:value>(APLOG_LEVELMASK + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_TOCLIENT</name></cpp:macro> <cpp:value>((APLOG_LEVELMASK + 1) * 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_STARTUP</name></cpp:macro> <cpp:value>((APLOG_LEVELMASK + 1) * 4)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_LOGLEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LOGLEVEL</name></cpp:macro> <cpp:value>APLOG_WARNING</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGNO</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>"AH" #n ": "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_NO_MODULE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> * <specifier>const</specifier></type> <name>aplog_module_index</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>(*aplog_module_index)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>(aplog_module_index ? *aplog_module_index : APLOG_NO_MODULE)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MAX_LOGLEVEL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APLOG_MAX_LOGLEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_IS_LEVEL</name><parameter_list>(<param><type><name>s</name></type></param>,<param><type><name>module_index</name></type></param>,<param><type><name>level</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (((level)&amp;APLOG_LEVELMASK) &lt;= APLOG_NOTICE) || (s == NULL) || (ap_get_server_module_loglevel(s, module_index) &gt;= ((level)&amp;APLOG_LEVELMASK) ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_C_MODULE_IS_LEVEL</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>module_index</name></type></param>,<param><type><name>level</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (((level)&amp;APLOG_LEVELMASK) &lt;= APLOG_NOTICE) || (ap_get_conn_module_loglevel(c, module_index) &gt;= ((level)&amp;APLOG_LEVELMASK) ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_CS_MODULE_IS_LEVEL</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>s</name></type></param>,<param><type><name>module_index</name></type></param>,<param><type><name>level</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (((level)&amp;APLOG_LEVELMASK) &lt;= APLOG_NOTICE) || (ap_get_conn_server_module_loglevel(c, s, module_index) &gt;= ((level)&amp;APLOG_LEVELMASK) ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_R_MODULE_IS_LEVEL</name><parameter_list>(<param><type><name>r</name></type></param>,<param><type><name>module_index</name></type></param>,<param><type><name>level</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (((level)&amp;APLOG_LEVELMASK) &lt;= APLOG_NOTICE) || (ap_get_request_module_loglevel(r, module_index) &gt;= ((level)&amp;APLOG_LEVELMASK) ) )</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_IS_LEVEL</name><parameter_list>(<param><type><name>s</name></type></param>,<param><type><name>module_index</name></type></param>,<param><type><name>level</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (((level)&amp;APLOG_LEVELMASK) &lt;= APLOG_MAX_LOGLEVEL) &amp;&amp; ( (((level)&amp;APLOG_LEVELMASK) &lt;= APLOG_NOTICE) || (s == NULL) || (ap_get_server_module_loglevel(s, module_index) &gt;= ((level)&amp;APLOG_LEVELMASK) ) ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_CS_MODULE_IS_LEVEL</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>s</name></type></param>,<param><type><name>module_index</name></type></param>,<param><type><name>level</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (((level)&amp;APLOG_LEVELMASK) &lt;= APLOG_MAX_LOGLEVEL) &amp;&amp; ( (((level)&amp;APLOG_LEVELMASK) &lt;= APLOG_NOTICE) || (ap_get_conn_server_module_loglevel(c, s, module_index) &gt;= ((level)&amp;APLOG_LEVELMASK) ) ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_C_MODULE_IS_LEVEL</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>module_index</name></type></param>,<param><type><name>level</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (((level)&amp;APLOG_LEVELMASK) &lt;= APLOG_MAX_LOGLEVEL) &amp;&amp; ( (((level)&amp;APLOG_LEVELMASK) &lt;= APLOG_NOTICE) || (ap_get_conn_module_loglevel(c, module_index) &gt;= ((level)&amp;APLOG_LEVELMASK) ) ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_R_MODULE_IS_LEVEL</name><parameter_list>(<param><type><name>r</name></type></param>,<param><type><name>module_index</name></type></param>,<param><type><name>level</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (((level)&amp;APLOG_LEVELMASK) &lt;= APLOG_MAX_LOGLEVEL) &amp;&amp; ( (((level)&amp;APLOG_LEVELMASK) &lt;= APLOG_NOTICE) || (ap_get_request_module_loglevel(r, module_index) &gt;= ((level)&amp;APLOG_LEVELMASK) ) ) )</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_IS_LEVEL</name><parameter_list>(<param><type><name>s</name></type></param>,<param><type><name>level</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_MODULE_IS_LEVEL(s,APLOG_MODULE_INDEX,level)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_C_IS_LEVEL</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>level</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_C_MODULE_IS_LEVEL(c,APLOG_MODULE_INDEX,level)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_CS_IS_LEVEL</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>s</name></type></param>,<param><type><name>level</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_CS_MODULE_IS_LEVEL(c,s,APLOG_MODULE_INDEX,level)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_R_IS_LEVEL</name><parameter_list>(<param><type><name>r</name></type></param>,<param><type><name>level</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_R_MODULE_IS_LEVEL(r,APLOG_MODULE_INDEX,level)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGinfo</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_IS_LEVEL(s,APLOG_INFO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGdebug</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_IS_LEVEL(s,APLOG_DEBUG)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGtrace1</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_IS_LEVEL(s,APLOG_TRACE1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGtrace2</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_IS_LEVEL(s,APLOG_TRACE2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGtrace3</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_IS_LEVEL(s,APLOG_TRACE3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGtrace4</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_IS_LEVEL(s,APLOG_TRACE4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGtrace5</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_IS_LEVEL(s,APLOG_TRACE5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGtrace6</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_IS_LEVEL(s,APLOG_TRACE6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGtrace7</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_IS_LEVEL(s,APLOG_TRACE7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGtrace8</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_IS_LEVEL(s,APLOG_TRACE8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGrinfo</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_R_IS_LEVEL(r,APLOG_INFO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGrdebug</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_R_IS_LEVEL(r,APLOG_DEBUG)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGrtrace1</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_R_IS_LEVEL(r,APLOG_TRACE1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGrtrace2</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_R_IS_LEVEL(r,APLOG_TRACE2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGrtrace3</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_R_IS_LEVEL(r,APLOG_TRACE3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGrtrace4</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_R_IS_LEVEL(r,APLOG_TRACE4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGrtrace5</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_R_IS_LEVEL(r,APLOG_TRACE5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGrtrace6</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_R_IS_LEVEL(r,APLOG_TRACE6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGrtrace7</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_R_IS_LEVEL(r,APLOG_TRACE7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGrtrace8</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_R_IS_LEVEL(r,APLOG_TRACE8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGcinfo</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_C_IS_LEVEL(c,APLOG_INFO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGcdebug</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_C_IS_LEVEL(c,APLOG_DEBUG)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGctrace1</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_C_IS_LEVEL(c,APLOG_TRACE1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGctrace2</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_C_IS_LEVEL(c,APLOG_TRACE2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGctrace3</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_C_IS_LEVEL(c,APLOG_TRACE3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGctrace4</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_C_IS_LEVEL(c,APLOG_TRACE4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGctrace5</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_C_IS_LEVEL(c,APLOG_TRACE5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGctrace6</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_C_IS_LEVEL(c,APLOG_TRACE6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGctrace7</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_C_IS_LEVEL(c,APLOG_TRACE7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOGctrace8</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APLOG_C_IS_LEVEL(c,APLOG_TRACE8)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_default_loglevel</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MARK</name></cpp:macro> <cpp:value>__FILE__,__LINE__,APLOG_MODULE_INDEX</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_open_stderr_log</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_replace_stderr_log</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>int</name></type> <name>ap_open_logs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s_main</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ap_logs_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_error</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>,
<argument>const server_rec *s</argument>, <argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HAVE_C99</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_error</name><parameter_list>(<param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_error__(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_error__</name><parameter_list>(<param><type><name>file</name></type></param>, <param><type><name>line</name></type></param>, <param><type><name>mi</name></type></param>, <param><type><name>level</name></type></param>, <param><type><name>status</name></type></param>, <param><type><name>s</name></type></param>, <param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>do { const server_rec *sr__ = s; if (APLOG_MODULE_IS_LEVEL(sr__, mi, level)) ap_log_error_(file, line, mi, level, status, sr__, __VA_ARGS__); } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_error</name></cpp:macro> <cpp:value>ap_log_error_</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_error_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>,
<argument>const server_rec *s</argument>, <argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__attribute__</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>,<argument><expr>7</expr></argument>,<argument><expr>8</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_perror</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>, <argument>apr_pool_t *p</argument>,
<argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HAVE_C99</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>APLOG_MAX_LOGLEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_perror</name><parameter_list>(<param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_perror__(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_perror__</name><parameter_list>(<param><type><name>file</name></type></param>, <param><type><name>line</name></type></param>, <param><type><name>mi</name></type></param>, <param><type><name>level</name></type></param>, <param><type><name>status</name></type></param>, <param><type><name>p</name></type></param>, <param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ((level) &lt;= APLOG_MAX_LOGLEVEL ) ap_log_perror_(file, line, mi, level, status, p, __VA_ARGS__); } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_perror</name></cpp:macro> <cpp:value>ap_log_perror_</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_perror_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>, <argument>apr_pool_t *p</argument>,
<argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__attribute__</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>,<argument><expr>7</expr></argument>,<argument><expr>8</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_rerror</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>,
<argument>const request_rec *r</argument>, <argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HAVE_C99</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_rerror</name><parameter_list>(<param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_rerror__(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_rerror__</name><parameter_list>(<param><type><name>file</name></type></param>, <param><type><name>line</name></type></param>, <param><type><name>mi</name></type></param>, <param><type><name>level</name></type></param>, <param><type><name>status</name></type></param>, <param><type><name>r</name></type></param>, <param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (APLOG_R_MODULE_IS_LEVEL(r, mi, level)) ap_log_rerror_(file, line, mi, level, status, r, __VA_ARGS__); } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_rerror</name></cpp:macro> <cpp:value>ap_log_rerror_</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_rerror_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>,
<argument>const request_rec *r</argument>, <argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__attribute__</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>,<argument><expr>7</expr></argument>,<argument><expr>8</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_cerror</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>,
<argument>const conn_rec *c</argument>, <argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HAVE_C99</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_cerror</name><parameter_list>(<param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_cerror__(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_cerror__</name><parameter_list>(<param><type><name>file</name></type></param>, <param><type><name>line</name></type></param>, <param><type><name>mi</name></type></param>, <param><type><name>level</name></type></param>, <param><type><name>status</name></type></param>, <param><type><name>c</name></type></param>, <param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (APLOG_C_MODULE_IS_LEVEL(c, mi, level)) ap_log_cerror_(file, line, mi, level, status, c, __VA_ARGS__); } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_cerror</name></cpp:macro> <cpp:value>ap_log_cerror_</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_cerror_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>,
<argument>const conn_rec *c</argument>, <argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__attribute__</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>,<argument><expr>7</expr></argument>,<argument><expr>8</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_cserror</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>,
<argument>const conn_rec *c</argument>, <argument>const server_rec *s</argument>,
<argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HAVE_C99</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_cserror</name><parameter_list>(<param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_cserror__(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_cserror__</name><parameter_list>(<param><type><name>file</name></type></param>, <param><type><name>line</name></type></param>, <param><type><name>mi</name></type></param>, <param><type><name>level</name></type></param>, <param><type><name>status</name></type></param>, <param><type><name>c</name></type></param>, <param><type><name>s</name></type></param>, <param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (APLOG_CS_MODULE_IS_LEVEL(c, s, mi, level)) ap_log_cserror_(file, line, mi, level, status, c, s, __VA_ARGS__); } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_cserror</name></cpp:macro> <cpp:value>ap_log_cserror_</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_cserror_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>,
<argument>const conn_rec *c</argument>, <argument>const server_rec *s</argument>,
<argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__attribute__</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>,<argument><expr>8</expr></argument>,<argument><expr>9</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LOG_DATA_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LOG_DATA_SHOW_OFFSET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_data</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>const server_rec *s</argument>, <argument>const char *label</argument>,
<argument>const void *data</argument>, <argument>apr_size_t len</argument>, <argument>unsigned int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HAVE_C99</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_data</name><parameter_list>(<param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_data__(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_data__</name><parameter_list>(<param><type><name>file</name></type></param>, <param><type><name>line</name></type></param>, <param><type><name>mi</name></type></param>, <param><type><name>level</name></type></param>, <param><type><name>s</name></type></param>, <param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>do { const server_rec *sr__ = s; if (APLOG_MODULE_IS_LEVEL(sr__, mi, level)) ap_log_data_(file, line, mi, level, sr__, __VA_ARGS__); } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_data</name></cpp:macro> <cpp:value>ap_log_data_</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_data_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>const server_rec *s</argument>, <argument>const char *label</argument>,
<argument>const void *data</argument>, <argument>apr_size_t len</argument>, <argument>unsigned int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_rdata</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>const request_rec *r</argument>, <argument>const char *label</argument>,
<argument>const void *data</argument>, <argument>apr_size_t len</argument>, <argument>unsigned int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HAVE_C99</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_rdata</name><parameter_list>(<param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_rdata__(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_rdata__</name><parameter_list>(<param><type><name>file</name></type></param>, <param><type><name>line</name></type></param>, <param><type><name>mi</name></type></param>, <param><type><name>level</name></type></param>, <param><type><name>r</name></type></param>, <param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (APLOG_R_MODULE_IS_LEVEL(r, mi, level)) ap_log_rdata_(file, line, mi, level, r, __VA_ARGS__); } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_rdata</name></cpp:macro> <cpp:value>ap_log_rdata_</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_rdata_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>const request_rec *r</argument>, <argument>const char *label</argument>,
<argument>const void *data</argument>, <argument>apr_size_t len</argument>, <argument>unsigned int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_cdata</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>const conn_rec *c</argument>, <argument>const char *label</argument>,
<argument>const void *data</argument>, <argument>apr_size_t len</argument>, <argument>unsigned int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HAVE_C99</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_cdata</name><parameter_list>(<param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_cdata__(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_cdata__</name><parameter_list>(<param><type><name>file</name></type></param>, <param><type><name>line</name></type></param>, <param><type><name>mi</name></type></param>, <param><type><name>level</name></type></param>, <param><type><name>c</name></type></param>, <param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (APLOG_C_MODULE_IS_LEVEL(c, mi, level)) ap_log_cdata_(file, line, mi, level, c, __VA_ARGS__); } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_cdata</name></cpp:macro> <cpp:value>ap_log_cdata_</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_cdata_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>const conn_rec *c</argument>, <argument>const char *label</argument>,
<argument>const void *data</argument>, <argument>apr_size_t len</argument>, <argument>unsigned int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_csdata</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>const conn_rec *c</argument>, <argument>const server_rec *s</argument>,
<argument>const char *label</argument>, <argument>const void *data</argument>,
<argument>apr_size_t len</argument>, <argument>unsigned int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HAVE_C99</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_csdata</name><parameter_list>(<param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_csdata__(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_csdata__</name><parameter_list>(<param><type><name>file</name></type></param>, <param><type><name>line</name></type></param>, <param><type><name>mi</name></type></param>, <param><type><name>level</name></type></param>, <param><type><name>c</name></type></param>, <param><type><name>s</name></type></param>, <param><type>...</type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (APLOG_CS_MODULE_IS_LEVEL(c, s, mi, level)) ap_log_csdata_(file, line, mi, level, c, s, __VA_ARGS__); } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_log_cdata</name></cpp:macro> <cpp:value>ap_log_cdata_</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_csdata_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>const conn_rec *c</argument>, <argument>const server_rec *s</argument>,
<argument>const char *label</argument>, <argument>const void *data</argument>,
<argument>apr_size_t len</argument>, <argument>unsigned int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_error_log2stderr</name><argument_list>(<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_log_command_line</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_log_mpm_common</name><argument_list>(<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_log_pid</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_remove_pid</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_read_pid</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>filename</name></expr></argument>, <argument><expr><name>pid_t</name> *<name>mypid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type>struct <name>piped_log</name></type> <name>piped_log</name>;</typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>piped_log *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_open_piped_log</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>piped_log *</argument>)</argument_list></macro> <macro><name>ap_open_piped_log_ex</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>const char *program</argument>,
<argument>apr_cmdtype_e cmdtype</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_close_piped_log</name><argument_list>(<argument><expr><name>piped_log</name> *<name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_file_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_piped_log_read_fd</name><argument_list>(<argument><expr><name>piped_log</name> *<name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_file_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_piped_log_write_fd</name><argument_list>(<argument><expr><name>piped_log</name> *<name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>, <argument>generate_log_id</argument>,
<argument>(const conn_rec *c, const request_rec *r, const char **id)</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
