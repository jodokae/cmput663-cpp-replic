<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/include/ap_expr.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_EXPR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_regex.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type>struct <name>ap_expr_node</name></type> <name>ap_expr_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ap_expr_t</name> *</type><name>root_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>line_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>module_index</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_expr_info_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FLAG_SSL_EXPR_COMPAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FLAG_DONT_VARY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FLAG_RESTRICTED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FLAG_STRING_RESULT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_expr_exec</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr>const <name>ap_expr_info_t</name> *<name>expr</name></expr></argument>,
<argument><expr>const <name>char</name> **<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_expr_exec_re</name><argument_list>(<argument>request_rec *r</argument>, <argument>const ap_expr_info_t *expr</argument>,
<argument>apr_size_t nmatch</argument>, <argument>ap_regmatch_t *pmatch</argument>,
<argument>const char **source</argument>, <argument>const char **err</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_expr_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name> *</type><name>re_pmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>re_nmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>re_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vary_this</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>result_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reclvl</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_expr_eval_ctx_t</name>;</typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_expr_exec_ctx</name><argument_list>(<argument><expr><name>ap_expr_eval_ctx_t</name> *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr>const <name>ap_expr_info_t</name> *<name>expr</name></expr></argument>,
<argument><expr>const <name>char</name> **<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_expr_str_exec_re</name><argument_list>(<argument>request_rec *r</argument>,
<argument>const ap_expr_info_t *expr</argument>,
<argument>apr_size_t nmatch</argument>,
<argument>ap_regmatch_t *pmatch</argument>,
<argument>const char **source</argument>,
<argument>const char **err</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<typedef>typedef <function_decl><type><name>int</name></type> <name>ap_expr_op_unary_t</name><parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>ap_expr_op_binary_t</name><parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> *</type>(<name>ap_expr_string_func_t</name>)<parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>apr_array_header_t</name> *</type>(<name>ap_expr_list_func_t</name>)<parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> *</type>(<name>ap_expr_var_func_t</name>)<parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FUNC_VAR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FUNC_STRING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FUNC_LIST</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FUNC_OP_UNARY</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FUNC_OP_BINARY</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> **</type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> **</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_expr_lookup_parms</name>;</typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>ap_expr_lookup_fn_t</name>)<parameter_list>(<param><decl><type><name>ap_expr_lookup_parms</name> *</type><name>parms</name></decl></param>)</parameter_list>;</function_decl></typedef>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_expr_lookup_default</name><argument_list>(<argument><expr><name>ap_expr_lookup_parms</name> *<name>parms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>, <argument>expr_lookup</argument>, <argument>(ap_expr_lookup_parms *parms)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_expr_parse</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>, <argument><expr><name>apr_pool_t</name> *<name>ptemp</name></expr></argument>,
<argument><expr><name>ap_expr_info_t</name> *<name>info</name></expr></argument>, <argument><expr>const <name>char</name> *<name>expr</name></expr></argument>,
<argument><expr><name>ap_expr_lookup_fn_t</name> *<name>lookup_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_expr_info_t *</argument>)</argument_list></macro> <macro><name>ap_expr_parse_cmd_mi</name><argument_list>(<argument>const cmd_parms *cmd</argument>,
<argument>const char *expr</argument>,
<argument>unsigned int flags</argument>,
<argument>const char **err</argument>,
<argument>ap_expr_lookup_fn_t *lookup_fn</argument>,
<argument>int module_index</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_expr_parse_cmd</name><parameter_list>(<param><type><name>cmd</name></type></param>, <param><type><name>expr</name></type></param>, <param><type><name>flags</name></type></param>, <param><type><name>err</name></type></param>, <param><type><name>lookup_fn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_expr_parse_cmd_mi(cmd, expr, flags, err, lookup_fn, APLOG_MODULE_INDEX)</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>ap_expr_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
