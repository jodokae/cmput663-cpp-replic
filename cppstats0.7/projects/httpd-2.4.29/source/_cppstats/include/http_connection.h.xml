<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/include/http_connection.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APACHE_HTTP_CONNECTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_HTTP_CONNECTION_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_process_connection</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>, <argument><expr><name>void</name> *<name>csd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_shutdown_conn</name><argument_list>(<argument>conn_rec *c</argument>, <argument>int flush</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_flush_conn</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_lingering_close</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_prep_lingering_close</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_start_lingering_close</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>conn_rec *</argument>, <argument>create_connection</argument>,
<argument>(apr_pool_t *p, server_rec *server, apr_socket_t *csd,
long conn_id, void *sbh, apr_bucket_alloc_t *alloc)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>pre_connection</argument>,<argument>(conn_rec *c, void *csd)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>process_connection</argument>,<argument>(conn_rec *c)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>pre_close_connection</argument>,<argument>(conn_rec *c)</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <specifier>const</specifier> <name>apr_bucket_type_t</name></type> <name>ap_bucket_type_eoc</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_BUCKET_IS_EOC</name><parameter_list>(<param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(e-&gt;type == &amp;ap_bucket_type_eoc)</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_bucket *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_bucket_eoc_make</name><argument_list>(<argument><expr><name>apr_bucket</name> *<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_bucket *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_bucket_eoc_create</name><argument_list>(<argument><expr><name>apr_bucket_alloc_t</name> *<name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
