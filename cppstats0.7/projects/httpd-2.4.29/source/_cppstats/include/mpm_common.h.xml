<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/include/mpm_common.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APACHE_MPM_COMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_MPM_COMMON_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_NETINET_TCP_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_proc_mutex.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_LISTENBACKLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LISTENBACKLOG</name></cpp:macro> <cpp:value>511</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SIG_GRACEFUL</name></cpp:macro> <cpp:value>SIGUSR1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SIG_GRACEFUL_SHORT</name></cpp:macro> <cpp:value>USR1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SIG_GRACEFUL_STRING</name></cpp:macro> <cpp:value>"SIGUSR1"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SIG_GRACEFUL_STOP</name></cpp:macro> <cpp:value>SIGWINCH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SIG_GRACEFUL_STOP_SHORT</name></cpp:macro> <cpp:value>WINCH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SIG_GRACEFUL_STOP_STRING</name></cpp:macro> <cpp:value>"SIGWINCH"</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> <name>ap_reclaim_callback_fn_t</name><parameter_list>(<param><decl><type><name>int</name></type> <name>childnum</name></decl></param>, <param><decl><type><name>pid_t</name></type> <name>pid</name></decl></param>,
<param><decl><type><name>ap_generation_t</name></type> <name>gen</name></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call>) || <call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_reclaim_child_processes</name><argument_list>(<argument>int terminate</argument>,
<argument>ap_reclaim_callback_fn_t *mpm_callback</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_relieve_child_processes</name><argument_list>(<argument><expr><name>ap_reclaim_callback_fn_t</name> *<name>mpm_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_register_extra_mpm_process</name><argument_list>(<argument>pid_t pid</argument>, <argument>ap_generation_t gen</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_unregister_extra_mpm_process</name><argument_list>(<argument>pid_t pid</argument>, <argument>ap_generation_t *old_gen</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_mpm_safe_kill</name><argument_list>(<argument>pid_t pid</argument>, <argument>int sig</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_process_child_status</name><argument_list>(<argument>apr_proc_t *pid</argument>, <argument>apr_exit_why_e why</argument>, <argument>int status</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_fatal_signal_setup</name><argument_list>(<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>, <argument><expr><name>apr_pool_t</name> *<name>in_pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_fatal_signal_child_setup</name><argument_list>(<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>apr_status_t</name></type> <name>ap_mpm_end_gen_helper</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list>;</function_decl>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_wait_or_timeout</name><argument_list>(<argument><expr><name>apr_exit_why_e</name> *<name>status</name></expr></argument>, <argument><expr><name>int</name> *<name>exitcode</name></expr></argument>,
<argument><expr><name>apr_proc_t</name> *<name>ret</name></expr></argument>, <argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>,
<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_NODELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>ap_sock_disable_nagle</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_sock_disable_nagle</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPWNAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>uid_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_uname2id</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETGRNAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>gid_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_gname2id</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INITGROUPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>initgroups</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>gid_t</name></type> <name>basegid</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call>) || <call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type>struct <name>ap_pod_t</name></type> <name>ap_pod_t</name>;</typedef>
<struct>struct <name>ap_pod_t</name> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>pod_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>pod_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
}</block>;</struct>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_mpm_pod_open</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>ap_pod_t</name> **<name>pod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_mpm_pod_check</name><argument_list>(<argument><expr><name>ap_pod_t</name> *<name>pod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_mpm_pod_close</name><argument_list>(<argument><expr><name>ap_pod_t</name> *<name>pod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_mpm_pod_signal</name><argument_list>(<argument><expr><name>ap_pod_t</name> *<name>pod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_mpm_pod_killpg</name><argument_list>(<argument>ap_pod_t *pod</argument>, <argument>int num</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPM_PODX_RESTART_CHAR</name></cpp:macro> <cpp:value>'$'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MPM_PODX_GRACEFUL_CHAR</name></cpp:macro> <cpp:value>'!'</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <block>{ <decl><name>AP_MPM_PODX_NORESTART</name></decl>, <decl><name>AP_MPM_PODX_RESTART</name></decl>, <decl><name>AP_MPM_PODX_GRACEFUL</name></decl> }</block></enum></type> <name>ap_podx_restart_t</name>;</typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_mpm_podx_open</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>ap_pod_t</name> **<name>pod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_mpm_podx_check</name><argument_list>(<argument><expr><name>ap_pod_t</name> *<name>pod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_mpm_podx_close</name><argument_list>(<argument><expr><name>ap_pod_t</name> *<name>pod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_mpm_podx_signal</name><argument_list>(<argument>ap_pod_t *pod</argument>,
<argument>ap_podx_restart_t graceful</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_mpm_podx_killpg</name><argument_list>(<argument>ap_pod_t *pod</argument>, <argument>int num</argument>,
<argument>ap_podx_restart_t graceful</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_check_mpm</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_max_requests_per_child</name></decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ap_mpm_set_max_requests</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ap_pid_fname</name></decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ap_mpm_set_pidfile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ap_mpm_dump_pidfile</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>out</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>char</name></type> <name><name>ap_coredump_dir</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_coredumpdir_configured</name></decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ap_mpm_set_coredumpdir</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_graceful_shutdown_timeout</name></decl>;</decl_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro><expr_stmt><expr><call><name>ap_mpm_set_graceful_shutdown</name><argument_list>(<argument><expr><name>cmd_parms</name> *<name>cmd</name></expr></argument>, <argument><expr><name>void</name> *<name>dummy</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_GRACEFUL_SHUTDOWN_TIMEOUT_COMMAND</name></cpp:macro> <cpp:value>AP_INIT_TAKE1("GracefulShutdownTimeout", ap_mpm_set_graceful_shutdown, NULL, RSRC_CONF, "Maximum time in seconds to wait for child " "processes to complete transactions during shutdown")</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>ap_signal_server</name><parameter_list>(<param><decl><type><name>int</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ap_mpm_rewrite_args</name><parameter_list>(<param><decl><type><name>process_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>apr_uint32_t</name></type> <name>ap_max_mem_free</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ap_mpm_set_max_mem_free</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>apr_size_t</name></type> <name>ap_thread_stacksize</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ap_mpm_set_thread_stacksize</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ap_core_child_status</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>pid_t</name></type> <name>pid</name></decl></param>, <param><decl><type><name>ap_generation_t</name></type> <name>gen</name></decl></param>,
<param><decl><type><name>int</name></type> <name>slot</name></decl></param>, <param><decl><type><name>mpm_child_status</name></type> <name>status</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AP_ENABLE_EXCEPTION_HOOK</name></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ap_mpm_set_exception_hook</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>monitor</argument>,<argument>(apr_pool_t *p, server_rec *s)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_sys_privileges_handlers</name><argument_list>(<argument>int inc</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>, <argument>drop_privileges</argument>, <argument>(apr_pool_t * pchild, server_rec * s)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>, <argument>mpm_query</argument>, <argument>(int query_code, int *result, apr_status_t *rv)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>apr_status_t</argument>, <argument>mpm_register_timed_callback</argument>,
<argument>(apr_time_t t, ap_mpm_callback_fn_t *cbfn, void *baton)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>const char *</argument>,<argument>mpm_get_name</argument>,<argument>(void)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>void</argument>, <argument>suspend_connection</argument>,
<argument>(conn_rec *c, request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>void</argument>, <argument>resume_connection</argument>,
<argument>(conn_rec *c, request_rec *r)</argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_ACCEPT_MUTEX_TYPE</name></cpp:macro> <cpp:value>"mpm-accept"</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>mpm_common_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
