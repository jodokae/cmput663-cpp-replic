<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/include/http_request.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APACHE_HTTP_REQUEST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_HTTP_REQUEST_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SUBREQ_NO_ARGS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SUBREQ_MERGE_ARGS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_process_request_internal</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>request_rec *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_sub_req_lookup_uri</name><argument_list>(<argument><expr>const <name>char</name> *<name>new_uri</name></expr></argument>,
<argument><expr>const <name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>ap_filter_t</name> *<name>next_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>request_rec *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_sub_req_lookup_file</name><argument_list>(<argument><expr>const <name>char</name> *<name>new_file</name></expr></argument>,
<argument><expr>const <name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>ap_filter_t</name> *<name>next_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>request_rec *</argument>)</argument_list></macro> <macro><name>ap_sub_req_lookup_dirent</name><argument_list>(<argument>const apr_finfo_t *finfo</argument>,
<argument>const request_rec *r</argument>,
<argument>int subtype</argument>,
<argument>ap_filter_t *next_filter</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>request_rec *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_sub_req_method_uri</name><argument_list>(<argument><expr>const <name>char</name> *<name>method</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>new_uri</name></expr></argument>,
<argument><expr>const <name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>ap_filter_t</name> *<name>next_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_CORE_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_sub_req_output_filter</name><argument_list>(<argument><expr><name>ap_filter_t</name> *<name>f</name></expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> *<name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_run_sub_req</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_internal_redirect</name><argument_list>(<argument><expr>const <name>char</name> *<name>new_uri</name></expr></argument>, <argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_internal_redirect_handler</name><argument_list>(<argument><expr>const <name>char</name> *<name>new_uri</name></expr></argument>, <argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_internal_fast_redirect</name><argument_list>(<argument><expr><name>request_rec</name> *<name>sub_req</name></expr></argument>, <argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_some_auth_required</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_AUTH_INTERNAL_PER_URI</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_AUTH_INTERNAL_PER_CONF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_AUTH_INTERNAL_MASK</name></cpp:macro> <cpp:value>0x000F</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_clear_auth_internal</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_setup_auth_internal</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_register_auth_provider</name><argument_list>(<argument>apr_pool_t *pool</argument>,
<argument>const char *provider_group</argument>,
<argument>const char *provider_name</argument>,
<argument>const char *provider_version</argument>,
<argument>const void *provider</argument>,
<argument>int type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_array_header_t</name> *</expr></argument>, <argument><expr><name>authn_ap_list_provider_names</name></expr></argument>,
<argument><expr>(<name>apr_pool_t</name> *<name>ptemp</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_array_header_t</name> *</expr></argument>, <argument><expr><name>authz_ap_list_provider_names</name></expr></argument>,
<argument><expr>(<name>apr_pool_t</name> *<name>ptemp</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_is_initial_req</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_update_mtime</name><argument_list>(<argument>request_rec *r</argument>, <argument>apr_time_t dependency_mtime</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_allow_methods</name><argument_list>(<argument>request_rec *r</argument>, <argument>int reset</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_allow_standard_methods</name><argument_list>(<argument>request_rec *r</argument>, <argument>int reset</argument>, <argument>...</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE_ALLOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_ALLOW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_process_request</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_process_request_after_handler</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>ap_process_async_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_die</name><argument_list>(<argument>int type</argument>, <argument>request_rec *r</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_check_pipeline</name><argument_list>(<argument>conn_rec *c</argument>, <argument>apr_bucket_brigade *bb</argument>,
<argument>unsigned int max_blank_lines</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>create_request</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>translate_name</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>map_to_storage</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>check_user_id</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>fixups</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>type_checker</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>access_checker</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>access_checker_ex</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>auth_checker</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_hook_check_access</name><argument_list>(<argument>ap_HOOK_access_checker_t *pf</argument>,
<argument>const char * const *aszPre</argument>,
<argument>const char * const *aszSucc</argument>,
<argument>int nOrder</argument>, <argument>int type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_hook_check_access_ex</name><argument_list>(<argument>ap_HOOK_access_checker_ex_t *pf</argument>,
<argument>const char * const *aszPre</argument>,
<argument>const char * const *aszSucc</argument>,
<argument>int nOrder</argument>, <argument>int type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_hook_check_authn</name><argument_list>(<argument>ap_HOOK_check_user_id_t *pf</argument>,
<argument>const char * const *aszPre</argument>,
<argument>const char * const *aszSucc</argument>,
<argument>int nOrder</argument>, <argument>int type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_hook_check_authz</name><argument_list>(<argument>ap_HOOK_auth_checker_t *pf</argument>,
<argument>const char * const *aszPre</argument>,
<argument>const char * const *aszSucc</argument>,
<argument>int nOrder</argument>, <argument>int type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>void</argument>,<argument>insert_filter</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>post_perdir_config</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>force_authn</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>apr_status_t</argument>,<argument>dirwalk_stat</argument>,<argument>(apr_finfo_t *finfo, request_rec *r, apr_int32_t wanted)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_location_walk</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_directory_walk</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_file_walk</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_if_walk</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <specifier>const</specifier> <name>apr_bucket_type_t</name></type> <name>ap_bucket_type_eor</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_BUCKET_IS_EOR</name><parameter_list>(<param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(e-&gt;type == &amp;ap_bucket_type_eor)</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_bucket *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_bucket_eor_make</name><argument_list>(<argument><expr><name>apr_bucket</name> *<name>b</name></expr></argument>, <argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_bucket *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_bucket_eor_create</name><argument_list>(<argument><expr><name>apr_bucket_alloc_t</name> *<name>list</name></expr></argument>,
<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_some_authn_required</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
