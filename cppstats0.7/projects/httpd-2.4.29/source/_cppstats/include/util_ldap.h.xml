<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/include/util_ldap.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>UTIL_LDAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTIL_LDAP_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_rwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_version.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_MAJOR_VERSION</name> &lt; 2</expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_ldap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_ldap_rebind.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HAS_LDAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_rmm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_shm.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_LDAP</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_UNAVAILABLE</name></expr></argument>)</argument_list></call> || <name>APR_HAS_MICROSOFT_LDAPSDK</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LDAP_IS_SERVER_DOWN</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((s) == LDAP_SERVER_DOWN ||(s) == LDAP_UNAVAILABLE)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LDAP_IS_SERVER_DOWN</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((s) == LDAP_SERVER_DOWN)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_DECLARE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_DECLARE_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_DECLARE_DATA</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_DECLARE_DATA</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MICROSOFT_LDAPSDK</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timeval</name></cpp:macro> <cpp:value>l_timeval</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><enum>enum <block>{
<decl><name>never</name><init>=<expr><name>LDAP_DEREF_NEVER</name></expr></init></decl>,
<decl><name>searching</name><init>=<expr><name>LDAP_DEREF_SEARCHING</name></expr></init></decl>,
<decl><name>finding</name><init>=<expr><name>LDAP_DEREF_FINDING</name></expr></init></decl>,
<decl><name>always</name><init>=<expr><name>LDAP_DEREF_ALWAYS</name></expr></init></decl>
}</block></enum></type> <name>deref_options</name>;</typedef>
<typedef>typedef <type><struct>struct <name>util_ldap_connection_t</name> <block>{
<decl_stmt><decl><type><name>LDAP</name> *</type><name>ldap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>deref_options</name></type> <name>deref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>binddn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bindpw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>secure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>client_certs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>util_ldap_connection_t</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>util_ldap_state_t</name> *</type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ChaseReferrals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ReferralHopLimit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>freed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>rebind_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>must_rebind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>last_backend_conn</name></decl>;</decl_stmt>
}</block></struct></type> <name>util_ldap_connection_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>util_ldap_config_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ChaseReferrals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ReferralHopLimit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>client_certs</name></decl>;</decl_stmt>
}</block></struct></type> <name>util_ldap_config_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>util_ldap_state_t</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>mutex</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>apr_global_mutex_t</name> *</type><name>util_ldap_cache_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>cache_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cache_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>search_cache_ttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>search_cache_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>compare_cache_ttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>compare_cache_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>util_ldap_connection_t</name> *</type><name>connections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>global_certs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ssl_supported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>secure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>secure_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verify_svr_cert</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_shm_t</name> *</type><name>cache_shm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_rmm_t</name> *</type><name>cache_rmm</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>void</name> *</type><name>util_ldap_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>connectionTimeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>timeval</name> *</type><name>opTimeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>debug_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>connection_pool_ttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>retry_delay</name></decl>;</decl_stmt>
}</block></struct></type> <name>util_ldap_state_t</name>;</typedef>
<struct>struct <name>mod_auth_ldap_groupattr_entry_t</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>,<argument><expr><name>uldap_connection_open</name></expr></argument>,<argument><expr>(<name>request_rec</name> *<name>r</name>,
<name>util_ldap_connection_t</name> *<name>ldc</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>,<argument><expr><name>uldap_connection_close</name></expr></argument>,<argument><expr>(<name>util_ldap_connection_t</name> *<name>ldc</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>,<argument><expr><name>uldap_connection_unbind</name></expr></argument>,<argument><expr>(<name>void</name> *<name>param</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>util_ldap_connection_t</name> *</expr></argument>,<argument><expr><name>uldap_connection_find</name></expr></argument>,<argument><expr>(<name>request_rec</name> *<name>r</name>, const <name>char</name> *<name>host</name>, <name>int</name> <name>port</name>,
const <name>char</name> *<name>binddn</name>, const <name>char</name> *<name>bindpw</name>, <name>deref_options</name> <name>deref</name>,
<name>int</name> <name>secure</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>,<argument><expr><name>uldap_cache_comparedn</name></expr></argument>,<argument><expr>(<name>request_rec</name> *<name>r</name>, <name>util_ldap_connection_t</name> *<name>ldc</name>,
const <name>char</name> *<name>url</name>, const <name>char</name> *<name>dn</name>, const <name>char</name> *<name>reqdn</name>,
<name>int</name> <name>compare_dn_on_server</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>,<argument><expr><name>uldap_cache_compare</name></expr></argument>,<argument><expr>(<name>request_rec</name> *<name>r</name>, <name>util_ldap_connection_t</name> *<name>ldc</name>,
const <name>char</name> *<name>url</name>, const <name>char</name> *<name>dn</name>, const <name>char</name> *<name>attrib</name>, const <name>char</name> *<name>value</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>,<argument><expr><name>uldap_cache_check_subgroups</name></expr></argument>,<argument><expr>(<name>request_rec</name> *<name>r</name>, <name>util_ldap_connection_t</name> *<name>ldc</name>,
const <name>char</name> *<name>url</name>, const <name>char</name> *<name>dn</name>, const <name>char</name> *<name>attrib</name>, const <name>char</name> *<name>value</name>,
<name>char</name> **<name>subgroupAttrs</name>, <name>apr_array_header_t</name> *<name>subgroupclasses</name>,
<name>int</name> <name>cur_subgroup_depth</name>, <name>int</name> <name>max_subgroup_depth</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>,<argument><expr><name>uldap_cache_checkuserid</name></expr></argument>,<argument><expr>(<name>request_rec</name> *<name>r</name>, <name>util_ldap_connection_t</name> *<name>ldc</name>,
const <name>char</name> *<name>url</name>, const <name>char</name> *<name>basedn</name>, <name>int</name> <name>scope</name>, <name>char</name> **<name>attrs</name>,
const <name>char</name> *<name>filter</name>, const <name>char</name> *<name>bindpw</name>, const <name>char</name> **<name>binddn</name>, const <name>char</name> ***<name>retvals</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>,<argument><expr><name>uldap_cache_getuserdn</name></expr></argument>,<argument><expr>(<name>request_rec</name> *<name>r</name>, <name>util_ldap_connection_t</name> *<name>ldc</name>,
const <name>char</name> *<name>url</name>, const <name>char</name> *<name>basedn</name>, <name>int</name> <name>scope</name>, <name>char</name> **<name>attrs</name>,
const <name>char</name> *<name>filter</name>, const <name>char</name> **<name>binddn</name>, const <name>char</name> ***<name>retvals</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>,<argument><expr><name>uldap_ssl_supported</name></expr></argument>,<argument><expr>(<name>request_rec</name> *<name>r</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>apr_status_t</name></type> <name>util_ldap_cache_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>util_ldap_state_t</name> *</type><name>st</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> *</type><name>util_ald_cache_display</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ldap_state_t</name> *</type><name>st</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
