<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/include/http_core.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APACHE_HTTP_CORE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_HTTP_CORE_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STRUCT_RLIMIT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_INDEXES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_INCLUDES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_SYM_LINKS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_EXECCGI</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_UNSET</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_INC_WITH_EXEC</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_SYM_OWNER</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_MULTI</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_ALL</name></cpp:macro> <cpp:value>(OPT_INDEXES|OPT_INCLUDES|OPT_INC_WITH_EXEC|OPT_SYM_LINKS|OPT_EXECCGI)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMOTE_HOST</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMOTE_NAME</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMOTE_NOLOOKUP</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMOTE_DOUBLE_REV</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATISFY_ALL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATISFY_ANY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATISFY_NOSPEC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MIN_BYTES_TO_WRITE</name></cpp:macro> <cpp:value>8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DEFAULT_MAX_INTERNAL_REDIRECTS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DEFAULT_MAX_SUBREQ_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_allow_options</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_allow_overrides</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_document_root</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_get_useragent_host</name><argument_list>(<argument>request_rec *req</argument>, <argument>int type</argument>,
<argument>int *str_is_ip</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_get_remote_host</name><argument_list>(<argument>conn_rec *conn</argument>, <argument>void *dir_config</argument>, <argument>int type</argument>, <argument>int *str_is_ip</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_remote_logname</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_construct_url</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>uri</name></expr></argument>, <argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_server_name_for_url</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_port_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_server_port</name><argument_list>(<argument><expr>const <name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_off_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_limit_req_body</name><argument_list>(<argument><expr>const <name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_size_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_limit_xml_body</name><argument_list>(<argument><expr>const <name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_custom_response</name><argument_list>(<argument>request_rec *r</argument>, <argument>int status</argument>, <argument>const char *string</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_is_recursion_limit_exceeded</name><argument_list>(<argument><expr>const <name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_exists_config_define</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_core_translate</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type>struct <name>require_line</name></type> <name>require_line</name>;</typedef>
<struct>struct <name>require_line</name> <block>{
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>method_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>requirement</name></decl>;</decl_stmt>
}</block>;</struct>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_auth_type</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_auth_name</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_satisfies</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>module</name></type> <name>core_module</name></decl>;</decl_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr>const <name>ap_conf_vector_t</name> *<name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_core_module_config</name><argument_list>(<argument><expr><name>ap_conf_vector_t</name> *<name>cv</name></expr></argument>, <argument><expr><name>void</name> *<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_socket_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CORE_MODULE_INDEX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_get_core_module_config</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((void **)(v))[AP_CORE_MODULE_INDEX])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_set_core_module_config</name><parameter_list>(<param><type><name>v</name></type></param>, <param><type><name>val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((((void **)(v))[AP_CORE_MODULE_INDEX]) = (val))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CORE_MODULE_INDEX</name></cpp:macro> <cpp:value>(AP_DEBUG_ASSERT(core_module.module_index == 0), 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type>struct <name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>notes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>response_code_strings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>document_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>context_document_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>context_prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deliver_script</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>suppress_charset</name></decl>;</decl_stmt>
}</block></struct></type> <name>core_request_config</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_NOTE_DIRECTORY_WALK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_NOTE_LOCATION_WALK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_NOTE_FILE_WALK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_NOTE_IF_WALK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_NUM_STD_NOTES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_size_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_register_request_note</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void **</argument>)</argument_list></macro> <macro><name>ap_get_request_note</name><argument_list>(<argument>request_rec *r</argument>, <argument>apr_size_t note_num</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>allow_options_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>overrides_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>etag_components_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETAG_UNSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETAG_NONE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETAG_MTIME</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETAG_INODE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETAG_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETAG_ALL</name></cpp:macro> <cpp:value>(ETAG_MTIME | ETAG_INODE | ETAG_SIZE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETAG_BACKWARD</name></cpp:macro> <cpp:value>(ETAG_MTIME | ETAG_SIZE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CORE_CONFIG_OFF</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CORE_CONFIG_ON</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CORE_CONFIG_UNSET</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CORE_MERGE_FLAG</name><parameter_list>(<param><type><name>field</name></type></param>, <param><type><name>to</name></type></param>, <param><type><name>base</name></type></param>, <param><type><name>over</name></type></param>)</parameter_list></cpp:macro> <cpp:value>to-&gt;field = over-&gt;field != AP_CORE_CONFIG_UNSET ? over-&gt;field : base-&gt;field</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <block>{
<decl><name>srv_sig_unset</name></decl>,
<decl><name>srv_sig_off</name></decl>,
<decl><name>srv_sig_on</name></decl>,
<decl><name>srv_sig_withmail</name></decl>
}</block></enum></type> <name>server_signature_e</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>d_components</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>allow_options_t</name></type> <name>opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>allow_options_t</name></type> <name>opts_add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>allow_options_t</name></type> <name>opts_remove</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>overrides_t</name></type> <name>override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>allow_options_t</name></type> <name>override_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>response_code_strings</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOSTNAME_LOOKUP_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOSTNAME_LOOKUP_ON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOSTNAME_LOOKUP_DOUBLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOSTNAME_LOOKUP_UNSET</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>hostname_lookups</name> : 4</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>content_md5</name> : 2</expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CANONICAL_NAME_OFF</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CANONICAL_NAME_ON</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CANONICAL_NAME_DNS</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CANONICAL_NAME_UNSET</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>
<expr_stmt><expr><name>unsigned</name> <name>use_canonical_name</name> : 2</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>d_is_fnmatch</name> : 1</expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_DEFAULT_CHARSET_OFF</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_DEFAULT_CHARSET_ON</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_DEFAULT_CHARSET_UNSET</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<expr_stmt><expr><name>unsigned</name> <name>add_default_charset</name> : 2</expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>add_default_charset_name</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_CPU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type>struct <name>rlimit</name> *</type><name>limit_cpu</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type>struct <name>rlimit</name> *</type><name>limit_mem</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_NPROC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type>struct <name>rlimit</name> *</type><name>limit_nproc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>limit_req_body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>limit_xml_body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_signature_e</name></type> <name>server_signature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>sec_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>sec_if</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>output_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>accept_path_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>etag_components_t</name></type> <name>etag_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>etag_components_t</name></type> <name>etag_add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>etag_components_t</name></type> <name>etag_remove</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_MMAP_OFF</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_MMAP_ON</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_MMAP_UNSET</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>enable_mmap</name> : 2</expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_SENDFILE_OFF</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_SENDFILE_ON</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_SENDFILE_UNSET</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>enable_sendfile</name> : 2</expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CANONICAL_PHYS_PORT_OFF</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CANONICAL_PHYS_PORT_ON</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CANONICAL_PHYS_PORT_UNSET</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>use_canonical_phys_port</name> : 2</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>allow_encoded_slashes</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>decode_encoded_slashes</name> : 1</expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CONDITION_IF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CONDITION_ELSE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CONDITION_ELSEIF</name></cpp:macro> <cpp:value>(AP_CONDITION_ELSE|AP_CONDITION_IF)</cpp:value></cpp:define>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>condition_ifelse</name> : 2</expr>;</expr_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>condition</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_logconf</name> *</type><name>log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>override_list</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MAXRANGES_UNSET</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MAXRANGES_DEFAULT</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MAXRANGES_UNLIMITED</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MAXRANGES_NORANGES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>max_ranges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_overlaps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_reversals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>refs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>response_code_exprs</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CGI_PASS_AUTH_OFF</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CGI_PASS_AUTH_ON</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CGI_PASS_AUTH_UNSET</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>cgi_pass_auth</name> : 2</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>qualify_redirect_url</name> :2</expr>;</expr_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>expr_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>cgi_var_rules</name></decl>;</decl_stmt>
}</block></struct></type> <name>core_dir_config</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SENDFILE_ENABLED</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) == ENABLE_SENDFILE_ON ? APR_SENDFILE_ENABLED : 0)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>gprof_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ap_document_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>access_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>sec_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>sec_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>redirect_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subreq_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>accf_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>error_log_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>error_log_conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>error_log_req</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_TRACE_UNSET</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_TRACE_DISABLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_TRACE_ENABLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_TRACE_EXTENDED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>trace_enable</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MERGE_TRAILERS_UNSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MERGE_TRAILERS_ENABLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MERGE_TRAILERS_DISABLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>merge_trailers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>protocols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>protocols_honor_order</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_HTTP09_UNSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_HTTP09_ENABLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_HTTP09_DISABLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name>http09_enable</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_HTTP_CONFORMANCE_UNSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_HTTP_CONFORMANCE_UNSAFE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_HTTP_CONFORMANCE_STRICT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name>http_conformance</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_HTTP_METHODS_UNSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_HTTP_METHODS_LENIENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_HTTP_METHODS_REGISTERED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name>http_methods</name></decl>;</decl_stmt>
}</block></struct></type> <name>core_server_config</name>;</typedef>
<function_decl><type><name>void</name></type> <name>ap_add_output_filters_by_type</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ap_core_reorder_directories</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>server_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_add_per_dir_conf</name><argument_list>(<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>, <argument><expr><name>void</name> *<name>dir_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_add_per_url_conf</name><argument_list>(<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>, <argument><expr><name>void</name> *<name>url_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_add_file_conf</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>core_dir_config</name> *<name>conf</name></expr></argument>, <argument><expr><name>void</name> *<name>url_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_add_if_conf</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>core_dir_config</name> *<name>conf</name></expr></argument>, <argument><expr><name>void</name> *<name>url_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_CORE_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_limit_section</name><argument_list>(<argument><expr><name>cmd_parms</name> *<name>cmd</name></expr></argument>, <argument><expr><name>void</name> *<name>dummy</name></expr></argument>, <argument><expr>const <name>char</name> *<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>apr_status_t</name></type> <name>ap_core_input_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>b</name></decl></param>,
<param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>, <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ap_core_output_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_server_protocol</name><argument_list>(<argument><expr><name>server_rec</name>* <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_server_protocol</name><argument_list>(<argument><expr><name>server_rec</name>* <name>s</name></expr></argument>, <argument><expr>const <name>char</name>* <name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type>struct <name>core_output_filter_ctx</name></type> <name>core_output_filter_ctx_t</name>;</typedef>
<typedef>typedef <type>struct <name>core_filter_ctx</name></type> <name>core_ctx_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>core_net_rec</name> <block>{
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>client_socket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_output_filter_ctx_t</name> *</type><name>out_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_ctx_t</name> *</type><name>in_ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>core_net_rec</name>;</typedef>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>apr_status_t</argument>, <argument>insert_network_bucket</argument>,
<argument>(conn_rec *c, apr_bucket_brigade *bb, apr_socket_t *socket)</argument>)</argument_list></macro>
<typedef>typedef <type><enum>enum <block>{
<decl><name>ap_mgmt_type_string</name></decl>,
<decl><name>ap_mgmt_type_long</name></decl>,
<decl><name>ap_mgmt_type_hash</name></decl>
}</block></enum></type> <name>ap_mgmt_type_e</name>;</typedef>
<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>h_value</name></decl>;</decl_stmt>
}</block></union></type> <name>ap_mgmt_value</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_mgmt_type_e</name></type> <name>vtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_mgmt_value</name></type> <name>v</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_mgmt_item_t</name>;</typedef>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>ap_filter_rec_t</name> *</type><name>ap_subreq_core_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>ap_filter_rec_t</name> *</type><name>ap_core_output_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>ap_filter_rec_t</name> *</type><name>ap_content_length_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>ap_filter_rec_t</name> *</type><name>ap_core_input_filter_handle</name></decl>;</decl_stmt>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>, <argument>get_mgmt_items</argument>,
<argument>(apr_pool_t *p, const char * val, apr_hash_t *ht)</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>ap_logio_add_bytes_out</name></expr></argument>,
<argument><expr>(<name>conn_rec</name> *<name>c</name>, <name>apr_off_t</name> <name>bytes</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>ap_logio_add_bytes_in</name></expr></argument>,
<argument><expr>(<name>conn_rec</name> *<name>c</name>, <name>apr_off_t</name> <name>bytes</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_off_t</name></expr></argument>, <argument><expr><name>ap_logio_get_last_bytes</name></expr></argument>, <argument><expr>(<name>conn_rec</name> *<name>c</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <name>ap_errorlog_info</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>rmain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>module_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>using_syslog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_errorlog_info</name>;</typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>ap_errorlog_handler_fn_t</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list>;</function_decl></typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_register_errorlog_handler</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>char *tag</argument>,
<argument>ap_errorlog_handler_fn_t *handler</argument>,
<argument>int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<typedef>typedef <type><struct>struct <name>ap_errorlog_handler</name> <block>{
<decl_stmt><decl><type><name>ap_errorlog_handler_fn_t</name> *</type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_errorlog_handler</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_ERRORLOG_FLAG_FIELD_SEP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_ERRORLOG_FLAG_MESSAGE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_ERRORLOG_FLAG_REQUIRED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_ERRORLOG_FLAG_NULL_AS_HYPHEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ap_errorlog_handler_fn_t</name> *</type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>min_loglevel</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_errorlog_format_item</name>;</typedef>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>void</argument>, <argument>error_log</argument>, <argument>(const ap_errorlog_info *info,
const char *errstr)</argument>)</argument_list></macro>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_register_log_hooks</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_register_config_hooks</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>ap_ident_lookup</name></expr></argument>,
<argument><expr>(<name>request_rec</name> *<name>r</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>authz_some_auth_required</name></expr></argument>, <argument><expr>(<name>request_rec</name> *<name>r</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>authn_ap_auth_type</name></expr></argument>, <argument><expr>(<name>request_rec</name> *<name>r</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>authn_ap_auth_name</name></expr></argument>, <argument><expr>(<name>request_rec</name> *<name>r</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>access_compat_ap_satisfies</name></expr></argument>, <argument><expr>(<name>request_rec</name> *<name>r</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_state_query</name><argument_list>(<argument>int query_code</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_MAIN_STATE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_RUN_MODE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_CONFIG_GEN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_NOT_SUPPORTED</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_MS_INITIAL_STARTUP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_MS_CREATE_PRE_CONFIG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_MS_DESTROY_CONFIG</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_MS_CREATE_CONFIG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_MS_RUN_MPM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_MS_EXITING</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_RM_UNKNOWN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_RM_NORMAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_RM_CONFIG_TEST</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SQ_RM_CONFIG_DUMP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
