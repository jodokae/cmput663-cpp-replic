<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/include/ap_listen.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_LISTEN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LISTEN_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type>struct <name>ap_slave_t</name></type> <name>ap_slave_t</name>;</typedef>
<typedef>typedef <type>struct <name>ap_listen_rec</name></type> <name>ap_listen_rec</name>;</typedef>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> (*<name>accept_function</name>)<parameter_list>(<param><decl><type><name>void</name> **</type><name>csd</name></decl></param>, <param><decl><type><name>ap_listen_rec</name> *</type><name>lr</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptrans</name></decl></param>)</parameter_list>;</function_decl></typedef>
<struct>struct <name>ap_listen_rec</name> <block>{
<decl_stmt><decl><type><name>ap_listen_rec</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>bind_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>accept_function</name></type> <name>accept_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slave_t</name> *</type><name>slave</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>ap_listen_rec</name> *</type><name>ap_listeners</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_num_listen_buckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_have_so_reuseport</name></decl>;</decl_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_listen_pre_config</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_setup_listeners</name><argument_list>(<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_duplicate_listeners</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>server_rec</name> *<name>s</name></expr></argument>,
<argument><expr><name>ap_listen_rec</name> ***<name>buckets</name></expr></argument>,
<argument><expr><name>int</name> *<name>num_buckets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_close_listeners</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_close_listeners_ex</name><argument_list>(<argument><expr><name>ap_listen_rec</name> *<name>listeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_close_selected_listeners</name><argument_list>(<argument><expr><name>ap_slave_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_listenbacklog</name><argument_list>(<argument><expr><name>cmd_parms</name> *<name>cmd</name></expr></argument>, <argument><expr><name>void</name> *<name>dummy</name></expr></argument>, <argument><expr>const <name>char</name> *<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_listencbratio</name><argument_list>(<argument><expr><name>cmd_parms</name> *<name>cmd</name></expr></argument>, <argument><expr><name>void</name> *<name>dummy</name></expr></argument>, <argument><expr>const <name>char</name> *<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_set_listener</name><argument_list>(<argument>cmd_parms *cmd</argument>, <argument>void *dummy</argument>,
<argument>int argc</argument>, <argument>char *const argv[]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_send_buffer_size</name><argument_list>(<argument><expr><name>cmd_parms</name> *<name>cmd</name></expr></argument>, <argument><expr><name>void</name> *<name>dummy</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_receive_buffer_size</name><argument_list>(<argument><expr><name>cmd_parms</name> *<name>cmd</name></expr></argument>,
<argument><expr><name>void</name> *<name>dummy</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LISTEN_COMMANDS</name></cpp:macro> <cpp:value>AP_INIT_TAKE1("ListenBacklog", ap_set_listenbacklog, NULL, RSRC_CONF, "Maximum length of the queue of pending connections, as used by listen(2)"), AP_INIT_TAKE1("ListenCoresBucketsRatio", ap_set_listencbratio, NULL, RSRC_CONF, "Ratio between the number of CPU cores (online) and the number of listeners buckets"), AP_INIT_TAKE_ARGV("Listen", ap_set_listener, NULL, RSRC_CONF, "A port number or a numeric IP address and a port number, and an optional protocol"), AP_INIT_TAKE1("SendBufferSize", ap_set_send_buffer_size, NULL, RSRC_CONF, "Send buffer size in bytes"), AP_INIT_TAKE1("ReceiveBufferSize", ap_set_receive_buffer_size, NULL, RSRC_CONF, "Receive buffer size in bytes")</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
