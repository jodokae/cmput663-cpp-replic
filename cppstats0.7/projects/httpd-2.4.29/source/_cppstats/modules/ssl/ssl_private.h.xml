<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/ssl/ssl_private.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SSL_PRIVATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PRIVATE_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_vhost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ebcdic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_MEMFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_fnmatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_global_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_socache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_TIME_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>!FALSE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOL</name></cpp:macro> <cpp:value>unsigned int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/opensslv.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>OPENSSL_VERSION_NUMBER</name> &gt;= 0x10001000)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSSL_NO_SSL_INTERN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/pem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/crypto.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/evp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509v3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509_vfy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ocsp.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENSSL_ENGINE_H</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENGINE_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/engine.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>OPENSSL_VERSION_NUMBER</name> &lt; 0x0090801f)</expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> mod_ssl requires OpenSSL 0.9.8a or later</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>OPENSSL_VERSION_NUMBER</name> &gt;= 0x10000000)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODSSL_SSL_CIPHER_CONST</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODSSL_SSL_METHOD_CONST</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODSSL_SSL_CIPHER_CONST</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODSSL_SSL_METHOD_CONST</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBRESSL_VERSION_NUMBER</name> &lt; 0x2060000f</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTRL_SET_MIN_PROTO_VERSION</name></cpp:macro> <cpp:value>123</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTRL_SET_MAX_PROTO_VERSION</name></cpp:macro> <cpp:value>124</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_set_min_proto_version</name><parameter_list>(<param><type><name>ctx</name></type></param>, <param><type><name>version</name></type></param>)</parameter_list></cpp:macro> <cpp:value>SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MIN_PROTO_VERSION, version, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_set_max_proto_version</name><parameter_list>(<param><type><name>ctx</name></type></param>, <param><type><name>version</name></type></param>)</parameter_list></cpp:macro> <cpp:value>SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_PROTO_VERSION, version, NULL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></cpp:macro> <cpp:value>(OPENSSL_VERSION_NUMBER &lt; 0x10100000L)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_FIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FIPS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_TLSv1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TLSV1_X</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_CONF_FLAG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SSL_CONF_CMD</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCONST</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCONST</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_TLSEXT</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>SSL_set_tlsext_host_name</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TLSEXT</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_EC</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>TLSEXT_ECPOINTFORMAT_uncompressed</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ECC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_OCSP</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTX_set_tlsext_status_cb</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_OCSP_STAPLING</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &lt; 0x10100000L</expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>sk_OPENSSL_STRING_num</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sk_OPENSSL_STRING_num</name></cpp:macro> <cpp:value>sk_num</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>sk_OPENSSL_STRING_value</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sk_OPENSSL_STRING_value</name></cpp:macro> <cpp:value>sk_value</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>sk_OPENSSL_STRING_pop</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sk_OPENSSL_STRING_pop</name></cpp:macro> <cpp:value>sk_pop</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTX_set_tlsext_ticket_key_cb</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TLS_SESSION_TICKETS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSEXT_TICKET_KEY_LEN</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>tlsext_tick_md</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tlsext_tick_md</name></cpp:macro> <cpp:value>EVP_sha1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tlsext_tick_md</name></cpp:macro> <cpp:value>EVP_sha256</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SRP</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SRP</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/srp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLSEXT_TYPE_application_layer_protocol_negotiation</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TLS_ALPN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_get_rfc2409_prime_768</name></cpp:macro> <cpp:value>get_rfc2409_prime_768</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_get_rfc2409_prime_1024</name></cpp:macro> <cpp:value>get_rfc2409_prime_1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_get_rfc3526_prime_1536</name></cpp:macro> <cpp:value>get_rfc3526_prime_1536</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_get_rfc3526_prime_2048</name></cpp:macro> <cpp:value>get_rfc3526_prime_2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_get_rfc3526_prime_3072</name></cpp:macro> <cpp:value>get_rfc3526_prime_3072</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_get_rfc3526_prime_4096</name></cpp:macro> <cpp:value>get_rfc3526_prime_4096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_get_rfc3526_prime_6144</name></cpp:macro> <cpp:value>get_rfc3526_prime_6144</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_get_rfc3526_prime_8192</name></cpp:macro> <cpp:value>get_rfc3526_prime_8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIO_set_init</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(x-&gt;init=v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIO_get_data</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(x-&gt;ptr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIO_set_data</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(x-&gt;ptr=v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIO_get_shutdown</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(x-&gt;shutdown)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIO_set_shutdown</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(x-&gt;shutdown=v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DH_bits</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(BN_num_bits(x-&gt;p))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>init_bio_methods</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>free_bio_methods</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &lt; 0x10002000L || <call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_CTX_get0_store</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(x-&gt;ctx)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &lt; 0x10000000L</expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>X509_STORE_CTX_get0_current_issuer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_CTX_get0_current_issuer</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(x-&gt;current_issuer)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_util_ssl.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PFALSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PFALSE</name></cpp:macro> <cpp:value>((void *)FALSE)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PTRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTRUE</name></cpp:macro> <cpp:value>((void *)TRUE)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>UNSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNSET</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUL</name></cpp:macro> <cpp:value>'\0'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RAND_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND_MAX</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>UCHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCHAR</name></cpp:macro> <cpp:value>unsigned char</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strEQ</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strcmp(s1,s2) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strNE</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strcmp(s1,s2) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strEQn</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strncmp(s1,s2,n) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strNEn</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strncmp(s1,s2,n) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcEQ</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strcasecmp(s1,s2) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcNE</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strcasecmp(s1,s2) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcEQn</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strncasecmp(s1,s2,n) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcNEn</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strncasecmp(s1,s2,n) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strIsEmpty</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(s == NULL || s[0] == NUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>myConnConfig</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(SSLConnRec *)ap_get_module_config(c-&gt;conn_config, &amp;ssl_module)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>myCtxConfig</name><parameter_list>(<param><type><name>sslconn</name></type></param>, <param><type><name>sc</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(sslconn-&gt;is_proxy ? sc-&gt;proxy : sc-&gt;server)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>myConnConfigSet</name><parameter_list>(<param><type><name>c</name></type></param>, <param><type><name>val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_set_module_config(c-&gt;conn_config, &amp;ssl_module, val)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mySrvConfig</name><parameter_list>(<param><type><name>srv</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(SSLSrvConfigRec *)ap_get_module_config(srv-&gt;module_config, &amp;ssl_module)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>myDirConfig</name><parameter_list>(<param><type><name>req</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(SSLDirConfigRec *)ap_get_module_config(req-&gt;per_dir_config, &amp;ssl_module)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>myModConfig</name><parameter_list>(<param><type><name>srv</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(mySrvConfig((srv)))-&gt;mc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mySrvFromConn</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(myConnConfig(c))-&gt;server</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mySrvConfigFromConn</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>mySrvConfig(mySrvFromConn(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>myModConfigFromConn</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>myModConfig(mySrvFromConn(c))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SSL_SESSION_CACHE_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_SESSION_CACHE_TIMEOUT</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_RENEG_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_RENEG_BUFFER_SIZE</name></cpp:macro> <cpp:value>(128 * 1024)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_OCSP_MAX_SKEW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_OCSP_MAX_SKEW</name></cpp:macro> <cpp:value>(60 * 5)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_OCSP_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_OCSP_TIMEOUT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CERTKEYS_IDX_MAX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CERTKEYS_IDX_MAX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_OPT_NONE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_OPT_RELSET</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_OPT_STDENVVARS</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_OPT_EXPORTCERTDATA</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_OPT_FAKEBASICAUTH</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_OPT_STRICTREQUIRE</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_OPT_OPTRENEGOTIATE</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_OPT_LEGACYDNFORMAT</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>
<typedef>typedef <type><name>int</name></type> <name>ssl_opt_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOL_NONE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOL_SSLV3</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOL_TLSV1</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOL_BASIC</name></cpp:macro> <cpp:value>(SSL_PROTOCOL_SSLV3|SSL_PROTOCOL_TLSV1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOL_BASIC</name></cpp:macro> <cpp:value>(SSL_PROTOCOL_TLSV1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSV1_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOL_TLSV1_1</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOL_TLSV1_2</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOL_ALL</name></cpp:macro> <cpp:value>(SSL_PROTOCOL_BASIC| SSL_PROTOCOL_TLSV1_1|SSL_PROTOCOL_TLSV1_2)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOL_ALL</name></cpp:macro> <cpp:value>(SSL_PROTOCOL_BASIC)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOL_DEFAULT</name></cpp:macro> <cpp:value>(SSL_PROTOCOL_ALL &amp; ~SSL_PROTOCOL_SSLV3)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOL_DEFAULT</name></cpp:macro> <cpp:value>(SSL_PROTOCOL_ALL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>int</name></type> <name>ssl_proto_t</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>SSL_CVERIFY_UNSET</name> <init>= <expr><name>UNSET</name></expr></init></decl>,
<decl><name>SSL_CVERIFY_NONE</name> <init>= <expr>0</expr></init></decl>,
<decl><name>SSL_CVERIFY_OPTIONAL</name> <init>= <expr>1</expr></init></decl>,
<decl><name>SSL_CVERIFY_REQUIRE</name> <init>= <expr>2</expr></init></decl>,
<decl><name>SSL_CVERIFY_OPTIONAL_NO_CA</name> <init>= <expr>3</expr></init></decl>
}</block></enum></type> <name>ssl_verify_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_VERIFY_PEER_STRICT</name></cpp:macro> <cpp:value>(SSL_VERIFY_PEER|SSL_VERIFY_FAIL_IF_NO_PEER_CERT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ssl_verify_error_is_optional</name><parameter_list>(<param><type><name>errnum</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((errnum == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT) || (errnum == X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN) || (errnum == X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY) || (errnum == X509_V_ERR_CERT_UNTRUSTED) || (errnum == X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE))</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <block>{
<decl><name>SSL_CRLCHECK_NONE</name> <init>= <expr>(0)</expr></init></decl>,
<decl><name>SSL_CRLCHECK_LEAF</name> <init>= <expr>(1 &lt;&lt; 0)</expr></init></decl>,
<decl><name>SSL_CRLCHECK_CHAIN</name> <init>= <expr>(1 &lt;&lt; 1)</expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CRLCHECK_FLAGS</name></cpp:macro> <cpp:value>(~0x3)</cpp:value></cpp:define>
<decl><name>SSL_CRLCHECK_NO_CRL_FOR_CERT_OK</name> <init>= <expr>(1 &lt;&lt; 2)</expr></init></decl>
}</block></enum></type> <name>ssl_crlcheck_t</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>SSL_PPTYPE_UNSET</name> <init>= <expr><name>UNSET</name></expr></init></decl>,
<decl><name>SSL_PPTYPE_BUILTIN</name> <init>= <expr>0</expr></init></decl>,
<decl><name>SSL_PPTYPE_FILTER</name> <init>= <expr>1</expr></init></decl>,
<decl><name>SSL_PPTYPE_PIPE</name> <init>= <expr>2</expr></init></decl>
}</block></enum></type> <name>ssl_pphrase_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PCM_EXISTS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PCM_ISREG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PCM_ISDIR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PCM_ISNONZERO</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ssl_pathcheck_t</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>SSL_ENABLED_UNSET</name> <init>= <expr><name>UNSET</name></expr></init></decl>,
<decl><name>SSL_ENABLED_FALSE</name> <init>= <expr>0</expr></init></decl>,
<decl><name>SSL_ENABLED_TRUE</name> <init>= <expr>1</expr></init></decl>,
<decl><name>SSL_ENABLED_OPTIONAL</name> <init>= <expr>3</expr></init></decl>
}</block></enum></type> <name>ssl_enabled_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cpExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>mpExpr</name></decl>;</decl_stmt>
}</block></struct></type> <name>ssl_require_t</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>SSL_RSCTX_STARTUP</name> <init>= <expr>1</expr></init></decl>,
<decl><name>SSL_RSCTX_CONNECT</name> <init>= <expr>2</expr></init></decl>
}</block></enum></type> <name>ssl_rsctx_t</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>SSL_RSSRC_BUILTIN</name> <init>= <expr>1</expr></init></decl>,
<decl><name>SSL_RSSRC_FILE</name> <init>= <expr>2</expr></init></decl>,
<decl><name>SSL_RSSRC_EXEC</name> <init>= <expr>3</expr></init></decl>,
<decl><name>SSL_RSSRC_EGD</name> <init>= <expr>4</expr></init></decl>
}</block></enum></type> <name>ssl_rssrc_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ssl_rsctx_t</name></type> <name>nCtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_rssrc_t</name></type> <name>nSrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cpPath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nBytes</name></decl>;</decl_stmt>
}</block></struct></type> <name>ssl_randseed_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>nData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cpData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>source_mtime</name></decl>;</decl_stmt>
}</block></struct></type> <name>ssl_asn1_t</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>SSL_SHUTDOWN_TYPE_UNSET</name></decl>,
<decl><name>SSL_SHUTDOWN_TYPE_STANDARD</name></decl>,
<decl><name>SSL_SHUTDOWN_TYPE_UNCLEAN</name></decl>,
<decl><name>SSL_SHUTDOWN_TYPE_ACCURATE</name></decl>
}</block></enum></type> <name>ssl_shutdown_type_e</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>SSL</name> *</type><name>ssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>client_dn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509</name> *</type><name>client_cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_shutdown_type_e</name></type> <name>shutdown_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>verify_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>verify_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verify_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_proxy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>disabled</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>NON_SSL_OK</name> <init>= <expr>0</expr></init></decl>,
<decl><name>NON_SSL_SEND_REQLINE</name></decl>,
<decl><name>NON_SSL_SEND_HDR_SEP</name></decl>,
<decl><name>NON_SSL_SET_ERROR_MSG</name></decl>
}</block> <decl><name>non_ssl_request</name></decl>;</enum>
<enum>enum <block>{
<decl><name>RENEG_INIT</name> <init>= <expr>0</expr></init></decl>,
<decl><name>RENEG_REJECT</name></decl>,
<decl><name>RENEG_ALLOW</name></decl>,
<decl><name>RENEG_ABORT</name></decl>
}</block> <decl><name>reneg_state</name></decl>;</enum>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cipher_suite</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSLConnRec</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pPool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>bFixed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sesscache_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_socache_provider_t</name> *</type><name>sesscache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_socache_instance_t</name> *</type><name>sesscache_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_global_mutex_t</name> *</type><name>pMutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>aRandSeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>tVHostKeys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>tPrivateKey</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENSSL_ENGINE_H</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENGINE_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>szCryptoDevice</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_socache_provider_t</name> *</type><name>stapling_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_socache_instance_t</name> *</type><name>stapling_cache_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_global_mutex_t</name> *</type><name>stapling_cache_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_global_mutex_t</name> *</type><name>stapling_refresh_mutex</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>SSLModConfigRec</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>cert_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>key_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ca_name_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ca_name_file</name></decl>;</decl_stmt>
}</block></struct></type> <name>modssl_pk_server_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cert_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cert_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ca_cert_file</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_INFO</name></expr></argument>)</argument_list></call> *<name>certs</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> **<name>ca_certs</name></expr>;</expr_stmt>
}</block></struct></type> <name>modssl_pk_proxy_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ca_cert_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ca_cert_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cipher_suite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verify_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_verify_t</name></type> <name>verify_mode</name></decl>;</decl_stmt>
}</block></struct></type> <name>modssl_auth_ctx_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key_name</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hmac_secret</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>aes_key</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>modssl_ticket_key_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>ssl_ctx_param_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type>struct <name>SSLSrvConfigRec</name></type> <name>SSLSrvConfigRec</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL_CTX</name> *</type><name>ssl_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>modssl_pk_server_t</name> *</type><name>pks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>modssl_pk_proxy_t</name> *</type><name>pkp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>modssl_ticket_key_t</name> *</type><name>ticket_key</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>ssl_proto_t</name></type> <name>protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>protocol_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_pphrase_t</name></type> <name>pphrase_dialog_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pphrase_dialog_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cert_chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>crl_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>crl_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crl_check_mask</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>BOOL</name></type> <name>stapling_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>stapling_resptime_skew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>stapling_resp_maxage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stapling_cache_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>stapling_return_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>stapling_fake_trylater</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stapling_errcache_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>stapling_responder_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>stapling_force_url</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> *</type><name>srp_vfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>srp_unknown_user_seed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRP_VBASE</name> *</type><name>srp_vbase</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>modssl_auth_ctx_t</name></type> <name>auth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ocsp_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ocsp_force_default</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ocsp_responder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ocsp_resptime_skew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ocsp_resp_maxage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>ocsp_responder_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ocsp_use_request_nonce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name> *</type><name>proxy_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ocsp_noverify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ocsp_verify_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ocsp_certs_file</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> *<name>ocsp_certs</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SSL_CONF_CTX</name> *</type><name>ssl_ctx_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ssl_ctx_param</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>modssl_ctx_t</name>;</typedef>
<struct>struct <name>SSLSrvConfigRec</name> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_enabled_t</name></type> <name>enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>proxy_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vhost_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vhost_id_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>session_cache_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>cipher_server_pref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>insecure_reneg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>modssl_ctx_t</name> *</type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>modssl_ctx_t</name> *</type><name>proxy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_enabled_t</name></type> <name>proxy_ssl_check_peer_expire</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_enabled_t</name></type> <name>proxy_ssl_check_peer_cn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_enabled_t</name></type> <name>proxy_ssl_check_peer_name</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ssl_enabled_t</name></type> <name>strict_sni_vhost_check</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>BOOL</name></type> <name>fips</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_COMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>BOOL</name></type> <name>compression</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>BOOL</name></type> <name>session_tickets</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>BOOL</name></type> <name>bSSLRequired</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>aRequirement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_opt_t</name></type> <name>nOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_opt_t</name></type> <name>nOptionsAdd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_opt_t</name></type> <name>nOptionsDel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>szCipherSuite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_verify_t</name></type> <name>nVerifyClient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nVerifyDepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>szCACertificatePath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>szCACertificateFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>szUserName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nRenegBufferSize</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSLDirConfigRec</name>;</typedef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>ssl_module</name></decl>;</decl_stmt>
<function_decl><type><name>SSLModConfigRec</name> *</type><name>ssl_config_global_create</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_config_global_fix</name><parameter_list>(<param><decl><type><name>SSLModConfigRec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> <name>ssl_config_global_isfixed</name><parameter_list>(<param><decl><type><name>SSLModConfigRec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>ssl_config_server_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>server_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>ssl_config_server_merge</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>ssl_config_perdir_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>ssl_config_perdir_merge</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLPassPhraseDialog</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCryptoDevice</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLRandomSeed</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLEngine</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCipherSuite</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCertificateFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCertificateKeyFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCertificateChainFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCACertificatePath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCACertificateFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCADNRequestPath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCADNRequestFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCARevocationPath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCARevocationFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCARevocationCheck</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLHonorCipherOrder</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCompression</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLSessionTickets</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLVerifyClient</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLVerifyDepth</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLSessionCache</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLSessionCacheTimeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProtocol</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOptions</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLRequireSSL</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLRequire</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLUserName</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLRenegBufferSize</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStrictSNIVHostCheck</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLInsecureRenegotiation</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyEngine</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyProtocol</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCipherSuite</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyVerify</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyVerifyDepth</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCACertificatePath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCACertificateFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCARevocationPath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCARevocationFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCARevocationCheck</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyMachineCertificatePath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyMachineCertificateFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyMachineCertificateChainFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLSessionTicketKeyFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCheckPeerExpire</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCheckPeerCN</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCheckPeerName</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPOverrideResponder</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPDefaultResponder</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPResponseTimeSkew</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPResponseMaxAge</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPResponderTimeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPUseRequestNonce</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPEnable</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPProxyURL</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPNoVerify</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPResponderCertificateFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOpenSSLConfCmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLSRPVerifierFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLSRPUnknownUserSeed</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLFIPS</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ssl_init_Module</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>server_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ssl_init_Engine</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ssl_init_ConfigureServer</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>SSLSrvConfigRec</name> *</type></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ssl_init_CheckServers</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_NAME</name></expr></argument>)</argument_list></call>
*<call><name>ssl_init_FindCAList</name><argument_list>(<argument><expr><name>server_rec</name> *</expr></argument>, <argument><expr><name>apr_pool_t</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>ssl_init_Child</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>server_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ssl_init_ModuleKill</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_hook_Auth</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_hook_UserCheck</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_hook_Access</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_hook_Fixup</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_hook_ReadReq</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_hook_Upgrade</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_hook_ConfigTest</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>ssl_authz_provider_require_ssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>ssl_authz_provider_verify_client</name></decl>;</decl_stmt>
<function_decl><type><name>DH</name> *</type><name>ssl_callback_TmpDH</name><parameter_list>(<param><decl><type><name>SSL</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_callback_SSLVerify</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>X509_STORE_CTX</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_callback_SSLVerify_CRL</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>X509_STORE_CTX</name> *</type></decl></param>, <param><decl><type><name>conn_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_callback_proxy_cert</name><parameter_list>(<param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>, <param><decl><type><name>X509</name> **</type><name>x509</name></decl></param>, <param><decl><type><name>EVP_PKEY</name> **</type><name>pkey</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_callback_NewSessionCacheEntry</name><parameter_list>(<param><decl><type><name>SSL</name> *</type></decl></param>, <param><decl><type><name>SSL_SESSION</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>SSL_SESSION</name> *</type><name>ssl_callback_GetSessionCacheEntry</name><parameter_list>(<param><decl><type><name>SSL</name> *</type></decl></param>, <param><decl><type><name>IDCONST</name> <name>unsigned</name></type> <name>char</name> *</decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_callback_DelSessionCacheEntry</name><parameter_list>(<param><decl><type><name>SSL_CTX</name> *</type></decl></param>, <param><decl><type><name>SSL_SESSION</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_callback_Info</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>SSL</name> *</decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>ssl_callback_ServerNameIndication</name><parameter_list>(<param><decl><type><name>SSL</name> *</type></decl></param>, <param><decl><type><name>int</name> *</type></decl></param>, <param><decl><type><name>modssl_ctx_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>ssl_callback_SessionTicket</name><parameter_list>(<param><decl><type><name>SSL</name> *</type></decl></param>, <param><decl><type><name>unsigned</name></type> <name>char</name> *</decl></param>, <param><decl><type><name>unsigned</name></type> <name>char</name> *</decl></param>,
<param><decl><type><name>EVP_CIPHER_CTX</name> *</type></decl></param>, <param><decl><type><name>HMAC_CTX</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>ssl_callback_alpn_select</name><parameter_list>(<param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> **</type><name>out</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>outlen</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>in</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>inlen</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>apr_status_t</name></type> <name>ssl_scache_init</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_scache_status_register</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_scache_kill</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> <name>ssl_scache_store</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>IDCONST</name></type> <name>UCHAR</name> *</decl></param>, <param><decl><type><name>int</name></type></decl></param>,
<param><decl><type><name>apr_time_t</name></type></decl></param>, <param><decl><type><name>SSL_SESSION</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>SSL_SESSION</name> *</type><name>ssl_scache_retrieve</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>IDCONST</name></type> <name>UCHAR</name> *</decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_scache_remove</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>IDCONST</name></type> <name>UCHAR</name> *</decl></param>, <param><decl><type><name>int</name></type></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_proxy_enable</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_engine_disable</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingCache</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLUseStapling</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingResponseTimeSkew</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingResponseMaxAge</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingStandardCacheTimeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingErrorCacheTimeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingReturnResponderErrors</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingFakeTryLater</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingResponderTimeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingForceURL</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>modssl_init_stapling</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>modssl_ctx_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_stapling_certinfo_hash_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_stapling_init_cert</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type></decl></param>, <param><decl><type><name>X509</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>ssl_callback_SRPServerParams</name><parameter_list>(<param><decl><type><name>SSL</name> *</type></decl></param>, <param><decl><type><name>int</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>void</name></type> <name>ssl_io_filter_init</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>SSL</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_io_filter_register</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>ssl_io_data_cb</name><parameter_list>(<param><decl><type><name>BIO</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>long</name></type></decl></param>, <param><decl><type><name>long</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_io_buffer_fill</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>maxlen</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_rand_seed</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>ssl_rsctx_t</name></type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> *</type><name>ssl_util_vhostid</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>server_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_file_t</name> *</type><name>ssl_util_ppopen</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_util_ppclose</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>apr_file_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> *</type><name>ssl_util_readfilter</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> <name>ssl_util_path_check</name><parameter_list>(<param><decl><type><name>ssl_pathcheck_t</name></type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name> &amp;&amp; <name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>ssl_util_thread_setup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_util_thread_id_setup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>int</name></type> <name>ssl_init_ssl_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> <name>ssl_util_vhost_matches</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>servername</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ssl_load_encrypted_pkey</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>,
<param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>, <param><decl><type><name>apr_array_header_t</name> **</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>DH</name> *</type><name>ssl_dh_GetParamFromFile</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EC_GROUP</name> *</type><name>ssl_ec_GetParamFromFile</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>unsigned</name> <name>char</name> *</type><name>ssl_asn1_table_set</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>table</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
<param><decl><type><name>long</name> <name>int</name></type> <name>length</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>ssl_asn1_t</name> *</type><name>ssl_asn1_table_get</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>table</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_asn1_table_unset</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>table</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_mutex_init</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_mutex_reinit</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_mutex_on</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_mutex_off</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ssl_stapling_mutex_reinit</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CACHE_MUTEX_TYPE</name></cpp:macro> <cpp:value>"ssl-cache"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_STAPLING_CACHE_MUTEX_TYPE</name></cpp:macro> <cpp:value>"ssl-stapling"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_STAPLING_REFRESH_MUTEX_TYPE</name></cpp:macro> <cpp:value>"ssl-stapling-refresh"</cpp:value></cpp:define>
<function_decl><type><name>apr_status_t</name></type> <name>ssl_die</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_log_ssl_error</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>server_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_log_xerror</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>,
<param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
__attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>,<param/></parameter_list>8,9</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>ssl_log_cxerror</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>,
<param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
__attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>,<param/></parameter_list>7,8</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>ssl_log_rxerror</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>,
<param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
__attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>,<param/></parameter_list>7,8</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSLLOG_MARK</name></cpp:macro> <cpp:value>__FILE__,__LINE__</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>ssl_var_register</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> *</type><name>ssl_var_lookup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>conn_rec</name> *</type></decl></param>, <param><decl><type><name>request_rec</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_array_header_t</name> *</type><name>ssl_ext_list</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>int</name></type> <name>peer</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>extension</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_var_log_config_register</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>modssl_var_extract_dns</name><parameter_list>(<param><decl><type><name>apr_table_t</name> *</type><name>t</name></decl></param>, <param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>modssl_var_extract_san_entries</name><parameter_list>(<param><decl><type><name>apr_table_t</name> *</type><name>t</name></decl></param>, <param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>modssl_verify_ocsp</name><parameter_list>(<param><decl><type><name>X509_STORE_CTX</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>OCSP_RESPONSE</name> *</type><name>modssl_dispatch_ocsp_request</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_uri_t</name> *</type><name>uri</name></decl></param>,
<param><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl></param>,
<param><decl><type><name>OCSP_REQUEST</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ssl_init_ocsp_certificates</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>DH</name> *</type><name>modssl_get_dh_params</name><parameter_list>(<param><decl><type><name>unsigned</name></type> <name>keylen</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
