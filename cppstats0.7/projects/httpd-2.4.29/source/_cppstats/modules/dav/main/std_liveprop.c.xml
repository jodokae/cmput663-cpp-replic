<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/dav/main/std_liveprop.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_dav.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_hooks_liveprop</name></type> <name>dav_core_hooks_liveprop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>dav_core_namespace_uris</name><index>[]</index></name> <init>= <expr><block>{
<expr>"DAV:"</expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_liveprop_spec</name></type> <name><name>dav_core_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>0</expr>, <expr>"comment"</expr>, <expr><name>DAV_PROPID_comment</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>"creator-displayname"</expr>, <expr><name>DAV_PROPID_creator_displayname</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>"displayname"</expr>, <expr><name>DAV_PROPID_displayname</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>"resourcetype"</expr>, <expr><name>DAV_PROPID_resourcetype</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>"source"</expr>, <expr><name>DAV_PROPID_source</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_liveprop_group</name></type> <name>dav_core_liveprop_group</name> <init>= <expr><block>{
<expr><name>dav_core_props</name></expr>,
<expr><name>dav_core_namespace_uris</name></expr>,
<expr>&amp;<name>dav_core_hooks_liveprop</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>dav_prop_insert</name></type> <name>dav_core_insert_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>propid</name></decl></param>, <param><decl><type><name>dav_prop_insert</name></type> <name>what</name></decl></param>,
<param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_liveprop_spec</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>global_ns</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>propid</name></expr>)</condition> <block>{
<case>case <expr><name>DAV_PROPID_resourcetype</name></expr>: <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>extensions</name> <init>=
<expr><call><name>ap_list_provider_names</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DAV_RESOURCE_TYPE_GROUP</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_list_provider_names_t</name> *</type><name>entry</name> <init>=
<expr>(<name>ap_list_provider_names_t</name> *)<name><name>extensions</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>extensions</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>entry</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_resource_type_provider</name> *</type><name>res_hooks</name> <init>=
<expr><call><name>dav_get_resource_type_providers</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init>, *<name>uri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>res_hooks</name> || !<name><name>res_hooks</name>-&gt;<name>get_resource_type</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr>!<call><name><name>res_hooks</name>-&gt;<name>get_resource_type</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call> &amp;&amp;
<name>name</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>uri</name> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr>"DAV:"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>value</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name> ? <name>value</name> : ""</expr></argument>,
<argument><expr>"&lt;D:"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"/&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>value</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name> ? <name>value</name> : ""</expr></argument>,
<argument><expr>"&lt;x:"</expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr>" xmlns:x=\""</expr></argument>, <argument><expr><name>uri</name></expr></argument>,
<argument><expr>"\"/&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
}</block></for>
}</block>
<switch>switch <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>DAV_RESOURCE_TYPE_VERSION</name></expr>:
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>baselined</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name> ? <name>value</name> : ""</expr></argument>, <argument><expr>"&lt;D:baseline/&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
</case><case>case <expr><name>DAV_RESOURCE_TYPE_REGULAR</name></expr>:
</case><case>case <expr><name>DAV_RESOURCE_TYPE_WORKING</name></expr>:
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name> ? <name>value</name> : ""</expr></argument>, <argument><expr>"&lt;D:collection/&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = ""</expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>DAV_RESOURCE_TYPE_HISTORY</name></expr>:
<expr_stmt><expr><name>value</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name> ? <name>value</name> : ""</expr></argument>, <argument><expr>"&lt;D:version-history/&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>DAV_RESOURCE_TYPE_WORKSPACE</name></expr>:
<expr_stmt><expr><name>value</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name> ? <name>value</name> : ""</expr></argument>, <argument><expr>"&lt;D:collection/&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>DAV_RESOURCE_TYPE_ACTIVITY</name></expr>:
<expr_stmt><expr><name>value</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name> ? <name>value</name> : ""</expr></argument>, <argument><expr>"&lt;D:activity/&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<return>return <expr><name>DAV_PROP_INSERT_NOTDEF</name></expr>;</return>
</default>}</block></switch>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_comment</name></expr>:
</case><case>case <expr><name>DAV_PROPID_creator_displayname</name></expr>:
</case><case>case <expr><name>DAV_PROPID_displayname</name></expr>:
</case><case>case <expr><name>DAV_PROPID_source</name></expr>:
</case><default>default:
<return>return <expr><name>DAV_PROP_INSERT_NOTDEF</name></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><name>global_ns</name> = <call><name>dav_get_liveprop_info</name><argument_list>(<argument><expr><name>propid</name></expr></argument>, <argument><expr>&amp;<name>dav_core_liveprop_group</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>what</name> == <name>DAV_PROP_INSERT_SUPPORTED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;D:supported-live-property D:name=\"%s\" "
"D:namespace=\"%s\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>dav_core_namespace_uris</name><index>[<expr><name><name>info</name>-&gt;<name>ns</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>what</name> == <name>DAV_PROP_INSERT_VALUE</name> &amp;&amp; *<name>value</name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"&lt;lp%ld:%s&gt;%s&lt;/lp%ld:%s&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>global_ns</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>global_ns</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"&lt;lp%ld:%s/&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>global_ns</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>what</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_core_is_writable</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>, <param><decl><type><name>int</name></type> <name>propid</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_liveprop_spec</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>dav_get_liveprop_info</name><argument_list>(<argument><expr><name>propid</name></expr></argument>, <argument><expr>&amp;<name>dav_core_liveprop_group</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>info</name>-&gt;<name>is_writable</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_core_patch_validate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>, <param><decl><type><name>void</name> **</type><name>context</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>defer_to_dead</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>defer_to_dead</name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_hooks_liveprop</name></type> <name>dav_core_hooks_liveprop</name> <init>= <expr><block>{
<expr><name>dav_core_insert_prop</name></expr>,
<expr><name>dav_core_is_writable</name></expr>,
<expr><name>dav_core_namespace_uris</name></expr>,
<expr><name>dav_core_patch_validate</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>dav_core_find_liveprop</name><argument_list>(
<argument>const dav_resource *resource</argument>,
<argument>const char *ns_uri</argument>, <argument>const char *name</argument>,
<argument>const dav_hooks_liveprop **hooks</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>dav_do_find_liveprop</name><argument_list>(<argument><expr><name>ns_uri</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>dav_core_liveprop_group</name></expr></argument>, <argument><expr><name>hooks</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_core_insert_all_liveprops</name><argument_list>(
<argument>request_rec *r</argument>,
<argument>const dav_resource *resource</argument>,
<argument>dav_prop_insert what</argument>,
<argument>apr_text_header *phdr</argument>)</argument_list></macro> <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>dav_core_insert_prop</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>DAV_PROPID_resourcetype</name></expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_core_register_uris</name><argument_list>(<argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>dav_register_liveprop_group</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>dav_core_liveprop_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
</unit>
