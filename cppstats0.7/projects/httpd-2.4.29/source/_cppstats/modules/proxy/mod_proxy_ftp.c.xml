<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/proxy/mod_proxy_ftp.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_BYTEFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_TIME_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_version.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>APR_MAJOR_VERSION</name> &lt; 1)</expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>apr_socket_create</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>apr_socket_create</name></cpp:macro> <cpp:value>apr_socket_create_ex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTODETECT_PWD</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MDTM</name></cpp:macro></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>proxy_ftp_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ftp_list_on_wildcard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ftp_list_on_wildcard_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ftp_escape_wildcards</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ftp_escape_wildcards_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ftp_directory_charset</name></decl>;</decl_stmt>
}</block></struct></type> <name>proxy_ftp_dir_conf</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_proxy_ftp_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_ftp_dir_conf</name> *</type><name>new</name> <init>=
<expr>(<name>proxy_ftp_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_ftp_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>ftp_list_on_wildcard</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>ftp_escape_wildcards</name></name> = 1</expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *) <name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_proxy_ftp_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_ftp_dir_conf</name> *</type><name>new</name> <init>= <expr>(<name>proxy_ftp_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_ftp_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_ftp_dir_conf</name> *</type><name>add</name> <init>= <expr>(<name>proxy_ftp_dir_conf</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_ftp_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>proxy_ftp_dir_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>ftp_list_on_wildcard</name></name> = <name><name>add</name>-&gt;<name>ftp_list_on_wildcard_set</name></name> ?
<name><name>add</name>-&gt;<name>ftp_list_on_wildcard</name></name> :
<name><name>base</name>-&gt;<name>ftp_list_on_wildcard</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>ftp_list_on_wildcard_set</name></name> = <name><name>add</name>-&gt;<name>ftp_list_on_wildcard_set</name></name> ?
1 :
<name><name>base</name>-&gt;<name>ftp_list_on_wildcard_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>ftp_escape_wildcards</name></name> = <name><name>add</name>-&gt;<name>ftp_escape_wildcards_set</name></name> ?
<name><name>add</name>-&gt;<name>ftp_escape_wildcards</name></name> :
<name><name>base</name>-&gt;<name>ftp_escape_wildcards</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>ftp_escape_wildcards_set</name></name> = <name><name>add</name>-&gt;<name>ftp_escape_wildcards_set</name></name> ?
1 :
<name><name>base</name>-&gt;<name>ftp_escape_wildcards_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>ftp_directory_charset</name></name> = <name><name>add</name>-&gt;<name>ftp_directory_charset</name></name> ?
<name><name>add</name>-&gt;<name>ftp_directory_charset</name></name> :
<name><name>base</name>-&gt;<name>ftp_directory_charset</name></name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_ftp_list_on_wildcard</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_ftp_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ftp_list_on_wildcard</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ftp_list_on_wildcard_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_ftp_escape_wildcards</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_ftp_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ftp_escape_wildcards</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ftp_escape_wildcards_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_ftp_directory_charset</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_ftp_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ftp_directory_charset</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>decodeenc</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>x</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>j</name> = 0</expr>;</init> <condition><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> != '\0'</expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>j</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>ch</name> = <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ch</name> == '%' &amp;&amp; <call><name>apr_isxdigit</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name> + 1</expr>]</index></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>apr_isxdigit</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name> + 2</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ch</name> = <call><name>ap_proxy_hex2c</name><argument_list>(<argument><expr>&amp;<name><name>x</name><index>[<expr><name>i</name> + 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> += 2</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> = <name>ch</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>j</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTP_GLOBBING_CHARS</name></cpp:macro> <cpp:value>"*?[{~"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ftp_escape_globbingchars</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>proxy_ftp_dir_conf</name> *</type><name>dconf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>d</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>dconf</name>-&gt;<name>ftp_escape_wildcards</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>path</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>2*<call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call>+<sizeof>sizeof<argument_list>(<argument><expr>""</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>d</name> = <name>ret</name></expr>;</init> <condition><expr>*<name>path</name></expr>;</condition> <incr><expr>++<name>path</name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>FTP_GLOBBING_CHARS</name></expr></argument>, <argument><expr>*<name>path</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>d</name>++ = '\\'</expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>d</name>++ = *<name>path</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>d</name> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ftp_check_globbingchars</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>)</parameter_list> <block>{
<for>for ( <init>;</init> <condition><expr>*<name>path</name></expr>;</condition> <incr><expr>++<name>path</name></expr></incr>) <block>{
<if>if <condition>(<expr>*<name>path</name> == '\\'</expr>)</condition><then>
<expr_stmt><expr>++<name>path</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>path</name> != '\0' &amp;&amp; <call><name>strchr</name><argument_list>(<argument><expr><name>FTP_GLOBBING_CHARS</name></expr></argument>, <argument><expr>*<name>path</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ftp_check_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> != '\0'</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>ch</name> = <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ch</name> == '%' &amp;&amp; <call><name>apr_isxdigit</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name> + 1</expr>]</index></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>apr_isxdigit</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name> + 2</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ch</name> = <call><name>ap_proxy_hex2c</name><argument_list>(<argument><expr>&amp;<name><name>x</name><index>[<expr><name>i</name> + 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> += 2</expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<if>if <condition>(<expr><name>ch</name> == '\015' || <name>ch</name> == '\012' || (<name>ch</name> &amp; 0x80)</expr>)</condition><then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name>ch</name> == '\r' || <name>ch</name> == '\n'</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if></then></if>
<expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> &amp; 0x80</expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>0</expr>;</return></then></if>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ftp_string_read</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buff</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>bufflen</name></decl></param>, <param><decl><type><name>int</name> *</type><name>eos</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>pos</name> <init>= <expr><name>buff</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>eos</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>!<name>found</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>APR_SUCCESS</name> != (<name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr><name>AP_MODE_GETLINE</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>!<name>found</name></expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>eos</name> || <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ECONNABORTED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>eos</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>APR_SUCCESS</name> != (<name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>,
<argument><expr>(const <name>char</name> **)&amp;<name>response</name></expr></argument>,
<argument><expr>&amp;<name>len</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><name>APR_ASCII_LF</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt; ((<name>bufflen</name>-1)-(<name>pos</name>-<name>buff</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = (<name>bufflen</name>-1)-(<name>pos</name>-<name>buff</name>)</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> += <name>len</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>pos</name> = '\0'</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_ftp_canon</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>user</name></decl>, *<decl><type ref="prev"/><name>password</name></decl>, *<decl><type ref="prev"/><name>host</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>, *<decl><type ref="prev"/><name>parms</name></decl>, *<decl><type ref="prev"/><name>strp</name></decl>, <decl><type ref="prev"/><name><name>sport</name><index>[<expr>7</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>r</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>def_port</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"ftp:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> += 4</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></else></if>
<expr_stmt><expr><name>def_port</name> = <call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr>"ftp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"canonicalising URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> = <name>def_port</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>ap_proxy_canon_netloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr>&amp;<name>user</name></expr></argument>, <argument><expr>&amp;<name>password</name></expr></argument>, <argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>user</name> != <name>NULL</name> &amp;&amp; !<call><name>ftp_check_string</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>password</name> != <name>NULL</name> &amp;&amp; !<call><name>ftp_check_string</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<expr_stmt><expr><name>strp</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>';'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>strp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>strp</name>++) = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>parms</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>strp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>strp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc_parm</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>parms</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>parms</name> = ""</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>path</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc_path</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>path</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>ftp_check_string</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>args</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>strp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>strp</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc_parm</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>strp</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<expr_stmt><expr><name>parms</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>parms</name></expr></argument>, <argument><expr>"?"</expr></argument>, <argument><expr><name>strp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>strp</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc_fpath</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>strp</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<expr_stmt><expr><name>path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>"?"</expr></argument>, <argument><expr><name>strp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>args</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>port</name> != <name>def_port</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>sport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>":%d"</expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>sport</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>host</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"["</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr>"]"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"proxy:ftp://"</expr></argument>, <argument><expr>(<name>user</name> != <name>NULL</name>) ? <name>user</name> : ""</expr></argument>,
<argument><expr>(<name>password</name> != <name>NULL</name>) ? ":" : ""</expr></argument>,
<argument><expr>(<name>password</name> != <name>NULL</name>) ? <name>password</name> : ""</expr></argument>,
<argument><expr>(<name>user</name> != <name>NULL</name>) ? "@" : ""</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>sport</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr>(<name><name>parms</name><index>[<expr>0</expr>]</index></name> != '\0') ? ";" : ""</expr></argument>, <argument><expr><name>parms</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LINE_LEN</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ftp_getrc_msg</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>ftp_ctrl</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>char</name> *</type><name>msgbuf</name></decl></param>, <param><decl><type><name>int</name></type> <name>msglen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>response</name><index>[<expr><name>MAX_LINE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>mb</name> <init>= <expr><name>msgbuf</name></expr></init>, *<name>me</name> <init>= <expr>&amp;<name><name>msgbuf</name><index>[<expr><name>msglen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eos</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != (<name>rv</name> = <call><name>ftp_string_read</name><argument_list>(<argument><expr><name>ftp_ctrl</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>&amp;<name>eos</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>response</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> || !<call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>response</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call> ||
!<call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>response</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call> || (<name><name>response</name><index>[<expr>3</expr>]</index></name> != ' ' &amp;&amp; <name><name>response</name><index>[<expr>3</expr>]</index></name> != '-')</expr>)</condition><then>
<expr_stmt><expr><name>status</name> = 0</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>status</name> = 100 * <name><name>response</name><index>[<expr>0</expr>]</index></name> + 10 * <name><name>response</name><index>[<expr>1</expr>]</index></name> + <name><name>response</name><index>[<expr>2</expr>]</index></name> - 111 * '0'</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>mb</name> = <call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>mb</name></expr></argument>, <argument><expr><name>response</name> + 4</expr></argument>, <argument><expr><name>me</name> - <name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>response</name><index>[<expr>3</expr>]</index></name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr>3</expr>]</index></name> = ' '</expr>;</expr_stmt>
<do>do <block>{
<if>if <condition>(<expr><name>APR_SUCCESS</name> != (<name>rv</name> = <call><name>ftp_string_read</name><argument_list>(<argument><expr><name>ftp_ctrl</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>&amp;<name>eos</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>mb</name> = <call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>mb</name></expr></argument>, <argument><expr><name>response</name> + (' ' == <name><name>response</name><index>[<expr>0</expr>]</index></name> ? 1 : 4)</expr></argument>, <argument><expr><name>me</name> - <name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> != 0</expr>)</condition>;</do>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>HEADER</name></decl>, <decl><name>BODY</name></decl>, <decl><name>FOOTER</name></decl>
}</block> <decl><name>state</name></decl>;</enum>
}</block></struct></type> <name>proxy_dir_ctx_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LS_REG_PATTERN</name></cpp:macro> <cpp:value>"^ *([0-9]+) +([^ ]+)$"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LS_REG_MATCH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_regex_t</name> *</type><name>ls_regex</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>proxy_send_dir_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>r</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>out</name> <init>= <expr><call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dir</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>, *<decl><type ref="prev"/><name>reldir</name></decl>, *<decl><type ref="prev"/><name>site</name></decl>, *<decl><type ref="prev"/><name>str</name></decl>, *<decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pwd</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"Directory-PWD"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>readme</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"Directory-README"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_ctx_t</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>in</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>HEADER</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>in</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>HEADER</name> == <name><name>ctx</name>-&gt;<name>state</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>basedir</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>wildcard</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>escpath</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> == <name>PROXYREQ_REVERSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>site</name> = <call><name>ap_construct_url</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>site</name> = <call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name><name>f</name>-&gt;<name>r</name>-&gt;<name>parsed_uri</name></name></expr></argument>,
<argument><expr><name>APR_URI_UNP_OMITPASSWORD</name> |
<name>APR_URI_UNP_OMITPATHINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>path</name> = <call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name><name>f</name>-&gt;<name>r</name>-&gt;<name>parsed_uri</name></name></expr></argument>, <argument><expr><name>APR_URI_UNP_OMITSITEPART</name> | <name>APR_URI_UNP_OMITQUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/%2f"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>basedir</name> = "/%2f"</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>type</name> = <call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>";type="</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>type</name>++ = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr>(<name>void</name>)<call><name>decodeenc</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>path</name><index>[<expr>1</expr>]</index></name> == '/'</expr>)</condition>
<expr_stmt><expr>++<name>path</name></expr>;</expr_stmt></while>
<expr_stmt><expr><name>reldir</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>reldir</name> != <name>NULL</name> &amp;&amp; <call><name>ftp_check_globbingchars</name><argument_list>(<argument><expr><name>reldir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>wildcard</name> = &amp;<name><name>reldir</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reldir</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>path</name> = <name>dir</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> &gt; 1 &amp;&amp; <name><name>path</name><index>[<expr><name>n</name> - 1</expr>]</index></name> == '/' &amp;&amp; <name><name>path</name><index>[<expr><name>n</name> - 2</expr>]</index></name> == '/'</expr>;</condition> <incr><expr>--<name>n</name></expr></incr>)
<expr_stmt><expr><name><name>path</name><index>[<expr><name>n</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt></for>
<expr_stmt><expr><name>str</name> = (<name><name>basedir</name><index>[<expr>0</expr>]</index></name> != '\0') ? "&lt;a href=\"/%2f/\"&gt;%2f&lt;/a&gt;/" : ""</expr>;</expr_stmt>
<expr_stmt><expr><name>escpath</name> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DOCTYPE_HTML_3_2</name>
"&lt;html&gt;\n &lt;head&gt;\n &lt;title&gt;%s%s%s&lt;/title&gt;\n"
"&lt;base href=\"%s%s%s\"&gt;\n"
" &lt;/head&gt;\n"
" &lt;body&gt;\n &lt;h2&gt;Directory of "
"&lt;a href=\"/\"&gt;%s&lt;/a&gt;/%s"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>site</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>basedir</name></expr></argument>, <argument><expr><name>escpath</name></expr></argument>,
<argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>site</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>basedir</name></expr></argument>, <argument><expr><name>escpath</name></expr></argument>,
<argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>site</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>dir</name> = <name>path</name>+1</expr>;</init> <condition><expr>(<name>dir</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>;</condition> <incr/>) <block>{
<expr_stmt><expr>*<name>dir</name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>reldir</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>path</name>+1</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>)==<name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reldir</name> = <name>path</name>+1</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>++<name>reldir</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"&lt;a href=\"%s%s/\"&gt;%s&lt;/a&gt;/"</expr></argument>, <argument><expr><name>basedir</name></expr></argument>,
<argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>reldir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dir</name> = '/'</expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>dir</name> == '/'</expr>)</condition>
<expr_stmt><expr>++<name>dir</name></expr>;</expr_stmt></while>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>str</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>wildcard</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>wildcard</name> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>wildcard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>wildcard</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>wildcard</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>pwd</name> == <name>NULL</name> || <call><name>strncmp</name><argument_list>(<argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"&lt;/h2&gt;\n\n &lt;hr /&gt;\n\n&lt;pre&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"&lt;/h2&gt;\n\n(%s)\n\n &lt;hr /&gt;\n\n&lt;pre&gt;"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>readme</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%s\n&lt;/pre&gt;\n\n&lt;hr /&gt;\n\n&lt;pre&gt;\n"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>readme</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>str</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != (<name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY</name></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr><name>BODY</name> == <name><name>ctx</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>re_result</name><index>[<expr><name>LS_REG_MATCH</name></expr>]</index></name></decl>;</decl_stmt>
<while>while <condition>(<expr>!<name>found</name> &amp;&amp; !<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>in</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pos</name></decl>, *<decl><type ref="prev"/><name>response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>eos</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != (<name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>(const <name>char</name> **)&amp;<name>response</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pos</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><name>APR_ASCII_LF</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pos</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>response</name> + <name>len</name>) != (<name>pos</name> + 1)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <name>pos</name> - <name>response</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_split</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>pos</name> - <name>response</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>max</name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></sizeof> - <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></call> - 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; <name>max</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <name>max</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name>+<call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>len</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>eos</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>FOOTER</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<name>found</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr><name>n</name>-1</expr>]</index></name> == <name><name>CRLF</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr>--<name>n</name></expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr><name>n</name>-1</expr>]</index></name> == <name><name>CRLF</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr>--<name>n</name></expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
}</block>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr>0</expr>]</index></name> == 'l' &amp;&amp; (<name>filename</name> = <call><name>strstr</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr>" -&gt; "</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>link_ptr</name> <init>= <expr><name>filename</name></expr></init></decl>;</decl_stmt>
<do>do <block>{
<expr_stmt><expr><name>filename</name>--</expr>;</expr_stmt>
}</block> while <condition>(<expr><name><name>filename</name><index>[<expr>0</expr>]</index></name> != ' ' &amp;&amp; <name>filename</name> &gt; <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>filename</name> &gt; <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>)</condition><then>
<expr_stmt><expr>*(<name>filename</name>++) = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr>*(<name>link_ptr</name>++) = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%s &lt;a href=\"%s\"&gt;%s %s&lt;/a&gt;\n"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>link_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr>0</expr>]</index></name> == 'd' || <name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr>0</expr>]</index></name> == '-' || <name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr>0</expr>]</index></name> == 'l' || <call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>searchidx</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>searchptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>firstfile</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>searchptr</name> = <call><name>strchr</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr>'&lt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>searchptr</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>searchptr</name> = '['</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>searchptr</name> = <call><name>strchr</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>searchptr</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>searchptr</name> = ']'</expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><name>filename</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>filename</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01034</expr></argument>)</argument_list></call>
"proxy_ftp: could not parse line %s"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr>*(<name>filename</name>++) = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call> || !<call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr>".."</expr></argument>)</argument_list></call> || <name>firstfile</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>firstfile</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>searchidx</name> = <name>filename</name> - <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>searchidx</name> != 0 &amp;&amp; <name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr><name>searchidx</name></expr>]</index></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*(--<name>filename</name>) = ' '</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr><name>searchidx</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>filename</name> = &amp;<name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr><name>searchidx</name></expr>]</index></name></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call> || !<call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr>".."</expr></argument>)</argument_list></call> || <name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr>0</expr>]</index></name> == 'd'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%s &lt;a href=\"%s/\"&gt;%s&lt;/a&gt;\n"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%s &lt;a href=\"%s\"&gt;%s&lt;/a&gt;\n"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then>
<else>else <if>if <condition>(<expr>0 == <call><name>ap_regexec</name><argument_list>(<argument><expr><name>ls_regex</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>LS_REG_MATCH</name></expr></argument>, <argument><expr><name>re_result</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>filename</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr><name><name>re_result</name><index>[<expr>2</expr>]</index></name>.<name>rm_so</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>re_result</name><index>[<expr>2</expr>]</index></name>.<name>rm_eo</name> - <name><name>re_result</name><index>[<expr>2</expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name><name>re_result</name><index>[<expr>2</expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;a href=\""</expr></argument>, <argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"&lt;/a&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != (<name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>FOOTER</name> == <name><name>ctx</name>-&gt;<name>state</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"&lt;/pre&gt;\n\n &lt;hr /&gt;\n\n %s\n\n &lt;/body&gt;\n&lt;/html&gt;\n"</expr></argument>, <argument><expr><call><name>ap_psignature</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != (<name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_port_t</name></type> <name>parse_epsv_reply</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reply</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>port</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr>'('</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name> || !<name><name>p</name><index>[<expr>1</expr>]</index></name> || <name><name>p</name><index>[<expr>1</expr>]</index></name> != <name><name>p</name><index>[<expr>2</expr>]</index></name> || <name><name>p</name><index>[<expr>1</expr>]</index></name> != <name><name>p</name><index>[<expr>3</expr>]</index></name>
|| <name><name>p</name><index>[<expr>4</expr>]</index></name> == <name><name>p</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>p</name> + 4</expr></argument>, <argument><expr>&amp;<name>ep</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errno</name> || <name>port</name> &lt; 1 || <name>port</name> &gt; 65535 || <name><name>ep</name><index>[<expr>0</expr>]</index></name> != <name><name>p</name><index>[<expr>1</expr>]</index></name> || <name><name>ep</name><index>[<expr>1</expr>]</index></name> != ')'</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>(<name>apr_port_t</name>)<name>port</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>proxy_ftp_command</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>ftp_ctrl</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>char</name> **</type><name>pmessage</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>crlf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>message</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cmd</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>ftp_ctrl</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>crlf</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr>'\r'</expr></argument>)</argument_list></call>) != <name>NULL</name> ||
(<name>crlf</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>crlf</name> = '\0'</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>message</name></expr></argument>,<argument><expr>"PASS "</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr>&amp;<name><name>message</name><index>[<expr>5</expr>]</index></name></expr></argument>, <argument><expr>"****"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"&gt;%s"</expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>ftp_getrc_msg</name><argument_list>(<argument><expr><name>ftp_ctrl</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr>sizeof <name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>message</name></expr></argument>,<argument><expr>"&lt;unable to read result&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>crlf</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr>'\r'</expr></argument>)</argument_list></call>) != <name>NULL</name> ||
(<name>crlf</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>crlf</name> = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;%3.3u %s"</expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pmessage</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pmessage</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ftp_set_TYPE</name><parameter_list>(<param><decl><type><name>char</name></type> <name>xfer_type</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>ftp_ctrl</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>char</name> **</type><name>pmessage</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>old_type</name><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{ <expr>'A'</expr>, <expr>'\0'</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>HTTP_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>old_type</name><index>[<expr>0</expr>]</index></name> = <name>xfer_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"TYPE "</expr></argument>, <argument><expr><name>old_type</name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ftp_ctrl</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>pmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>rc</name> != 200 &amp;&amp; <name>rc</name> != 504</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Unable to set transfer type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name>rc</name> == 504</expr>)</condition><then> <block>{
}</block></then></if></else></if></else></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>ftp_get_PWD</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>ftp_ctrl</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ftpmessage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>proxy_ftp_command</name><argument_list>(<argument><expr>"PWD" <name>CRLF</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ftp_ctrl</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>-1</expr>:
</case><case>case <expr>421</expr>:
</case><case>case <expr>550</expr>:
<expr_stmt><expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Failed to read PWD on ftp server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>257</expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dirp</name> <init>= <expr><name>ftpmessage</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cwd</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
</case>}</block></switch>
<return>return <expr><name>cwd</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ftp_unauthorized</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>log_it</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>proxyreq</name></name> = <name>PROXYREQ_NONE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>log_it</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01035</expr></argument>)</argument_list></call>
"missing or failed auth to %s"</expr></argument>,
<argument><expr><call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>&amp;<name><name>r</name>-&gt;<name>parsed_uri</name></name></expr></argument>, <argument><expr><name>APR_URI_UNP_OMITPATHINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"WWW-Authenticate"</expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Basic realm=\""</expr></argument>,
<argument><expr><call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>r</name>-&gt;<name>parsed_uri</name></name></expr></argument>,
<argument><expr><name>APR_URI_UNP_OMITPASSWORD</name> | <name>APR_URI_UNP_OMITPATHINFO</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>apr_status_t</name></type> <name>proxy_ftp_cleanup</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_ftp_module</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr>"FTP"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>int</name></type> <name>ftp_proxyerror</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>int</name></type> <name>statuscode</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>statuscode</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_ftp_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxyhost</name></decl></param>, <param><decl><type><name>apr_port_t</name></type> <name>proxyport</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>r</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl>, *<decl><type ref="prev"/><name>local_sock</name></decl>, *<decl><type ref="prev"/><name>data_sock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>connect_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>origin</name></decl>, *<decl><type ref="prev"/><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>err</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>uerr</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name> <init>= <expr><call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>, *<decl><type ref="prev"/><name>connectname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>connectport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ftpmessage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>strp</name></decl>, *<decl><type ref="prev"/><name>type_suffix</name></decl>, *<decl><type ref="prev"/><name>cwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>user</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>one</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>size</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>xfer_type</name> <init>= <expr>'A'</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirlisting</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MDTM</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMEGM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMTOFF</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>mtime</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>proxy_ftp_dir_conf</name> *</type><name>fdconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_ftp_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>connect</name> <init>= <expr>0</expr></init>, <name>use_port</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dates</name><index>[<expr><name>APR_RFC822_DATE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>address_pool</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>proxyhost</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"declining URL %s - proxyhost %s specified:"</expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name>proxyhost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"ftp:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"declining URL %s - not ftp:"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"serving URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name></expr>)</condition><then>
<return>return <expr><name>HTTP_NOT_IMPLEMENTED</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"URI cannot be parsed: %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>connectname</name> = <name><name>uri</name>.<name>hostname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>connectport</name> = <name><name>uri</name>.<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>uri</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>connectname</name> = <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>connectport</name> = <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>connectport</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>connectport</name> = <call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr>"ftp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>path</name> = (<name>path</name> != <name>NULL</name> &amp;&amp; <name><name>path</name><index>[<expr>0</expr>]</index></name> != '\0') ? &amp;<name><name>path</name><index>[<expr>1</expr>]</index></name> : ""</expr>;</expr_stmt>
<expr_stmt><expr><name>type_suffix</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>';'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>type_suffix</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>type_suffix</name>++) = '\0'</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>type_suffix</name> != <name>NULL</name> &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>type_suffix</name></expr></argument>, <argument><expr>"type="</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0
&amp;&amp; <call><name>apr_isalpha</name><argument_list>(<argument><expr><name><name>type_suffix</name><index>[<expr>5</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>( <expr>! (<name>dirlisting</name> = (<call><name>apr_tolower</name><argument_list>(<argument><expr><name><name>type_suffix</name><index>[<expr>5</expr>]</index></name></expr></argument>)</argument_list></call> == 'd'))</expr>)</condition><then>
<expr_stmt><expr><name>xfer_type</name> = <call><name>apr_toupper</name><argument_list>(<argument><expr><name><name>type_suffix</name><index>[<expr>5</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr>"AEI"</expr></argument>, <argument><expr><name>xfer_type</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"ftp proxy supports only types 'a', 'i', or 'e': \""</expr></argument>,
<argument><expr><name>type_suffix</name></expr></argument>, <argument><expr>"\" is invalid."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>xfer_type</name> = 'I'</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>(<name>password</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Authorization"</expr></argument>)</argument_list></call>) != <name>NULL</name>
&amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>password</name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"Basic"</expr></argument>)</argument_list></call> == 0
&amp;&amp; (<name>password</name> = <call><name>ap_pbase64decode</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call>)<index>[<expr>0</expr>]</index> != ':'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ftp_check_string</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>,
<argument><expr>"user credentials contained invalid character"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>user</name> = <call><name>ap_getword_nulls</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>password</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name> = "Basic"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>user</name></name> = <name>user</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>user</name> = <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>user</name></name>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>user</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decodeenc</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>password</name> = <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>password</name></name>) != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decodeenc</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>password</name> = <name>tmp</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>user</name> = "anonymous"</expr>;</expr_stmt>
<expr_stmt><expr><name>password</name> = "apache-proxy@"</expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01036</expr></argument>)</argument_list></call>
"connecting %s to %s:%d"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>connectname</name></expr></argument>, <argument><expr><name>connectport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>is_address_reusable</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>PROXY_THREAD_LOCK</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>balancer</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01037</expr></argument>)</argument_list></call> "lock"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>connect_addr</name> = <name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>address_pool</name> = <name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>address_pool</name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>!<name>connect_addr</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;(<name>connect_addr</name>)</expr></argument>,
<argument><expr><name>connectname</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>,
<argument><expr><name>connectport</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>address_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>is_address_reusable</name></name> &amp;&amp; !<name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name> = <name>connect_addr</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>uerr</name> = <call><name>PROXY_THREAD_UNLOCK</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>balancer</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>uerr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01038</expr></argument>)</argument_list></call> "unlock"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"DNS lookup failure for: "</expr></argument>,
<argument><expr><name>connectname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>OK</name> != <call><name>ap_proxy_checkproxyblock2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>connectname</name></expr></argument>, <argument><expr><name>connect_addr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>,
<argument><expr>"Connect to remote machine blocked"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>backend</name> = (<name>proxy_conn_rec</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_ftp_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>backend</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>ap_proxy_acquire_connection</name><argument_list>(<argument><expr>"FTP"</expr></argument>, <argument><expr>&amp;<name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>backend</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr>"FTP"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>addr</name></name> = <name>connect_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_ftp_module</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_proxy_connect_backend</name><argument_list>(<argument><expr>"FTP"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01039</expr></argument>)</argument_list></call>
"an error occurred creating a new connection to %pI (%s)"</expr></argument>,
<argument><expr><name>connect_addr</name></expr></argument>, <argument><expr><name>connectname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>backend</name>-&gt;<name>connection</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>ap_proxy_connection_create</name><argument_list>(<argument><expr>"FTP"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>origin</name> = <name><name>backend</name>-&gt;<name>connection</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sock</name> = <name><name>backend</name>-&gt;<name>sock</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"control connection complete"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == 120</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>secs_str</name> <init>= <expr><name>ftpmessage</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>secs</name></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>secs_str</name></expr>)</condition>
<if>if <condition>(<expr>(<name>secs_str</name>==<name>ftpmessage</name> || <call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>secs_str</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call>) &amp;&amp;
<call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>secs_str</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if></while>
<if>if <condition>(<expr>*<name>secs_str</name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>secs</name> = <call><name>atol</name><argument_list>(<argument><expr><name>secs_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Retry-After"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%lu"</expr></argument>, <argument><expr><call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr>60 * <name>secs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> != 220</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"USER "</expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == 530</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ftp_unauthorized</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> != 230 &amp;&amp; <name>rc</name> != 331</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == 331</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>password</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ftp_unauthorized</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"PASS "</expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == 332</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_UNAUTHORIZED</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Need account for login: "</expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == 530</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ftp_unauthorized</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> != 230 &amp;&amp; <name>rc</name> != 202</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"Directory-README"</expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"%2f"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> += 3</expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>path</name> == '/'</expr>)</condition>
<expr_stmt><expr>++<name>path</name></expr>;</expr_stmt></while>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr>"CWD /" <name>CRLF</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then>
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>strp</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>strp</name> == <name>NULL</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr>*<name>strp</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>decodeenc</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>,
<argument><expr>"Use of /%2f is only allowed at the base directory"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"CWD "</expr></argument>,
<argument><expr><call><name>ftp_escape_globbingchars</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fdconf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>strp</name> = '/'</expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == 550</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_NOT_FOUND</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> != 250</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>path</name> = <name>strp</name> + 1</expr>;</expr_stmt>
}</block></for>
<block>{
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>data_port</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr>"EPSV" <name>CRLF</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> != 229 &amp;&amp; <name>rc</name> != 500 &amp;&amp; <name>rc</name> != 501 &amp;&amp; <name>rc</name> != 502</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rc</name> == 229</expr>)</condition><then> <block>{
<expr_stmt><expr><name>data_port</name> = <call><name>parse_epsv_reply</name><argument_list>(<argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>data_port</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>remote_addr</name></decl>, <decl><type ref="prev"/><name>epsv_addr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"EPSV contacting remote host on port %d"</expr></argument>, <argument><expr><name>data_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_addr_get</name><argument_list>(<argument><expr>&amp;<name>remote_addr</name></expr></argument>, <argument><expr><name>APR_REMOTE</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>epsv_addr</name> = *<name>remote_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>epsv_addr</name>.<name>port</name></name> = <name>data_port</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IPV6</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>epsv_addr</name>.<name>family</name></name> == <name>APR_INET6</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>epsv_addr</name>.<name>sa</name>.<name>sin6</name>.<name>sin6_port</name></name> = <call><name>htons</name><argument_list>(<argument><expr><name>data_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr_stmt><expr><name><name>epsv_addr</name>.<name>sa</name>.<name>sin</name>.<name>sin_port</name></name> = <call><name>htons</name><argument_list>(<argument><expr><name>data_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr>&amp;<name>data_sock</name></expr></argument>, <argument><expr><name><name>epsv_addr</name>.<name>family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01040</expr></argument>)</argument_list></call>
"could not establish socket for client data connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>recv_buffer_size</name></name> &gt; 0
&amp;&amp; (<name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name>data_sock</name></expr></argument>, <argument><expr><name>APR_SO_RCVBUF</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>recv_buffer_size</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01041</expr></argument>)</argument_list></call>
"apr_socket_opt_set(SO_RCVBUF): Failed to "
"set ProxyReceiveBufferSize, using default"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name>data_sock</name></expr></argument>, <argument><expr><name>APR_TCP_NODELAY</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01042</expr></argument>)</argument_list></call>
"apr_socket_opt_set(APR_TCP_NODELAY): "
"Failed to set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_connect</name><argument_list>(<argument><expr><name>data_sock</name></expr></argument>, <argument><expr>&amp;<name>epsv_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01043</expr></argument>)</argument_list></call>
"EPSV attempt to connect to %pI failed - "
"Firewall/NAT?"</expr></argument>, <argument><expr>&amp;<name>epsv_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"EPSV attempt to connect to %pI failed - firewall/NAT?"</expr></argument>, <argument><expr>&amp;<name>epsv_addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"connected data socket to %pI"</expr></argument>, <argument><expr>&amp;<name>epsv_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>connect</name> = 1</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></then></if></else></if>
}</block>
<if>if <condition>(<expr>!<name>connect</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr>"PASV" <name>CRLF</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> != 227 &amp;&amp; <name>rc</name> != 502</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rc</name> == 227</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h0</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>h3</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>pstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tok_cntx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pstr</name> = <name>ftpmessage</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pstr</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr>&amp;<name>tok_cntx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pstr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*(<name>pstr</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>)</argument_list></call> + 1) == '='</expr>)</condition><then> <block>{
<expr_stmt><expr><name>pstr</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>)</argument_list></call> + 2</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>pstr</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"("</expr></argument>, <argument><expr>&amp;<name>tok_cntx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pstr</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>pstr</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>")"</expr></argument>, <argument><expr>&amp;<name>tok_cntx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>pstr</name> != <name>NULL</name> &amp;&amp; (<call><name>sscanf</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>,
<argument><expr>"%d,%d,%d,%d,%d,%d"</expr></argument>, <argument><expr>&amp;<name>h3</name></expr></argument>, <argument><expr>&amp;<name>h2</name></expr></argument>, <argument><expr>&amp;<name>h1</name></expr></argument>, <argument><expr>&amp;<name>h0</name></expr></argument>, <argument><expr>&amp;<name>p1</name></expr></argument>, <argument><expr>&amp;<name>p0</name></expr></argument>)</argument_list></call> == 6)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>pasv_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>pasvport</name> <init>= <expr>(<name>p1</name> &lt;&lt; 8) + <name>p0</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01044</expr></argument>)</argument_list></call>
"PASV contacting host %d.%d.%d.%d:%d"</expr></argument>,
<argument><expr><name>h3</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>, <argument><expr><name>pasvport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr>&amp;<name>data_sock</name></expr></argument>, <argument><expr><name><name>connect_addr</name>-&gt;<name>family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01045</expr></argument>)</argument_list></call>
"error creating PASV socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>recv_buffer_size</name></name> &gt; 0
&amp;&amp; (<name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name>data_sock</name></expr></argument>, <argument><expr><name>APR_SO_RCVBUF</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>recv_buffer_size</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01046</expr></argument>)</argument_list></call>
"apr_socket_opt_set(SO_RCVBUF): Failed to set ProxyReceiveBufferSize, using default"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name>data_sock</name></expr></argument>, <argument><expr><name>APR_TCP_NODELAY</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01047</expr></argument>)</argument_list></call>
"apr_socket_opt_set(APR_TCP_NODELAY): "
"Failed to set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>pasv_addr</name></expr></argument>, <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%d.%d.%d.%d"</expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>connect_addr</name>-&gt;<name>family</name></name></expr></argument>, <argument><expr><name>pasvport</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_connect</name><argument_list>(<argument><expr><name>data_sock</name></expr></argument>, <argument><expr><name>pasv_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01048</expr></argument>)</argument_list></call>
"PASV attempt to connect to %pI failed - Firewall/NAT?"</expr></argument>, <argument><expr><name>pasv_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"PASV attempt to connect to %pI failed - firewall/NAT?"</expr></argument>, <argument><expr><name>pasv_addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>connect</name> = 1</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>connect</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>local_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>local_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>local_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h0</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>h3</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr>&amp;<name>local_sock</name></expr></argument>, <argument><expr><name><name>connect_addr</name>-&gt;<name>family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01049</expr></argument>)</argument_list></call>
"error creating local socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_socket_addr_get</name><argument_list>(<argument><expr>&amp;<name>local_addr</name></expr></argument>, <argument><expr><name>APR_LOCAL</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>local_port</name> = <name><name>local_addr</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_sockaddr_ip_get</name><argument_list>(<argument><expr>&amp;<name>local_ip</name></expr></argument>, <argument><expr><name>local_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name>local_sock</name></expr></argument>, <argument><expr><name>APR_SO_REUSEADDR</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_OSD_POSIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01050</expr></argument>)</argument_list></call>
"error setting reuseaddr option"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<expr_stmt><expr><call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>local_addr</name></expr></argument>, <argument><expr><name>local_ip</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr><name>local_port</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_bind</name><argument_list>(<argument><expr><name>local_sock</name></expr></argument>, <argument><expr><name>local_addr</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01051</expr></argument>)</argument_list></call>
"error binding to ftp data socket %pI"</expr></argument>, <argument><expr><name>local_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_listen</name><argument_list>(<argument><expr><name>local_sock</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01052</expr></argument>)</argument_list></call>
"error listening to ftp data socket %pI"</expr></argument>, <argument><expr><name>local_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>local_ip</name> &amp;&amp; (<call><name>sscanf</name><argument_list>(<argument><expr><name>local_ip</name></expr></argument>,
<argument><expr>"%d.%d.%d.%d"</expr></argument>, <argument><expr>&amp;<name>h3</name></expr></argument>, <argument><expr>&amp;<name>h2</name></expr></argument>, <argument><expr>&amp;<name>h1</name></expr></argument>, <argument><expr>&amp;<name>h0</name></expr></argument>)</argument_list></call> == 4)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>p1</name> = (<name>local_port</name> &gt;&gt; 8)</expr>;</expr_stmt>
<expr_stmt><expr><name>p0</name> = (<name>local_port</name> &amp; 0xFF)</expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"PORT %d,%d,%d,%d,%d,%d" <name>CRLF</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> != 200</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>use_port</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_NOT_IMPLEMENTED</name></expr></argument>,
<argument><expr>"Connect to IPV6 ftp server using EPRT not supported. Enable EPSV."</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>len</name> = <call><name>decodeenc</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>,
<argument><expr>"Use of /%2f is only allowed at the base directory"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> == 0 || (<call><name>ftp_check_globbingchars</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>fdconf</name>-&gt;<name>ftp_list_on_wildcard</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>dirlisting</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ftp_set_TYPE</name><argument_list>(<argument><expr><name>xfer_type</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"SIZE "</expr></argument>,
<argument><expr><call><name>ftp_escape_globbingchars</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fdconf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rc</name> == 213</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>ftpmessage</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name><name>ftpmessage</name><index>[<expr><name>j</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ftpmessage</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then>
<expr_stmt><expr><name>size</name> = <name>ftpmessage</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>rc</name> == 550</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"SIZE shows this is a directory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dirlisting</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"CWD "</expr></argument>,
<argument><expr><call><name>ftp_escape_globbingchars</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fdconf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == 550</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_NOT_FOUND</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> != 250</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>path</name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 0</expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></else></if>
<expr_stmt><expr><name>cwd</name> = <call><name>ftp_get_PWD</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cwd</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"Directory-PWD"</expr></argument>, <argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>dirlisting</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ftp_set_TYPE</name><argument_list>(<argument><expr>'A'</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> != 0</expr>)</condition><then>
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"LIST "</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>cwd</name> == <name>NULL</name> || <call><name>strchr</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>buf</name> = "LIST -lag" <name>CRLF</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>buf</name> = "LIST" <name>CRLF</name></expr>;</expr_stmt></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ftp_set_TYPE</name><argument_list>(<argument><expr><name>xfer_type</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MDTM</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMEGM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMTOFF</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"MDTM "</expr></argument>, <argument><expr><call><name>ftp_escape_globbingchars</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fdconf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == 213</expr>)</condition><then> <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>YYYY</name><index>[<expr>4+1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>MM</name><index>[<expr>2+1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>DD</name><index>[<expr>2+1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hh</name><index>[<expr>2+1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>mm</name><index>[<expr>2+1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ss</name><index>[<expr>2+1</expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>time_val</name></decl>;</struct>
<if>if <condition>(<expr>6 == <call><name>sscanf</name><argument_list>(<argument><expr><name>ftpmessage</name></expr></argument>, <argument><expr>"%4[0-9]%2[0-9]%2[0-9]%2[0-9]%2[0-9]%2[0-9]"</expr></argument>,
<argument><expr><name><name>time_val</name>.<name>YYYY</name></name></expr></argument>, <argument><expr><name><name>time_val</name>.<name>MM</name></name></expr></argument>, <argument><expr><name><name>time_val</name>.<name>DD</name></name></expr></argument>, <argument><expr><name><name>time_val</name>.<name>hh</name></name></expr></argument>, <argument><expr><name><name>time_val</name>.<name>mm</name></name></expr></argument>, <argument><expr><name><name>time_val</name>.<name>ss</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type>struct <name>tm</name></type> <name>tms</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr>&amp;<name>tms</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr>sizeof <name>tms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tms</name>.<name>tm_year</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name><name>time_val</name>.<name>YYYY</name></name></expr></argument>)</argument_list></call> - 1900</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tms</name>.<name>tm_mon</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name><name>time_val</name>.<name>MM</name></name></expr></argument>)</argument_list></call> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tms</name>.<name>tm_mday</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name><name>time_val</name>.<name>DD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tms</name>.<name>tm_hour</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name><name>time_val</name>.<name>hh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tms</name>.<name>tm_min</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name><name>time_val</name>.<name>mm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tms</name>.<name>tm_sec</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name><name>time_val</name>.<name>ss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMEGM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>mtime</name> = <call><name>timegm</name><argument_list>(<argument><expr>&amp;<name>tms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mtime</name> *= <name>APR_USEC_PER_SEC</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_GMTOFF</name></expr></cpp:elif>
<expr_stmt><expr><name>mtime</name> = <call><name>mktime</name><argument_list>(<argument><expr>&amp;<name>tms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mtime</name> += <name><name>tms</name>.<name>tm_gmtoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mtime</name> *= <name>APR_USEC_PER_SEC</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>mtime</name> = 0L</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"RETR "</expr></argument>, <argument><expr><call><name>ftp_escape_globbingchars</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fdconf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == 550</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"RETR failed, trying LIST instead"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dirlisting</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ftp_set_TYPE</name><argument_list>(<argument><expr>'A'</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"CWD "</expr></argument>,
<argument><expr><call><name>ftp_escape_globbingchars</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fdconf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == 550</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_NOT_FOUND</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> != 250</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cwd</name> = <call><name>ftp_get_PWD</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cwd</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"Directory-PWD"</expr></argument>, <argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>proxy_ftp_command</name><argument_list>(<argument><expr>(<name>cwd</name> == <name>NULL</name> || <call><name>strchr</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> != <name>NULL</name>)
? "LIST -lag" <name>CRLF</name> : "LIST" <name>CRLF</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1 || <name>rc</name> == 421</expr>)</condition><then>
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> != 125 &amp;&amp; <name>rc</name> != 150 &amp;&amp; <name>rc</name> != 226 &amp;&amp; <name>rc</name> != 250</expr>)</condition><then> <block>{
<return>return <expr><call><name>ftp_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = "200 OK"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_rfc822_date</name><argument_list>(<argument><expr><name>dates</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Date"</expr></argument>, <argument><expr><name>dates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Server"</expr></argument>, <argument><expr><call><name>ap_get_server_description</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dirlisting</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"text/html;charset="</expr></argument>,
<argument><expr><name><name>fdconf</name>-&gt;<name>ftp_directory_charset</name></name> ?
<name><name>fdconf</name>-&gt;<name>ftp_directory_charset</name></name> :
"ISO-8859-1"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>xfer_type</name> != 'A' &amp;&amp; <name>size</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Content-Length set to %s"</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>content_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Content-Type set to %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MDTM</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMEGM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMTOFF</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<if>if <condition>(<expr><name>mtime</name> != 0L</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>datestr</name><index>[<expr><name>APR_RFC822_DATE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_rfc822_date</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>, <argument><expr><name>mtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Last-Modified"</expr></argument>, <argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Last-Modified set to %s"</expr></argument>, <argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>dirlisting</name> &amp;&amp; <name><name>r</name>-&gt;<name>content_encoding</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>content_encoding</name></name> != <name>NULL</name> &amp;&amp; <name><name>r</name>-&gt;<name>content_encoding</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Content-Encoding set to %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>use_port</name></expr>)</condition><then> <block>{
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_accept</name><argument_list>(<argument><expr>&amp;<name>data_sock</name></expr></argument>, <argument><expr><name>local_sock</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01053</expr></argument>)</argument_list></call>
"failed to accept data connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_GATEWAY</name></expr>;</return>
}</block></else></if></else></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name>data</name> = <call><name>ap_run_create_connection</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>data_sock</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>id</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>data</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01054</expr></argument>)</argument_list></call>
"an error occurred creating the transfer connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_proxy_ssl_disable</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ap_run_pre_connection</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>OK</name> &amp;&amp; <name>rc</name> != <name>DONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01055</expr></argument>)</argument_list></call>
"pre_connection setup failed (%d)"</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>sent_bodyct</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>dirlisting</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"PROXY_SEND_DIR"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>finish</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"start body send"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>input_filters</name></name></expr></argument>,
<argument><expr><name>bb</name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>io_buffer_size</name></name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGING</name></expr></cpp:if>
<block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01056</expr></argument>)</argument_list></call>
"proxy: readbytes: %#x"</expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_flush_conn</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>data_sock</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>data_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>data_sock</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01057</expr></argument>)</argument_list></call>
"data connection closed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>finish</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>FALSE</name> == <name>finish</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>
|| <name><name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>finish</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>TRUE</name> == <name>finish</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"end body send"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>data_sock</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_flush_conn</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>data_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01058</expr></argument>)</argument_list></call> "data connection closed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>proxy_ftp_command</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_ftp_command</name><argument_list>(<argument><expr>"QUIT" <name>CRLF</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>&amp;<name>ftpmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_flush_conn</name><argument_list>(<argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_ftp_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_proxy_ftp_register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>proxy_hook_scheme_handler</name><argument_list>(<argument><expr><name>proxy_ftp_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_hook_canon_handler</name><argument_list>(<argument><expr><name>proxy_ftp_canon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"PROXY_SEND_DIR"</expr></argument>, <argument><expr><name>proxy_send_dir_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ls_regex</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LS_REG_PATTERN</name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>ls_regex</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>proxy_ftp_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyFtpListOnWildcard"</expr></argument>, <argument><expr><name>set_ftp_list_on_wildcard</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Whether wildcard characters in a path cause mod_proxy_ftp to list the files instead of trying to get them. Defaults to on."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyFtpEscapeWildcards"</expr></argument>, <argument><expr><name>set_ftp_escape_wildcards</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Whether the proxy should escape wildcards in paths before sending them to the FTP server. Defaults to on, but most FTP servers will need it turned off if you need to manage paths that contain wildcard characters."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyFtpDirCharset"</expr></argument>, <argument><expr><name>set_ftp_directory_charset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Define the character set for proxied FTP listings"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>proxy_ftp</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_proxy_ftp_dir_config</name></expr>,
<expr><name>merge_proxy_ftp_dir_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>proxy_ftp_cmds</name></expr>,
<expr><name>ap_proxy_ftp_register_hook</name></expr>
}</block></expr>;</expr_stmt>
</unit>
