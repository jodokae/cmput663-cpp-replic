<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/mappers/mod_speling.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WANT_BASENAME_MATCH</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>speling_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>case_only</name></decl>;</decl_stmt>
}</block></struct></type> <name>spconfig</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>mkconfig</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>spconfig</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>spconfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>enabled</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>case_only</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_mconfig_for_server</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>mkconfig</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_mconfig_for_directory</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dir</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>mkconfig</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>speling_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CheckSpelling"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>spconfig</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_OPTIONS</name></expr></argument>,
<argument><expr>"whether or not to fix miscapitalized/misspelled requests"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CheckCaseOnly"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>spconfig</name></expr></argument>, <argument><expr><name>case_only</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_OPTIONS</name></expr></argument>,
<argument><expr>"whether or not to fix only miscapitalized requests"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><enum>enum <block>{
<decl><name>SP_IDENTICAL</name> <init>= <expr>0</expr></init></decl>,
<decl><name>SP_MISCAPITALIZED</name> <init>= <expr>1</expr></init></decl>,
<decl><name>SP_TRANSPOSITION</name> <init>= <expr>2</expr></init></decl>,
<decl><name>SP_MISSINGCHAR</name> <init>= <expr>3</expr></init></decl>,
<decl><name>SP_EXTRACHAR</name> <init>= <expr>4</expr></init></decl>,
<decl><name>SP_SIMPLETYPO</name> <init>= <expr>5</expr></init></decl>,
<decl><name>SP_VERYDIFFERENT</name> <init>= <expr>6</expr></init></decl>
}</block></enum></type> <name>sp_reason</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>sp_reason_str</name><index>[]</index></name> <init>= <expr><block>{
<expr>"identical"</expr>,
<expr>"miscapitalized"</expr>,
<expr>"transposed characters"</expr>,
<expr>"character missing"</expr>,
<expr>"extra character"</expr>,
<expr>"mistyped character"</expr>,
<expr>"common basename"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sp_reason</name></type> <name>quality</name></decl>;</decl_stmt>
}</block></struct></type> <name>misspelled_file</name>;</typedef>
<function><type><specifier>static</specifier> <name>sp_reason</name></type> <name>spdist</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl></param>)</parameter_list> <block>{
<for>for (<init>;</init> <condition><expr><call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call> == <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>t</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>t</name>++</expr>, <expr><name>s</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>*<name>t</name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr><name>SP_MISCAPITALIZED</name></expr>;</return>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>*<name>s</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>t</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>s</name><index>[<expr>1</expr>]</index></name> &amp;&amp; <name><name>t</name><index>[<expr>1</expr>]</index></name> &amp;&amp; <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call> == <call><name>apr_tolower</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>t</name></expr></argument>)</argument_list></call> == <call><name>apr_tolower</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name> + 2</expr></argument>, <argument><expr><name>t</name> + 2</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>SP_TRANSPOSITION</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name> + 1</expr></argument>, <argument><expr><name>t</name> + 1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>SP_SIMPLETYPO</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name> + 1</expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>SP_EXTRACHAR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>*<name>t</name> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name> + 1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>SP_MISSINGCHAR</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>SP_VERYDIFFERENT</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sort_by_quality</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>left</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>rite</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call>(<name>int</name>) <argument_list>(<argument><expr>((<name>misspelled_file</name> *) <name>left</name>)-&gt;<name>quality</name></expr></argument>)</argument_list></call>
- <call>(<name>int</name>) <argument_list>(<argument><expr>((<name>misspelled_file</name> *) <name>rite</name>)-&gt;<name>quality</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_speling</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>spconfig</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>good</name></decl>, *<decl><type ref="prev"/><name>bad</name></decl>, *<decl><type ref="prev"/><name>postgood</name></decl>, *<decl><type ref="prev"/><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>dirent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filoc</name></decl>, <decl><type ref="prev"/><name>dotloc</name></decl>, <decl><type ref="prev"/><name>urlen</name></decl>, <decl><type ref="prev"/><name>pglen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>candidates</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dir_t</name> *</type><name>dir</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>speling_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>cfg</name>-&gt;<name>enabled</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_NOFILE</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> || !<name><name>r</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>filoc</name> = <call><name>ap_rind</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>filoc</name> == -1 || <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>good</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>filoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bad</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name> + <name>filoc</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>postgood</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>bad</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>urlen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pglen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>postgood</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>postgood</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name> + (<name>urlen</name> - <name>pglen</name>)</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>url</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>(<name>urlen</name> - <name>pglen</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_dir_open</name><argument_list>(<argument><expr>&amp;<name>dir</name></expr></argument>, <argument><expr><name>good</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>candidates</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>misspelled_file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dotloc</name> = <call><name>ap_ind</name><argument_list>(<argument><expr><name>bad</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dotloc</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>dotloc</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>bad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr><call><name>apr_dir_read</name><argument_list>(<argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr><name>APR_FINFO_DIRENT</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>sp_reason</name></type> <name>q</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>bad</name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>bad</name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>misspelled_file</name> *</type><name>sp_new</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sp_new</name> = (<name>misspelled_file</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp_new</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp_new</name>-&gt;<name>quality</name></name> = <name>SP_MISCAPITALIZED</name></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr>(<name><name>cfg</name>-&gt;<name>case_only</name></name> == 0)
&amp;&amp; ((<name>q</name> = <call><name>spdist</name><argument_list>(<argument><expr><name>bad</name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call>) != <name>SP_VERYDIFFERENT</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>misspelled_file</name> *</type><name>sp_new</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sp_new</name> = (<name>misspelled_file</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp_new</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp_new</name>-&gt;<name>quality</name></name> = <name>q</name></expr>;</expr_stmt>
}</block></then>
<else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WANT_BASENAME_MATCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>entloc</name> <init>= <expr><call><name>ap_ind</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>entloc</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>entloc</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>dotloc</name> == <name>entloc</name>)
&amp;&amp; !<call><name>strncasecmp</name><argument_list>(<argument><expr><name>bad</name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr><name>dotloc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>misspelled_file</name> *</type><name>sp_new</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sp_new</name> = (<name>misspelled_file</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp_new</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp_new</name>-&gt;<name>quality</name></name> = <name>SP_VERYDIFFERENT</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if></else></if></else></if>
}</block></while>
<expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>candidates</name>-&gt;<name>nelts</name></name> != 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>nuri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>misspelled_file</name> *</type><name>variant</name> <init>= <expr>(<name>misspelled_file</name> *) <name><name>candidates</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ref</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Referer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr>(<name>void</name> *) <name><name>candidates</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>candidates</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>misspelled_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sort_by_quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>variant</name><index>[<expr>0</expr>]</index></name>.<name>quality</name> != <name>SP_VERYDIFFERENT</name>
&amp;&amp; (<name><name>candidates</name>-&gt;<name>nelts</name></name> == 1
|| <name><name>variant</name><index>[<expr>0</expr>]</index></name>.<name>quality</name> != <name><name>variant</name><index>[<expr>1</expr>]</index></name>.<name>quality</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>nuri</name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name><name>variant</name><index>[<expr>0</expr>]</index></name>.<name>name</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>query</name></name></expr>)</condition><then>
<expr_stmt><expr><name>nuri</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>nuri</name></expr></argument>, <argument><expr>"?"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>query</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>,
<argument><expr><call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>nuri</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>,
<argument><expr><name>ref</name> ? <call><name>APLOGNO</name><argument_list>(<argument><expr>03224</expr></argument>)</argument_list></call> "Fixed spelling: %s to %s from %s"
: <call><name>APLOGNO</name><argument_list>(<argument><expr>03225</expr></argument>)</argument_list></call> "Fixed spelling: %s to %s%s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>nuri</name></expr></argument>,
<argument><expr>(<name>ref</name> ? <name>ref</name> : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_MOVED_PERMANENTLY</name></expr>;</return>
}</block></then>
<else>else <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>notes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>sub_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>v</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>notes</name> = <name><name>r</name>-&gt;<name>notes</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>p</name> = <name><name>r</name>-&gt;<name/></name>main-&gt;<name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>notes</name> = <name><name>r</name>-&gt;<name/></name>main-&gt;<name>notes</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>sub_pool</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr><name>t</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name><name>candidates</name>-&gt;<name>nelts</name></name> * 8 + 8</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name><name>candidates</name>-&gt;<name>nelts</name></name> * 5</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> =
"The document name you requested (&lt;code&gt;"</expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> =
"&lt;/code&gt;) could not be found on this server.\n"
"However, we found documents with names similar "
"to the one you requested.&lt;p&gt;"
"Available documents:\n&lt;ul&gt;\n"</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>candidates</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>vuri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl>;</decl_stmt>
<expr_stmt><expr><name>reason</name> = <name><name>sp_reason_str</name><index>[<expr><call>(<name>int</name>) <argument_list>(<argument><expr><name><name>variant</name><index>[<expr><name>i</name></expr>]</index></name>.<name>quality</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vuri</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>variant</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>,
<argument><expr>(<name><name>r</name>-&gt;<name>parsed_uri</name>.<name>query</name></name> != <name>NULL</name>) ? "?" : ""</expr></argument>,
<argument><expr>(<name><name>r</name>-&gt;<name>parsed_uri</name>.<name>query</name></name> != <name>NULL</name>)
? <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>query</name></name> : ""</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> = "\""</expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name>vuri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> = "\";\""</expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> = <name>reason</name></expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> = "\""</expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = "&lt;li&gt;&lt;a href=\""</expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name>vuri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = "\"&gt;"</expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name>vuri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = "&lt;/a&gt; ("</expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = <name>reason</name></expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = ")\n"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt; 0 &amp;&amp; <name>i</name> &lt; <name><name>candidates</name>-&gt;<name>nelts</name></name> - 1
&amp;&amp; <name><name>variant</name><index>[<expr><name>i</name></expr>]</index></name>.<name>quality</name> != <name>SP_VERYDIFFERENT</name>
&amp;&amp; <name><name>variant</name><index>[<expr><name>i</name> + 1</expr>]</index></name>.<name>quality</name> == <name>SP_VERYDIFFERENT</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> =
"&lt;/ul&gt;\nFurthermore, the following related "
"documents were found:\n&lt;ul&gt;\n"</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = "&lt;/ul&gt;\n"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>ref</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> =
"Please consider informing the owner of the "
"referring page &lt;tt&gt;"</expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> =
"&lt;/tt&gt; about the broken link.\n"</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>notes</name></expr></argument>, <argument><expr>"variant-list"</expr></argument>, <argument><expr><call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"VARIANTS"</expr></argument>,
<argument><expr><call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name>ref</name> ? <call><name>APLOGNO</name><argument_list>(<argument><expr>03226</expr></argument>)</argument_list></call> "Spelling fix: %s: %d candidates from %s"
: <call><name>APLOGNO</name><argument_list>(<argument><expr>03227</expr></argument>)</argument_list></call> "Spelling fix: %s: %d candidates%s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>candidates</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr>(<name>ref</name> ? <name>ref</name> : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_MULTIPLE_CHOICES</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>check_speling</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>speling</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_mconfig_for_directory</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>create_mconfig_for_server</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>speling_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
