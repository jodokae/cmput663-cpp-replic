<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/examples/mod_example_hooks.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNIX_SUEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unixd.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>x_cfg</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cmode</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_MODE_SERVER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_MODE_DIRECTORY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_MODE_COMBO</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>local</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>congenital</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>trace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>loc</name></decl>;</decl_stmt>
}</block></struct></type> <name>x_cfg</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>trace</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>example_hooks_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>x_cfg</name> *</type><name>our_dconfig</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>x_cfg</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>example_hooks_module</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
static x_cfg *our_sconfig(const server_rec *s) {
return (x_cfg *) ap_get_module_config(s-&gt;module_config, &amp;example_hooks_module);
}
static x_cfg *our_rconfig(const request_rec *r) {
return (x_cfg *) ap_get_module_config(r-&gt;request_config, &amp;example_hooks_module);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>x_cfg</name> *</type><name>our_cconfig</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>x_cfg</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>example_hooks_module</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>EXAMPLE_LOG_EACH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXAMPLE_LOG_EACH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXAMPLE_LOG_EACH</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>example_log_each</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>s</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02991</expr></argument>)</argument_list></call>
"mod_example_hooks: %s"</expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"mod_example_hooks traced in non-loggable "
"context: %s\n"</expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_startup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>x_cfg</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sofar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>where</name></decl>, *<decl><type ref="prev"/><name>addon</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXAMPLE_LOG_EACH</name></expr></cpp:if>
<expr_stmt><expr><call><name>example_log_each</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>where</name> = (<name>mconfig</name> != <name>NULL</name>) ? <name><name>mconfig</name>-&gt;<name>loc</name></name> : "nowhere"</expr>;</expr_stmt>
<expr_stmt><expr><name>where</name> = (<name>where</name> != <name>NULL</name>) ? <name>where</name> : ""</expr>;</expr_stmt>
<expr_stmt><expr><name>addon</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>" &lt;li&gt;\n"
" &lt;dl&gt;\n"
" &lt;dt&gt;&lt;samp&gt;"</expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr>"&lt;/samp&gt;&lt;/dt&gt;\n"
" &lt;dd&gt;&lt;samp&gt;["</expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr>"]&lt;/samp&gt;&lt;/dd&gt;\n"
" &lt;/dl&gt;\n"
" &lt;/li&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sofar</name> = (<name>trace</name> == <name>NULL</name>) ? "" : <name>trace</name></expr>;</expr_stmt>
<expr_stmt><expr><name>trace</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sofar</name></expr></argument>, <argument><expr><name>addon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE_NOTE</name></cpp:macro> <cpp:value>"example-hooks-trace"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_request</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>trace_copy</name></decl>, *<decl><type ref="prev"/><name>sofar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>addon</name></decl>, *<decl><type ref="prev"/><name>where</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXAMPLE_LOG_EACH</name></expr></cpp:if>
<expr_stmt><expr><call><name>example_log_each</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name>sofar</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>TRACE_NOTE</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sofar</name> = ""</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>cfg</name> = <call><name>our_dconfig</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>where</name> = (<name>cfg</name> != <name>NULL</name>) ? <name><name>cfg</name>-&gt;<name>loc</name></name> : "nowhere"</expr>;</expr_stmt>
<expr_stmt><expr><name>where</name> = (<name>where</name> != <name>NULL</name>) ? <name>where</name> : ""</expr>;</expr_stmt>
<expr_stmt><expr><name>addon</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>" &lt;li&gt;\n"
" &lt;dl&gt;\n"
" &lt;dt&gt;&lt;samp&gt;"</expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr>"&lt;/samp&gt;&lt;/dt&gt;\n"
" &lt;dd&gt;&lt;samp&gt;["</expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr>"]&lt;/samp&gt;&lt;/dd&gt;\n"
" &lt;/dl&gt;\n"
" &lt;/li&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trace_copy</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sofar</name></expr></argument>, <argument><expr><name>addon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>TRACE_NOTE</name></expr></argument>, <argument><expr><name>trace_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_NOTE</name></cpp:macro> <cpp:value>"example-hooks-connection"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>trace_copy</name></decl>, *<decl><type ref="prev"/><name>sofar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>addon</name></decl>, *<decl><type ref="prev"/><name>where</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXAMPLE_LOG_EACH</name></expr></cpp:if>
<expr_stmt><expr><call><name>example_log_each</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>cfg</name> = <call><name>our_cconfig</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>where</name> = (<name>cfg</name> != <name>NULL</name>) ? <name><name>cfg</name>-&gt;<name>loc</name></name> : "nowhere"</expr>;</expr_stmt>
<expr_stmt><expr><name>where</name> = (<name>where</name> != <name>NULL</name>) ? <name>where</name> : ""</expr>;</expr_stmt>
<expr_stmt><expr><name>addon</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>" &lt;li&gt;\n"
" &lt;dl&gt;\n"
" &lt;dt&gt;&lt;samp&gt;"</expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr>"&lt;/samp&gt;&lt;/dt&gt;\n"
" &lt;dd&gt;&lt;samp&gt;["</expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr>"]&lt;/samp&gt;&lt;/dd&gt;\n"
" &lt;/dl&gt;\n"
" &lt;/li&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>CONN_NOTE</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sofar</name> = (<name>data</name> == <name>NULL</name>) ? "" : (const <name>char</name> *) <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>trace_copy</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sofar</name></expr></argument>, <argument><expr><name>addon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_set</name><argument_list>(<argument><expr>(const <name>void</name> *) <name>trace_copy</name></expr></argument>, <argument><expr><name>CONN_NOTE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_nocontext</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXAMPLE_LOG_EACH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>cmd_example</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>x_cfg</name> *</type><name>cfg</name> <init>= <expr>(<name>x_cfg</name> *) <name>mconfig</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>local</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr>"cmd_example()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>x_create_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dirspec</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>x_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dname</name> <init>= <expr><name>dirspec</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cfg</name> = (<name>x_cfg</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>local</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>congenital</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>cmode</name></name> = <name>CONFIG_MODE_DIRECTORY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dname</name> = (<name>dname</name> != <name>NULL</name>) ? <name>dname</name> : ""</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>loc</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"DIR("</expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr>")"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>note</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"x_create_dir_config(p == %pp, dirspec == %s)"</expr></argument>,
<argument><expr>(<name>void</name>*) <name>p</name></expr></argument>, <argument><expr><name>dirspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *) <name>cfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>x_merge_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>parent_conf</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>newloc_conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>x_cfg</name> *</type><name>merged_config</name> <init>= <expr>(<name>x_cfg</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x_cfg</name> *</type><name>pconf</name> <init>= <expr>(<name>x_cfg</name> *) <name>parent_conf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x_cfg</name> *</type><name>nconf</name> <init>= <expr>(<name>x_cfg</name> *) <name>newloc_conf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>merged_config</name>-&gt;<name>local</name></name> = <name><name>nconf</name>-&gt;<name>local</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merged_config</name>-&gt;<name>loc</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>nconf</name>-&gt;<name>loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merged_config</name>-&gt;<name>congenital</name></name> = (<name><name>pconf</name>-&gt;<name>congenital</name></name> | <name><name>pconf</name>-&gt;<name>local</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>merged_config</name>-&gt;<name>cmode</name></name> =
(<name><name>pconf</name>-&gt;<name>cmode</name></name> == <name><name>nconf</name>-&gt;<name>cmode</name></name>) ? <name><name>pconf</name>-&gt;<name>cmode</name></name> : <name>CONFIG_MODE_COMBO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>note</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"x_merge_dir_config(p == %pp, parent_conf == "
"%pp, newloc_conf == %pp)"</expr></argument>, <argument><expr>(<name>void</name>*) <name>p</name></expr></argument>,
<argument><expr>(<name>void</name>*) <name>parent_conf</name></expr></argument>, <argument><expr>(<name>void</name>*) <name>newloc_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>merged_config</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *) <name>merged_config</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>x_create_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>x_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>sname</name> <init>= <expr><name><name>s</name>-&gt;<name>server_hostname</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cfg</name> = (<name>x_cfg</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>local</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>congenital</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>cmode</name></name> = <name>CONFIG_MODE_SERVER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sname</name> = (<name>sname</name> != <name>NULL</name>) ? <name>sname</name> : ""</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>loc</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"SVR("</expr></argument>, <argument><expr><name>sname</name></expr></argument>, <argument><expr>")"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr>"x_create_server_config()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *) <name>cfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>x_merge_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>server1_conf</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>server2_conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>x_cfg</name> *</type><name>merged_config</name> <init>= <expr>(<name>x_cfg</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x_cfg</name> *</type><name>s1conf</name> <init>= <expr>(<name>x_cfg</name> *) <name>server1_conf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x_cfg</name> *</type><name>s2conf</name> <init>= <expr>(<name>x_cfg</name> *) <name>server2_conf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>merged_config</name>-&gt;<name>cmode</name></name> =
(<name><name>s1conf</name>-&gt;<name>cmode</name></name> == <name><name>s2conf</name>-&gt;<name>cmode</name></name>) ? <name><name>s1conf</name>-&gt;<name>cmode</name></name> : <name>CONFIG_MODE_COMBO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merged_config</name>-&gt;<name>local</name></name> = <name><name>s2conf</name>-&gt;<name>local</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merged_config</name>-&gt;<name>congenital</name></name> = (<name><name>s1conf</name>-&gt;<name>congenital</name></name> | <name><name>s1conf</name>-&gt;<name>local</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>merged_config</name>-&gt;<name>loc</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s2conf</name>-&gt;<name>loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>note</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"x_merge_server_config(\""</expr></argument>, <argument><expr><name><name>s1conf</name>-&gt;<name>loc</name></name></expr></argument>, <argument><expr>"\",\""</expr></argument>,
<argument><expr><name><name>s2conf</name>-&gt;<name>loc</name></name></expr></argument>, <argument><expr>"\")"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>merged_config</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *) <name>merged_config</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"x_pre_config()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_check_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"x_check_config()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>x_test_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Example module configuration test routine\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"x_test_config()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_open_logs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"x_open_logs()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"x_post_config()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>x_child_exit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>sname</name> <init>= <expr><name><name>s</name>-&gt;<name>server_hostname</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sname</name> = (<name>sname</name> != <name>NULL</name>) ? <name>sname</name> : ""</expr>;</expr_stmt>
<expr_stmt><expr><name>note</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"x_child_exit("</expr></argument>, <argument><expr><name>sname</name></expr></argument>, <argument><expr>")"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>x_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>sname</name> <init>= <expr><name><name>s</name>-&gt;<name>server_hostname</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sname</name> = (<name>sname</name> != <name>NULL</name>) ? <name>sname</name> : ""</expr>;</expr_stmt>
<expr_stmt><expr><name>note</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"x_child_init("</expr></argument>, <argument><expr><name>sname</name></expr></argument>, <argument><expr>")"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_startup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>x_child_exit</name></expr></argument>, <argument><expr><name>x_child_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>x_http_scheme</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_http_scheme()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_port_t</name></type> <name>x_default_port</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_default_port()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>x_insert_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_insert_filter()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>x_insert_error_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_insert_error_filter()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>x_cfg</name> *</type><name>dcfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>conn_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dcfg</name> = <call><name>our_dconfig</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>note</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"x_handler(), handler is \""</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"example-hooks-handler"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/html"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name>DOCTYPE_HTML_3_2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;HTML&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;HEAD&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;TITLE&gt;mod_example_hooks Module Content-Handler Output\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/TITLE&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/HEAD&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;BODY&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;H1&gt;&lt;SAMP&gt;mod_example_hooks&lt;/SAMP&gt; Module Content-Handler Output\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/H1&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" Apache HTTP Server version: \"%s\"\n"</expr></argument>,
<argument><expr><call><name>ap_get_server_banner</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;BR&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" Server built: \"%s\"\n"</expr></argument>, <argument><expr><call><name>ap_get_server_built</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" The format for the callback trace is:\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;DL&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;DT&gt;&lt;EM&gt;n&lt;/EM&gt;.&lt;SAMP&gt;&amp;lt;routine-name&amp;gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"(&amp;lt;routine-data&amp;gt;)&lt;/SAMP&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/DT&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;DD&gt;&lt;SAMP&gt;[&amp;lt;applies-to&amp;gt;]&lt;/SAMP&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/DD&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/DL&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" The &lt;SAMP&gt;&amp;lt;routine-data&amp;gt;&lt;/SAMP&gt; is supplied by\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" the routine when it requests the trace,\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" and the &lt;SAMP&gt;&amp;lt;applies-to&amp;gt;&lt;/SAMP&gt; is extracted\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" from the configuration record at the time of the trace.\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;STRONG&gt;SVR()&lt;/STRONG&gt; indicates a server environment\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" (blank means the main or default server, otherwise it's\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" the name of the VirtualHost); &lt;STRONG&gt;DIR()&lt;/STRONG&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" indicates a location in the URL or filesystem\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" namespace.\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;H2&gt;Startup callbacks so far:&lt;/H2&gt;\n &lt;OL&gt;\n%s &lt;/OL&gt;\n"</expr></argument>,
<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;H2&gt;Connection-specific callbacks so far:&lt;/H2&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>conn_data</name></expr></argument>, <argument><expr><name>CONN_NOTE</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> == <name>APR_SUCCESS</name>) &amp;&amp; <name>conn_data</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;OL&gt;\n%s &lt;/OL&gt;\n"</expr></argument>, <argument><expr>(<name>char</name> *) <name>conn_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;P&gt;No connection-specific callback information was "
"retrieved.&lt;/P&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;H2&gt;Request-specific callbacks so far:&lt;/H2&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;OL&gt;\n%s &lt;/OL&gt;\n"</expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>TRACE_NOTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;H2&gt;Environment for &lt;EM&gt;this&lt;/EM&gt; call:&lt;/H2&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;UL&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;LI&gt;Applies-to: &lt;SAMP&gt;%s&lt;/SAMP&gt;\n &lt;/LI&gt;\n"</expr></argument>, <argument><expr><name><name>dcfg</name>-&gt;<name>loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;LI&gt;\"Example\" directive declared here: %s\n &lt;/LI&gt;\n"</expr></argument>,
<argument><expr>(<name><name>dcfg</name>-&gt;<name>local</name></name> ? "YES" : "NO")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;LI&gt;\"Example\" inherited: %s\n &lt;/LI&gt;\n"</expr></argument>,
<argument><expr>(<name><name>dcfg</name>-&gt;<name>congenital</name></name> ? "YES" : "NO")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/UL&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/BODY&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/HTML&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_quick_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>lookup_uri</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_quick_handler()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_pre_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>void</name> *</type><name>csd</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>note</name></decl>;</decl_stmt>
<expr_stmt><expr><name>note</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"x_pre_connection(c = %pp, p = %pp)"</expr></argument>,
<argument><expr>(<name>void</name>*) <name>c</name></expr></argument>, <argument><expr>(<name>void</name>*) <name><name>c</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_process_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>"x_process_connection()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>x_pre_read_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_pre_read_request()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_post_read_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_post_read_request()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_translate_name</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_translate_name()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_map_to_storage</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_map_to_storage()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_header_parser</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_header_parser()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_check_access</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_check_access()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_check_authn</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_check_authn()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_check_authz</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_check_authz()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_type_checker</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_type_checker()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_fixups</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_fixups()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_log_transaction</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_log_transaction()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNIX_SUEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>ap_unix_identity_t</name> *</type><name>x_get_suexec_identity</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"x_get_suexec_identity()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>conn_rec</name> *</type><name>x_create_connection</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>server</name></decl></param>,
<param><decl><type><name>apr_socket_t</name> *</type><name>csd</name></decl></param>, <param><decl><type><name>long</name></type> <name>conn_id</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>sbh</name></decl></param>, <param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_nocontext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr>"x_create_connection()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_get_mgmt_items</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_hash_t</name> *</type><name>ht</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_nocontext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr>"x_check_config()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_create_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_nocontext</name><argument_list>( <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr>"x_create_request()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_pre_mpm</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>ap_scoreboard_e</name></type> <name>sb_type</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_nocontext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr>"x_pre_mpm()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x_monitor</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>trace_nocontext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr>"x_monitor()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>x_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>x_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_config</name><argument_list>(<argument><expr><name>x_check_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_test_config</name><argument_list>(<argument><expr><name>x_test_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_open_logs</name><argument_list>(<argument><expr><name>x_open_logs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>x_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>x_child_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>x_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_quick_handler</name><argument_list>(<argument><expr><name>x_quick_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_connection</name><argument_list>(<argument><expr><name>x_pre_connection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_process_connection</name><argument_list>(<argument><expr><name>x_process_connection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_read_request</name><argument_list>(<argument><expr><name>x_pre_read_request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>x_post_read_request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_log_transaction</name><argument_list>(<argument><expr><name>x_log_transaction</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_http_scheme</name><argument_list>(<argument><expr><name>x_http_scheme</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_default_port</name><argument_list>(<argument><expr><name>x_default_port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_translate_name</name><argument_list>(<argument><expr><name>x_translate_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_map_to_storage</name><argument_list>(<argument><expr><name>x_map_to_storage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_header_parser</name><argument_list>(<argument><expr><name>x_header_parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>x_fixups</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_type_checker</name><argument_list>(<argument><expr><name>x_type_checker</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_access</name><argument_list>(<argument><expr><name>x_check_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_authn</name><argument_list>(<argument><expr><name>x_check_authn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_authz</name><argument_list>(<argument><expr><name>x_check_authz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>x_insert_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_error_filter</name><argument_list>(<argument><expr><name>x_insert_error_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNIX_SUEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_hook_get_suexec_identity</name><argument_list>(<argument><expr><name>x_get_suexec_identity</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_hook_create_connection</name><argument_list>(<argument><expr><name>x_create_connection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_get_mgmt_items</name><argument_list>(<argument><expr><name>x_get_mgmt_items</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_create_request</name><argument_list>(<argument><expr><name>x_create_request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_mpm</name><argument_list>(<argument><expr><name>x_pre_mpm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_monitor</name><argument_list>(<argument><expr><name>x_monitor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>x_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_NO_ARGS</name><argument_list>(
<argument><expr>"Example"</expr></argument>,
<argument><expr><name>cmd_example</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_OPTIONS</name></expr></argument>,
<argument><expr>"Example directive - no arguments"</expr></argument>
)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>example_hooks</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>x_create_dir_config</name></expr>,
<expr><name>x_merge_dir_config</name></expr>,
<expr><name>x_create_server_config</name></expr>,
<expr><name>x_merge_server_config</name></expr>,
<expr><name>x_cmds</name></expr>,
<expr><name>x_register_hooks</name></expr>,
}</block></expr>;</expr_stmt>
</unit>
