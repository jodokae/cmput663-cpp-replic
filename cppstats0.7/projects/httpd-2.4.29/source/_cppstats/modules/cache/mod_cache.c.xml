<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/cache/mod_cache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache_storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache_util.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>cache_module</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_cache_generate_key</name></expr></argument>)</argument_list></call> *<name>cache_generate_key</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_filter_rec_t</name> *</type><name>cache_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_filter_rec_t</name> *</type><name>cache_save_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_filter_rec_t</name> *</type><name>cache_save_subreq_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_filter_rec_t</name> *</type><name>cache_out_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_filter_rec_t</name> *</type><name>cache_out_subreq_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_filter_rec_t</name> *</type><name>cache_remove_url_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_filter_rec_t</name> *</type><name>cache_invalidate_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>MOD_CACHE_ENTITY_HEADERS</name><index>[]</index></name> <init>= <expr><block>{
<expr>"Allow"</expr>,
<expr>"Content-Encoding"</expr>,
<expr>"Content-Language"</expr>,
<expr>"Content-Length"</expr>,
<expr>"Content-Location"</expr>,
<expr>"Content-MD5"</expr>,
<expr>"Content-Range"</expr>,
<expr>"Content-Type"</expr>,
<expr>"Last-Modified"</expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cache_quick_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>lookup</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_provider_list</name> *</type><name>providers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>cache_out_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>cache_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>quick</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!(<name>providers</name> = <call><name>cache_get_providers</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cache</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_request_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>size</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>out</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>providers</name></name> = <name>providers</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>ap_cache_check_no_store</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>auth</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Authorization"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>auth</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name></expr>)</condition> <block>{
<case>case <expr><name>M_PUT</name></expr>:
</case><case>case <expr><name>M_POST</name></expr>:
</case><case>case <expr><name>M_DELETE</name></expr>: <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02461</expr></argument>)</argument_list></call>
"PUT/POST/DELETE: Adding CACHE_INVALIDATE filter for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(
<argument><expr><name>cache_invalidate_filter_handle</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block>
</case><case>case <expr><name>M_GET</name></expr>: <block>{
<break>break;</break>
}</block>
</case><default>default : <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02462</expr></argument>)</argument_list></call> "cache: Method '%s' not cacheable by mod_cache, ignoring: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block>
</default>}</block></switch>
<expr_stmt><expr><name>rv</name> = <call><name>cache_select</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> == <name>DECLINED</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>lookup</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>cache_try_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00749</expr></argument>)</argument_list></call> "Adding CACHE_SAVE_SUBREQ filter for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>save_filter</name></name> = <call><name>ap_add_output_filter_handle</name><argument_list>(
<argument><expr><name>cache_save_subreq_filter_handle</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00750</expr></argument>)</argument_list></call> "Adding CACHE_SAVE filter for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>save_filter</name></name> = <call><name>ap_add_output_filter_handle</name><argument_list>(
<argument><expr><name>cache_save_filter_handle</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_pool_userdata_setn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>CACHE_CTX_KEY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00751</expr></argument>)</argument_list></call>
"Adding CACHE_REMOVE_URL filter for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>remove_url_filter</name></name> = <call><name>ap_add_output_filter_handle</name><argument_list>(
<argument><expr><name>cache_remove_url_filter_handle</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00752</expr></argument>)</argument_list></call> "Cache locked for url, not caching "
"response: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>stale_headers</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <name><name>cache</name>-&gt;<name>stale_headers</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>stale_headers</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00753</expr></argument>)</argument_list></call> "Restoring request headers for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <name><name>cache</name>-&gt;<name>stale_headers</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></else></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>cache_run_cache_status</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>AP_CACHE_HIT</name></expr></argument>,
<argument><expr>"cache hit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lookup</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>stale_headers</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00754</expr></argument>)</argument_list></call>
"Restoring request headers."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <name><name>cache</name>-&gt;<name>stale_headers</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_meets_conditions</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>lookup</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>lookup</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_run_insert_filter</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cache_out_handle</name> = <name>cache_out_subreq_filter_handle</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>cache_out_handle</name> = <name>cache_out_filter_handle</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(<argument><expr><name>cache_out_handle</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> = <name><name>r</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>next</name> &amp;&amp; (<name><name>next</name>-&gt;<name>frec</name></name> != <name>cache_out_handle</name>)</expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>out</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>out</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade_fchk</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>out</name></expr></argument>,
<argument><expr>"cache_quick_handler(%s): ap_pass_brigade returned"</expr></argument>,
<argument><expr><name><name>cache</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cache_replace_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>next</name></decl></param>, <param><decl><type><name>ap_filter_rec_t</name> *</type><name>from</name></decl></param>,
<param><decl><type><name>ap_filter_rec_t</name> *</type><name>to</name></decl></param>, <param><decl><type><name>ap_filter_rec_t</name> *</type><name>stop</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>ffrom</name> <init>= <expr><name>NULL</name></expr></init>, *<name>fto</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>next</name> &amp;&amp; <name><name>next</name>-&gt;<name>frec</name></name> != <name>stop</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>next</name>-&gt;<name>frec</name></name> == <name>from</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ffrom</name> = <name>next</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>next</name>-&gt;<name>frec</name></name> == <name>to</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fto</name> = <name>next</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>ffrom</name> &amp;&amp; <name>fto</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ffrom</name>-&gt;<name>frec</name></name> = <name><name>fto</name>-&gt;<name>frec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ffrom</name>-&gt;<name>ctx</name></name> = <name><name>fto</name>-&gt;<name>ctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>fto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ffrom</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>ffrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>ap_filter_t</name> *</type><name>cache_get_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>next</name></decl></param>, <param><decl><type><name>ap_filter_rec_t</name> *</type><name>rec</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr><name>next</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>next</name>-&gt;<name>frec</name></name> == <name>rec</name> &amp;&amp; <name><name>next</name>-&gt;<name>ctx</name></name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>next</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cache_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_provider_list</name> *</type><name>providers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>cache_out_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>cache_save_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>cache_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>quick</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!(<name>providers</name> = <call><name>cache_get_providers</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cache</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_request_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>size</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>out</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>providers</name></name> = <name>providers</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>ap_cache_check_no_store</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name></expr>)</condition> <block>{
<case>case <expr><name>M_PUT</name></expr>:
</case><case>case <expr><name>M_POST</name></expr>:
</case><case>case <expr><name>M_DELETE</name></expr>: <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02463</expr></argument>)</argument_list></call>
"PUT/POST/DELETE: Adding CACHE_INVALIDATE filter for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(
<argument><expr><name>cache_invalidate_filter_handle</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block>
</case><case>case <expr><name>M_GET</name></expr>: <block>{
<break>break;</break>
}</block>
</case><default>default : <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02464</expr></argument>)</argument_list></call> "cache: Method '%s' not cacheable by mod_cache, ignoring: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block>
</default>}</block></switch>
<expr_stmt><expr><name>rv</name> = <call><name>cache_select</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> == <name>DECLINED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>cache_try_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00756</expr></argument>)</argument_list></call> "Adding CACHE_SAVE_SUBREQ filter for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_save_handle</name> = <name>cache_save_subreq_filter_handle</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00757</expr></argument>)</argument_list></call> "Adding CACHE_SAVE filter for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_save_handle</name> = <name>cache_save_filter_handle</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(<argument><expr><name>cache_save_handle</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>cache_replace_filter</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>,
<argument><expr><name>cache_filter_handle</name></expr></argument>, <argument><expr><name>cache_save_handle</name></expr></argument>,
<argument><expr><call><name>ap_get_input_filter_handle</name><argument_list>(<argument><expr>"SUBREQ_CORE"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00758</expr></argument>)</argument_list></call> "Replacing CACHE with CACHE_SAVE "
"filter for %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>save_filter</name></name> = <call><name>cache_get_filter</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>,
<argument><expr><name>cache_save_filter_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_setn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>CACHE_CTX_KEY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00759</expr></argument>)</argument_list></call>
"Adding CACHE_REMOVE_URL filter for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>remove_url_filter</name></name>
= <call><name>ap_add_output_filter_handle</name><argument_list>(
<argument><expr><name>cache_remove_url_filter_handle</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00760</expr></argument>)</argument_list></call> "Cache locked for url, not caching "
"response: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></else></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>cache_run_cache_status</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>AP_CACHE_HIT</name></expr></argument>,
<argument><expr>"cache hit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_meets_conditions</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cache_out_handle</name> = <name>cache_out_subreq_filter_handle</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>cache_out_handle</name> = <name>cache_out_filter_handle</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(<argument><expr><name>cache_out_handle</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>cache_replace_filter</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>cache_filter_handle</name></expr></argument>,
<argument><expr><name>cache_out_handle</name></expr></argument>, <argument><expr><call><name>ap_get_input_filter_handle</name><argument_list>(<argument><expr>"SUBREQ_CORE"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00761</expr></argument>)</argument_list></call> "Replacing CACHE with CACHE_OUT filter for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <name><name>r</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>next</name> &amp;&amp; (<name><name>next</name>-&gt;<name>frec</name></name> != <name>cache_out_handle</name>)</expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>out</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>out</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade_fchk</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr>"cache(%s): ap_pass_brigade returned"</expr></argument>,
<argument><expr><name><name>cache</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cache_out_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_request_rec</name> *</type><name>cache</name> <init>= <expr>(<name>cache_request_rec</name> *)<name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>cache</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00762</expr></argument>)</argument_list></call>
"CACHE/CACHE_OUT filter enabled while caching is disabled, ignoring"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00763</expr></argument>)</argument_list></call>
"cache: running CACHE_OUT filter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name> <init>= <expr><call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ct</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name>-&gt;<name>resp_hdrs</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ct</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name><name>cache</name>-&gt;<name>handle</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>cache</name>-&gt;<name>provider</name>-&gt;<name>recall_body</name></name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_PREPEND</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00764</expr></argument>)</argument_list></call>
"cache: serving %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cache_save_store</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>,
<param><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name> &amp;&amp; !<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>rv</name> = <call><name><name>cache</name>-&gt;<name>provider</name>-&gt;<name>store_body</name></name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00765</expr></argument>)</argument_list></call>
"cache: Cache provider's store_body failed for URI %s"</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_remove_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_PREPEND</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>out</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>out</name></name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name><name>cache</name>-&gt;<name>provider</name>-&gt;<name>commit_entity</name></name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>cache_remove_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>out</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00766</expr></argument>)</argument_list></call>
"cache: Cache provider's store_body returned an "
"empty brigade, but didn't consume all of the "
"input brigade, standing down to prevent a spin"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_remove_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cache_header_cmp</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>left</name></decl></param>,
<param><decl><type><name>apr_table_t</name> *</type><name>right</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>h1</name></decl>, *<decl><type ref="prev"/><name>h2</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>h1</name> = <call><name>cache_table_getm</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call>)
&amp;&amp; (<name>h2</name> = <call><name>cache_table_getm</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call>) &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cache_save_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr>!<name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_request_rec</name> *</type><name>cache</name> <init>= <expr>(<name>cache_request_rec</name> *)<name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_control_t</name></type> <name>control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cc_out</name></decl>, *<decl><type ref="prev"/><name>cl</name></decl>, *<decl><type ref="prev"/><name>pragma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>exps</name></decl>, *<decl><type ref="prev"/><name>lastmods</name></decl>, *<decl><type ref="prev"/><name>dates</name></decl>, *<decl><type ref="prev"/><name>etag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>exp</name></decl>, <decl><type ref="prev"/><name>date</name></decl>, <decl><type ref="prev"/><name>lastmod</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>size</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_info</name> *</type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl>, **<decl><type ref="prev"/><name>eh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>query</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>cache_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>cache</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00767</expr></argument>)</argument_list></call>
"CACHE/CACHE_SAVE filter enabled while caching is disabled, ignoring"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>reason</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>block_response</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>in_checked</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>cache_save_store</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>stale_on_error</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>status</name></name> &gt;= <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>remove_url_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>stale_handle</name></name>
&amp;&amp; !<name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>control</name>.<name>must_revalidate</name></name>
&amp;&amp; !<name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>control</name>.<name>proxy_revalidate</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>warn_head</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>handle</name></name> = <name><name>cache</name>-&gt;<name>stale_handle</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>frec</name></name> = <name>cache_out_subreq_filter_handle</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>frec</name></name> = <name>cache_out_filter_handle</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>resp_hdrs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(
<argument><expr><name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>resp_hdrs</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>warn_head</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Warning"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>warn_head</name> == <name>NULL</name>) || ((<name>warn_head</name> != <name>NULL</name>)
&amp;&amp; (<call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>warn_head</name></expr></argument>, <argument><expr>"111"</expr></argument>)</argument_list></call> == <name>NULL</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Warning"</expr></argument>,
<argument><expr>"111 Revalidation failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>cache_run_cache_status</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>AP_CACHE_HIT</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"cache hit: %d status; stale content returned"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_remove_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>query</name> = <call><name>cache_use_early_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> ? <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>query</name></name> : <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>exps</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Expires"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>exps</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>exps</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Expires"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>exps</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>exp</name> = <call><name>apr_date_parse_http</name><argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>exp</name> = <name>APR_DATE_BAD</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>lastmods</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Last-Modified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lastmods</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lastmods</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Last-Modified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>lastmods</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lastmod</name> = <call><name>apr_date_parse_http</name><argument_list>(<argument><expr><name>lastmods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lastmod</name> == <name>APR_DATE_BAD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lastmods</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>lastmod</name> = <name>APR_DATE_BAD</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>etag</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Etag"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>etag</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>etag</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Etag"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>cc_out</name> = <call><name>cache_table_getm</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pragma</name> = <call><name>cache_table_getm</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Pragma"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>headers</name> = <name><name>r</name>-&gt;<name>err_headers_out</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>cc_out</name> &amp;&amp; !<name>pragma</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cc_out</name> = <call><name>cache_table_getm</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pragma</name> = <call><name>cache_table_getm</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Pragma"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>headers</name> = <name><name>r</name>-&gt;<name>headers_out</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NOT_MODIFIED</name> &amp;&amp; <name><name>cache</name>-&gt;<name>stale_handle</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>cc_out</name> &amp;&amp; !<name>pragma</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cc_out</name> = <call><name>cache_table_getm</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>resp_hdrs</name></name></expr></argument>,
<argument><expr>"Cache-Control"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pragma</name> = <call><name>cache_table_getm</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>resp_hdrs</name></name></expr></argument>,
<argument><expr>"Pragma"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(
<argument><expr><name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>resp_hdrs</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>control</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_control_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_cache_control</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>control</name></expr></argument>, <argument><expr><name>cc_out</name></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name> &amp;&amp; <name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_NON_AUTHORITATIVE</name>
&amp;&amp; <name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_PARTIAL_CONTENT</name>
&amp;&amp; <name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_MULTIPLE_CHOICES</name>
&amp;&amp; <name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_MOVED_PERMANENTLY</name>
&amp;&amp; <name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_NOT_MODIFIED</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>exps</name> != <name>NULL</name> || <name>cc_out</name> != <name>NULL</name></expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<expr_stmt><expr><name>reason</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Response status %d"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>reason</name></expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><name>exps</name> != <name>NULL</name> &amp;&amp; <name>exp</name> == <name>APR_DATE_BAD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Broken expires header: "</expr></argument>, <argument><expr><name>exps</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>control</name>.<name>s_maxage</name></name> &amp;&amp; !<name><name>control</name>.<name>max_age</name></name>
&amp;&amp; !<name><name>dconf</name>-&gt;<name>store_expired</name></name> &amp;&amp; <name>exp</name> != <name>APR_DATE_BAD</name>
&amp;&amp; <name>exp</name> &lt; <name><name>r</name>-&gt;<name>request_time</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "Expires header already expired; not cacheable"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>dconf</name>-&gt;<name>store_expired</name></name> &amp;&amp; (<name><name>control</name>.<name>must_revalidate</name></name>
|| <name><name>control</name>.<name>proxy_revalidate</name></name>) &amp;&amp; (!<name><name>control</name>.<name>s_maxage_value</name></name>
|| (!<name><name>control</name>.<name>s_maxage</name></name> &amp;&amp; !<name><name>control</name>.<name>max_age_value</name></name>)) &amp;&amp; <name>lastmods</name>
== <name>NULL</name> &amp;&amp; <name>etag</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name>
= "s-maxage or max-age zero and no Last-Modified or Etag; not cacheable"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>ignorequerystring</name></name> &amp;&amp; <name>query</name> &amp;&amp; <name>exps</name> == <name>NULL</name>
&amp;&amp; !<name><name>control</name>.<name>max_age</name></name> &amp;&amp; !<name><name>control</name>.<name>s_maxage</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "Query string present but no explicit expiration time"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NOT_MODIFIED</name> &amp;&amp;
!<name><name>cache</name>-&gt;<name>handle</name></name> &amp;&amp; !<name><name>cache</name>-&gt;<name>stale_handle</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "HTTP Status 304 Not Modified"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name> &amp;&amp; <name>lastmods</name> == <name>NULL</name> &amp;&amp; <name>etag</name> == <name>NULL</name> &amp;&amp; (<name>exps</name>
== <name>NULL</name>) &amp;&amp; (<name><name>dconf</name>-&gt;<name>no_last_mod_ignore</name></name> == 0) &amp;&amp; !<name><name>control</name>.<name>max_age</name></name>
&amp;&amp; !<name><name>control</name>.<name>s_maxage</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "No Last-Modified; Etag; Expires; Cache-Control:max-age or Cache-Control:s-maxage headers"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>dconf</name>-&gt;<name>store_nostore</name></name> &amp;&amp; <name><name>control</name>.<name>no_store</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "Cache-Control: no-store present"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>dconf</name>-&gt;<name>store_private</name></name> &amp;&amp; <name><name>control</name>.<name>private</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "Cache-Control: private present"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Authorization"</expr></argument>)</argument_list></call>
&amp;&amp; !(<name><name>control</name>.<name>s_maxage</name></name> || <name><name>control</name>.<name>must_revalidate</name></name>
|| <name><name>control</name>.<name>proxy_revalidate</name></name> || <name><name>control</name>.<name>public</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "Authorization required"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>ap_find_token</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Vary"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "Vary header contains '*'"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "environment variable 'no-cache' is set"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>no_cache</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "r-&gt;no_cache present"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cache</name>-&gt;<name>stale_handle</name></name>
&amp;&amp; <name>APR_DATE_BAD</name>
!= (<name>date</name> = <call><name>apr_date_parse_http</name><argument_list>(
<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Date"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)
&amp;&amp; <name>date</name> &lt; <name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>date</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "updated entity is older than cached entity"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02474</expr></argument>)</argument_list></call>
"cache: Removing CACHE_REMOVE_URL filter."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>remove_url_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NOT_MODIFIED</name> &amp;&amp; <name><name>cache</name>-&gt;<name>stale_handle</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>left</name> <init>= <expr><name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>resp_hdrs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>right</name> <init>= <expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ehs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>cache_header_cmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr>"ETag"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ehs</name> = "ETag"</expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>eh</name> = <name>MOD_CACHE_ENTITY_HEADERS</name></expr>;</init> <condition><expr>*<name>eh</name></expr>;</condition> <incr><expr>++<name>eh</name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>cache_header_cmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr>*<name>eh</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ehs</name> = (<name>ehs</name>) ? <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ehs</name></expr></argument>, <argument><expr>", "</expr></argument>, <argument><expr>*<name>eh</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> : *<name>eh</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>ehs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"contradiction: 304 Not Modified; "
"but "</expr></argument>, <argument><expr><name>ehs</name></expr></argument>, <argument><expr>" modified"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NOT_MODIFIED</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>eh</name> = <name>MOD_CACHE_ENTITY_HEADERS</name></expr>;</init> <condition><expr>*<name>eh</name></expr>;</condition> <incr><expr>++<name>eh</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>*<name>eh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name>reason</name> &amp;&amp; <name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NOT_MODIFIED</name> &amp;&amp; <name><name>cache</name>-&gt;<name>stale_handle</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02473</expr></argument>)</argument_list></call>
"cache: %s responded with an uncacheable 304, "
"retrying the request %s. Reason: %s"</expr></argument>,
<argument><expr><name><name>cache</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_run_cache_status</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>AP_CACHE_MISS</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"conditional cache miss: 304 was uncacheable, entity removed: %s"</expr></argument>,
<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>remove_url_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_remove_url</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_remove_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Match"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Modified-Since"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-None-Match"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Unmodified-Since"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_internal_redirect</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>reason</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00768</expr></argument>)</argument_list></call>
"cache: %s not cached for request %s. Reason: %s"</expr></argument>,
<argument><expr><name><name>cache</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_run_cache_status</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>AP_CACHE_MISS</name></expr></argument>,
<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_remove_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>in_checked</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>cl</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cl</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cl</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>cl</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>errp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr>&amp;<name>errp</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> || *<name>errp</name> || <name>size</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cl</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>cl</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>all_buckets_here</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name>=0</expr>;</expr_stmt>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>all_buckets_here</name>=1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>e</name>-&gt;<name>length</name></name> == (<name>apr_size_t</name>)-1</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>size</name> += <name><name>e</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name>all_buckets_here</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>size</name> = -1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>size</name></name> = <name>size</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>stale_handle</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NOT_MODIFIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cache</name>-&gt;<name>handle</name></name> = <name><name>cache</name>-&gt;<name>stale_handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> = &amp;<name><name>cache</name>-&gt;<name>handle</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>OK</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name><name>cache</name>-&gt;<name>provider</name>-&gt;<name>remove_entity</name></name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>stale_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>stale_handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <name><name>cache</name>-&gt;<name>stale_headers</name></name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>cache</name>-&gt;<name>handle</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>cache_create_entity</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>status</name></name> = <name><name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>cache_run_cache_status</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>AP_CACHE_MISS</name></expr></argument>,
<argument><expr>"cache miss: cache unwilling to store response"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_remove_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00769</expr></argument>)</argument_list></call>
"cache: Caching url %s for request %s"</expr></argument>,
<argument><expr><name><name>cache</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00770</expr></argument>)</argument_list></call>
"cache: Removing CACHE_REMOVE_URL filter."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>remove_url_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>control</name></name></expr></argument>, <argument><expr>&amp;<name>control</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_control_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dates</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Date"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dates</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dates</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Date"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>dates</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>date</name></name> = <call><name>apr_date_parse_http</name><argument_list>(<argument><expr><name>dates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>date</name></name> = <name>APR_DATE_BAD</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>now</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>date</name></name> == <name>APR_DATE_BAD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>date</name></name> = <name>now</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>date</name> = <name><name>info</name>-&gt;<name>date</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>response_time</name></name> = <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>request_time</name></name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lastmod</name> != <name>APR_DATE_BAD</name> &amp;&amp; <name>lastmod</name> &gt; <name>date</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lastmod</name> = <name>date</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00771</expr></argument>)</argument_list></call> "cache: Last modified is in the future, "
"replacing with now"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>control</name>.<name>s_maxage</name></name> || <name><name>control</name>.<name>max_age</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> = <name><name>control</name>.<name>s_maxage</name></name> ? <name><name>control</name>.<name>s_maxage_value</name></name> : <name><name>control</name>.<name>max_age_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <name>x</name> * <name>MSEC_ONE_SEC</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> &lt; <name><name>dconf</name>-&gt;<name>minex</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>x</name> = <name><name>dconf</name>-&gt;<name>minex</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>x</name> &gt; <name><name>dconf</name>-&gt;<name>maxex</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>x</name> = <name><name>dconf</name>-&gt;<name>maxex</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>exp</name> = <name>date</name> + <name>x</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>exp</name> == <name>APR_DATE_BAD</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>lastmod</name> != <name>APR_DATE_BAD</name>) &amp;&amp; (<name>lastmod</name> &lt; <name>date</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>x</name> <init>= <expr><call>(<name>apr_time_t</name>) <argument_list>(<argument><expr>(<name>date</name> - <name>lastmod</name>) * <name><name>dconf</name>-&gt;<name>factor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>x</name> &lt; <name><name>dconf</name>-&gt;<name>minex</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>x</name> = <name><name>dconf</name>-&gt;<name>minex</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>x</name> &gt; <name><name>dconf</name>-&gt;<name>maxex</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>x</name> = <name><name>dconf</name>-&gt;<name>maxex</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>exp</name> = <name>date</name> + <name>x</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>exp</name> = <name>date</name> + <name><name>dconf</name>-&gt;<name>defex</name></name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>info</name>-&gt;<name>expire</name></name> = <name>exp</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>stale_handle</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <call><name>cache_merge_headers_out</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_clear</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_accept_headers</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr><name><name>cache</name>-&gt;<name>handle</name>-&gt;<name>resp_hdrs</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name><name>cache</name>-&gt;<name>provider</name>-&gt;<name>store_headers</name></name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>stale_handle</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>bkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name><name>info</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name><name>cache</name>-&gt;<name>provider</name>-&gt;<name>commit_entity</name></name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <name><name>cache</name>-&gt;<name>stale_headers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_meets_conditions</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
<for>for (<init><expr><name>eh</name> = <name>MOD_CACHE_ENTITY_HEADERS</name></expr>;</init> <condition><expr>*<name>eh</name></expr>;</condition> <incr><expr>++<name>eh</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>*<name>eh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>bkt</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>bb</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name><name>cache</name>-&gt;<name>provider</name>-&gt;<name>recall_body</name></name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bkt</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>bb</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>block_response</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00772</expr></argument>)</argument_list></call>
"cache: updating headers with store_headers failed. "
"Removing cached url."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name><name>cache</name>-&gt;<name>provider</name>-&gt;<name>remove_url</name></name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>stale_handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00773</expr></argument>)</argument_list></call>
"cache: attempt to remove url from cache unsuccessful."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>cache_run_cache_status</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr><name>AP_CACHE_REVALIDATE</name></expr></argument>,
<argument><expr>"conditional cache hit: entity refresh failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>cache_run_cache_status</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr><name>AP_CACHE_REVALIDATE</name></expr></argument>,
<argument><expr>"conditional cache hit: entity refreshed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>cache_remove_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02971</expr></argument>)</argument_list></call>
"cache: serving %s (revalidated)"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00774</expr></argument>)</argument_list></call>
"cache: store_headers failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_run_cache_status</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>AP_CACHE_MISS</name></expr></argument>,
<argument><expr>"cache miss: store_headers failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_remove_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>cache_run_cache_status</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>AP_CACHE_MISS</name></expr></argument>,
<argument><expr>"cache miss: attempting entity save"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>cache_save_store</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cache_remove_url_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cache</name> = (<name>cache_request_rec</name> *) <name><name>f</name>-&gt;<name>ctx</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>cache</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00775</expr></argument>)</argument_list></call>
"cache: CACHE_REMOVE_URL enabled unexpectedly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>cache_remove_url</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cache_invalidate_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cache</name> = (<name>cache_request_rec</name> *) <name><name>f</name>-&gt;<name>ctx</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>cache</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02465</expr></argument>)</argument_list></call>
"cache: CACHE_INVALIDATE enabled unexpectedly: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> &gt; 299</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02466</expr></argument>)</argument_list></call>
"cache: response status to '%s' method is %d (&gt;299), not invalidating cached entity: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02467</expr></argument>)</argument_list></call>
"cache: Invalidating all cached entities in response to '%s' request for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_invalidate</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_run_cache_status</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr><name>AP_CACHE_INVALIDATE</name></expr></argument>, <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"cache invalidated by %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cache_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name>
*</type><name>conf</name> <init>=
<expr>(<name>cache_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>quick</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00776</expr></argument>)</argument_list></call>
"cache: CACHE filter was added in quick handler mode and "
"will be ignored: %s"</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>unparsed_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00777</expr></argument>)</argument_list></call>
"cache: CACHE filter was added twice, or was added where "
"the cache has been bypassed and will be ignored: %s"</expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>unparsed_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cache_status</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_table_t</name> *</type><name>headers</name></decl></param>, <param><decl><type><name>ap_cache_status_e</name></type> <name>status</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name>
*</type><name>conf</name> <init>=
<expr>(<name>cache_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_cache</name> <init>= <expr>0</expr></init>, <name>x_cache_detail</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{
<case>case <expr><name>AP_CACHE_HIT</name></expr>: <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>AP_CACHE_HIT_ENV</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>AP_CACHE_REVALIDATE</name></expr>: <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>AP_CACHE_REVALIDATE_ENV</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>AP_CACHE_MISS</name></expr>: <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>AP_CACHE_MISS_ENV</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>AP_CACHE_INVALIDATE</name></expr>: <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>AP_CACHE_INVALIDATE_ENV</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case>}</block></switch>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>AP_CACHE_STATUS_ENV</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dconf</name> &amp;&amp; <name><name>dconf</name>-&gt;<name>x_cache_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>x_cache</name> = <name><name>dconf</name>-&gt;<name>x_cache</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>x_cache</name> = <name><name>conf</name>-&gt;<name>x_cache</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>x_cache</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"X-Cache"</expr></argument>, <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s from %s"</expr></argument>,
<argument><expr><name>status</name> == <name>AP_CACHE_HIT</name> ? "HIT"
: <name>status</name> == <name>AP_CACHE_REVALIDATE</name> ? "REVALIDATE" : <name>status</name>
== <name>AP_CACHE_INVALIDATE</name> ? "INVALIDATE" : "MISS"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>dconf</name> &amp;&amp; <name><name>dconf</name>-&gt;<name>x_cache_detail_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>x_cache_detail</name> = <name><name>dconf</name>-&gt;<name>x_cache_detail</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>x_cache_detail</name> = <name><name>conf</name>-&gt;<name>x_cache_detail</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>x_cache_detail</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"X-Cache-Detail"</expr></argument>, <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"\"%s\" from %s"</expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_insert_error_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> &lt; <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>dconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>dconf</name>-&gt;<name>stale_on_error</name></name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>dummy</name></expr></argument>, <argument><expr><name>CACHE_CTX_KEY</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dummy</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>cache_request_rec</name> *</type><name>cache</name> <init>= <expr>(<name>cache_request_rec</name> *) <name>dummy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>remove_url_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>stale_handle</name></name> &amp;&amp; <name><name>cache</name>-&gt;<name>save_filter</name></name>
&amp;&amp; !<name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>control</name>.<name>must_revalidate</name></name>
&amp;&amp; !<name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>control</name>.<name>proxy_revalidate</name></name>
&amp;&amp; !<name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>control</name>.<name>s_maxage</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>warn_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_server_conf</name>
*</type><name>conf</name> <init>=
<expr>(<name>cache_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>handle</name></name> = <name><name>cache</name>-&gt;<name>stale_handle</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cache</name>-&gt;<name>save_filter</name>-&gt;<name>frec</name></name> = <name>cache_out_subreq_filter_handle</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cache</name>-&gt;<name>save_filter</name>-&gt;<name>frec</name></name> = <name>cache_out_filter_handle</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>output_filters</name></name> = <name><name>cache</name>-&gt;<name>save_filter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name> = <name><name>cache</name>-&gt;<name>stale_handle</name>-&gt;<name>resp_hdrs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>warn_head</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Warning"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>warn_head</name> == <name>NULL</name>) || ((<name>warn_head</name> != <name>NULL</name>)
&amp;&amp; (<call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>warn_head</name></expr></argument>, <argument><expr>"111"</expr></argument>)</argument_list></call> == <name>NULL</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Warning"</expr></argument>,
<argument><expr>"111 Revalidation failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>cache_run_cache_status</name><argument_list>(
<argument><expr><name><name>cache</name>-&gt;<name>handle</name></name></expr></argument>,
<argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>,
<argument><expr><name>AP_CACHE_HIT</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(
<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"cache hit: %d status; stale content returned"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_remove_lock</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>no_last_mod_ignore</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>store_expired</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>store_private</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>store_nostore</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>maxex</name></name> = <name>DEFAULT_CACHE_MAXEXPIRE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>minex</name></name> = <name>DEFAULT_CACHE_MINEXPIRE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>defex</name></name> = <name>DEFAULT_CACHE_EXPIRE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>factor</name></name> = <name>DEFAULT_CACHE_LMFACTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>x_cache</name></name> = <name>DEFAULT_X_CACHE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>x_cache_detail</name></name> = <name>DEFAULT_X_CACHE_DETAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>stale_on_error</name></name> = <name>DEFAULT_CACHE_STALE_ON_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>cacheenable</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>cache_enable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dconf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>new</name> <init>= <expr>(<name>cache_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>add</name> <init>= <expr>(<name>cache_dir_conf</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>cache_dir_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>no_last_mod_ignore</name></name> = (<name><name>add</name>-&gt;<name>no_last_mod_ignore_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>no_last_mod_ignore</name></name> : <name><name>add</name>-&gt;<name>no_last_mod_ignore</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>no_last_mod_ignore_set</name></name> = <name><name>add</name>-&gt;<name>no_last_mod_ignore_set</name></name> || <name><name>base</name>-&gt;<name>no_last_mod_ignore_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>store_expired</name></name> = (<name><name>add</name>-&gt;<name>store_expired_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>store_expired</name></name> : <name><name>add</name>-&gt;<name>store_expired</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>store_expired_set</name></name> = <name><name>add</name>-&gt;<name>store_expired_set</name></name> || <name><name>base</name>-&gt;<name>store_expired_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>store_private</name></name> = (<name><name>add</name>-&gt;<name>store_private_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>store_private</name></name> : <name><name>add</name>-&gt;<name>store_private</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>store_private_set</name></name> = <name><name>add</name>-&gt;<name>store_private_set</name></name> || <name><name>base</name>-&gt;<name>store_private_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>store_nostore</name></name> = (<name><name>add</name>-&gt;<name>store_nostore_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>store_nostore</name></name> : <name><name>add</name>-&gt;<name>store_nostore</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>store_nostore_set</name></name> = <name><name>add</name>-&gt;<name>store_nostore_set</name></name> || <name><name>base</name>-&gt;<name>store_nostore_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>maxex</name></name> = (<name><name>add</name>-&gt;<name>maxex_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>maxex</name></name> : <name><name>add</name>-&gt;<name>maxex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>maxex_set</name></name> = <name><name>add</name>-&gt;<name>maxex_set</name></name> || <name><name>base</name>-&gt;<name>maxex_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>minex</name></name> = (<name><name>add</name>-&gt;<name>minex_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>minex</name></name> : <name><name>add</name>-&gt;<name>minex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>minex_set</name></name> = <name><name>add</name>-&gt;<name>minex_set</name></name> || <name><name>base</name>-&gt;<name>minex_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>defex</name></name> = (<name><name>add</name>-&gt;<name>defex_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>defex</name></name> : <name><name>add</name>-&gt;<name>defex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>defex_set</name></name> = <name><name>add</name>-&gt;<name>defex_set</name></name> || <name><name>base</name>-&gt;<name>defex_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>factor</name></name> = (<name><name>add</name>-&gt;<name>factor_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>factor</name></name> : <name><name>add</name>-&gt;<name>factor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>factor_set</name></name> = <name><name>add</name>-&gt;<name>factor_set</name></name> || <name><name>base</name>-&gt;<name>factor_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>x_cache</name></name> = (<name><name>add</name>-&gt;<name>x_cache_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>x_cache</name></name> : <name><name>add</name>-&gt;<name>x_cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>x_cache_set</name></name> = <name><name>add</name>-&gt;<name>x_cache_set</name></name> || <name><name>base</name>-&gt;<name>x_cache_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>x_cache_detail</name></name> = (<name><name>add</name>-&gt;<name>x_cache_detail_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>x_cache_detail</name></name>
: <name><name>add</name>-&gt;<name>x_cache_detail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>x_cache_detail_set</name></name> = <name><name>add</name>-&gt;<name>x_cache_detail_set</name></name>
|| <name><name>base</name>-&gt;<name>x_cache_detail_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>stale_on_error</name></name> = (<name><name>add</name>-&gt;<name>stale_on_error_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>stale_on_error</name></name>
: <name><name>add</name>-&gt;<name>stale_on_error</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>stale_on_error_set</name></name> = <name><name>add</name>-&gt;<name>stale_on_error_set</name></name>
|| <name><name>base</name>-&gt;<name>stale_on_error_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>cacheenable</name></name> = <name><name>add</name>-&gt;<name>enable_set</name></name> ? <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>cacheenable</name></name></expr></argument>,
<argument><expr><name><name>add</name>-&gt;<name>cacheenable</name></name></expr></argument>)</argument_list></call> : <name><name>base</name>-&gt;<name>cacheenable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>enable_set</name></name> = <name><name>add</name>-&gt;<name>enable_set</name></name> || <name><name>base</name>-&gt;<name>enable_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>disable</name></name> = (<name><name>add</name>-&gt;<name>disable_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>disable</name></name> : <name><name>add</name>-&gt;<name>disable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>disable_set</name></name> = <name><name>add</name>-&gt;<name>disable_set</name></name> || <name><name>base</name>-&gt;<name>disable_set</name></name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type> <name>create_cache_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmppath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>ps</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_server_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>cacheenable</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>cache_enable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>cachedisable</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>cache_disable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ignorecachecontrol</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ignorecachecontrol_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ignore_headers</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ignore_headers_set</name></name> = <name>CACHE_IGNORE_HEADERS_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ignorequerystring</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ignorequerystring_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>quick</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>quick_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ignore_session_id</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ignore_session_id_set</name></name> = <name>CACHE_IGNORE_SESSION_ID_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>lock</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>lock_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_temp_dir_get</name><argument_list>(<argument><expr>&amp;<name>tmppath</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmppath</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ps</name>-&gt;<name>lockpath</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tmppath</name></expr></argument>, <argument><expr><name>DEFAULT_CACHE_LOCKPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>lockmaxage</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>DEFAULT_CACHE_MAXAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>x_cache</name></name> = <name>DEFAULT_X_CACHE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>x_cache_detail</name></name> = <name>DEFAULT_X_CACHE_DETAIL</name></expr>;</expr_stmt>
<return>return <expr><name>ps</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type> <name>merge_cache_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>ps</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_server_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>base</name> <init>= <expr>(<name>cache_server_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>overrides</name> <init>= <expr>(<name>cache_server_conf</name> *) <name>overridesv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>cachedisable</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>base</name>-&gt;<name>cachedisable</name></name></expr></argument>,
<argument><expr><name><name>overrides</name>-&gt;<name>cachedisable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>cacheenable</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>base</name>-&gt;<name>cacheenable</name></name></expr></argument>,
<argument><expr><name><name>overrides</name>-&gt;<name>cacheenable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ignorecachecontrol</name></name> =
(<name><name>overrides</name>-&gt;<name>ignorecachecontrol_set</name></name> == 0)
? <name><name>base</name>-&gt;<name>ignorecachecontrol</name></name>
: <name><name>overrides</name>-&gt;<name>ignorecachecontrol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ignore_headers</name></name> =
(<name><name>overrides</name>-&gt;<name>ignore_headers_set</name></name> == <name>CACHE_IGNORE_HEADERS_UNSET</name>)
? <name><name>base</name>-&gt;<name>ignore_headers</name></name>
: <name><name>overrides</name>-&gt;<name>ignore_headers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ignorequerystring</name></name> =
(<name><name>overrides</name>-&gt;<name>ignorequerystring_set</name></name> == 0)
? <name><name>base</name>-&gt;<name>ignorequerystring</name></name>
: <name><name>overrides</name>-&gt;<name>ignorequerystring</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ignore_session_id</name></name> =
(<name><name>overrides</name>-&gt;<name>ignore_session_id_set</name></name> == <name>CACHE_IGNORE_SESSION_ID_UNSET</name>)
? <name><name>base</name>-&gt;<name>ignore_session_id</name></name>
: <name><name>overrides</name>-&gt;<name>ignore_session_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>lock</name></name> =
(<name><name>overrides</name>-&gt;<name>lock_set</name></name> == 0)
? <name><name>base</name>-&gt;<name>lock</name></name>
: <name><name>overrides</name>-&gt;<name>lock</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>lockpath</name></name> =
(<name><name>overrides</name>-&gt;<name>lockpath_set</name></name> == 0)
? <name><name>base</name>-&gt;<name>lockpath</name></name>
: <name><name>overrides</name>-&gt;<name>lockpath</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>lockmaxage</name></name> =
(<name><name>overrides</name>-&gt;<name>lockmaxage_set</name></name> == 0)
? <name><name>base</name>-&gt;<name>lockmaxage</name></name>
: <name><name>overrides</name>-&gt;<name>lockmaxage</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>quick</name></name> =
(<name><name>overrides</name>-&gt;<name>quick_set</name></name> == 0)
? <name><name>base</name>-&gt;<name>quick</name></name>
: <name><name>overrides</name>-&gt;<name>quick</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>x_cache</name></name> =
(<name><name>overrides</name>-&gt;<name>x_cache_set</name></name> == 0)
? <name><name>base</name>-&gt;<name>x_cache</name></name>
: <name><name>overrides</name>-&gt;<name>x_cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>x_cache_detail</name></name> =
(<name><name>overrides</name>-&gt;<name>x_cache_detail_set</name></name> == 0)
? <name><name>base</name>-&gt;<name>x_cache_detail</name></name>
: <name><name>overrides</name>-&gt;<name>x_cache_detail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>base_uri</name></name> =
(<name><name>overrides</name>-&gt;<name>base_uri_set</name></name> == 0)
? <name><name>base</name>-&gt;<name>base_uri</name></name>
: <name><name>overrides</name>-&gt;<name>base_uri</name></name></expr>;</expr_stmt>
<return>return <expr><name>ps</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_quick_handler</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> =
(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>quick</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>quick_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_ignore_no_last_mod</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>no_last_mod_ignore</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>no_last_mod_ignore_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_ignore_cachecontrol</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> =
(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ignorecachecontrol</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ignorecachecontrol_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_store_expired</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>store_expired</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>store_expired_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_store_private</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>store_private</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>store_private_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_store_nostore</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>store_nostore</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>store_nostore_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_ignore_header</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>new</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> =
(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ignore_headers</name>-&gt;<name>nelts</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name><name>conf</name>-&gt;<name>ignore_headers_set</name></name> == <name>CACHE_IGNORE_HEADERS_UNSET</name>) ||
(<name><name>conf</name>-&gt;<name>ignore_headers</name>-&gt;<name>nelts</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>new</name> = (<name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>ignore_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(*<name>new</name>) = (<name>char</name> *)<name>header</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ignore_headers_set</name></name> = <name>CACHE_IGNORE_HEADERS_SET</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_ignore_session_id</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>identifier</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>new</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> =
(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ignore_session_id</name>-&gt;<name>nelts</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name><name>conf</name>-&gt;<name>ignore_session_id_set</name></name> == <name>CACHE_IGNORE_SESSION_ID_UNSET</name>) ||
(<name><name>conf</name>-&gt;<name>ignore_session_id</name>-&gt;<name>nelts</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>new</name> = (<name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>ignore_session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(*<name>new</name>) = (<name>char</name> *)<name>identifier</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ignore_session_id_set</name></name> = <name>CACHE_IGNORE_SESSION_ID_SET</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_cache_enable</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>cache_enable</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>parms</name></expr></argument>,
<argument><expr><name>NOT_IN_DIRECTORY</name>|<name>NOT_IN_LIMIT</name>|<name>NOT_IN_FILES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>type</name> == '/'</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"provider (%s) starts with a '/'. Are url and provider switched?"</expr></argument>,
<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>url</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> = <name><name>parms</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>url</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"CacheEnable provider (%s) is missing an URL."</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>parms</name>-&gt;<name>path</name></name> &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"When in a Location, CacheEnable must specify a path or an URL below "
"that location."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>conf</name> =
(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>parms</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>dconf</name>-&gt;<name>cacheenable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>enable_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>cacheenable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;(<name><name>new</name>-&gt;<name>url</name></name>)</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>url</name>.<name>path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>pathlen</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>new</name>-&gt;<name>url</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>pathlen</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>url</name>.<name>path</name></name> = "/"</expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_cache_disable</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>cache_disable</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>parms</name></expr></argument>,
<argument><expr><name>NOT_IN_DIRECTORY</name>|<name>NOT_IN_LIMIT</name>|<name>NOT_IN_FILES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>conf</name> =
(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>parms</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>disable</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>disable_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr>"CacheDisable must be followed by the word 'on' when in a Location."</expr>;</return>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>url</name> || (<name><name>url</name><index>[<expr>0</expr>]</index></name> != '/' &amp;&amp; !<call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr>"CacheDisable must specify a path or an URL."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>cachedisable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;(<name><name>new</name>-&gt;<name>url</name></name>)</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>url</name>.<name>path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>pathlen</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>new</name>-&gt;<name>url</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>pathlen</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>url</name>.<name>path</name></name> = "/"</expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_maxex</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>maxex</name></name> = <call>(<name>apr_time_t</name>) <argument_list>(<argument><expr><call><name>atol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> * <name>MSEC_ONE_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>maxex_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_minex</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>minex</name></name> = <call>(<name>apr_time_t</name>) <argument_list>(<argument><expr><call><name>atol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> * <name>MSEC_ONE_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>minex_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_defex</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>defex</name></name> = <call>(<name>apr_time_t</name>) <argument_list>(<argument><expr><call><name>atol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> * <name>MSEC_ONE_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>defex_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_factor</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"%lg"</expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then> <block>{
<return>return <expr>"CacheLastModifiedFactor value must be a float"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>factor</name></name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>factor_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_ignore_querystring</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> =
(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ignorequerystring</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ignorequerystring_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_lock</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> =
(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>lock</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>lock_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_lock_path</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> =
(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>lockpath</name></name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>lockpath</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid CacheLockPath path "</expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>lockpath_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_lock_maxage</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>seconds</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> =
(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seconds</name> = <call><name>apr_atoi64</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>seconds</name> &lt;= 0</expr>)</condition><then> <block>{
<return>return <expr>"CacheLockMaxAge value must be a non-zero positive integer"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>lockmaxage</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>lockmaxage_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_x_cache</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>parms</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>x_cache</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>x_cache_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name> <init>=
<expr>(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>x_cache</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>x_cache_set</name></name> = 1</expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_x_cache_detail</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>parms</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>x_cache_detail</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>x_cache_detail_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name> <init>=
<expr>(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>x_cache_detail</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>x_cache_detail_set</name></name> = 1</expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_key_base_url</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> =
(<name>cache_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>base_uri</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_uri_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>base_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Could not parse '%s' as an URL."</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>base_uri</name>-&gt;<name>scheme</name></name> &amp;&amp; !<name><name>conf</name>-&gt;<name>base_uri</name>-&gt;<name>hostname</name></name> &amp;&amp;
!<name><name>conf</name>-&gt;<name>base_uri</name>-&gt;<name>port_str</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"URL '%s' must contain at least one of a scheme, a hostname or a port."</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>base_uri_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_stale_on_error</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>stale_on_error</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>stale_on_error_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cache_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>cache_generate_key</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_cache_generate_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>cache_generate_key</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cache_generate_key</name> = <name>cache_generate_key_default</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>cache_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"CacheEnable"</expr></argument>, <argument><expr><name>add_cache_enable</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"A cache type and partial URL prefix below which "
"caching is enabled"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheDisable"</expr></argument>, <argument><expr><name>add_cache_disable</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"A partial URL prefix below which caching is disabled"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheMaxExpire"</expr></argument>, <argument><expr><name>set_cache_maxex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"The maximum time in seconds to cache a document"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheMinExpire"</expr></argument>, <argument><expr><name>set_cache_minex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"The minimum time in seconds to cache a document"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheDefaultExpire"</expr></argument>, <argument><expr><name>set_cache_defex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"The default time in seconds to cache a document"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CacheQuickHandler"</expr></argument>, <argument><expr><name>set_cache_quick_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Run the cache in the quick handler, default on"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CacheIgnoreNoLastMod"</expr></argument>, <argument><expr><name>set_cache_ignore_no_last_mod</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Ignore Responses where there is no Last Modified Header"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CacheIgnoreCacheControl"</expr></argument>, <argument><expr><name>set_cache_ignore_cachecontrol</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Ignore requests from the client for uncached content"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CacheStoreExpired"</expr></argument>, <argument><expr><name>set_cache_store_expired</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Ignore expiration dates when populating cache, resulting in "
"an If-Modified-Since request to the backend on retrieval"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CacheStorePrivate"</expr></argument>, <argument><expr><name>set_cache_store_private</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Ignore 'Cache-Control: private' and store private content"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CacheStoreNoStore"</expr></argument>, <argument><expr><name>set_cache_store_nostore</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Ignore 'Cache-Control: no-store' and store sensitive content"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"CacheIgnoreHeaders"</expr></argument>, <argument><expr><name>add_ignore_header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"A space separated list of headers that should not be "
"stored by the cache"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CacheIgnoreQueryString"</expr></argument>, <argument><expr><name>set_cache_ignore_querystring</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Ignore query-string when caching"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"CacheIgnoreURLSessionIdentifiers"</expr></argument>, <argument><expr><name>add_ignore_session_id</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"A space separated list of session "
"identifiers that should be ignored for creating the key "
"of the cached entity."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheLastModifiedFactor"</expr></argument>, <argument><expr><name>set_cache_factor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"The factor used to estimate Expires date from "
"LastModified date"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CacheLock"</expr></argument>, <argument><expr><name>set_cache_lock</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Enable or disable the thundering herd lock."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheLockPath"</expr></argument>, <argument><expr><name>set_cache_lock_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The thundering herd lock path. Defaults to the '"
<name>DEFAULT_CACHE_LOCKPATH</name> "' directory in the system "
"temp directory."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheLockMaxAge"</expr></argument>, <argument><expr><name>set_cache_lock_maxage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Maximum age of any thundering herd lock."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CacheHeader"</expr></argument>, <argument><expr><name>set_cache_x_cache</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Add a X-Cache header to responses. Default is off."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CacheDetailHeader"</expr></argument>, <argument><expr><name>set_cache_x_cache_detail</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Add a X-Cache-Detail header to responses. Default is off."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheKeyBaseURL"</expr></argument>, <argument><expr><name>set_cache_key_base_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Override the base URL of reverse proxied cache keys."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CacheStaleOnError"</expr></argument>, <argument><expr><name>set_cache_stale_on_error</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Serve stale content on 5xx errors if present. Defaults to on."</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_quick_handler</name><argument_list>(<argument><expr><name>cache_quick_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>cache_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cache_hook_cache_status</name><argument_list>(<argument><expr><name>cache_status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_error_filter</name><argument_list>(<argument><expr><name>cache_insert_error_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"CACHE"</expr></argument>,
<argument><expr><name>cache_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_save_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"CACHE_SAVE"</expr></argument>,
<argument><expr><name>cache_save_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_CONTENT_SET</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_save_subreq_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"CACHE_SAVE_SUBREQ"</expr></argument>,
<argument><expr><name>cache_save_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_CONTENT_SET</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_out_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"CACHE_OUT"</expr></argument>,
<argument><expr><name>cache_out_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_CONTENT_SET</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_out_subreq_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"CACHE_OUT_SUBREQ"</expr></argument>,
<argument><expr><name>cache_out_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_CONTENT_SET</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_remove_url_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"CACHE_REMOVE_URL"</expr></argument>,
<argument><expr><name>cache_remove_url_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_invalidate_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"CACHE_INVALIDATE"</expr></argument>,
<argument><expr><name>cache_invalidate_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>cache_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_dir_config</name></expr>,
<expr><name>merge_dir_config</name></expr>,
<expr><name>create_cache_config</name></expr>,
<expr><name>merge_cache_config</name></expr>,
<expr><name>cache_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
<macro><name>APR_HOOK_STRUCT</name><argument_list>(
<argument>APR_HOOK_LINK(cache_status)</argument>
)</argument_list></macro>
<macro><name>APR_IMPLEMENT_EXTERNAL_HOOK_RUN_ALL</name><argument_list>(<argument>cache</argument>, <argument>CACHE</argument>, <argument>int</argument>, <argument>cache_status</argument>,
<argument>(cache_handle_t *h, request_rec *r,
apr_table_t *headers, ap_cache_status_e status,
const char *reason)</argument>, <argument>(h, r, headers, status, reason)</argument>,
<argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
</unit>
