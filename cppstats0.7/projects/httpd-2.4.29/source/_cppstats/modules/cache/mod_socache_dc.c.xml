<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/cache/mod_socache_dc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_socache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distcache/dc_client.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DISTCACHE_CLIENT_API</name></expr></argument>)</argument_list></call> || (<name>DISTCACHE_CLIENT_API</name> &lt; 0x0001)</expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> "You must compile with a more recent version of the distcache-base package"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct>struct <name>ap_socache_instance_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DC_CTX</name> *</type><name>dc</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>socache_dc_create</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> **</type><name>context</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>tmp</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>ap_socache_instance_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ctx</name> = *<name>context</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>target</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_dc_init</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>namespace</name></decl></param>,
<param><decl><type><specifier>const</specifier> struct <name>ap_socache_hints</name> *</type><name>hints</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_CTX_FLAGS</name></cpp:macro> <cpp:value>SESSION_CTX_FLAG_PERSISTENT | SESSION_CTX_FLAG_PERSISTENT_PIDCHECK | SESSION_CTX_FLAG_PERSISTENT_RETRY | SESSION_CTX_FLAG_PERSISTENT_LATE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_CTX_FLAGS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>dc</name></name> = <call><name>DC_CTX_new</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>SESSION_CTX_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>dc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00738</expr></argument>)</argument_list></call> "distributed scache failed to obtain context"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00739</expr></argument>)</argument_list></call> "distributed scache context initialised"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>socache_dc_destroy</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>ctx</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>dc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>DC_CTX_free</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>dc</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_dc_store</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
<param><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>der</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>der_len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>expiry</name> -= <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>DC_CTX_add_session</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>dc</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>, <argument><expr><name>der</name></expr></argument>, <argument><expr><name>der_len</name></expr></argument>,
<argument><expr><call><name>apr_time_msec</name><argument_list>(<argument><expr><name>expiry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00740</expr></argument>)</argument_list></call> "distributed scache 'store' failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00741</expr></argument>)</argument_list></call> "distributed scache 'store' successful"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_dc_retrieve</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>dest</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>destlen</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>data_len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>DC_CTX_get_session</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>dc</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr>*<name>destlen</name></expr></argument>, <argument><expr>&amp;<name>data_len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00742</expr></argument>)</argument_list></call> "distributed scache 'retrieve' MISS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>data_len</name> &gt; *<name>destlen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00743</expr></argument>)</argument_list></call> "distributed scache 'retrieve' OVERFLOW"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>destlen</name> = <name>data_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00744</expr></argument>)</argument_list></call> "distributed scache 'retrieve' HIT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_dc_remove</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>DC_CTX_remove_session</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>dc</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00745</expr></argument>)</argument_list></call> "distributed scache 'remove' MISS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00746</expr></argument>)</argument_list></call> "distributed scache 'remove' HIT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>socache_dc_status</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00747</expr></argument>)</argument_list></call>
"distributed scache 'socache_dc_status'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"cache type: &lt;b&gt;DC (Distributed Cache)&lt;/b&gt;, "
" target: &lt;b&gt;%s&lt;/b&gt;&lt;br&gt;"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"CacheType: DC\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheTarget: "</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_dc_iterate</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userctx</name></decl></param>,
<param><decl><type><name>ap_socache_iterator_t</name> *</type><name>iterator</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>APR_ENOTIMPL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ap_socache_provider_t</name></type> <name>socache_dc</name> <init>= <expr><block>{
<expr>"distcache"</expr>,
<expr>0</expr>,
<expr><name>socache_dc_create</name></expr>,
<expr><name>socache_dc_init</name></expr>,
<expr><name>socache_dc_destroy</name></expr>,
<expr><name>socache_dc_store</name></expr>,
<expr><name>socache_dc_retrieve</name></expr>,
<expr><name>socache_dc_remove</name></expr>,
<expr><name>socache_dc_status</name></expr>,
<expr><name>socache_dc_iterate</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AP_SOCACHE_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"dc"</expr></argument>,
<argument><expr><name>AP_SOCACHE_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>socache_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>socache_dc</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
