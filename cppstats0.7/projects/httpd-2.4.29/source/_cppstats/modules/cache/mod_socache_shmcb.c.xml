<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/cache/mod_socache_shmcb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_shm.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_LIMITS_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_socache.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMCB_MAX_SIZE</name></cpp:macro> <cpp:value>(UINT_MAX&lt;APR_SIZE_MAX ? UINT_MAX : APR_SIZE_MAX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SHMCB_PREFIX</name></cpp:macro> <cpp:value>"socache-shmcb-"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SHMCB_SUFFIX</name></cpp:macro> <cpp:value>".cache"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNED_HEADER_SIZE</name></cpp:macro> <cpp:value>APR_ALIGN_DEFAULT(sizeof(SHMCBHeader))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNED_SUBCACHE_SIZE</name></cpp:macro> <cpp:value>APR_ALIGN_DEFAULT(sizeof(SHMCBSubcache))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNED_INDEX_SIZE</name></cpp:macro> <cpp:value>APR_ALIGN_DEFAULT(sizeof(SHMCBIndex))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>stat_stores</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>stat_replaced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>stat_expiries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>stat_scrolled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>stat_retrieves_hit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>stat_retrieves_miss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>stat_removes_hit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>stat_removes_miss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>subcache_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>subcache_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>subcache_data_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>subcache_data_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>SHMCBHeader</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idx_pos</name></decl>, <name>idx_used</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>data_pos</name></decl>, <name>data_used</name>;</decl_stmt>
}</block></struct></type> <name>SHMCBSubcache</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>expires</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>data_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>data_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>removed</name></decl>;</decl_stmt>
}</block></struct></type> <name>SHMCBIndex</name>;</typedef>
<struct>struct <name>ap_socache_instance_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>shm_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_shm_t</name> *</type><name>shm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHMCBHeader</name> *</type><name>header</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMCB_SUBCACHE</name><parameter_list>(<param><type><name>pHeader</name></type></param>, <param><type><name>num</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(SHMCBSubcache *)(((unsigned char *)(pHeader)) + ALIGNED_HEADER_SIZE + (num) * ((pHeader)-&gt;subcache_size))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMCB_MASK</name><parameter_list>(<param><type><name>pHeader</name></type></param>, <param><type><name>id</name></type></param>)</parameter_list></cpp:macro> <cpp:value>SHMCB_SUBCACHE((pHeader), *(id) &amp; ((pHeader)-&gt;subcache_num - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMCB_MASK_DBG</name><parameter_list>(<param><type><name>pHeader</name></type></param>, <param><type><name>id</name></type></param>)</parameter_list></cpp:macro> <cpp:value>*(id), (*(id) &amp; ((pHeader)-&gt;subcache_num - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMCB_INDEX</name><parameter_list>(<param><type><name>pSubcache</name></type></param>, <param><type><name>num</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(SHMCBIndex *)(((unsigned char *)pSubcache) + ALIGNED_SUBCACHE_SIZE + (num) * ALIGNED_INDEX_SIZE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMCB_DATA</name><parameter_list>(<param><type><name>pHeader</name></type></param>, <param><type><name>pSubcache</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((unsigned char *)(pSubcache) + (pHeader)-&gt;subcache_data_offset)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMCB_CYCLIC_INCREMENT</name><parameter_list>(<param><type><name>val</name></type></param>,<param><type><name>inc</name></type></param>,<param><type><name>mod</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((val) + (inc)) % (mod))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHMCB_CYCLIC_SPACE</name><parameter_list>(<param><type><name>val1</name></type></param>,<param><type><name>val2</name></type></param>,<param><type><name>mod</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((val2) &gt;= (val1) ? ((val2) - (val1)) : ((val2) + (mod) - (val1)))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>shmcb_cyclic_ntoc_memcpy</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_size</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>dest_offset</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>src_len</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>dest_offset</name> + <name>src_len</name> &lt; <name>buf_size</name></expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> + <name>dest_offset</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> + <name>dest_offset</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf_size</name> - <name>dest_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>src</name> + <name>buf_size</name> - <name>dest_offset</name></expr></argument>,
<argument><expr><name>src_len</name> + <name>dest_offset</name> - <name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>shmcb_cyclic_cton_memcpy</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_size</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>src_offset</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>src_len</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>src_offset</name> + <name>src_len</name> &lt; <name>buf_size</name></expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>data</name> + <name>src_offset</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>data</name> + <name>src_offset</name></expr></argument>, <argument><expr><name>buf_size</name> - <name>src_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name> + <name>buf_size</name> - <name>src_offset</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
<argument><expr><name>src_len</name> + <name>src_offset</name> - <name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>shmcb_cyclic_memcmp</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_size</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>dest_offset</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>src_len</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>dest_offset</name> + <name>src_len</name> &lt; <name>buf_size</name></expr>)</condition><then>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name> + <name>dest_offset</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>
<expr_stmt><expr><name>diff</name> = <call><name>memcmp</name><argument_list>(<argument><expr><name>data</name> + <name>dest_offset</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf_size</name> - <name>dest_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>diff</name></expr>)</condition><then> <block>{
<return>return <expr><name>diff</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>src</name> + <name>buf_size</name> - <name>dest_offset</name></expr></argument>,
<argument><expr><name>src_len</name> + <name>dest_offset</name> - <name>buf_size</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>shmcb_subcache_expire</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>SHMCBHeader</name> *</type></decl></param>, <param><decl><type><name>SHMCBSubcache</name> *</type></decl></param>,
<param><decl><type><name>apr_time_t</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>shmcb_subcache_store</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>SHMCBHeader</name> *</type><name>header</name></decl></param>,
<param><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>data_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>id_len</name></decl></param>,
<param><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>shmcb_subcache_retrieve</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>SHMCBHeader</name> *</type></decl></param>, <param><decl><type><name>SHMCBSubcache</name> *</type></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>datalen</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>shmcb_subcache_remove</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type></decl></param>, <param><decl><type><name>SHMCBHeader</name> *</type></decl></param>, <param><decl><type><name>SHMCBSubcache</name> *</type></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>char</name> *</decl></param>, <param><decl><type><name>unsigned</name></type> <name>int</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>shmcb_subcache_iterate</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userctx</name></decl></param>,
<param><decl><type><name>SHMCBHeader</name> *</type><name>header</name></decl></param>,
<param><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name></decl></param>,
<param><decl><type><name>ap_socache_iterator_t</name> *</type><name>iterator</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> **</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>buf_len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>apr_time_t</name></type> <name>now</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>socache_shmcb_create</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> **</type><name>context</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>tmp</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>cp</name></decl>, *<decl><type ref="prev"/><name>cp2</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>context</name> = <name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>shm_size</name></name> = 1024*512</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>arg</name> || *<name>arg</name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>data_file</name></name> = <name>path</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>'('</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp2</name> = <name>path</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> - 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>cp</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>cp2</name> != ')'</expr>)</condition><then> <block>{
<return>return <expr>"Invalid argument: no closing parenthesis or cache size "
"missing after pathname with parenthesis"</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>cp</name>++ = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>cp2</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>shm_size</name></name> = <call><name>strtol</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>endptr</name> != <name>cp2</name></expr>)</condition><then> <block>{
<return>return <expr>"Invalid argument: cache size not numerical"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>shm_size</name></name> &lt; 8192</expr>)</condition><then> <block>{
<return>return <expr>"Invalid argument: size has to be &gt;= 8192 bytes"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>shm_size</name></name> &gt;= <name>SHMCB_MAX_SIZE</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>"Invalid argument: size has "
"to be &lt; %" <name>APR_SIZE_T_FMT</name> " bytes on this platform"</expr></argument>,
<argument><expr><name>SHMCB_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>cp2</name> &gt;= <name>path</name> &amp;&amp; *<name>cp2</name> == ')'</expr>)</condition><then> <block>{
<return>return <expr>"Invalid argument: no opening parenthesis"</expr>;</return>
}</block></then></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_shmcb_init</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>namespace</name></decl></param>,
<param><decl><type><specifier>const</specifier> struct <name>ap_socache_hints</name> *</type><name>hints</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>shm_segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>shm_segsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHMCBHeader</name> *</type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_subcache</name></decl>, <decl><type ref="prev"/><name>num_idx</name></decl>, <decl><type ref="prev"/><name>loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>avg_obj_size</name></decl>, <decl><type ref="prev"/><name>avg_id_len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>data_file</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DEFAULT_SHMCB_PREFIX</name></expr></argument>, <argument><expr><name>namespace</name></expr></argument>,
<argument><expr><name>DEFAULT_SHMCB_SUFFIX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>data_file</name></name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_shm_create</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>shm</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>shm_size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOTIMPL</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>data_file</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00818</expr></argument>)</argument_list></call>
"Could not use default path '%s' for shmcb socache"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_shm_remove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_shm_create</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>shm</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>shm_size</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00819</expr></argument>)</argument_list></call>
"Could not allocate shared memory segment for shmcb "
"socache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>shm_segment</name> = <call><name>apr_shm_baseaddr_get</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>shm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shm_segsize</name> = <call><name>apr_shm_size_get</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>shm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>shm_segsize</name> &lt; (5 * <name>ALIGNED_HEADER_SIZE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00820</expr></argument>)</argument_list></call>
"shared memory segment too small"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00821</expr></argument>)</argument_list></call>
"shmcb_init allocated %" <name>APR_SIZE_T_FMT</name>
" bytes of shared memory"</expr></argument>,
<argument><expr><name>shm_segsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shm_segsize</name> -= <name>ALIGNED_HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>avg_obj_size</name> = <name>hints</name> &amp;&amp; <name><name>hints</name>-&gt;<name>avg_obj_size</name></name> ? <name><name>hints</name>-&gt;<name>avg_obj_size</name></name> : 150</expr>;</expr_stmt>
<expr_stmt><expr><name>avg_id_len</name> = <name>hints</name> &amp;&amp; <name><name>hints</name>-&gt;<name>avg_id_len</name></name> ? <name><name>hints</name>-&gt;<name>avg_id_len</name></name> : 30</expr>;</expr_stmt>
<expr_stmt><expr><name>num_idx</name> = (<name>shm_segsize</name>) / (<name>avg_obj_size</name> + <name>avg_id_len</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>num_subcache</name> = 256</expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>num_idx</name> / <name>num_subcache</name>) &lt; (2 * <name>num_subcache</name>)</expr>)</condition>
<expr_stmt><expr><name>num_subcache</name> /= 2</expr>;</expr_stmt></while>
<expr_stmt><expr><name>num_idx</name> /= <name>num_subcache</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00822</expr></argument>)</argument_list></call>
"for %" <name>APR_SIZE_T_FMT</name> " bytes (%" <name>APR_SIZE_T_FMT</name>
" including header), recommending %u subcaches, "
"%u indexes each"</expr></argument>, <argument><expr><name>shm_segsize</name></expr></argument>,
<argument><expr><name>shm_segsize</name> + <name>ALIGNED_HEADER_SIZE</name></expr></argument>,
<argument><expr><name>num_subcache</name></expr></argument>, <argument><expr><name>num_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>num_idx</name> &lt; 5</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00823</expr></argument>)</argument_list></call>
"shared memory segment too small"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>header</name></name> = <name>header</name> = <name>shm_segment</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_stores</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_replaced</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_expiries</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_scrolled</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_retrieves_hit</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_retrieves_miss</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_removes_hit</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_removes_miss</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>subcache_num</name></name> = <name>num_subcache</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>subcache_size</name></name> = <call>(<name>size_t</name>)<argument_list>(<argument><expr><name>shm_segsize</name> / <name>num_subcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>header</name>-&gt;<name>subcache_size</name></name> != <call><name>APR_ALIGN_DEFAULT</name><argument_list>(<argument><expr><name><name>header</name>-&gt;<name>subcache_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>header</name>-&gt;<name>subcache_size</name></name> = <call><name>APR_ALIGN_DEFAULT</name><argument_list>(<argument><expr><name><name>header</name>-&gt;<name>subcache_size</name></name></expr></argument>)</argument_list></call> -
<call><name>APR_ALIGN_DEFAULT</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>header</name>-&gt;<name>subcache_data_offset</name></name> = <name>ALIGNED_SUBCACHE_SIZE</name> +
<name>num_idx</name> * <name>ALIGNED_INDEX_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name> = <name><name>header</name>-&gt;<name>subcache_size</name></name> -
<name><name>header</name>-&gt;<name>subcache_data_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>index_num</name></name> = <name>num_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00824</expr></argument>)</argument_list></call>
"shmcb_init_memory choices follow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00825</expr></argument>)</argument_list></call>
"subcache_num = %u"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>subcache_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00826</expr></argument>)</argument_list></call>
"subcache_size = %u"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>subcache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00827</expr></argument>)</argument_list></call>
"subcache_data_offset = %u"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>subcache_data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00828</expr></argument>)</argument_list></call>
"subcache_data_size = %u"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00829</expr></argument>)</argument_list></call>
"index_num = %u"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>index_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>loop</name> = 0</expr>;</init> <condition><expr><name>loop</name> &lt; <name><name>header</name>-&gt;<name>subcache_num</name></name></expr>;</condition> <incr><expr><name>loop</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name> <init>= <expr><call><name>SHMCB_SUBCACHE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>idx_pos</name></name> = <name><name>subcache</name>-&gt;<name>idx_used</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>data_pos</name></name> = <name><name>subcache</name>-&gt;<name>data_used</name></name> = 0</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00830</expr></argument>)</argument_list></call>
"Shared memory socache initialised"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>socache_shmcb_destroy</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>ctx</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>shm</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_shm_destroy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>shm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>shm</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_shmcb_store</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>, <param><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>encoded</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>len_encoded</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SHMCBHeader</name> *</type><name>header</name> <init>= <expr><name><name>ctx</name>-&gt;<name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name> <init>= <expr><call><name>SHMCB_MASK</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tryreplace</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00831</expr></argument>)</argument_list></call>
"socache_shmcb_store (0x%02x -&gt; subcache %d)"</expr></argument>,
<argument><expr><call><name>SHMCB_MASK_DBG</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>idlen</name> &lt; 4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00832</expr></argument>)</argument_list></call> "unusably short id provided "
"(%u bytes)"</expr></argument>, <argument><expr><name>idlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>tryreplace</name> = <call><name>shmcb_subcache_remove</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>shmcb_subcache_store</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>,
<argument><expr><name>len_encoded</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>, <argument><expr><name>expiry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00833</expr></argument>)</argument_list></call>
"can't store an socache entry!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>tryreplace</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_replaced</name></name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_stores</name></name>++</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00834</expr></argument>)</argument_list></call>
"leaving socache_shmcb_store successfully"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_shmcb_retrieve</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>dest</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>destlen</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SHMCBHeader</name> *</type><name>header</name> <init>= <expr><name><name>ctx</name>-&gt;<name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name> <init>= <expr><call><name>SHMCB_MASK</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00835</expr></argument>)</argument_list></call>
"socache_shmcb_retrieve (0x%02x -&gt; subcache %d)"</expr></argument>,
<argument><expr><call><name>SHMCB_MASK_DBG</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>shmcb_subcache_retrieve</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>,
<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>destlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_retrieves_hit</name></name>++</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_retrieves_miss</name></name>++</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00836</expr></argument>)</argument_list></call>
"leaving socache_shmcb_retrieve successfully"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name> == 0 ? <name>APR_SUCCESS</name> : <name>APR_NOTFOUND</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_shmcb_remove</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SHMCBHeader</name> *</type><name>header</name> <init>= <expr><name><name>ctx</name>-&gt;<name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name> <init>= <expr><call><name>SHMCB_MASK</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00837</expr></argument>)</argument_list></call>
"socache_shmcb_remove (0x%02x -&gt; subcache %d)"</expr></argument>,
<argument><expr><call><name>SHMCB_MASK_DBG</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>idlen</name> &lt; 4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00838</expr></argument>)</argument_list></call> "unusably short id provided "
"(%u bytes)"</expr></argument>, <argument><expr><name>idlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>shmcb_subcache_remove</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_removes_hit</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_removes_miss</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_NOTFOUND</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00839</expr></argument>)</argument_list></call>
"leaving socache_shmcb_remove successfully"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>socache_shmcb_status</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHMCBHeader</name> *</type><name>header</name> <init>= <expr><name><name>ctx</name>-&gt;<name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>loop</name></decl>, <decl><type ref="prev"/><name>total</name> <init>= <expr>0</expr></init>, <name>cache_total</name> <init>= <expr>0</expr></init>, <name>non_empty_subcaches</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>idx_expiry</name></decl>, <decl><type ref="prev"/><name>min_expiry</name> <init>= <expr>0</expr></init>, <name>max_expiry</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name> <init>= <expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>expiry_total</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index_pct</name></decl>, <decl><type ref="prev"/><name>cache_pct</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name><name>header</name>-&gt;<name>subcache_num</name></name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00840</expr></argument>)</argument_list></call> "inside shmcb_status"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>loop</name> = 0</expr>;</init> <condition><expr><name>loop</name> &lt; <name><name>header</name>-&gt;<name>subcache_num</name></name></expr>;</condition> <incr><expr><name>loop</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name> <init>= <expr><call><name>SHMCB_SUBCACHE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>shmcb_subcache_expire</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> += <name><name>subcache</name>-&gt;<name>idx_used</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_total</name> += <name><name>subcache</name>-&gt;<name>data_used</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>subcache</name>-&gt;<name>idx_used</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>SHMCBIndex</name> *</type><name>idx</name> <init>= <expr><call><name>SHMCB_INDEX</name><argument_list>(<argument><expr><name>subcache</name></expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>idx_pos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>non_empty_subcaches</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>idx_expiry</name> = <name><name>idx</name>-&gt;<name>expires</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>expiry_total</name> += (<name>double</name>)<name>idx_expiry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_expiry</name> = ((<name>idx_expiry</name> &gt; <name>max_expiry</name>) ? <name>idx_expiry</name> : <name>max_expiry</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>min_expiry</name></expr>)</condition><then>
<expr_stmt><expr><name>min_expiry</name> = <name>idx_expiry</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>min_expiry</name> = ((<name>idx_expiry</name> &lt; <name>min_expiry</name>) ? <name>idx_expiry</name> : <name>min_expiry</name>)</expr>;</expr_stmt></else></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>index_pct</name> = (100 * <name>total</name>) / (<name><name>header</name>-&gt;<name>index_num</name></name> *
<name><name>header</name>-&gt;<name>subcache_num</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>cache_pct</name> = (100 * <name>cache_total</name>) / (<name><name>header</name>-&gt;<name>subcache_data_size</name></name> *
<name><name>header</name>-&gt;<name>subcache_num</name></name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"cache type: &lt;b&gt;SHMCB&lt;/b&gt;, shared memory: &lt;b&gt;%" <name>APR_SIZE_T_FMT</name> "&lt;/b&gt; "
"bytes, current entries: &lt;b&gt;%d&lt;/b&gt;&lt;br&gt;"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>shm_size</name></name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"subcaches: &lt;b&gt;%d&lt;/b&gt;, indexes per subcache: &lt;b&gt;%d&lt;/b&gt;&lt;br&gt;"</expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>subcache_num</name></name></expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>index_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>non_empty_subcaches</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>average_expiry</name> <init>= <expr><call>(<name>apr_time_t</name>)<argument_list>(<argument><expr><name>expiry_total</name> / (<name>double</name>)<name>non_empty_subcaches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"time left on oldest entries' objects: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>now</name> &lt; <name>average_expiry</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"avg: &lt;b&gt;%d&lt;/b&gt; seconds, (range: %d...%d)&lt;br&gt;"</expr></argument>,
<argument><expr>(<name>int</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>average_expiry</name> - <name>now</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>int</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>min_expiry</name> - <name>now</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>int</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>max_expiry</name> - <name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"expiry_threshold: &lt;b&gt;Calculation error!&lt;/b&gt;&lt;br&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"index usage: &lt;b&gt;%d%%&lt;/b&gt;, cache usage: &lt;b&gt;%d%%&lt;/b&gt;&lt;br&gt;"</expr></argument>,
<argument><expr><name>index_pct</name></expr></argument>, <argument><expr><name>cache_pct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"total entries stored since starting: &lt;b&gt;%lu&lt;/b&gt;&lt;br&gt;"</expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>stat_stores</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"total entries replaced since starting: &lt;b&gt;%lu&lt;/b&gt;&lt;br&gt;"</expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>stat_replaced</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"total entries expired since starting: &lt;b&gt;%lu&lt;/b&gt;&lt;br&gt;"</expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>stat_expiries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"total (pre-expiry) entries scrolled out of the cache: "
"&lt;b&gt;%lu&lt;/b&gt;&lt;br&gt;"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>stat_scrolled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"total retrieves since starting: &lt;b&gt;%lu&lt;/b&gt; hit, "
"&lt;b&gt;%lu&lt;/b&gt; miss&lt;br&gt;"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>stat_retrieves_hit</name></name></expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>stat_retrieves_miss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"total removes since starting: &lt;b&gt;%lu&lt;/b&gt; hit, "
"&lt;b&gt;%lu&lt;/b&gt; miss&lt;br&gt;"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>stat_removes_hit</name></name></expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>stat_removes_miss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"CacheType: SHMCB\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheSharedMemory: %" <name>APR_SIZE_T_FMT</name> "\n"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>shm_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheCurrentEntries: %d\n"</expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheSubcaches: %d\n"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>subcache_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheIndexesPerSubcaches: %d\n"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>index_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>non_empty_subcaches</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>average_expiry</name> <init>= <expr><call>(<name>apr_time_t</name>)<argument_list>(<argument><expr><name>expiry_total</name> / (<name>double</name>)<name>non_empty_subcaches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>now</name> &lt; <name>average_expiry</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheTimeLeftOldestAvg: %d\n"</expr></argument>, <argument><expr>(<name>int</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>average_expiry</name> - <name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheTimeLeftOldestMin: %d\n"</expr></argument>, <argument><expr>(<name>int</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>min_expiry</name> - <name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheTimeLeftOldestMax: %d\n"</expr></argument>, <argument><expr>(<name>int</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>max_expiry</name> - <name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheIndexUsage: %d%%\n"</expr></argument>, <argument><expr><name>index_pct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheUsage: %d%%\n"</expr></argument>, <argument><expr><name>cache_pct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheStoreCount: %lu\n"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>stat_stores</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheReplaceCount: %lu\n"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>stat_replaced</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheExpireCount: %lu\n"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>stat_expiries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheDiscardCount: %lu\n"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>stat_scrolled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheRetrieveHitCount: %lu\n"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>stat_retrieves_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheRetrieveMissCount: %lu\n"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>stat_retrieves_miss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheRemoveHitCount: %lu\n"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>stat_removes_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheRemoveMissCount: %lu\n"</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>stat_removes_miss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00841</expr></argument>)</argument_list></call> "leaving shmcb_status"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_shmcb_iterate</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userctx</name></decl></param>,
<param><decl><type><name>ap_socache_iterator_t</name> *</type><name>iterator</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SHMCBHeader</name> *</type><name>header</name> <init>= <expr><name><name>instance</name>-&gt;<name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name> <init>= <expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>buflen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>loop</name> = 0</expr>;</init> <condition><expr><name>loop</name> &lt; <name><name>header</name>-&gt;<name>subcache_num</name></name> &amp;&amp; <name>rv</name> == <name>APR_SUCCESS</name></expr>;</condition> <incr><expr><name>loop</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name> <init>= <expr><call><name>SHMCB_SUBCACHE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>shmcb_subcache_iterate</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>userctx</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>,
<argument><expr><name>iterator</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr>&amp;<name>buflen</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>shmcb_subcache_expire</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>SHMCBHeader</name> *</type><name>header</name></decl></param>,
<param><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name></decl></param>, <param><decl><type><name>apr_time_t</name></type> <name>now</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>loop</name> <init>= <expr>0</expr></init>, <name>freed</name> <init>= <expr>0</expr></init>, <name>expired</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>new_idx_pos</name> <init>= <expr><name><name>subcache</name>-&gt;<name>idx_pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHMCBIndex</name> *</type><name>idx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>loop</name> &lt; <name><name>subcache</name>-&gt;<name>idx_used</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>idx</name> = <call><name>SHMCB_INDEX</name><argument_list>(<argument><expr><name>subcache</name></expr></argument>, <argument><expr><name>new_idx_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>idx</name>-&gt;<name>removed</name></name></expr>)</condition><then>
<expr_stmt><expr><name>freed</name>++</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>idx</name>-&gt;<name>expires</name></name> &lt;= <name>now</name></expr>)</condition><then>
<expr_stmt><expr><name>expired</name>++</expr>;</expr_stmt></then>
<else>else
<break>break;</break></else></if></else></if>
<expr_stmt><expr><name>loop</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>new_idx_pos</name> = <call><name>SHMCB_CYCLIC_INCREMENT</name><argument_list>(<argument><expr><name>new_idx_pos</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>index_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<name>loop</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00842</expr></argument>)</argument_list></call>
"expiring %u and reclaiming %u removed socache entries"</expr></argument>,
<argument><expr><name>expired</name></expr></argument>, <argument><expr><name>freed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>loop</name> == <name><name>subcache</name>-&gt;<name>idx_used</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>idx_used</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>data_used</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>diff</name> <init>= <expr><call><name>SHMCB_CYCLIC_SPACE</name><argument_list>(<argument><expr><name><name>subcache</name>-&gt;<name>data_pos</name></name></expr></argument>,
<argument><expr><name><name>idx</name>-&gt;<name>data_pos</name></name></expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>idx_used</name></name> -= <name>loop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>idx_pos</name></name> = <name>new_idx_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>data_used</name></name> -= <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>data_pos</name></name> = <name><name>idx</name>-&gt;<name>data_pos</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_expiries</name></name> += <name>expired</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00843</expr></argument>)</argument_list></call>
"we now have %u socache entries"</expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>idx_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>shmcb_subcache_store</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>SHMCBHeader</name> *</type><name>header</name></decl></param>,
<param><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>data_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>id_len</name></decl></param>,
<param><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>data_offset</name></decl>, <decl><type ref="prev"/><name>new_idx</name></decl>, <decl><type ref="prev"/><name>id_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHMCBIndex</name> *</type><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total_len</name> <init>= <expr><name>id_len</name> + <name>data_len</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>total_len</name> &gt; <name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00844</expr></argument>)</argument_list></call>
"inserting socache entry larger (%d) than subcache data area (%d)"</expr></argument>,
<argument><expr><name>total_len</name></expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>shmcb_subcache_expire</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>, <argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name> - <name><name>subcache</name>-&gt;<name>data_used</name></name> &lt; <name>total_len</name>
|| <name><name>subcache</name>-&gt;<name>idx_used</name></name> == <name><name>header</name>-&gt;<name>index_num</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>loop</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> = <call><name>SHMCB_INDEX</name><argument_list>(<argument><expr><name>subcache</name></expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>idx_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00845</expr></argument>)</argument_list></call>
"about to force-expire, subcache: idx_used=%d, "
"data_used=%d"</expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>idx_used</name></name></expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>data_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>SHMCBIndex</name> *</type><name>idx2</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>idx_pos</name></name> = <call><name>SHMCB_CYCLIC_INCREMENT</name><argument_list>(<argument><expr><name><name>subcache</name>-&gt;<name>idx_pos</name></name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>index_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>idx_used</name></name>--</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>subcache</name>-&gt;<name>idx_used</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>data_used</name></name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>idx2</name> = <call><name>SHMCB_INDEX</name><argument_list>(<argument><expr><name>subcache</name></expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>idx_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>data_used</name></name> -= <call><name>SHMCB_CYCLIC_SPACE</name><argument_list>(<argument><expr><name><name>idx</name>-&gt;<name>data_pos</name></name></expr></argument>, <argument><expr><name><name>idx2</name>-&gt;<name>data_pos</name></name></expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>data_pos</name></name> = <name><name>idx2</name>-&gt;<name>data_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_scrolled</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> = <name>idx2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name>++</expr>;</expr_stmt>
}</block> while <condition>(<expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name> - <name><name>subcache</name>-&gt;<name>data_used</name></name> &lt; <name>total_len</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00846</expr></argument>)</argument_list></call>
"finished force-expire, subcache: idx_used=%d, "
"data_used=%d"</expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>idx_used</name></name></expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>data_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>id_offset</name> = <call><name>SHMCB_CYCLIC_INCREMENT</name><argument_list>(<argument><expr><name><name>subcache</name>-&gt;<name>data_pos</name></name></expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>data_used</name></name></expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shmcb_cyclic_ntoc_memcpy</name><argument_list>(<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>,
<argument><expr><call><name>SHMCB_DATA</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id_offset</name></expr></argument>,
<argument><expr><name>id</name></expr></argument>, <argument><expr><name>id_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>data_used</name></name> += <name>id_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_offset</name> = <call><name>SHMCB_CYCLIC_INCREMENT</name><argument_list>(<argument><expr><name><name>subcache</name>-&gt;<name>data_pos</name></name></expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>data_used</name></name></expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shmcb_cyclic_ntoc_memcpy</name><argument_list>(<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>,
<argument><expr><call><name>SHMCB_DATA</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_offset</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>data_used</name></name> += <name>data_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_idx</name> = <call><name>SHMCB_CYCLIC_INCREMENT</name><argument_list>(<argument><expr><name><name>subcache</name>-&gt;<name>idx_pos</name></name></expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>idx_used</name></name></expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>index_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> = <call><name>SHMCB_INDEX</name><argument_list>(<argument><expr><name>subcache</name></expr></argument>, <argument><expr><name>new_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name>-&gt;<name>expires</name></name> = <name>expiry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name>-&gt;<name>data_pos</name></name> = <name>id_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name>-&gt;<name>data_used</name></name> = <name>total_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name>-&gt;<name>id_len</name></name> = <name>id_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name>-&gt;<name>removed</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>subcache</name>-&gt;<name>idx_used</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00847</expr></argument>)</argument_list></call>
"insert happened at idx=%d, data=(%u:%u)"</expr></argument>, <argument><expr><name>new_idx</name></expr></argument>,
<argument><expr><name>id_offset</name></expr></argument>, <argument><expr><name>data_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00848</expr></argument>)</argument_list></call>
"finished insert, subcache: idx_pos/idx_used=%d/%d, "
"data_pos/data_used=%d/%d"</expr></argument>,
<argument><expr><name><name>subcache</name>-&gt;<name>idx_pos</name></name></expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>idx_used</name></name></expr></argument>,
<argument><expr><name><name>subcache</name>-&gt;<name>data_pos</name></name></expr></argument>, <argument><expr><name><name>subcache</name>-&gt;<name>data_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>shmcb_subcache_retrieve</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>SHMCBHeader</name> *</type><name>header</name></decl></param>,
<param><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>dest</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>destlen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>loop</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name> <init>= <expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pos</name> = <name><name>subcache</name>-&gt;<name>idx_pos</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>loop</name> &lt; <name><name>subcache</name>-&gt;<name>idx_used</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>SHMCBIndex</name> *</type><name>idx</name> <init>= <expr><call><name>SHMCB_INDEX</name><argument_list>(<argument><expr><name>subcache</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>idx</name>-&gt;<name>removed</name></name>
&amp;&amp; <name><name>idx</name>-&gt;<name>id_len</name></name> == <name>idlen</name>
&amp;&amp; (<name><name>idx</name>-&gt;<name>data_used</name></name> - <name><name>idx</name>-&gt;<name>id_len</name></name>) &lt;= *<name>destlen</name>
&amp;&amp; <call><name>shmcb_cyclic_memcmp</name><argument_list>(<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>,
<argument><expr><call><name>SHMCB_DATA</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>idx</name>-&gt;<name>data_pos</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>idx</name>-&gt;<name>id_len</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00849</expr></argument>)</argument_list></call>
"match at idx=%d, data=%d"</expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>idx</name>-&gt;<name>data_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>idx</name>-&gt;<name>expires</name></name> &gt; <name>now</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>data_offset</name></decl>;</decl_stmt>
<expr_stmt><expr><name>data_offset</name> = <call><name>SHMCB_CYCLIC_INCREMENT</name><argument_list>(<argument><expr><name><name>idx</name>-&gt;<name>data_pos</name></name></expr></argument>,
<argument><expr><name><name>idx</name>-&gt;<name>id_len</name></name></expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>destlen</name> = <name><name>idx</name>-&gt;<name>data_used</name></name> - <name><name>idx</name>-&gt;<name>id_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shmcb_cyclic_cton_memcpy</name><argument_list>(<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>,
<argument><expr><name>dest</name></expr></argument>, <argument><expr><call><name>SHMCB_DATA</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>data_offset</name></expr></argument>, <argument><expr>*<name>destlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>idx</name>-&gt;<name>removed</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_expiries</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00850</expr></argument>)</argument_list></call>
"shmcb_subcache_retrieve discarding expired entry"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>loop</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = <call><name>SHMCB_CYCLIC_INCREMENT</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>index_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00851</expr></argument>)</argument_list></call>
"shmcb_subcache_retrieve found no match"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>shmcb_subcache_remove</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>SHMCBHeader</name> *</type><name>header</name></decl></param>,
<param><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>loop</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pos</name> = <name><name>subcache</name>-&gt;<name>idx_pos</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>loop</name> &lt; <name><name>subcache</name>-&gt;<name>idx_used</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>SHMCBIndex</name> *</type><name>idx</name> <init>= <expr><call><name>SHMCB_INDEX</name><argument_list>(<argument><expr><name>subcache</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>idx</name>-&gt;<name>removed</name></name> &amp;&amp; <name><name>idx</name>-&gt;<name>id_len</name></name> == <name>idlen</name>
&amp;&amp; <call><name>shmcb_cyclic_memcmp</name><argument_list>(<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>,
<argument><expr><call><name>SHMCB_DATA</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>idx</name>-&gt;<name>data_pos</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>idx</name>-&gt;<name>id_len</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00852</expr></argument>)</argument_list></call>
"possible match at idx=%d, data=%d"</expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>idx</name>-&gt;<name>data_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name>-&gt;<name>removed</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00853</expr></argument>)</argument_list></call>
"shmcb_subcache_remove removing matching entry"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>loop</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = <call><name>SHMCB_CYCLIC_INCREMENT</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>index_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>shmcb_subcache_iterate</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userctx</name></decl></param>,
<param><decl><type><name>SHMCBHeader</name> *</type><name>header</name></decl></param>,
<param><decl><type><name>SHMCBSubcache</name> *</type><name>subcache</name></decl></param>,
<param><decl><type><name>ap_socache_iterator_t</name> *</type><name>iterator</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> **</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>buf_len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>apr_time_t</name></type> <name>now</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>loop</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pos</name> = <name><name>subcache</name>-&gt;<name>idx_pos</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>loop</name> &lt; <name><name>subcache</name>-&gt;<name>idx_used</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>SHMCBIndex</name> *</type><name>idx</name> <init>= <expr><call><name>SHMCB_INDEX</name><argument_list>(<argument><expr><name>subcache</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>idx</name>-&gt;<name>removed</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00854</expr></argument>)</argument_list></call>
"iterating idx=%d, data=%d"</expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>idx</name>-&gt;<name>data_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>idx</name>-&gt;<name>expires</name></name> &gt; <name>now</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>id</name> <init>= <expr>*<name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>data_offset</name></decl>, <decl><type ref="prev"/><name>dest_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>buf_req</name></decl>;</decl_stmt>
<expr_stmt><expr><name>data_offset</name> = <call><name>SHMCB_CYCLIC_INCREMENT</name><argument_list>(<argument><expr><name><name>idx</name>-&gt;<name>data_pos</name></name></expr></argument>,
<argument><expr><name><name>idx</name>-&gt;<name>id_len</name></name></expr></argument>,
<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_len</name> = <name><name>idx</name>-&gt;<name>data_used</name></name> - <name><name>idx</name>-&gt;<name>id_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_req</name> = <call><name>APR_ALIGN_DEFAULT</name><argument_list>(<argument><expr><name><name>idx</name>-&gt;<name>id_len</name></name> + 1</expr></argument>)</argument_list></call>
+ <call><name>APR_ALIGN_DEFAULT</name><argument_list>(<argument><expr><name>dest_len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>buf_req</name> &gt; *<name>buf_len</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>buf_len</name> = <name>buf_req</name> + <call><name>APR_ALIGN_DEFAULT</name><argument_list>(<argument><expr><name>buf_req</name> / 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> = *<name>buf</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>dest</name> = *<name>buf</name> + <call><name>APR_ALIGN_DEFAULT</name><argument_list>(<argument><expr><name><name>idx</name>-&gt;<name>id_len</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shmcb_cyclic_cton_memcpy</name><argument_list>(<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>,
<argument><expr><call><name>SHMCB_DATA</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>idx</name>-&gt;<name>data_pos</name></name></expr></argument>, <argument><expr><name><name>idx</name>-&gt;<name>id_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><index>[<expr><name><name>idx</name>-&gt;<name>id_len</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>shmcb_cyclic_cton_memcpy</name><argument_list>(<argument><expr><name><name>header</name>-&gt;<name>subcache_data_size</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>,
<argument><expr><call><name>SHMCB_DATA</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>subcache</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>data_offset</name></expr></argument>, <argument><expr><name>dest_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>dest_len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>iterator</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>userctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>idx</name>-&gt;<name>id_len</name></name></expr></argument>,
<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dest_len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00855</expr></argument>)</argument_list></call>
"shmcb entry iterated"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>idx</name>-&gt;<name>removed</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name>-&gt;<name>stat_expiries</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00856</expr></argument>)</argument_list></call>
"shmcb_subcache_iterate discarding expired entry"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>loop</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = <call><name>SHMCB_CYCLIC_INCREMENT</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>index_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ap_socache_provider_t</name></type> <name>socache_shmcb</name> <init>= <expr><block>{
<expr>"shmcb"</expr>,
<expr><name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>,
<expr><name>socache_shmcb_create</name></expr>,
<expr><name>socache_shmcb_init</name></expr>,
<expr><name>socache_shmcb_destroy</name></expr>,
<expr><name>socache_shmcb_store</name></expr>,
<expr><name>socache_shmcb_retrieve</name></expr>,
<expr><name>socache_shmcb_remove</name></expr>,
<expr><name>socache_shmcb_status</name></expr>,
<expr><name>socache_shmcb_iterate</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AP_SOCACHE_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"shmcb"</expr></argument>,
<argument><expr><name>AP_SOCACHE_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>socache_shmcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AP_SOCACHE_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name>AP_SOCACHE_DEFAULT_PROVIDER</name></expr></argument>,
<argument><expr><name>AP_SOCACHE_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>socache_shmcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>socache_shmcb</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
