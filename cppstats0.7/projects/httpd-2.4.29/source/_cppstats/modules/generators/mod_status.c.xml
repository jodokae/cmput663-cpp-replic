<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/generators/mod_status.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_status.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_MAXLINE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KBYTE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBYTE</name></cpp:macro> <cpp:value>1048576L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GBYTE</name></cpp:macro> <cpp:value>1073741824L</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_TIME_FORMAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TIME_FORMAT</name></cpp:macro> <cpp:value>"%A, %d-%b-%Y %H:%M:%S %Z"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_MAGIC_TYPE</name></cpp:macro> <cpp:value>"application/x-httpd-status"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>status_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>server_limit</name></decl>, <decl><type ref="prev"/><name>thread_limit</name></decl>, <decl><type ref="prev"/><name>threads_per_child</name></decl>, <decl><type ref="prev"/><name>max_servers</name></decl>,
<decl><type ref="prev"/><name>is_async</name></decl>;</decl_stmt>
<macro><name>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><argument_list>(<argument>ap</argument>, <argument>STATUS</argument>, <argument>int</argument>, <argument>status_hook</argument>,
<argument>(request_rec *r, int flags)</argument>,
<argument>(r, flags)</argument>,
<argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>child_pid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>format_byte_out</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>bytes</name> &lt; (5 * <name>KBYTE</name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"%d B"</expr></argument>, <argument><expr>(<name>int</name>) <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>bytes</name> &lt; (<name>MBYTE</name> / 2)</expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"%.1f kB"</expr></argument>, <argument><expr>(<name>float</name>) <name>bytes</name> / <name>KBYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>bytes</name> &lt; (<name>GBYTE</name> / 2)</expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"%.1f MB"</expr></argument>, <argument><expr>(<name>float</name>) <name>bytes</name> / <name>MBYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"%.1f GB"</expr></argument>, <argument><expr>(<name>float</name>) <name>bytes</name> / <name>GBYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>format_kbyte_out</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>kbytes</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>kbytes</name> &lt; <name>KBYTE</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"%d kB"</expr></argument>, <argument><expr>(<name>int</name>) <name>kbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>kbytes</name> &lt; <name>MBYTE</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"%.1f MB"</expr></argument>, <argument><expr>(<name>float</name>) <name>kbytes</name> / <name>KBYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"%.1f GB"</expr></argument>, <argument><expr>(<name>float</name>) <name>kbytes</name> / <name>MBYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>show_time</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_uint32_t</name></type> <name>tsecs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>days</name></decl>, <decl><type ref="prev"/><name>hrs</name></decl>, <decl><type ref="prev"/><name>mins</name></decl>, <decl><type ref="prev"/><name>secs</name></decl>;</decl_stmt>
<expr_stmt><expr><name>secs</name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>tsecs</name> % 60</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tsecs</name> /= 60</expr>;</expr_stmt>
<expr_stmt><expr><name>mins</name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>tsecs</name> % 60</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tsecs</name> /= 60</expr>;</expr_stmt>
<expr_stmt><expr><name>hrs</name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>tsecs</name> % 24</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>days</name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>tsecs</name> / 24</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>days</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" %d day%s"</expr></argument>, <argument><expr><name>days</name></expr></argument>, <argument><expr><name>days</name> == 1 ? "" : "s"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>hrs</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" %d hour%s"</expr></argument>, <argument><expr><name>hrs</name></expr></argument>, <argument><expr><name>hrs</name> == 1 ? "" : "s"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>mins</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" %d minute%s"</expr></argument>, <argument><expr><name>mins</name></expr></argument>, <argument><expr><name>mins</name> == 1 ? "" : "s"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>secs</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" %d second%s"</expr></argument>, <argument><expr><name>secs</name></expr></argument>, <argument><expr><name>secs</name> == 1 ? "" : "s"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAT_OPT_END</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAT_OPT_REFRESH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAT_OPT_NOTABLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAT_OPT_AUTO</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<struct>struct <name>stat_opt</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>form_data_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hdr_out_str</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> struct <name>stat_opt</name></type> <name><name>status_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>STAT_OPT_REFRESH</name></expr>, <expr>"refresh"</expr>, <expr>"Refresh"</expr>}</block></expr>,
<expr><block>{<expr><name>STAT_OPT_NOTABLE</name></expr>, <expr>"notable"</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr><name>STAT_OPT_AUTO</name></expr>, <expr>"auto"</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr><name>STAT_OPT_END</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_DISABLED</name></cpp:macro> <cpp:value>SERVER_NUM_STATUS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_STATUS_NUM_STATUS</name></cpp:macro> <cpp:value>(SERVER_NUM_STATUS+1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>status_flags</name><index>[<expr><name>MOD_STATUS_NUM_STATUS</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>status_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>nowtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>up_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_loadavg_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ready</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>busy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>lres</name></decl>, <decl><type ref="prev"/><name>my_lres</name></decl>, <decl><type ref="prev"/><name>conn_lres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>my_bytes</name></decl>, <decl><type ref="prev"/><name>conn_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bcount</name></decl>, <decl><type ref="prev"/><name>kbcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>req_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>short_report</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_table_report</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>worker_score</name> *</type><name>ws_record</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>process_score</name> *</type><name>ps_record</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>stat_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name> *</type><name>pid_buffer</name></decl>, <decl><type ref="prev"/><name>worker_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> *</type><name>thread_idle_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> *</type><name>thread_busy_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clock_t</name></type> <name>tu</name></decl>, <decl><type ref="prev"/><name>ts</name></decl>, <decl><type ref="prev"/><name>tcu</name></decl>, <decl><type ref="prev"/><name>tcs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_generation_t</name></type> <name>mpm_generation</name></decl>, <decl><type ref="prev"/><name>worker_generation</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>float</name></type> <name>tick</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>times_per_thread</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr><name>STATUS_MAGIC_TYPE</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>,
<argument><expr>"server-status"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>times_per_thread</name> = <call><name>getpid</name><argument_list>()</argument_list></call> != <name>child_pid</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_GENERATION</name></expr></argument>, <argument><expr>&amp;<name>mpm_generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SC_CLK_TCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tick</name> = <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_CLK_TCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tick</name> = <name>HZ</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ready</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>busy</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>bcount</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>kbcount</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>short_report</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>no_table_report</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>pid_buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>server_limit</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>pid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stat_buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>server_limit</name> * <name>thread_limit</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_async</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>thread_idle_buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>server_limit</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>thread_busy_buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>server_limit</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>nowtime</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tu</name> = <name>ts</name> = <name>tcu</name> = <name>tcs</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>ap_exists_scoreboard_image</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01237</expr></argument>)</argument_list></call>
"Server status unavailable in inetd mode"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>allowed</name></name> = (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_GET</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name></expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/html; charset=ISO-8859-1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>status_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>id</name> != <name>STAT_OPT_END</name></expr>)</condition> <block>{
<if>if <condition>(<expr>(<name>loc</name> = <call><name>ap_strstr_c</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>,
<argument><expr><name><name>status_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>form_data_str</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><name><name>status_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>id</name></expr>)</condition> <block>{
<case>case <expr><name>STAT_OPT_REFRESH</name></expr>: <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>status_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>form_data_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>t</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*(<name>loc</name> + <name>len</name> ) == '='</expr>)</condition><then> <block>{
<expr_stmt><expr><name>t</name> = <call><name>atol</name><argument_list>(<argument><expr><name>loc</name> + <name>len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr><name><name>status_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>hdr_out_str</name></expr></argument>,
<argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>t</name> &lt; 1 ? 10 : <name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>STAT_OPT_NOTABLE</name></expr>:
<expr_stmt><expr><name>no_table_report</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>STAT_OPT_AUTO</name></expr>:
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/plain; charset=ISO-8859-1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>short_report</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
}</block></then></if>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<expr_stmt><expr><name>ws_record</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>sizeof *<name>ws_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>server_limit</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>clock_t</name></type> <name>proc_tu</name> <init>= <expr>0</expr></init>, <name>proc_ts</name> <init>= <expr>0</expr></init>, <name>proc_tcu</name> <init>= <expr>0</expr></init>, <name>proc_tcs</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clock_t</name></type> <name>tmp_tu</name></decl>, <decl><type ref="prev"/><name>tmp_ts</name></decl>, <decl><type ref="prev"/><name>tmp_tcu</name></decl>, <decl><type ref="prev"/><name>tmp_tcs</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ps_record</name> = <call><name>ap_get_scoreboard_process</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_async</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>thread_idle_buffer</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread_busy_buffer</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>thread_limit</name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>indx</name> <init>= <expr>(<name>i</name> * <name>thread_limit</name>) + <name>j</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_copy_scoreboard_worker</name><argument_list>(<argument><expr><name>ws_record</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <name><name>ws_record</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>i</name> &gt;= <name>max_servers</name> || <name>j</name> &gt;= <name>threads_per_child</name>)
&amp;&amp; (<name>res</name> == <name>SERVER_DEAD</name>)</expr>)</condition><then>
<expr_stmt><expr><name><name>stat_buffer</name><index>[<expr><name>indx</name></expr>]</index></name> = <name><name>status_flags</name><index>[<expr><name>SERVER_DISABLED</name></expr>]</index></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>stat_buffer</name><index>[<expr><name>indx</name></expr>]</index></name> = <name><name>status_flags</name><index>[<expr><name>res</name></expr>]</index></name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>!<name><name>ps_record</name>-&gt;<name>quiescing</name></name>
&amp;&amp; <name><name>ps_record</name>-&gt;<name>pid</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>res</name> == <name>SERVER_READY</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ps_record</name>-&gt;<name>generation</name></name> == <name>mpm_generation</name></expr>)</condition><then>
<expr_stmt><expr><name>ready</name>++</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>is_async</name></expr>)</condition><then>
<expr_stmt><expr><name><name>thread_idle_buffer</name><index>[<expr><name>i</name></expr>]</index></name>++</expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>res</name> != <name>SERVER_DEAD</name> &amp;&amp;
<name>res</name> != <name>SERVER_STARTING</name> &amp;&amp;
<name>res</name> != <name>SERVER_IDLE_KILL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>busy</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_async</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>res</name> == <name>SERVER_GRACEFUL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>thread_idle_buffer</name><index>[<expr><name>i</name></expr>]</index></name>++</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>thread_busy_buffer</name><index>[<expr><name>i</name></expr>]</index></name>++</expr>;</expr_stmt></else></if>
}</block></then></if>
}</block></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>ap_extended_status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lres</name> = <name><name>ws_record</name>-&gt;<name>access_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> = <name><name>ws_record</name>-&gt;<name>bytes_served</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lres</name> != 0 || (<name>res</name> != <name>SERVER_READY</name> &amp;&amp; <name>res</name> != <name>SERVER_DEAD</name>)</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tmp_tu</name> = <name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_utime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_ts</name> = <name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_stime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_tcu</name> = <name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_cutime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_tcs</name> = <name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_cstime</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>times_per_thread</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>proc_tu</name> += <name>tmp_tu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>proc_ts</name> += <name>tmp_ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>proc_tcu</name> += <name>tmp_tcu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>proc_tcs</name> += <name>tmp_tcs</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>tmp_tu</name> &gt; <name>proc_tu</name> ||
<name>tmp_ts</name> &gt; <name>proc_ts</name> ||
<name>tmp_tcu</name> &gt; <name>proc_tcu</name> ||
<name>tmp_tcs</name> &gt; <name>proc_tcs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>proc_tu</name> = <name>tmp_tu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>proc_ts</name> = <name>tmp_ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>proc_tcu</name> = <name>tmp_tcu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>proc_tcs</name> = <name>tmp_tcs</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>count</name> += <name>lres</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bcount</name> += <name>bytes</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bcount</name> &gt;= <name>KBYTE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>kbcount</name> += (<name>bcount</name> &gt;&gt; 10)</expr>;</expr_stmt>
<expr_stmt><expr><name>bcount</name> = <name>bcount</name> &amp; 0x3ff</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tu</name> += <name>proc_tu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> += <name>proc_ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tcu</name> += <name>proc_tcu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tcs</name> += <name>proc_tcs</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>pid_buffer</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>ps_record</name>-&gt;<name>pid</name></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>up_time</name> = (<name>apr_uint32_t</name>) <call><name>apr_time_sec</name><argument_list>(<argument><expr><name>nowtime</name> -
<name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>restart_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_get_loadavg</name><argument_list>(<argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>short_report</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name>DOCTYPE_HTML_3_2</name>
"&lt;html&gt;&lt;head&gt;\n"
"&lt;title&gt;Apache Status&lt;/title&gt;\n"
"&lt;/head&gt;&lt;body&gt;\n"
"&lt;h1&gt;Apache Server Status for "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>" (via "</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_ip</name></name></expr></argument>,
<argument><expr>")&lt;/h1&gt;\n\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dl&gt;&lt;dt&gt;Server Version: "</expr></argument>,
<argument><expr><call><name>ap_get_server_description</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;Server MPM: "</expr></argument>,
<argument><expr><call><name>ap_show_mpm</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;Server Built: "</expr></argument>,
<argument><expr><call><name>ap_get_server_built</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"\n&lt;/dt&gt;&lt;/dl&gt;&lt;hr /&gt;&lt;dl&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;Current Time: "</expr></argument>,
<argument><expr><call><name>ap_ht_time</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>nowtime</name></expr></argument>, <argument><expr><name>DEFAULT_TIME_FORMAT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;Restart Time: "</expr></argument>,
<argument><expr><call><name>ap_ht_time</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>restart_time</name></name></expr></argument>,
<argument><expr><name>DEFAULT_TIME_FORMAT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;Parent Server Config. Generation: %d&lt;/dt&gt;\n"</expr></argument>,
<argument><expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_CONFIG_GEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;Parent Server MPM Generation: %d&lt;/dt&gt;\n"</expr></argument>,
<argument><expr>(<name>int</name>)<name>mpm_generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;dt&gt;Server uptime: "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_time</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>up_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;Server load: %.2f %.2f %.2f&lt;/dt&gt;\n"</expr></argument>,
<argument><expr><name><name>t</name>.<name>loadavg</name></name></expr></argument>, <argument><expr><name><name>t</name>.<name>loadavg5</name></name></expr></argument>, <argument><expr><name><name>t</name>.<name>loadavg15</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ServerVersion: "</expr></argument>,
<argument><expr><call><name>ap_get_server_description</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ServerMPM: "</expr></argument>,
<argument><expr><call><name>ap_show_mpm</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Server Built: "</expr></argument>,
<argument><expr><call><name>ap_get_server_built</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CurrentTime: "</expr></argument>,
<argument><expr><call><name>ap_ht_time</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>nowtime</name></expr></argument>, <argument><expr><name>DEFAULT_TIME_FORMAT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"RestartTime: "</expr></argument>,
<argument><expr><call><name>ap_ht_time</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>restart_time</name></name></expr></argument>,
<argument><expr><name>DEFAULT_TIME_FORMAT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ParentServerConfigGeneration: %d\n"</expr></argument>,
<argument><expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_CONFIG_GEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ParentServerMPMGeneration: %d\n"</expr></argument>,
<argument><expr>(<name>int</name>)<name>mpm_generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ServerUptimeSeconds: %u\n"</expr></argument>,
<argument><expr><name>up_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"ServerUptime:"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_time</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>up_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Load1: %.2f\nLoad5: %.2f\nLoad15: %.2f\n"</expr></argument>,
<argument><expr><name><name>t</name>.<name>loadavg</name></name></expr></argument>, <argument><expr><name><name>t</name>.<name>loadavg5</name></name></expr></argument>, <argument><expr><name><name>t</name>.<name>loadavg15</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>ap_extended_status</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>short_report</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Total Accesses: %lu\nTotal kBytes: %"
<name>APR_OFF_T_FMT</name> "\n"</expr></argument>,
<argument><expr><name>count</name></expr></argument>, <argument><expr><name>kbcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CPUUser: %g\nCPUSystem: %g\nCPUChildrenUser: %g\nCPUChildrenSystem: %g\n"</expr></argument>,
<argument><expr><name>tu</name> / <name>tick</name></expr></argument>, <argument><expr><name>ts</name> / <name>tick</name></expr></argument>, <argument><expr><name>tcu</name> / <name>tick</name></expr></argument>, <argument><expr><name>tcs</name> / <name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ts</name> || <name>tu</name> || <name>tcu</name> || <name>tcs</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CPULoad: %g\n"</expr></argument>,
<argument><expr>(<name>tu</name> + <name>ts</name> + <name>tcu</name> + <name>tcs</name>) / <name>tick</name> / <name>up_time</name> * 100.</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Uptime: %ld\n"</expr></argument>, <argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr><name>up_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>up_time</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ReqPerSec: %g\n"</expr></argument>,
<argument><expr>(<name>float</name>) <name>count</name> / (<name>float</name>) <name>up_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"BytesPerSec: %g\n"</expr></argument>,
<argument><expr><macro><name>KBYTE</name></macro> * (<name>float</name>) <name>kbcount</name> / (<name>float</name>) <name>up_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>count</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"BytesPerReq: %g\n"</expr></argument>,
<argument><expr><macro><name>KBYTE</name></macro> * (<name>float</name>) <name>kbcount</name> / (<name>float</name>) <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;Total accesses: %lu - Total Traffic: "</expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>format_kbyte_out</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>kbcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;CPU Usage: u%g s%g cu%g cs%g"</expr></argument>,
<argument><expr><name>tu</name> / <name>tick</name></expr></argument>, <argument><expr><name>ts</name> / <name>tick</name></expr></argument>, <argument><expr><name>tcu</name> / <name>tick</name></expr></argument>, <argument><expr><name>tcs</name> / <name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ts</name> || <name>tu</name> || <name>tcu</name> || <name>tcs</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" - %.3g%% CPU load&lt;/dt&gt;\n"</expr></argument>,
<argument><expr>(<name>tu</name> + <name>ts</name> + <name>tcu</name> + <name>tcs</name>) / <name>tick</name> / <name>up_time</name> * 100.</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>up_time</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;%.3g requests/sec - "</expr></argument>,
<argument><expr>(<name>float</name>) <name>count</name> / (<name>float</name>) <name>up_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>format_byte_out</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr><macro><name>KBYTE</name></macro> * (<name>float</name>) <name>kbcount</name>
/ (<name>float</name>) <name>up_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"/second - "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>count</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>format_byte_out</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr><macro><name>KBYTE</name></macro> * (<name>float</name>) <name>kbcount</name>
/ (<name>float</name>) <name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"/request"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>short_report</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;%d requests currently being processed, "
"%d idle workers&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>busy</name></expr></argument>, <argument><expr><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"BusyWorkers: %d\nIdleWorkers: %d\n"</expr></argument>, <argument><expr><name>busy</name></expr></argument>, <argument><expr><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>!<name>short_report</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dl&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>is_async</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>write_completion</name> <init>= <expr>0</expr></init>, <name>lingering_close</name> <init>= <expr>0</expr></init>, <name>keep_alive</name> <init>= <expr>0</expr></init>,
<name>connections</name> <init>= <expr>0</expr></init>, <name>stopping</name> <init>= <expr>0</expr></init>, <name>procs</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>busy_workers</name> <init>= <expr>0</expr></init>, <name>idle_workers</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>short_report</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n\n&lt;table rules=\"all\" cellpadding=\"1%\"&gt;\n"
"&lt;tr&gt;&lt;th rowspan=\"2\"&gt;Slot&lt;/th&gt;"
"&lt;th rowspan=\"2\"&gt;PID&lt;/th&gt;"
"&lt;th rowspan=\"2\"&gt;Stopping&lt;/th&gt;"
"&lt;th colspan=\"2\"&gt;Connections&lt;/th&gt;\n"
"&lt;th colspan=\"2\"&gt;Threads&lt;/th&gt;"
"&lt;th colspan=\"3\"&gt;Async connections&lt;/th&gt;&lt;/tr&gt;\n"
"&lt;tr&gt;&lt;th&gt;total&lt;/th&gt;&lt;th&gt;accepting&lt;/th&gt;"
"&lt;th&gt;busy&lt;/th&gt;&lt;th&gt;idle&lt;/th&gt;"
"&lt;th&gt;writing&lt;/th&gt;&lt;th&gt;keep-alive&lt;/th&gt;&lt;th&gt;closing&lt;/th&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>server_limit</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>ps_record</name> = <call><name>ap_get_scoreboard_process</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ps_record</name>-&gt;<name>pid</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>connections</name> += <name><name>ps_record</name>-&gt;<name>connections</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>write_completion</name> += <name><name>ps_record</name>-&gt;<name>write_completion</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>keep_alive</name> += <name><name>ps_record</name>-&gt;<name>keep_alive</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lingering_close</name> += <name><name>ps_record</name>-&gt;<name>lingering_close</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>busy_workers</name> += <name><name>thread_busy_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idle_workers</name> += <name><name>thread_idle_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>short_report</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dying</name> <init>= <expr>"no"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ps_record</name>-&gt;<name>quiescing</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dying</name> = "yes"</expr>;</expr_stmt>
<expr_stmt><expr><name>stopping</name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ps_record</name>-&gt;<name>generation</name></name> != <name>mpm_generation</name></expr>)</condition><then>
<expr_stmt><expr><name>old</name> = " (old gen)"</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>procs</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;tr&gt;&lt;td&gt;%u&lt;/td&gt;&lt;td&gt;%" <name>APR_PID_T_FMT</name> "&lt;/td&gt;"
"&lt;td&gt;%s%s&lt;/td&gt;"
"&lt;td&gt;%u&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;"
"&lt;td&gt;%u&lt;/td&gt;&lt;td&gt;%u&lt;/td&gt;"
"&lt;td&gt;%u&lt;/td&gt;&lt;td&gt;%u&lt;/td&gt;&lt;td&gt;%u&lt;/td&gt;"
"&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ps_record</name>-&gt;<name>pid</name></name></expr></argument>,
<argument><expr><name>dying</name></expr></argument>, <argument><expr><name>old</name></expr></argument>,
<argument><expr><name><name>ps_record</name>-&gt;<name>connections</name></name></expr></argument>,
<argument><expr><name><name>ps_record</name>-&gt;<name>not_accepting</name></name> ? "no" : "yes"</expr></argument>,
<argument><expr><name><name>thread_busy_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>thread_idle_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ps_record</name>-&gt;<name>write_completion</name></name></expr></argument>,
<argument><expr><name><name>ps_record</name>-&gt;<name>keep_alive</name></name></expr></argument>,
<argument><expr><name><name>ps_record</name>-&gt;<name>lingering_close</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name>short_report</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;tr&gt;&lt;td&gt;Sum&lt;/td&gt;"
"&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;"
"&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;"
"&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;"
"&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;"
"&lt;/tr&gt;\n&lt;/table&gt;\n"</expr></argument>,
<argument><expr><name>procs</name></expr></argument>, <argument><expr><name>stopping</name></expr></argument>,
<argument><expr><name>connections</name></expr></argument>,
<argument><expr><name>busy_workers</name></expr></argument>, <argument><expr><name>idle_workers</name></expr></argument>,
<argument><expr><name>write_completion</name></expr></argument>, <argument><expr><name>keep_alive</name></expr></argument>, <argument><expr><name>lingering_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ConnsTotal: %d\n"
"ConnsAsyncWriting: %d\n"
"ConnsAsyncKeepAlive: %d\n"
"ConnsAsyncClosing: %d\n"</expr></argument>,
<argument><expr><name>connections</name></expr></argument>, <argument><expr><name>write_completion</name></expr></argument>, <argument><expr><name>keep_alive</name></expr></argument>,
<argument><expr><name>lingering_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>short_report</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;pre&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"Scoreboard: "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>written</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>server_limit</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>thread_limit</name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>indx</name> <init>= <expr>(<name>i</name> * <name>thread_limit</name>) + <name>j</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>stat_buffer</name><index>[<expr><name>indx</name></expr>]</index></name> != <name><name>status_flags</name><index>[<expr><name>SERVER_DISABLED</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputc</name><argument_list>(<argument><expr><name><name>stat_buffer</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>written</name> % <name>STATUS_MAXLINE</name> == (<name>STATUS_MAXLINE</name> - 1))
&amp;&amp; !<name>short_report</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>written</name>++</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></for>
<if>if <condition>(<expr><name>short_report</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/pre&gt;\n"
"&lt;p&gt;Scoreboard Key:&lt;br /&gt;\n"
"\"&lt;b&gt;&lt;code&gt;_&lt;/code&gt;&lt;/b&gt;\" Waiting for Connection, \n"
"\"&lt;b&gt;&lt;code&gt;S&lt;/code&gt;&lt;/b&gt;\" Starting up, \n"
"\"&lt;b&gt;&lt;code&gt;R&lt;/code&gt;&lt;/b&gt;\" Reading Request,&lt;br /&gt;\n"
"\"&lt;b&gt;&lt;code&gt;W&lt;/code&gt;&lt;/b&gt;\" Sending Reply, \n"
"\"&lt;b&gt;&lt;code&gt;K&lt;/code&gt;&lt;/b&gt;\" Keepalive (read), \n"
"\"&lt;b&gt;&lt;code&gt;D&lt;/code&gt;&lt;/b&gt;\" DNS Lookup,&lt;br /&gt;\n"
"\"&lt;b&gt;&lt;code&gt;C&lt;/code&gt;&lt;/b&gt;\" Closing connection, \n"
"\"&lt;b&gt;&lt;code&gt;L&lt;/code&gt;&lt;/b&gt;\" Logging, \n"
"\"&lt;b&gt;&lt;code&gt;G&lt;/code&gt;&lt;/b&gt;\" Gracefully finishing,&lt;br /&gt; \n"
"\"&lt;b&gt;&lt;code&gt;I&lt;/code&gt;&lt;/b&gt;\" Idle cleanup of worker, \n"
"\"&lt;b&gt;&lt;code&gt;.&lt;/code&gt;&lt;/b&gt;\" Open slot with no current process&lt;br /&gt;\n"
"&lt;/p&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ap_extended_status</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"PID Key: &lt;br /&gt;\n"
"&lt;pre&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>server_limit</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>thread_limit</name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>indx</name> <init>= <expr>(<name>i</name> * <name>thread_limit</name>) + <name>j</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>stat_buffer</name><index>[<expr><name>indx</name></expr>]</index></name> != '.'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" %" <name>APR_PID_T_FMT</name>
" in state: %c "</expr></argument>, <argument><expr><name><name>pid_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>stat_buffer</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>++<name>k</name> &gt;= 3</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>","</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
}</block></for>
}</block></for>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n"
"&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>ap_extended_status</name> &amp;&amp; !<name>short_report</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>no_table_report</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr /&gt;&lt;h2&gt;Server Details&lt;/h2&gt;\n\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n\n&lt;table border=\"0\"&gt;&lt;tr&gt;"
"&lt;th&gt;Srv&lt;/th&gt;&lt;th&gt;PID&lt;/th&gt;&lt;th&gt;Acc&lt;/th&gt;"
"&lt;th&gt;M&lt;/th&gt;"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
"&lt;th&gt;CPU\n&lt;/th&gt;"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"&lt;th&gt;SS&lt;/th&gt;&lt;th&gt;Req&lt;/th&gt;"
"&lt;th&gt;Conn&lt;/th&gt;&lt;th&gt;Child&lt;/th&gt;&lt;th&gt;Slot&lt;/th&gt;"
"&lt;th&gt;Client&lt;/th&gt;&lt;th&gt;Protocol&lt;/th&gt;&lt;th&gt;VHost&lt;/th&gt;"
"&lt;th&gt;Request&lt;/th&gt;&lt;/tr&gt;\n\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>server_limit</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>thread_limit</name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>ap_copy_scoreboard_worker</name><argument_list>(<argument><expr><name>ws_record</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ws_record</name>-&gt;<name>access_count</name></name> == 0 &amp;&amp;
(<name><name>ws_record</name>-&gt;<name>status</name></name> == <name>SERVER_READY</name> ||
<name><name>ws_record</name>-&gt;<name>status</name></name> == <name>SERVER_DEAD</name>)</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>ps_record</name> = <call><name>ap_get_scoreboard_process</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ws_record</name>-&gt;<name>start_time</name></name> == 0L</expr>)</condition><then>
<expr_stmt><expr><name>req_time</name> = 0L</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>req_time</name> = <call>(<name>long</name>)
<argument_list>(<argument><expr>(<name><name>ws_record</name>-&gt;<name>stop_time</name></name> -
<name><name>ws_record</name>-&gt;<name>start_time</name></name>) / 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>req_time</name> &lt; 0L</expr>)</condition><then>
<expr_stmt><expr><name>req_time</name> = 0L</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>lres</name> = <name><name>ws_record</name>-&gt;<name>access_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>my_lres</name> = <name><name>ws_record</name>-&gt;<name>my_access_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>conn_lres</name> = <name><name>ws_record</name>-&gt;<name>conn_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> = <name><name>ws_record</name>-&gt;<name>bytes_served</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>my_bytes</name> = <name><name>ws_record</name>-&gt;<name>my_bytes_served</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>conn_bytes</name> = <name><name>ws_record</name>-&gt;<name>conn_bytes</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ws_record</name>-&gt;<name>pid</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>worker_pid</name> = <name><name>ws_record</name>-&gt;<name>pid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>worker_generation</name> = <name><name>ws_record</name>-&gt;<name>generation</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>worker_pid</name> = <name><name>ps_record</name>-&gt;<name>pid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>worker_generation</name> = <name><name>ps_record</name>-&gt;<name>generation</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>no_table_report</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ws_record</name>-&gt;<name>status</name></name> == <name>SERVER_DEAD</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>"&lt;b&gt;Server %d-%d&lt;/b&gt; (-): %d|%lu|%lu ["</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>int</name>)<name>worker_generation</name></expr></argument>,
<argument><expr>(<name>int</name>)<name>conn_lres</name></expr></argument>, <argument><expr><name>my_lres</name></expr></argument>, <argument><expr><name>lres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>"&lt;b&gt;Server %d-%d&lt;/b&gt; (%"
<name>APR_PID_T_FMT</name> "): %d|%lu|%lu ["</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>int</name>) <name>worker_generation</name></expr></argument>,
<argument><expr><name>worker_pid</name></expr></argument>,
<argument><expr>(<name>int</name>)<name>conn_lres</name></expr></argument>, <argument><expr><name>my_lres</name></expr></argument>, <argument><expr><name>lres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<switch>switch <condition>(<expr><name><name>ws_record</name>-&gt;<name>status</name></name></expr>)</condition> <block>{
<case>case <expr><name>SERVER_READY</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"Ready"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_STARTING</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"Starting"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_BUSY_READ</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;b&gt;Read&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_BUSY_WRITE</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;b&gt;Write&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_BUSY_KEEPALIVE</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;b&gt;Keepalive&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_BUSY_LOG</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;b&gt;Logging&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_BUSY_DNS</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;b&gt;DNS lookup&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_CLOSING</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;b&gt;Closing&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_DEAD</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"Dead"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_GRACEFUL</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"Graceful"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_IDLE_KILL</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"Dying"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"?STATE?"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"] "
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
"u%g s%g cu%g cs%g"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"\n %ld %ld ("</expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_utime</name></name> / <name>tick</name></expr></argument>,
<argument><expr><name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_stime</name></name> / <name>tick</name></expr></argument>,
<argument><expr><name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_cutime</name></name> / <name>tick</name></expr></argument>,
<argument><expr><name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_cstime</name></name> / <name>tick</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr>(<name>long</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>nowtime</name> -
<name><name>ws_record</name>-&gt;<name>last_used</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>long</name>) <name>req_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>format_byte_out</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conn_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"|"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>format_byte_out</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>my_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"|"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>format_byte_out</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>")\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;i&gt;%s {%s}&lt;/i&gt; &lt;i&gt;(%s)&lt;/i&gt; &lt;b&gt;[%s]&lt;/b&gt;&lt;br /&gt;\n\n"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>ws_record</name>-&gt;<name>client</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>ws_record</name>-&gt;<name>request</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>ws_record</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>ws_record</name>-&gt;<name>vhost</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>ws_record</name>-&gt;<name>status</name></name> == <name>SERVER_DEAD</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>"&lt;tr&gt;&lt;td&gt;&lt;b&gt;%d-%d&lt;/b&gt;&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;%d/%lu/%lu"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>int</name>)<name>worker_generation</name></expr></argument>,
<argument><expr>(<name>int</name>)<name>conn_lres</name></expr></argument>, <argument><expr><name>my_lres</name></expr></argument>, <argument><expr><name>lres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>"&lt;tr&gt;&lt;td&gt;&lt;b&gt;%d-%d&lt;/b&gt;&lt;/td&gt;&lt;td&gt;%"
<name>APR_PID_T_FMT</name>
"&lt;/td&gt;&lt;td&gt;%d/%lu/%lu"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>int</name>)<name>worker_generation</name></expr></argument>,
<argument><expr><name>worker_pid</name></expr></argument>,
<argument><expr>(<name>int</name>)<name>conn_lres</name></expr></argument>,
<argument><expr><name>my_lres</name></expr></argument>, <argument><expr><name>lres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<switch>switch <condition>(<expr><name><name>ws_record</name>-&gt;<name>status</name></name></expr>)</condition> <block>{
<case>case <expr><name>SERVER_READY</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;_"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_STARTING</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;&lt;b&gt;S&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_BUSY_READ</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;&lt;b&gt;R&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_BUSY_WRITE</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;&lt;b&gt;W&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_BUSY_KEEPALIVE</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;&lt;b&gt;K&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_BUSY_LOG</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;&lt;b&gt;L&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_BUSY_DNS</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;&lt;b&gt;D&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_CLOSING</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;&lt;b&gt;C&lt;/b&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_DEAD</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;."</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_GRACEFUL</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;G"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVER_IDLE_KILL</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;I"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;?"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>"\n&lt;/td&gt;"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
"&lt;td&gt;%.2f&lt;/td&gt;"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"&lt;td&gt;%ld&lt;/td&gt;&lt;td&gt;%ld"</expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr>(<name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_utime</name></name> +
<name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_stime</name></name> +
<name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_cutime</name></name> +
<name><name>ws_record</name>-&gt;<name>times</name>.<name>tms_cstime</name></name>) / <name>tick</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr>(<name>long</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>nowtime</name> -
<name><name>ws_record</name>-&gt;<name>last_used</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>long</name>)<name>req_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td&gt;%-1.1f&lt;/td&gt;&lt;td&gt;%-2.2f&lt;/td&gt;&lt;td&gt;%-2.2f\n"</expr></argument>,
<argument><expr>(<name>float</name>)<name>conn_bytes</name> / <name>KBYTE</name></expr></argument>, <argument><expr>(<name>float</name>) <name>my_bytes</name> / <name>MBYTE</name></expr></argument>,
<argument><expr>(<name>float</name>)<name>bytes</name> / <name>MBYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;&lt;/tr&gt;\n\n"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>ws_record</name>-&gt;<name>client</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>ws_record</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>ws_record</name>-&gt;<name>vhost</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>ws_record</name>-&gt;<name>request</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
}</block></for>
<if>if <condition>(<expr>!<name>no_table_report</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/table&gt;\n \
&lt;hr /&gt; \
&lt;table&gt;\n \
&lt;tr&gt;&lt;th&gt;Srv&lt;/th&gt;&lt;td&gt;Child Server number - generation&lt;/td&gt;&lt;/tr&gt;\n \
&lt;tr&gt;&lt;th&gt;PID&lt;/th&gt;&lt;td&gt;OS process ID&lt;/td&gt;&lt;/tr&gt;\n \
&lt;tr&gt;&lt;th&gt;Acc&lt;/th&gt;&lt;td&gt;Number of accesses this connection / this child / this slot&lt;/td&gt;&lt;/tr&gt;\n \
&lt;tr&gt;&lt;th&gt;M&lt;/th&gt;&lt;td&gt;Mode of operation&lt;/td&gt;&lt;/tr&gt;\n"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
"&lt;tr&gt;&lt;th&gt;CPU&lt;/th&gt;&lt;td&gt;CPU usage, number of seconds&lt;/td&gt;&lt;/tr&gt;\n"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"&lt;tr&gt;&lt;th&gt;SS&lt;/th&gt;&lt;td&gt;Seconds since beginning of most recent request&lt;/td&gt;&lt;/tr&gt;\n \
&lt;tr&gt;&lt;th&gt;Req&lt;/th&gt;&lt;td&gt;Milliseconds required to process most recent request&lt;/td&gt;&lt;/tr&gt;\n \
&lt;tr&gt;&lt;th&gt;Conn&lt;/th&gt;&lt;td&gt;Kilobytes transferred this connection&lt;/td&gt;&lt;/tr&gt;\n \
&lt;tr&gt;&lt;th&gt;Child&lt;/th&gt;&lt;td&gt;Megabytes transferred this child&lt;/td&gt;&lt;/tr&gt;\n \
&lt;tr&gt;&lt;th&gt;Slot&lt;/th&gt;&lt;td&gt;Total megabytes transferred this slot&lt;/td&gt;&lt;/tr&gt;\n \
&lt;/table&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then>
<else>else <block>{
<if>if <condition>(<expr>!<name>short_report</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr /&gt;To obtain a full report with current status "
"information you need to use the "
"&lt;code&gt;ExtendedStatus On&lt;/code&gt; directive.\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>=
<expr>(<name>short_report</name> ? <name>AP_STATUS_SHORT</name> : 0) |
(<name>no_table_report</name> ? <name>AP_STATUS_NOTABLE</name> : 0) |
(<name>ap_extended_status</name> ? <name>AP_STATUS_EXTENDED</name> : 0)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_run_status_hook</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<if>if <condition>(<expr>!<name>short_report</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>ap_psignature</name><argument_list>(<argument><expr>"&lt;hr /&gt;\n"</expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/body&gt;&lt;/html&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>status_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>ap_extended_status</name> = 1</expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>status_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>status_flags</name><index>[<expr><name>SERVER_DEAD</name></expr>]</index></name> = '.'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_flags</name><index>[<expr><name>SERVER_READY</name></expr>]</index></name> = '_'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_flags</name><index>[<expr><name>SERVER_STARTING</name></expr>]</index></name> = 'S'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_flags</name><index>[<expr><name>SERVER_BUSY_READ</name></expr>]</index></name> = 'R'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_flags</name><index>[<expr><name>SERVER_BUSY_WRITE</name></expr>]</index></name> = 'W'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_flags</name><index>[<expr><name>SERVER_BUSY_KEEPALIVE</name></expr>]</index></name> = 'K'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_flags</name><index>[<expr><name>SERVER_BUSY_LOG</name></expr>]</index></name> = 'L'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_flags</name><index>[<expr><name>SERVER_BUSY_DNS</name></expr>]</index></name> = 'D'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_flags</name><index>[<expr><name>SERVER_CLOSING</name></expr>]</index></name> = 'C'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_flags</name><index>[<expr><name>SERVER_GRACEFUL</name></expr>]</index></name> = 'G'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_flags</name><index>[<expr><name>SERVER_IDLE_KILL</name></expr>]</index></name> = 'I'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>status_flags</name><index>[<expr><name>SERVER_DISABLED</name></expr>]</index></name> = ' '</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_HARD_LIMIT_THREADS</name></expr></argument>, <argument><expr>&amp;<name>thread_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_HARD_LIMIT_DAEMONS</name></expr></argument>, <argument><expr>&amp;<name>server_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MAX_THREADS</name></expr></argument>, <argument><expr>&amp;<name>threads_per_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>threads_per_child</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>threads_per_child</name> = 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MAX_DAEMONS</name></expr></argument>, <argument><expr>&amp;<name>max_servers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_IS_ASYNC</name></expr></argument>, <argument><expr>&amp;<name>is_async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>status_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>child_pid</name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>status_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>status_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>status_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>status_child_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
