<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/lua/mod_lua.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_mutex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua_apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_mutex.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>APR_HAS_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_TYPES_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_PROCESS_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><argument_list>(<argument>ap_lua</argument>, <argument>AP_LUA</argument>, <argument>int</argument>, <argument>lua_open</argument>,
<argument>(lua_State *L, apr_pool_t *p)</argument>,
<argument>(L, p)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><argument_list>(<argument>ap_lua</argument>, <argument>AP_LUA</argument>, <argument>int</argument>, <argument>lua_request</argument>,
<argument>(lua_State *L, request_rec *r)</argument>,
<argument>(L, r)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ssl_var_lookup</name></expr></argument>)</argument_list></call> *<name>lua_ssl_val</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ssl_is_https</name></expr></argument>)</argument_list></call> *<name>lua_ssl_is_https</name> = <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>lua_module</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_HOOK_FIRST</name></cpp:macro> <cpp:value>(APR_HOOK_FIRST - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LUA_HOOK_LAST</name></cpp:macro> <cpp:value>(APR_HOOK_LAST + 1)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_vm_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
}</block></struct></type> <name>lua_authz_provider_spec</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>lua_authz_provider_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>args</name></decl>;</decl_stmt>
}</block></struct></type> <name>lua_authz_provider_func</name>;</typedef>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>lua_authz_providers</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>tmpBucket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> *</type><name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_vm_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>broken</name></decl>;</decl_stmt>
}</block></struct></type> <name>lua_filter_ctx</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LUA_SHMFILE</name></cpp:macro> <cpp:value>"lua_ivm_shm"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>apr_global_mutex_t</name> *</type><name>lua_ivm_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_shm_t</name> *</type><name>lua_ivm_shm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lua_ivm_shmfile</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>shm_cleanup_wrapper</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>lua_ivm_shm</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_shm_destroy</name><argument_list>(<argument><expr><name>lua_ivm_shm</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>report_lua_error</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lua_response</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_type</name></name> = "text/html"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;h3&gt;Error!&lt;/h3&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;pre&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lua_response</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>lua_response</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01471</expr></argument>)</argument_list></call> "Lua error: %s"</expr></argument>,
<argument><expr><name>lua_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>lua_open_callback</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_lua_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_load_apache2_lmodule</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_load_request_lmodule</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_load_config_lmodule</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_open_hook</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>lua_open_callback</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>scope_to_string</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>scope</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>scope</name></expr>)</condition> <block>{
<case>case <expr><name>AP_LUA_SCOPE_ONCE</name></expr>:
</case><case>case <expr><name>AP_LUA_SCOPE_UNSET</name></expr>:
<return>return <expr>"once"</expr>;</return>
</case><case>case <expr><name>AP_LUA_SCOPE_REQUEST</name></expr>:
<return>return <expr>"request"</expr>;</return>
</case><case>case <expr><name>AP_LUA_SCOPE_CONN</name></expr>:
<return>return <expr>"conn"</expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
</case><case>case <expr><name>AP_LUA_SCOPE_THREAD</name></expr>:
<return>return <expr>"thread"</expr>;</return>
</case><case>case <expr><name>AP_LUA_SCOPE_SERVER</name></expr>:
<return>return <expr>"server"</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_lua_release_state</name><parameter_list>(<param><decl><type><name>lua_State</name>*</type> <name>L</name></decl></param>, <param><decl><type><name>ap_lua_vm_spec</name>*</type> <name>spec</name></decl></param>, <param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_reslist_t</name>*</type> <name>reslist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>spec</name>-&gt;<name>scope</name></name> == <name>AP_LUA_SCOPE_SERVER</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_lua_server_spec</name>*</type> <name>sspec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr>"Apache2.Lua.server_spec"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sspec</name> = (<name>ap_lua_server_spec</name>*) <call><name>lua_touserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"reslist:%s"</expr></argument>, <argument><expr><name><name>spec</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>(<name>void</name> **)&amp;<name>reslist</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>sspec</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>reslist</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_reslist_release</name><argument_list>(<argument><expr><name>reslist</name></expr></argument>, <argument><expr><name>sspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>ap_lua_vm_spec</name> *</type><name>create_vm_spec</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> **</type><name>lifecycle_pool</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>ap_lua_dir_cfg</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>ap_lua_server_cfg</name> *</type><name>server_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytecode</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>bytecode_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>what</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_vm_spec</name> *</type><name>spec</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_vm_spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>scope</name></name> = <name><name>cfg</name>-&gt;<name>vm_scope</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>package_paths</name></name> = <name><name>cfg</name>-&gt;<name>package_paths</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>package_cpaths</name></name> = <name><name>cfg</name>-&gt;<name>package_cpaths</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>cb</name></name> = &amp;<name>lua_open_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>cb_arg</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>bytecode</name></name> = <name>bytecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>bytecode_len</name></name> = <name>bytecode_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>codecache</name></name> = (<name><name>cfg</name>-&gt;<name>codecache</name></name> == <name>AP_LUA_CACHE_UNSET</name>) ? <name>AP_LUA_CACHE_STAT</name> : <name><name>cfg</name>-&gt;<name>codecache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>vm_min</name></name> = <name><name>cfg</name>-&gt;<name>vm_min</name></name> ? <name><name>cfg</name>-&gt;<name>vm_min</name></name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>vm_max</name></name> = <name><name>cfg</name>-&gt;<name>vm_max</name></name> ? <name><name>cfg</name>-&gt;<name>vm_max</name></name> : 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>filename</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>file</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr><name><name>server_cfg</name>-&gt;<name>root_path</name></name></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>APR_FILEPATH_NOTRELATIVE</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>spec</name>-&gt;<name>file</name></name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02313</expr></argument>)</argument_list></call>
"%s details: scope: %s, file: %s, func: %s"</expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr><call><name>scope_to_string</name><argument_list>(<argument><expr><name><name>spec</name>-&gt;<name>scope</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>spec</name>-&gt;<name>file</name></name></expr></argument>,
<argument><expr><name>function</name> ? <name>function</name> : "-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>spec</name>-&gt;<name>scope</name></name></expr>)</condition> <block>{
<case>case <expr><name>AP_LUA_SCOPE_ONCE</name></expr>:
</case><case>case <expr><name>AP_LUA_SCOPE_UNSET</name></expr>:
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>AP_LUA_SCOPE_REQUEST</name></expr>:
<expr_stmt><expr><name>pool</name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>AP_LUA_SCOPE_CONN</name></expr>:
<expr_stmt><expr><name>pool</name> = <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
</case><case>case <expr><name>AP_LUA_SCOPE_THREAD</name></expr>:
<expr_stmt><expr><name>pool</name> = <call><name>apr_thread_pool_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>current_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>AP_LUA_SCOPE_SERVER</name></expr>:
<expr_stmt><expr><name>pool</name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<expr_stmt><expr>*<name>lifecycle_pool</name> = <name>pool</name></expr>;</expr_stmt>
<return>return <expr><name>spec</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>ap_lua_interpolate_string</name><parameter_list>(<param><decl><type><name>apr_pool_t</name>*</type> <name>pool</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>string</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>**</type> <name>values</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>stringBetween</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srclen</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<expr_stmt><expr><name>srclen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>x</name>=0</expr>;</init> <condition><expr><name>x</name> &lt; <name>srclen</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>string</name><index>[<expr><name>x</name></expr>]</index></name> == '$' &amp;&amp; <name>x</name> != <name>srclen</name>-1 &amp;&amp; <name><name>string</name><index>[<expr><name>x</name>+1</expr>]</index></name> &gt;= '0' &amp;&amp; <name><name>string</name><index>[<expr><name>x</name>+1</expr>]</index></name> &lt;= '9'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr>*(<name>string</name>+<name>x</name>+1) - '0'</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>x</name>-<name>y</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>stringBetween</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>string</name>+<name>y</name></expr></argument>, <argument><expr><name>x</name>-<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>stringBetween</name> = ""</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>ret</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>stringBetween</name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> = ++<name>x</name>+1</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>x</name>-<name>y</name> &gt; 0 &amp;&amp; <name>y</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>stringBetween</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>string</name>+<name>y</name></expr></argument>, <argument><expr><name>x</name>-<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>stringBetween</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name>y</name> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>string</name></expr>;</return>
}</block></then></if></else></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"lua-script"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(
<expr>(<name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name>)
|| (<name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> &amp; <name>APR_DIR</name>)</expr>
)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01472</expr></argument>)</argument_list></call>
"handling [%s] in mod_lua"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>lua_State</name> *</type><name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lua_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_vm_spec</name> *</type><name>spec</name> <init>= <expr><call><name>create_vm_spec</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr>"handle"</expr></argument>, <argument><expr>"request handler"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>L</name> = <call><name>ap_lua_get_lua_state</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>L</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"Unable to compile VM, see logs"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01474</expr></argument>)</argument_list></call> "got a vm!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"handle"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>lua_isfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01475</expr></argument>)</argument_list></call>
"lua: Unable to find entry function '%s' in %s (not a valid function)"</expr></argument>,
<argument><expr>"handle"</expr></argument>,
<argument><expr><name><name>spec</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_lua_run_lua_request</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>report_lua_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>lua_isnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>lua_setup_filter_ctx</name><parameter_list>(<param><decl><type><name>ap_filter_t</name>*</type> <name>f</name></decl></param>, <param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>, <param><decl><type><name>lua_filter_ctx</name>**</type> <name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_vm_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> *</type><name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_filter_ctx</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_server_cfg</name> *</type><name>server_cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lua_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lua_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lua_filter_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>broken</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>c</name> = <name>ctx</name></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name><name>cfg</name>-&gt;<name>mapped_filters</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>ap_lua_filter_handler_spec</name> *</type><name>hook_spec</name> <init>=
<expr>((<name>ap_lua_filter_handler_spec</name> **) <name><name>cfg</name>-&gt;<name>mapped_filters</name>-&gt;<name>elts</name></name>)<index>[<expr><name>n</name></expr>]</index></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>hook_spec</name> == <name>NULL</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>hook_spec</name>-&gt;<name>filter_name</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>spec</name> = <call><name>create_vm_spec</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>server_cfg</name></expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>file_name</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name></expr></argument>,
<argument><expr>"filter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> = <call><name>ap_lua_get_lua_state</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>L</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>L</name> = <call><name>lua_newthread</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>L</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02328</expr></argument>)</argument_list></call>
"lua: Failed to obtain lua interpreter for %s %s"</expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name></expr></argument>, <argument><expr><name><name>hook_spec</name>-&gt;<name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>lua_isfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02329</expr></argument>)</argument_list></call>
"lua: Unable to find entry function '%s' in %s (not a valid function)"</expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name></expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_lua_run_lua_request</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_lua_run_lua_request</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> = <call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>L</name></name> = <name>L</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>spec</name></name> = <name>spec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>lua_resume</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>LUA_YIELD</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>providers</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-MD5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"ETAG"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOENT</name></expr>;</return>
}</block></else></if>
}</block></then></if>
}</block></for>
<return>return <expr><name>APR_ENOENT</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>lua_output_filter_handle</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>pbbIn</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> *</type><name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_filter_ctx</name>*</type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>pbktIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>f</name>-&gt;<name>ctx</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>lua_setup_filter_ctx</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_EGENERAL</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == <name>APR_ENOENT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>,<argument><expr><name>pbbIn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>pbktOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>output</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>L</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>olen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>olen</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>pbktOut</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>, <argument><expr><name>pbktOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>ctx</name> = (<name>lua_filter_ctx</name>*) <name><name>f</name>-&gt;<name>ctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> = <name><name>ctx</name>-&gt;<name>L</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>broken</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>pbktIn</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>pbbIn</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>pbktIn</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>pbbIn</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>pbktIn</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>pbktIn</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>pbktOut</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>pbktIn</name></expr></argument>,<argument><expr>&amp;<name>data</name></expr></argument>,<argument><expr>&amp;<name>len</name></expr></argument>,<argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"bucket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>lua_resume</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == <name>LUA_YIELD</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>output</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>olen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>olen</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>pbktOut</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>, <argument><expr><name>pbktOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>broken</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>spec</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>pbbIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02663</expr></argument>)</argument_list></call>
"lua: Error while executing filter: %s"</expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
}</block></for>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>pbbIn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>pbktEOS</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"bucket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>lua_resume</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == <name>LUA_YIELD</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>pbktOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>output</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>olen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>olen</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>pbktOut</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>, <argument><expr><name>pbktOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>pbktEOS</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>, <argument><expr><name>pbktEOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>spec</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>pbbIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>lua_input_filter_handle</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>pbbOut</name></decl></param>,
<param><decl><type><name>ap_input_mode_t</name></type> <name>eMode</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>eBlock</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>nBytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>lastCall</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> *</type><name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_filter_ctx</name>*</type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>ret</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>f</name>-&gt;<name>ctx</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>lua_setup_filter_ctx</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_EGENERAL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>broken</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == <name>APR_ENOENT</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>broken</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>ctx</name> = (<name>lua_filter_ctx</name>*) <name><name>f</name>-&gt;<name>ctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> = <name><name>ctx</name>-&gt;<name>L</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>broken</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>pbbOut</name></expr></argument>, <argument><expr><name>eMode</name></expr></argument>, <argument><expr><name>eBlock</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>, <argument><expr><name>eMode</name></expr></argument>, <argument><expr><name>eBlock</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>eMode</name> == <name>AP_MODE_EATCRLF</name> || <name>ret</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>ret</name></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>broken</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lastCall</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>pbktIn</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tmpBucket</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>pbktOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>pbktIn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>pbktIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>pbktIn</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>eBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>ret</name></expr>;</return></then></if>
<expr_stmt><expr><name>lastCall</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"bucket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>lua_resume</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == <name>LUA_YIELD</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>output</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>olen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pbktOut</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>pbbOut</name></expr></argument>, <argument><expr><name>pbktOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>pbktIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>broken</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>spec</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>pbktIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
}</block></while>
<if>if <condition>(<expr><name>lastCall</name> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>pbktEOS</name> <init>= <expr><call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"bucket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>lua_resume</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == <name>LUA_YIELD</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>pbktOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>output</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>olen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pbktOut</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>pbbOut</name></expr></argument>, <argument><expr><name>pbktOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>pbbOut</name></expr></argument>,<argument><expr><name>pbktEOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>spec</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_request_rec_hook_harness</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>int</name></type> <name>apr_hook_when</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> *</type><name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_vm_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_server_cfg</name> *</type><name>server_cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lua_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lua_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s_%d"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>apr_hook_when</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>hook_specs</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>hooks</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>hook_specs</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>hook_specs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>ap_lua_mapped_handler_spec</name> *</type><name>hook_spec</name> <init>=
<expr>((<name>ap_lua_mapped_handler_spec</name> **) <name><name>hook_specs</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>hook_spec</name> == <name>NULL</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>spec</name> = <call><name>create_vm_spec</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>server_cfg</name></expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>file_name</name></name></expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>bytecode</name></name></expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>bytecode_len</name></name></expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name></expr></argument>,
<argument><expr>"request hook"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> = <call><name>ap_lua_get_lua_state</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>L</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01477</expr></argument>)</argument_list></call>
"lua: Failed to obtain lua interpreter for entry function '%s' in %s"</expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name></expr></argument>, <argument><expr><name><name>hook_spec</name>-&gt;<name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>lua_isfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01478</expr></argument>)</argument_list></call>
"lua: Unable to find entry function '%s' in %s (not a valid function)"</expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name></expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_lua_run_lua_request</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_lua_run_lua_request</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> = <call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>report_lua_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <name>DECLINED</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>lua_isnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"Lua hook %s:%s for phase %s returned %d"</expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>file_name</name></name></expr></argument>, <argument><expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03017</expr></argument>)</argument_list></call>
"Lua hook %s:%s for phase %s did not return a numeric value"</expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>file_name</name></name></expr></argument>, <argument><expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
<if>if <condition>(<expr><name>rc</name> != <name>DECLINED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_map_handler_fixups</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>handler</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>match</name><index>[<expr>10</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lua_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name><name>cfg</name>-&gt;<name>mapped_handlers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>ap_lua_mapped_handler_spec</name> *</type><name>hook_spec</name> <init>=
<expr>((<name>ap_lua_mapped_handler_spec</name> **) <name><name>cfg</name>-&gt;<name>mapped_handlers</name>-&gt;<name>elts</name></name>)<index>[<expr><name>n</name></expr>]</index></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>hook_spec</name> == <name>NULL</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>hook_spec</name>-&gt;<name>uri_pattern</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"lua-map-handler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
}</block></for>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_map_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> *</type><name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>, *<decl><type ref="prev"/><name>function_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>values</name><index>[<expr>10</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_vm_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>match</name><index>[<expr>10</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_server_cfg</name> *</type><name>server_cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lua_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lua_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name><name>cfg</name>-&gt;<name>mapped_handlers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>ap_lua_mapped_handler_spec</name> *</type><name>hook_spec</name> <init>=
<expr>((<name>ap_lua_mapped_handler_spec</name> **) <name><name>cfg</name>-&gt;<name>mapped_handlers</name>-&gt;<name>elts</name></name>)<index>[<expr><name>n</name></expr>]</index></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>hook_spec</name> == <name>NULL</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>hook_spec</name>-&gt;<name>uri_pattern</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name>=0</expr> ;</init> <condition><expr><name>i</name> &lt; 10</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>match</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_eo</name> &gt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name>+<name><name>match</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name></expr></argument>, <argument><expr><name><name>match</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_eo</name> - <name><name>match</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> = ""</expr>;</expr_stmt></else></if>
}</block></for>
<expr_stmt><expr><name>filename</name> = <call><name>ap_lua_interpolate_string</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>hook_spec</name>-&gt;<name>file_name</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>function_name</name> = <call><name>ap_lua_interpolate_string</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>hook_spec</name>-&gt;<name>function_name</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>spec</name> = <call><name>create_vm_spec</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>server_cfg</name></expr></argument>,
<argument><expr><name>filename</name></expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>bytecode</name></name></expr></argument>,
<argument><expr><name><name>hook_spec</name>-&gt;<name>bytecode_len</name></name></expr></argument>,
<argument><expr><name>function_name</name></expr></argument>,
<argument><expr>"mapped handler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> = <call><name>ap_lua_get_lua_state</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>L</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02330</expr></argument>)</argument_list></call>
"lua: Failed to obtain Lua interpreter for entry function '%s' in %s"</expr></argument>,
<argument><expr><name>function_name</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>function_name</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>function_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>lua_isfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02331</expr></argument>)</argument_list></call>
"lua: Unable to find entry function '%s' in %s (not a valid function)"</expr></argument>,
<argument><expr><name>function_name</name></expr></argument>,
<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_lua_run_lua_request</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_lua_run_lua_request</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> = <call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>report_lua_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <name>DECLINED</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>lua_isnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02483</expr></argument>)</argument_list></call>
"lua: Lua handler %s in %s did not return a value, assuming apache2.OK"</expr></argument>,
<argument><expr><name>function_name</name></expr></argument>,
<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <name>OK</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>DECLINED</name></expr>)</condition><then> <block>{
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></for>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_size_t</name></type> <name>config_getstr</name><parameter_list>(<param><decl><type><name>ap_configfile_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>size_t</name></type> <name>bufsiz</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>getstr</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr><call>(<name><name>cfg</name>-&gt;<name>getstr</name></name>) <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &amp;&amp; <name><name>buf</name><index>[<expr><name>i</name> - 1</expr>]</index></name> == '\n'</expr>)</condition><then>
<expr_stmt><expr>++<name><name>cfg</name>-&gt;<name>line_number</name></name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<while>while <condition>(<expr><name>i</name> &lt; <name>bufsiz</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr><call>(<name><name>cfg</name>-&gt;<name>getch</name></name>) <argument_list>(<argument><expr>&amp;<name>ch</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name>++</expr>]</index></name> = <name>ch</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ch</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name><name>cfg</name>-&gt;<name>line_number</name></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></while>
}</block></else></if>
<return>return <expr><name>i</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>cr_ctx</name> <block>{
<decl_stmt><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_configfile_t</name> *</type><name>cfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>startline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>cr_ctx</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>lf</name> <init>=
<expr>"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_LF</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>direct_chunkreader</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>lvm</name></decl></param>, <param><decl><type><name>void</name> *</type><name>udata</name></decl></param>,
<param><decl><type><name>size_t</name> *</type><name>plen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>cr_ctx</name> *</type><name>ctx</name> <init>= <expr><name>udata</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>startline</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>plen</name> = <name><name>ctx</name>-&gt;<name>startline</name></name> &gt; <name>N_LF</name> ? <name>N_LF</name> : <name><name>ctx</name>-&gt;<name>startline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>startline</name></name> -= *<name>plen</name></expr>;</expr_stmt>
<return>return <expr><name>lf</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>plen</name> = <call><name>config_getstr</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cfp</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name>HUGE_STRING_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>p</name> = <name><name>ctx</name>-&gt;<name>buf</name></name></expr>;</init> <condition><expr><call><name>isspace</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>p</name></expr></incr>)<empty_stmt>;</empty_stmt></for>
<if>if <condition>(<expr><name><name>p</name><index>[<expr>0</expr>]</index></name> == '&lt;' &amp;&amp; <name><name>p</name><index>[<expr>1</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name> &lt; <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>endstr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name> + 2</expr>]</index></name></expr></argument>)</argument_list></call> != <name><name>ctx</name>-&gt;<name>endstr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
<return>return <expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr>;</return></then></if>
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>plen</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ldump_writer</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>void</name> *</type><name>B</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>(<name>void</name>) <name>L</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr>(<name>luaL_Buffer</name> *) <name>B</name></expr></argument>, <argument><expr>(const <name>char</name> *) <name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>hack_section_baton</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_mapped_handler_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apr_hook_when</name></decl>;</decl_stmt>
}</block></struct></type> <name>hack_section_baton</name>;</typedef>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>hack_section_handler</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr>(<name>ap_lua_dir_cfg</name> *) <name>_cfg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>directive</name> <init>= <expr><name><name>cmd</name>-&gt;<name>directive</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hack_section_baton</name> *</type><name>baton</name> <init>= <expr><name><name>directive</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s_%d"</expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>apr_hook_when</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>hook_specs</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>hooks</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>hook_specs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hook_specs</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_mapped_handler_spec</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>hooks</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>hook_specs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>spec</name>-&gt;<name>scope</name></name> = <name><name>cfg</name>-&gt;<name>vm_scope</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>ap_lua_mapped_handler_spec</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>hook_specs</name></expr></argument>)</argument_list></call> = <name><name>baton</name>-&gt;<name>spec</name></name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_named_block_function_hook</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_mapped_handler_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>when</name> <init>= <expr><name>APR_HOOK_MIDDLE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive missing closing '&gt;'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>line</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>endp</name> - <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>line</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl>;</decl_stmt>
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>word</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>function</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>word</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr>"early"</expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>when</name> = <name>AP_LUA_HOOK_FIRST</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr>"late"</expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>when</name> = <name>AP_LUA_HOOK_LAST</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; 2nd argument must be 'early' or 'late'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>spec</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_mapped_handler_spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>cr_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> *</type><name>lvm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_directive_t</name> **</type><name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hack_section_baton</name> *</type><name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>file_name</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s:%u"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>function</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>spec</name>-&gt;<name>function_name</name></name> = (<name>char</name> *) <name>function</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>function</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>ctx</name>.<name>cmd</name></name> = <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>err_directive</name>-&gt;<name>directive</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>endstr</name></name> = <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>cfp</name></name> = <name><name>cmd</name>-&gt;<name>config_file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>startline</name></name> = <name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>line_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lvm</name> = <call><name>luaL_newstate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>lvm</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>lua_load</name><argument_list>(<argument><expr><name>lvm</name></expr></argument>, <argument><expr><name>direct_chunkreader</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name><name>spec</name>-&gt;<name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errstr</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Lua Error:"</expr></argument>,
<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lvm</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_close</name><argument_list>(<argument><expr><name>lvm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>errstr</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>lvm</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_dump</name><argument_list>(<argument><expr><name>lvm</name></expr></argument>, <argument><expr><name>ldump_writer</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>bytecode_len</name></name> = <call><name>lua_rawlen</name><argument_list>(<argument><expr><name>lvm</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>bytecode</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lvm</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>spec</name>-&gt;<name>bytecode_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_close</name><argument_list>(<argument><expr><name>lvm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>current</name> = <name>mconfig</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>current</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>current</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>current</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>baton</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hack_section_baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>spec</name></name> = <name>spec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>apr_hook_when</name></name> = <name>when</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>current</name>)-&gt;<name>filename</name></name> = <name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>current</name>)-&gt;<name>line_num</name></name> = <name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>line_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>current</name>)-&gt;<name>directive</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Lua_____ByteCodeHack"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>current</name>)-&gt;<name>args</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>current</name>)-&gt;<name>data</name></name> = <name>baton</name></expr>;</expr_stmt>
}</block>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_named_file_function_hook</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>,
<param><decl><type><name>int</name></type> <name>apr_hook_when</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_mapped_handler_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr>(<name>ap_lua_dir_cfg</name> *) <name>_cfg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s_%d"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>apr_hook_when</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>hook_specs</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>hooks</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>hook_specs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hook_specs</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_mapped_handler_spec</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>hooks</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>hook_specs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>spec</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_mapped_handler_spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>file_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>function_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>scope</name></name> = <name><name>cfg</name>-&gt;<name>vm_scope</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>ap_lua_mapped_handler_spec</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>hook_specs</name></expr></argument>)</argument_list></call> = <name>spec</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_mapped_file_function_hook</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pattern</name></decl></param>,
<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_mapped_handler_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr>(<name>ap_lua_dir_cfg</name> *) <name>_cfg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>regex</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_regex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_regcomp</name><argument_list>(<argument><expr><name>regex</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"Invalid regex pattern!"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>spec</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_mapped_handler_spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>file_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>function_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>scope</name></name> = <name><name>cfg</name>-&gt;<name>vm_scope</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>uri_pattern</name></name> = <name>regex</name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>ap_lua_mapped_handler_spec</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>mapped_handlers</name></name></expr></argument>)</argument_list></call> = <name>spec</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_filter_function_hook</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filter</name></decl></param>,
<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>,
<param><decl><type><name>int</name></type> <name>direction</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_filter_handler_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr>(<name>ap_lua_dir_cfg</name> *) <name>_cfg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>spec</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_filter_handler_spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>file_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>function_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>filter_name</name></name> = <name>filter</name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>ap_lua_filter_handler_spec</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>mapped_filters</name></name></expr></argument>)</argument_list></call> = <name>spec</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>direction</name> == <name>AP_LUA_FILTER_OUTPUT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>spec</name>-&gt;<name>direction</name></name> = <name>AP_LUA_FILTER_OUTPUT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter_protocol</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>lua_output_filter_handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>,
<argument><expr><name>AP_FILTER_PROTO_CHANGE</name>|<name>AP_FILTER_PROTO_CHANGE_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>spec</name>-&gt;<name>direction</name></name> = <name>AP_LUA_FILTER_INPUT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_input_filter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>lua_input_filter_handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_check_user_id_harness</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"check_user_id"</expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_translate_name_harness_first</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"translate_name"</expr></argument>, <argument><expr><name>AP_LUA_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_translate_name_harness</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"translate_name"</expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_translate_name_harness_last</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"translate_name"</expr></argument>, <argument><expr><name>AP_LUA_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_fixup_harness</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"fixups"</expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_map_to_storage_harness</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"map_to_storage"</expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_type_checker_harness</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"type_checker"</expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_access_checker_harness_first</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"access_checker"</expr></argument>, <argument><expr><name>AP_LUA_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_access_checker_harness</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"access_checker"</expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_access_checker_harness_last</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"access_checker"</expr></argument>, <argument><expr><name>AP_LUA_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_auth_checker_harness_first</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"auth_checker"</expr></argument>, <argument><expr><name>AP_LUA_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_auth_checker_harness</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"auth_checker"</expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_auth_checker_harness_last</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"auth_checker"</expr></argument>, <argument><expr><name>AP_LUA_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>lua_insert_filter_harness</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_log_transaction_harness</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"log_transaction"</expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_quick_harness</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>lookup</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>lookup</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>lua_request_rec_hook_harness</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"quick"</expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_translate_name_hook</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>when</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIRECTORY</name>|<name>NOT_IN_FILES</name>|
<name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apr_hook_when</name> <init>= <expr><name>APR_HOOK_MIDDLE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>when</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>when</name></expr></argument>, <argument><expr>"early"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>apr_hook_when</name> = <name>AP_LUA_HOOK_FIRST</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>when</name></expr></argument>, <argument><expr>"late"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>apr_hook_when</name> = <name>AP_LUA_HOOK_LAST</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"Third argument must be 'early' or 'late'"</expr>;</return>
}</block></else></if></else></if>
}</block></then></if>
<return>return <expr><call><name>register_named_file_function_hook</name><argument_list>(<argument><expr>"translate_name"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>,
<argument><expr><name>file</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>apr_hook_when</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_translate_name_block</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>register_named_block_function_hook</name><argument_list>(<argument><expr>"translate_name"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>,
<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_fixups_hook</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>register_named_file_function_hook</name><argument_list>(<argument><expr>"fixups"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>function</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_fixups_block</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>register_named_block_function_hook</name><argument_list>(<argument><expr>"fixups"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_map_to_storage_hook</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>register_named_file_function_hook</name><argument_list>(<argument><expr>"map_to_storage"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>,
<argument><expr><name>file</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_log_transaction_hook</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>register_named_file_function_hook</name><argument_list>(<argument><expr>"log_transaction"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>,
<argument><expr><name>file</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_map_to_storage_block</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>register_named_block_function_hook</name><argument_list>(<argument><expr>"map_to_storage"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>,
<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_check_user_id_hook</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>when</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>apr_hook_when</name> <init>= <expr><name>APR_HOOK_MIDDLE</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>register_named_file_function_hook</name><argument_list>(<argument><expr>"check_user_id"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>function</name></expr></argument>, <argument><expr><name>apr_hook_when</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_check_user_id_block</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>register_named_block_function_hook</name><argument_list>(<argument><expr>"check_user_id"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>,
<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_type_checker_hook</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>register_named_file_function_hook</name><argument_list>(<argument><expr>"type_checker"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>function</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_type_checker_block</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>register_named_block_function_hook</name><argument_list>(<argument><expr>"type_checker"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>,
<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_access_checker_hook</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>when</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>apr_hook_when</name> <init>= <expr><name>APR_HOOK_MIDDLE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>when</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>when</name></expr></argument>, <argument><expr>"early"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>apr_hook_when</name> = <name>AP_LUA_HOOK_FIRST</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>when</name></expr></argument>, <argument><expr>"late"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>apr_hook_when</name> = <name>AP_LUA_HOOK_LAST</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"Third argument must be 'early' or 'late'"</expr>;</return>
}</block></else></if></else></if>
}</block></then></if>
<return>return <expr><call><name>register_named_file_function_hook</name><argument_list>(<argument><expr>"access_checker"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>,
<argument><expr><name>file</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>apr_hook_when</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_access_checker_block</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>register_named_block_function_hook</name><argument_list>(<argument><expr>"access_checker"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>,
<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_auth_checker_hook</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>when</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>apr_hook_when</name> <init>= <expr><name>APR_HOOK_MIDDLE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>when</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>when</name></expr></argument>, <argument><expr>"early"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>apr_hook_when</name> = <name>AP_LUA_HOOK_FIRST</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>when</name></expr></argument>, <argument><expr>"late"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>apr_hook_when</name> = <name>AP_LUA_HOOK_LAST</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"Third argument must be 'early' or 'late'"</expr>;</return>
}</block></else></if></else></if>
}</block></then></if>
<return>return <expr><call><name>register_named_file_function_hook</name><argument_list>(<argument><expr>"auth_checker"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>function</name></expr></argument>, <argument><expr><name>apr_hook_when</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_auth_checker_block</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>register_named_block_function_hook</name><argument_list>(<argument><expr>"auth_checker"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>,
<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_insert_filter_hook</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>)</parameter_list> <block>{
<return>return <expr>"LuaHookInsertFilter not yet implemented"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_quick_hook</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIRECTORY</name>|<name>NOT_IN_FILES</name>|
<name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>register_named_file_function_hook</name><argument_list>(<argument><expr>"quick"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>function</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_map_handler</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>match</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIRECTORY</name>|<name>NOT_IN_FILES</name>|
<name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>function</name></expr>)</condition><then> <expr_stmt><expr><name>function</name> = "handle"</expr>;</expr_stmt></then></if>
<return>return <expr><call><name>register_mapped_file_function_hook</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_output_filter</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>filter</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIRECTORY</name>|<name>NOT_IN_FILES</name>|
<name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>function</name></expr>)</condition><then> <expr_stmt><expr><name>function</name> = "handle"</expr>;</expr_stmt></then></if>
<return>return <expr><call><name>register_filter_function_hook</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>function</name></expr></argument>, <argument><expr><name>AP_LUA_FILTER_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_input_filter</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>filter</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIRECTORY</name>|<name>NOT_IN_FILES</name>|
<name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>function</name></expr>)</condition><then> <expr_stmt><expr><name>function</name> = "handle"</expr>;</expr_stmt></then></if>
<return>return <expr><call><name>register_filter_function_hook</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>function</name></expr></argument>, <argument><expr><name>AP_LUA_FILTER_INPUT</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_quick_block</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>register_named_block_function_hook</name><argument_list>(<argument><expr>"quick"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>_cfg</name></expr></argument>,
<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_package_helper</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>dir_array</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_server_cfg</name> *</type><name>server_cfg</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>lua_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>fixed_filename</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name>fixed_filename</name></expr></argument>,
<argument><expr><name><name>server_cfg</name>-&gt;<name>root_path</name></name></expr></argument>,
<argument><expr><name>arg</name></expr></argument>,
<argument><expr><name>APR_FILEPATH_NOTRELATIVE</name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Unable to build full path to file, %s"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*(const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>dir_array</name></expr></argument>)</argument_list></call> = <name>fixed_filename</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_package_dir</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr>(<name>ap_lua_dir_cfg</name> *) <name>_cfg</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>register_package_helper</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>package_paths</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_package_cdir</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr>(<name>ap_lua_dir_cfg</name> *) <name>_cfg</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>register_package_helper</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>package_cpaths</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_lua_inherit</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr>(<name>ap_lua_dir_cfg</name> *) <name>_cfg</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr>"none"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>inherit</name></name> = <name>AP_LUA_INHERIT_NONE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr>"parent-first"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>inherit</name></name> = <name>AP_LUA_INHERIT_PARENT_FIRST</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr>"parent-last"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>inherit</name></name> = <name>AP_LUA_INHERIT_PARENT_LAST</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"LuaInherit type of '%s' not recognized, valid "
"options are 'none', 'parent-first', and 'parent-last'"</expr></argument>,
<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_lua_codecache</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr>(<name>ap_lua_dir_cfg</name> *) <name>_cfg</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr>"never"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>codecache</name></name> = <name>AP_LUA_CACHE_NEVER</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr>"stat"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>codecache</name></name> = <name>AP_LUA_CACHE_STAT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr>"forever"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>codecache</name></name> = <name>AP_LUA_CACHE_FOREVER</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"LuaCodeCache type of '%s' not recognized, valid "
"options are 'never', 'stat', and 'forever'"</expr></argument>,
<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_lua_scope</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scope</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>min</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>max</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr>(<name>ap_lua_dir_cfg</name> *) <name>_cfg</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>"once"</expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>vm_scope</name></name> = <name>AP_LUA_SCOPE_ONCE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>"request"</expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>vm_scope</name></name> = <name>AP_LUA_SCOPE_REQUEST</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>"conn"</expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>vm_scope</name></name> = <name>AP_LUA_SCOPE_CONN</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>"thread"</expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_HAS_THREADS</name></expr></cpp:if>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Scope type of '%s' cannot be used because this "
"server does not have threading support "
"(APR_HAS_THREADS)"
<name>scope</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>vm_scope</name></name> = <name>AP_LUA_SCOPE_THREAD</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>"server"</expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vmin</name></decl>, <decl><type ref="prev"/><name>vmax</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_HAS_THREADS</name></expr></cpp:if>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Scope type of '%s' cannot be used because this "
"server does not have threading support "
"(APR_HAS_THREADS)"
<name>scope</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>vm_scope</name></name> = <name>AP_LUA_SCOPE_SERVER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vmin</name> = <name>min</name> ? <call><name>atoi</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>vmax</name> = <name>max</name> ? <call><name>atoi</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call> : 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>vmin</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>vmin</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>vmax</name> &lt; <name>vmin</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>vmax</name> = <name>vmin</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>vm_min</name></name> = <name>vmin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>vm_max</name></name> = <name>vmax</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Invalid value for LuaScope, '%s', acceptable "
"values are: 'once', 'request', 'conn'"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
", 'thread', 'server'"</expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
,<argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_lua_root</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_server_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lua_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>root_path</name></name> = <name>root</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ap_lua_ssl_val</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>var</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>lua_ssl_val</name></expr>)</condition><then> <block>{
<return>return <expr>(const <name>char</name> *)<call><name>lua_ssl_val</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>var</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>ap_lua_ssl_is_https</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>lua_ssl_is_https</name> ? <call><name>lua_ssl_is_https</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> : 0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>lua_authz_parse</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> **</type><name>parsed_require_line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_authz_provider_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_authz_provider_func</name> *</type><name>func</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lua_authz_provider_func</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>(<name>void</name>**)&amp;<name>provider_name</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_NAME_NOTE</name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>provider_name</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>spec</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>lua_authz_providers</name></expr></argument>, <argument><expr><name>provider_name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>spec</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>func</name>-&gt;<name>spec</name></name> = <name>spec</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>require_line</name> &amp;&amp; *<name>require_line</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>func</name>-&gt;<name>args</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>arg</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>require_line</name></expr></argument>)</argument_list></call>) &amp;&amp; *<name>arg</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>func</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>arg</name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<expr_stmt><expr>*<name>parsed_require_line</name> = <name>func</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>lua_authz_check</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_vm_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_State</name> *</type><name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_lua_server_cfg</name> *</type><name>server_cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lua_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lua_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lua_authz_provider_func</name> *</type><name>prov_func</name> <init>= <expr><name>parsed_require_line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lua_authz_provider_spec</name> *</type><name>prov_spec</name> <init>= <expr><name><name>prov_func</name>-&gt;<name>spec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nargs</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>spec</name> = <call><name>create_vm_spec</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>server_cfg</name></expr></argument>, <argument><expr><name><name>prov_spec</name>-&gt;<name>file_name</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>prov_spec</name>-&gt;<name>function_name</name></name></expr></argument>, <argument><expr>"authz provider"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> = <call><name>ap_lua_get_lua_state</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>L</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02314</expr></argument>)</argument_list></call>
"Unable to compile VM for authz provider %s"</expr></argument>, <argument><expr><name><name>prov_spec</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>prov_spec</name>-&gt;<name>function_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>lua_isfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02319</expr></argument>)</argument_list></call>
"Unable to find entry function '%s' in %s (not a valid function)"</expr></argument>,
<argument><expr><name><name>prov_spec</name>-&gt;<name>function_name</name></name></expr></argument>, <argument><expr><name><name>prov_spec</name>-&gt;<name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_lua_run_lua_request</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>prov_func</name>-&gt;<name>args</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>lua_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>prov_func</name>-&gt;<name>args</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02315</expr></argument>)</argument_list></call>
"Error: authz provider %s: too many arguments"</expr></argument>, <argument><expr><name><name>prov_spec</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>prov_func</name>-&gt;<name>args</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>prov_func</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>nargs</name> = <name><name>prov_func</name>-&gt;<name>args</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1 + <name>nargs</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02316</expr></argument>)</argument_list></call>
"Error executing authz provider %s: %s"</expr></argument>, <argument><expr><name><name>prov_spec</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>lua_isnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02317</expr></argument>)</argument_list></call>
"Error: authz provider %s did not return integer"</expr></argument>, <argument><expr><name><name>prov_spec</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lua_release_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{
<case>case <expr><name>AUTHZ_DENIED</name></expr>:
</case><case>case <expr><name>AUTHZ_GRANTED</name></expr>:
</case><case>case <expr><name>AUTHZ_NEUTRAL</name></expr>:
</case><case>case <expr><name>AUTHZ_GENERAL_ERROR</name></expr>:
</case><case>case <expr><name>AUTHZ_DENIED_NO_USER</name></expr>:
<return>return <expr><name>result</name></expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02318</expr></argument>)</argument_list></call>
"Error: authz provider %s: invalid return value %d"</expr></argument>,
<argument><expr><name><name>prov_spec</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>lua_authz_provider</name> <init>= <expr><block>{
<expr>&amp;<name>lua_authz_check</name></expr>,
<expr>&amp;<name>lua_authz_parse</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>register_authz_provider</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>function</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lua_authz_provider_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><name>spec</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>file_name</name></name> = <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name>-&gt;<name>function_name</name></name> = <name>function</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>lua_authz_providers</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>lua_authz_provider</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>command_rec</name></type> <name><name>lua_commands</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LuaRoot"</expr></argument>, <argument><expr><name>register_lua_root</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Specify the base path for resolving relative paths for mod_lua directives"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LuaPackagePath"</expr></argument>, <argument><expr><name>register_package_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Add a directory to lua's package.path"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LuaPackageCPath"</expr></argument>, <argument><expr><name>register_package_cdir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Add a directory to lua's package.cpath"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE3</name><argument_list>(<argument><expr>"LuaAuthzProvider"</expr></argument>, <argument><expr><name>register_authz_provider</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>EXEC_ON_READ</name></expr></argument>,
<argument><expr>"Provide an authorization provider"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"LuaHookTranslateName"</expr></argument>, <argument><expr><name>register_translate_name_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the translate name phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;LuaHookTranslateName"</expr></argument>, <argument><expr><name>register_translate_name_block</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the translate name phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"LuaHookFixups"</expr></argument>, <argument><expr><name>register_fixups_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the fixups phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;LuaHookFixups"</expr></argument>, <argument><expr><name>register_fixups_block</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a inline hook for the fixups phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"LuaHookMapToStorage"</expr></argument>, <argument><expr><name>register_map_to_storage_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the map_to_storage phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;LuaHookMapToStorage"</expr></argument>, <argument><expr><name>register_map_to_storage_block</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the map_to_storage phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"LuaHookCheckUserID"</expr></argument>, <argument><expr><name>register_check_user_id_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the check_user_id phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;LuaHookCheckUserID"</expr></argument>, <argument><expr><name>register_check_user_id_block</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the check_user_id phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"LuaHookTypeChecker"</expr></argument>, <argument><expr><name>register_type_checker_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the type_checker phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;LuaHookTypeChecker"</expr></argument>, <argument><expr><name>register_type_checker_block</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the type_checker phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"LuaHookAccessChecker"</expr></argument>, <argument><expr><name>register_access_checker_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the access_checker phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;LuaHookAccessChecker"</expr></argument>, <argument><expr><name>register_access_checker_block</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the access_checker phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"LuaHookAuthChecker"</expr></argument>, <argument><expr><name>register_auth_checker_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the auth_checker phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;LuaHookAuthChecker"</expr></argument>, <argument><expr><name>register_auth_checker_block</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the auth_checker phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"LuaHookInsertFilter"</expr></argument>, <argument><expr><name>register_insert_filter_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the insert_filter phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"LuaHookLog"</expr></argument>, <argument><expr><name>register_log_transaction_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the logging phase of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE123</name><argument_list>(<argument><expr>"LuaScope"</expr></argument>, <argument><expr><name>register_lua_scope</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"One of once, request, conn, server -- default is once"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LuaInherit"</expr></argument>, <argument><expr><name>register_lua_inherit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Controls how Lua scripts in parent contexts are merged with the current "
" context: none|parent-last|parent-first (default: parent-first) "</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LuaCodeCache"</expr></argument>, <argument><expr><name>register_lua_codecache</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Controls the behavior of the in-memory code cache "
" context: stat|forever|never (default: stat) "</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"LuaQuickHandler"</expr></argument>, <argument><expr><name>register_quick_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the quick handler of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;LuaQuickHandler"</expr></argument>, <argument><expr><name>register_quick_block</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Provide a hook for the quick handler of request processing"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"Lua_____ByteCodeHack"</expr></argument>, <argument><expr><name>hack_section_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"(internal) Byte code handler"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"LuaMapHandler"</expr></argument>, <argument><expr><name>register_map_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Maps a path to a lua handler"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE3</name><argument_list>(<argument><expr>"LuaOutputFilter"</expr></argument>, <argument><expr><name>register_output_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Registers a Lua function as an output filter"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE3</name><argument_list>(<argument><expr>"LuaInputFilter"</expr></argument>, <argument><expr><name>register_input_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Registers a Lua function as an input filter"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dir</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_dir_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>package_paths</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>package_cpaths</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>mapped_handlers</name></name> =
<call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_mapped_handler_spec</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>mapped_filters</name></name> =
<call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_filter_handler_spec</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>pool</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>hooks</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>dir</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>vm_scope</name></name> = <name>AP_LUA_SCOPE_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>codecache</name></name> = <name>AP_LUA_CACHE_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>vm_min</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>vm_max</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>inherit</name></name> = <name>AP_LUA_INHERIT_UNSET</name></expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>create_request_config</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_request_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_request_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>mapped_request_details</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>request_scoped_vms</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>lua_module</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_server_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_server_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>root_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_request_hook</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_lua_push_request</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_mutex_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>"lua-ivm-shm"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_LOCK_DEFAULT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> **</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rs</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lua_ssl_val</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_var_lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lua_ssl_is_https</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_is_https</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_MAIN_STATE</name></expr></argument>)</argument_list></call> == <name>AP_SQ_MS_CREATE_PRE_CONFIG</name></expr>)</condition><then>
<return>return <expr><name>OK</name></expr>;</return></then></if>
<expr_stmt><expr><name>rs</name> = <call><name>ap_global_mutex_create</name><argument_list>(<argument><expr>&amp;<name>lua_ivm_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"lua-ivm-shm"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>rs</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rs</name> = <call><name>apr_shm_create</name><argument_list>(<argument><expr>&amp;<name>lua_ivm_shm</name></expr></argument>, <argument><expr>sizeof <name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOTIMPL</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lua_ivm_shmfile</name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>DEFAULT_LUA_SHMFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_shm_remove</name><argument_list>(<argument><expr><name>lua_ivm_shmfile</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rs</name> = <call><name>apr_shm_create</name><argument_list>(<argument><expr>&amp;<name>lua_ivm_shm</name></expr></argument>, <argument><expr>sizeof <name>pool</name></expr></argument>, <argument><expr><name>lua_ivm_shmfile</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rs</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02665</expr></argument>)</argument_list></call>
"mod_lua: Failed to create shared memory segment on file %s"</expr></argument>,
<argument><expr><name>lua_ivm_shmfile</name> ? <name>lua_ivm_shmfile</name> : "(anonymous)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pool</name> = (<name>apr_pool_t</name> **)<call><name>apr_shm_baseaddr_get</name><argument_list>(<argument><expr><name>lua_ivm_shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>shm_cleanup_wrapper</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>overlay_hook_specs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl></param>,
<param><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>overlay_val</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>base_val</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>overlay_info</name> <init>= <expr>(const <name>apr_array_header_t</name>*)<name>overlay_val</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>base_info</name> <init>= <expr>(const <name>apr_array_header_t</name>*)<name>base_val</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>base_info</name></expr></argument>, <argument><expr><name>overlay_info</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_lua_dir_cfg</name> *</type><name>a</name></decl>, *<decl><type ref="prev"/><name>base</name></decl>, *<decl><type ref="prev"/><name>overrides</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> = (<name>ap_lua_dir_cfg</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_lua_dir_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> = (<name>ap_lua_dir_cfg</name>*)<name>basev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>overrides</name> = (<name>ap_lua_dir_cfg</name>*)<name>overridesv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>pool</name></name> = <name><name>overrides</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>dir</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>vm_scope</name></name> = (<name><name>overrides</name>-&gt;<name>vm_scope</name></name> == <name>AP_LUA_SCOPE_UNSET</name>) ? <name><name>base</name>-&gt;<name>vm_scope</name></name>: <name><name>overrides</name>-&gt;<name>vm_scope</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>inherit</name></name> = (<name><name>overrides</name>-&gt;<name>inherit</name></name> == <name>AP_LUA_INHERIT_UNSET</name>) ? <name><name>base</name>-&gt;<name>inherit</name></name> : <name><name>overrides</name>-&gt;<name>inherit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>codecache</name></name> = (<name><name>overrides</name>-&gt;<name>codecache</name></name> == <name>AP_LUA_CACHE_UNSET</name>) ? <name><name>base</name>-&gt;<name>codecache</name></name> : <name><name>overrides</name>-&gt;<name>codecache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>vm_min</name></name> = (<name><name>overrides</name>-&gt;<name>vm_min</name></name> == 0) ? <name><name>base</name>-&gt;<name>vm_min</name></name> : <name><name>overrides</name>-&gt;<name>vm_min</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>vm_max</name></name> = (<name><name>overrides</name>-&gt;<name>vm_max</name></name> == 0) ? <name><name>base</name>-&gt;<name>vm_max</name></name> : <name><name>overrides</name>-&gt;<name>vm_max</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>inherit</name></name> == <name>AP_LUA_INHERIT_UNSET</name> || <name><name>a</name>-&gt;<name>inherit</name></name> == <name>AP_LUA_INHERIT_PARENT_FIRST</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>a</name>-&gt;<name>package_paths</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>package_paths</name></name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>package_paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>package_cpaths</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>package_cpaths</name></name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>package_cpaths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>mapped_handlers</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>mapped_handlers</name></name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>mapped_handlers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>mapped_filters</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>mapped_filters</name></name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>mapped_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>hooks</name></name> = <call><name>apr_hash_merge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>hooks</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>hooks</name></name></expr></argument>, <argument><expr><name>overlay_hook_specs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>a</name>-&gt;<name>inherit</name></name> == <name>AP_LUA_INHERIT_PARENT_LAST</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>a</name>-&gt;<name>package_paths</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>package_paths</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>package_paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>package_cpaths</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>package_cpaths</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>package_cpaths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>mapped_handlers</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>mapped_handlers</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>mapped_handlers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>mapped_filters</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>mapped_filters</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>mapped_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>hooks</name></name> = <call><name>apr_hash_merge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>hooks</name></name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>hooks</name></name></expr></argument>, <argument><expr><name>overlay_hook_specs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>a</name>-&gt;<name>package_paths</name></name> = <name><name>overrides</name>-&gt;<name>package_paths</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>package_cpaths</name></name> = <name><name>overrides</name>-&gt;<name>package_cpaths</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>mapped_handlers</name></name>= <name><name>overrides</name>-&gt;<name>mapped_handlers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>mapped_filters</name></name>= <name><name>overrides</name>-&gt;<name>mapped_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>hooks</name></name>= <name><name>overrides</name>-&gt;<name>hooks</name></name></expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>lua_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>lua_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_create_request</name><argument_list>(<argument><expr><name>create_request_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_translate_name</name><argument_list>(<argument><expr><name>lua_translate_name_harness_first</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_LUA_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_translate_name</name><argument_list>(<argument><expr><name>lua_translate_name_harness</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_translate_name</name><argument_list>(<argument><expr><name>lua_translate_name_harness_last</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_LUA_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>lua_fixup_harness</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_map_to_storage</name><argument_list>(<argument><expr><name>lua_map_to_storage_harness</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_user_id</name><argument_list>(<argument><expr><name>lua_check_user_id_harness</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_type_checker</name><argument_list>(<argument><expr><name>lua_type_checker_harness</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_access_checker</name><argument_list>(<argument><expr><name>lua_access_checker_harness_first</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_LUA_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_access_checker</name><argument_list>(<argument><expr><name>lua_access_checker_harness</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_access_checker</name><argument_list>(<argument><expr><name>lua_access_checker_harness_last</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_LUA_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_auth_checker</name><argument_list>(<argument><expr><name>lua_auth_checker_harness_first</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_LUA_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_auth_checker</name><argument_list>(<argument><expr><name>lua_auth_checker_harness</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_auth_checker</name><argument_list>(<argument><expr><name>lua_auth_checker_harness_last</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_LUA_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>lua_insert_filter_harness</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_quick_handler</name><argument_list>(<argument><expr><name>lua_quick_harness</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>lua_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>lua_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_OPTIONAL_HOOK</name><argument_list>(<argument><expr><name>ap_lua</name></expr></argument>, <argument><expr><name>lua_open</name></expr></argument>, <argument><expr><name>lua_open_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_OPTIONAL_HOOK</name><argument_list>(<argument><expr><name>ap_lua</name></expr></argument>, <argument><expr><name>lua_request</name></expr></argument>, <argument><expr><name>lua_request_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>lua_map_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_LUA_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>lua_map_handler_fixups</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_LUA_HOOK_LAST</name>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>ap_lua_init_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>lua_authz_providers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_log_transaction</name><argument_list>(<argument><expr><name>lua_log_transaction_harness</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_dir_config</name></expr>,
<expr><name>merge_dir_config</name></expr>,
<expr><name>create_server_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>lua_commands</name></expr>,
<expr><name>lua_register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
