<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/filters/libsed.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LIBSED_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBSED_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SED_NLINES</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SED_DEPTH</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SED_LABSIZE</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SED_ABUFSIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<typedef>typedef <type>struct <name>sed_reptr_s</name></type> <name>sed_reptr_t</name>;</typedef>
<struct>struct <name>sed_reptr_s</name> <block>{
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ad1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ad2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>re1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>lb1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>rhs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>findex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>command</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gfl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>pfl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>negfl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nrep</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>sed_label_s</name></type> <name>sed_label_t</name>;</typedef>
<struct>struct <name>sed_label_s</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>asc</name><index>[<expr>9</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>address</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> (<name>sed_err_fn_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> (<name>sed_write_fn_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>sz</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type>struct <name>sed_commands_s</name></type> <name>sed_commands_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NWFILES</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<struct>struct <name>sed_commands_s</name> <block>{
<decl_stmt><decl><type><name>sed_err_fn_t</name> *</type><name>errfn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>linebuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lbend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>saveq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lastre</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>respace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sseof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>reend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>earg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name><name>tlno</name><index>[<expr><name>SED_NLINES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>fname</name><index>[<expr><name>NWFILES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nfiles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_label_t</name></type> <name><name>ltab</name><index>[<expr><name>SED_LABSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_label_t</name> *</type><name>labtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_label_t</name> *</type><name>lab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_label_t</name> *</type><name>labend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_reptr_t</name> **</type><name><name>cmpend</name><index>[<expr><name>SED_DEPTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>ptrspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>ptrend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nrep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canbefinal</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>sed_eval_s</name></type> <name>sed_eval_t</name>;</typedef>
<struct>struct <name>sed_eval_s</name> <block>{
<decl_stmt><decl><type><name>sed_err_fn_t</name> *</type><name>errfn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_write_fn_t</name> *</type><name>writefn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>fout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>linebuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lspend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>hsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>holdbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>hspend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>gsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>genbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lcomend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name><name>fcode</name><index>[<expr><name>NWFILES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name><name>abuf</name><index>[<expr><name>SED_ABUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_reptr_t</name> **</type><name>aptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>inar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nrep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dolflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lreadyflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quitflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>finalflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numpass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nullmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name>apr_status_t</name></type> <name>sed_init_commands</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>sed_err_fn_t</name> *</type><name>errfn</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>sed_compile_string</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>sed_compile_file</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>fin</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name>*</type> <name>sed_get_finalize_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>apr_pool_t</name>*</type> <name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sed_canbe_finalized</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>sed_commands_t</name> *</type><name>commands</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sed_destroy_commands</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>sed_init_eval</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>,
<param><decl><type><name>sed_err_fn_t</name> *</type><name>errfn</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>sed_write_fn_t</name> *</type><name>writefn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>sed_reset_eval</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>sed_err_fn_t</name> *</type><name>errfn</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>sed_eval_buffer</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>bufsz</name></decl></param>, <param><decl><type><name>void</name> *</type><name>fout</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>sed_eval_file</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>fin</name></decl></param>, <param><decl><type><name>void</name> *</type><name>fout</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>sed_finalize_eval</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>void</name> *</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sed_destroy_eval</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
