<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/filters/sed0.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libsed.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sed.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regexp.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCEOF</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fcomp</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>fin</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>compsub</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>,
<param><decl><type><name>sed_comp_args</name> *</type><name>compargs</name></decl></param>, <param><decl><type><name>char</name> *</type><name>rhsbuf</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rline</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>fin</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>lbuf</name></decl></param>, <param><decl><type><name>char</name> *</type><name>lbend</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>address</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>char</name> *</type><name>expbuf</name></decl></param>,
<param><decl><type><name>apr_status_t</name>*</type> <name>status</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>text</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>char</name> *</type><name>textbuf</name></decl></param>, <param><decl><type><name>char</name> *</type><name>endbuf</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sed_label_t</name> *</type><name>search</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>ycomp</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>char</name> *</type><name>expbuf</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>comple</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>sed_comp_args</name> *</type><name>compargs</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>x1</name></decl></param>, <param><decl><type><name>char</name> *</type><name>ep</name></decl></param>, <param><decl><type><name>char</name> *</type><name>x3</name></decl></param>, <param><decl><type><name>char</name></type> <name>x4</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sed_reptr_t</name> *</type><name>alloc_reptr</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_finalized</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>sed_commands_t</name> *</type><name>commands</name></decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>command_errf</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>errfn</name></name> &amp;&amp; <name><name>commands</name>-&gt;<name>pool</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> = <call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name><name>commands</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>commands</name>-&gt;<name>errfn</name></name><argument_list>(<argument><expr><name><name>commands</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>sed_init_commands</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>sed_err_fn_t</name> *</type><name>errfn</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>commands</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>errfn</name></name> = <name>errfn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>labtab</name></name> = <name><name>commands</name>-&gt;<name>ltab</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>lab</name></name> = <name><name>commands</name>-&gt;<name>labtab</name></name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>pool</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>respace</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>respace</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_OOMMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name></name> = <call><name>alloc_reptr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>rep</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name> = <name><name>commands</name>-&gt;<name>respace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>reend</name></name> = &amp;<name><name>commands</name>-&gt;<name>respace</name><index>[<expr><name>RESIZE</name> - 1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>labend</name></name> = &amp;<name><name>commands</name>-&gt;<name>labtab</name><index>[<expr><name>SED_LABSIZE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>canbefinal</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>sed_destroy_commands</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><name>apr_status_t</name></type> <name>sed_compile_string</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>earg</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>eflag</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>fcomp</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>canbefinal</name></name> = <call><name>check_finalized</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>eflag</name></name> = 0</expr>;</expr_stmt>
<return>return <expr>(<name>rv</name> != 0 ? <name>APR_EGENERAL</name> : <name>APR_SUCCESS</name>)</expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>sed_compile_file</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>fin</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>fcomp</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr>(<name>rv</name> != 0 ? <name>APR_EGENERAL</name> : <name>APR_SUCCESS</name>)</expr>;</return>
}</block></function>
<function><type><name>char</name>*</type> <name>sed_get_finalize_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>apr_pool_t</name>*</type> <name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>sed_label_t</name> *</type><name>lab</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>depth</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>SEDERR_TMOMES</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>lab</name> = <name><name>commands</name>-&gt;<name>labtab</name></name> + 1</expr>;</init> <condition><expr><name>lab</name> &lt; <name><name>commands</name>-&gt;<name>lab</name></name></expr>;</condition> <incr><expr><name>lab</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>error</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>lab</name>-&gt;<name>address</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>error</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SEDERR_ULMES</name></expr></argument>, <argument><expr><name><name>lab</name>-&gt;<name>asc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>lab</name>-&gt;<name>chain</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>SEDERR_INTERNAL</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>sed_canbe_finalized</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>sed_commands_t</name> *</type><name>commands</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>commands</name>-&gt;<name>canbefinal</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_finalized</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>sed_commands_t</name> *</type><name>commands</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>sed_label_t</name> *</type><name>lab</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>depth</name></name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>lab</name> = <name><name>commands</name>-&gt;<name>labtab</name></name> + 1</expr>;</init> <condition><expr><name>lab</name> &lt; <name><name>commands</name>-&gt;<name>lab</name></name></expr>;</condition> <incr><expr><name>lab</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>lab</name>-&gt;<name>address</name></name> == 0 || (<name><name>lab</name>-&gt;<name>chain</name></name>)</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dechain</name><parameter_list>(<param><decl><type><name>sed_label_t</name> *</type><name>lpt</name></decl></param>, <param><decl><type><name>sed_reptr_t</name> *</type><name>address</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>lpt</name> == <name>NULL</name>) || (<name><name>lpt</name>-&gt;<name>chain</name></name> == <name>NULL</name>) || (<name>address</name> == <name>NULL</name>)</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>rep</name> = <name><name>lpt</name>-&gt;<name>chain</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>rep</name>-&gt;<name>lb1</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><name>next</name> = <name><name>rep</name>-&gt;<name>lb1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name>-&gt;<name>lb1</name></name> = <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rep</name> = <name>next</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>rep</name>-&gt;<name>lb1</name></name> = <name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lpt</name>-&gt;<name>chain</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fcomp</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>fin</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>op</name></decl>, *<decl><type ref="prev"/><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>pt</name></decl>, *<decl><type ref="prev"/><name>pt1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_label_t</name> *</type><name>lpt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fnamebuf</name><index>[<expr><name>APR_PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_comp_args</name></type> <name>compargs</name></decl>;</decl_stmt>
<expr_stmt><expr><name>op</name> = <name><name>commands</name>-&gt;<name>lastre</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>commands</name>-&gt;<name>linebuf</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>linebuf</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>commands</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>LBSIZE</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>rline</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>fin</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>,
<argument><expr>(<name><name>commands</name>-&gt;<name>linebuf</name></name> + <name>LBSIZE</name> + 1)</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>linebuf</name></name> == '#'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>linebuf</name><index>[<expr>1</expr>]</index></name> == 'n'</expr>)</condition><then>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>nflag</name></name> = 1</expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name> = <name><name>commands</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
<goto>goto <name>comploop</name>;</goto>
}</block></else></if>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<if>if <condition>(<expr><call><name>rline</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>fin</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>,
<argument><expr>(<name><name>commands</name>-&gt;<name>linebuf</name></name> + <name>LBSIZE</name> + 1)</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name> = <name><name>commands</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
<label><name>comploop</name>:</label>
<while>while <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == ' ' || *<name><name>commands</name>-&gt;<name>cp</name></name> == '\t'</expr>)</condition>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt></while>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == '\0' || *<name><name>commands</name>-&gt;<name>cp</name></name> == '#'</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == ';'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt>
<goto>goto <name>comploop</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>p</name> = <call><name>address</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_CGMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>p</name> == <name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>op</name></expr>)</condition><then>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name> = <name>op</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_NRMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>p</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name> = <name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>op</name> = <name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == ',' || *<name><name>commands</name>-&gt;<name>cp</name></name> == ';'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad2</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>address</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad2</name></name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> != <name>APR_SUCCESS</name>) || (<name>p</name> == 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_CGMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>p</name> == <name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad2</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad2</name></name> = <name>op</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>op</name> = <name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad2</name></name></expr>;</expr_stmt></else></if>
}</block></then> <else>else
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad2</name></name> = 0</expr>;</expr_stmt></else></if>
}</block></else></if></else></if>
<if>if<condition>(<expr><name>p</name> &gt; &amp;<name><name>commands</name>-&gt;<name>respace</name><index>[<expr><name>RESIZE</name>-1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == ' ' || *<name><name>commands</name>-&gt;<name>cp</name></name> == '\t'</expr>)</condition>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt></while>
<label><name>swit</name>:</label>
<switch>switch<condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name>++</expr>)</condition> <block>{
<default>default:
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_UCMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
</default><case>case <expr>'!'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>negfl</name></name> = 1</expr>;</expr_stmt>
<goto>goto <name>swit</name>;</goto>
</case><case>case <expr>'{'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>BCOM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>negfl</name></name> = !(<name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>negfl</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cmpend</name><index>[<expr><name><name>commands</name>-&gt;<name>depth</name></name>++</expr>]</index></name> = &amp;<name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>lb1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name></name> = <call><name>alloc_reptr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name> = <name>p</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == '\0'</expr>)</condition><then>
<continue>continue;</continue></then></if>
<goto>goto <name>comploop</name>;</goto>
</case><case>case <expr>'}'</expr>:
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_AD0MES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>--<name><name>commands</name>-&gt;<name>depth</name></name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMCMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name><name>commands</name>-&gt;<name>cmpend</name><index>[<expr><name><name>commands</name>-&gt;<name>depth</name></name></expr>]</index></name> = <name><name>commands</name>-&gt;<name>rep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name> = <name>p</name></expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr>'='</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>EQCOM</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad2</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_AD1MES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>':'</expr>:
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_AD0MES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name>++ == ' '</expr>)</condition><empty_stmt>;</empty_stmt></while>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> = <name><name>commands</name>-&gt;<name>lab</name>-&gt;<name>asc</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr>(*<name>tp</name>++ = *<name><name>commands</name>-&gt;<name>cp</name></name>++)</expr>)</condition> <block>{
<if>if <condition>(<expr><name>tp</name> &gt;= &amp;(<name><name>commands</name>-&gt;<name>lab</name>-&gt;<name>asc</name><index>[<expr>8</expr>]</index></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_LTLMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></while>
<expr_stmt><expr>*--<name>tp</name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>lpt</name> = <call><name>search</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>lpt</name>-&gt;<name>address</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_DLMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>dechain</name><argument_list>(<argument><expr><name>lpt</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>rep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>lab</name>-&gt;<name>chain</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>lpt</name> = <name><name>commands</name>-&gt;<name>lab</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>++<name><name>commands</name>-&gt;<name>lab</name></name> &gt;= <name><name>commands</name>-&gt;<name>labend</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMLMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>lpt</name>-&gt;<name>address</name></name> = <name><name>commands</name>-&gt;<name>rep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name> = <name>p</name></expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr>'a'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>ACOM</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad2</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_AD1MES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == '\\'</expr>)</condition><then>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name>++ != '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_CGMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>text</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>reend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>'c'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>CCOM</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == '\\'</expr>)</condition><then> <expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name>++ != ('\n')</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_CGMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>text</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>reend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>'i'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>ICOM</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad2</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_AD1MES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == '\\'</expr>)</condition><then> <expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name>++ != ('\n')</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_CGMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>text</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>reend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>'g'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>GCOM</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'G'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>CGCOM</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'h'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>HCOM</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'H'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>CHCOM</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'t'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>TCOM</name></expr>;</expr_stmt>
<goto>goto <name>jtcommon</name>;</goto>
</case><case>case <expr>'b'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>BCOM</name></expr>;</expr_stmt>
<label><name>jtcommon</name>:</label>
<while>while <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name>++ == ' '</expr>)</condition><empty_stmt>;</empty_stmt></while>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>--</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == '\0'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>pt</name> = <name><name>commands</name>-&gt;<name>labtab</name>-&gt;<name>chain</name></name>) != <name>NULL</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr>(<name>pt1</name> = <name><name>pt</name>-&gt;<name>lb1</name></name>) != <name>NULL</name></expr>)</condition>
<expr_stmt><expr><name>pt</name> = <name>pt1</name></expr>;</expr_stmt></while>
<expr_stmt><expr><name><name>pt</name>-&gt;<name>lb1</name></name> = <name><name>commands</name>-&gt;<name>rep</name></name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>commands</name>-&gt;<name>labtab</name>-&gt;<name>chain</name></name> = <name><name>commands</name>-&gt;<name>rep</name></name></expr>;</expr_stmt></else></if>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>tp</name> = <name><name>commands</name>-&gt;<name>lab</name>-&gt;<name>asc</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr>(*<name>tp</name>++ = *<name><name>commands</name>-&gt;<name>cp</name></name>++)</expr>)</condition>
<if>if <condition>(<expr><name>tp</name> &gt;= &amp;(<name><name>commands</name>-&gt;<name>lab</name>-&gt;<name>asc</name><index>[<expr>8</expr>]</index></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_LTLMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if></while>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr>*--<name>tp</name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>lpt</name> = <call><name>search</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>lpt</name>-&gt;<name>address</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>lb1</name></name> = <name><name>lpt</name>-&gt;<name>address</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>pt</name> = <name><name>lpt</name>-&gt;<name>chain</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>pt1</name> = <name><name>pt</name>-&gt;<name>lb1</name></name>) != <name>NULL</name></expr>)</condition>
<expr_stmt><expr><name>pt</name> = <name>pt1</name></expr>;</expr_stmt></while>
<expr_stmt><expr><name><name>pt</name>-&gt;<name>lb1</name></name> = <name><name>commands</name>-&gt;<name>rep</name></name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>lab</name>-&gt;<name>chain</name></name> = <name><name>commands</name>-&gt;<name>rep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>lab</name>-&gt;<name>address</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>++<name><name>commands</name>-&gt;<name>lab</name></name> &gt;= <name><name>commands</name>-&gt;<name>labend</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMLMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></else></if>
<break>break;</break>
</case><case>case <expr>'n'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>NCOM</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'N'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>CNCOM</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'p'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>PCOM</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'P'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>CPCOM</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'r'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>RCOM</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad2</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_AD1MES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name>++ != ' '</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_CGMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>text</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>reend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>'d'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>DCOM</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'D'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>CDCOM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>lb1</name></name> = <name><name>commands</name>-&gt;<name>ptrspace</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'q'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>QCOM</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad2</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_AD1MES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'l'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>LCOM</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'s'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>SCOM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>sseof</name></name> = *<name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>comple</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>&amp;<name>compargs</name></expr></argument>, <argument><expr>(<name>char</name> *) 0</expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name></expr></argument>,
<argument><expr><name><name>commands</name>-&gt;<name>reend</name></name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>sseof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>p</name> == <name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>op</name></expr>)</condition><then>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name> = <name>op</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_NRMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></else></if>
}</block></then> <else>else
<expr_stmt><expr><name>op</name> = <name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>rhs</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>compsub</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>&amp;<name>compargs</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>rhs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>p</name>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == 'g'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>gfl</name></name> = 999</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>commands</name>-&gt;<name>gflag</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>gfl</name></name> = 999</expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> &gt;= '1' &amp;&amp; *<name><name>commands</name>-&gt;<name>cp</name></name> &lt;= '9'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name> = *<name><name>commands</name>-&gt;<name>cp</name></name> - '0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><name>ii</name> = *<name><name>commands</name>-&gt;<name>cp</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ii</name> &lt; '0' || <name>ii</name> &gt; '9'</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>i</name> = <name>i</name>*10 + <name>ii</name> - '0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt; 512</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TOOBIG</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>gfl</name></name> = <name>i</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == 'p'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>pfl</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == 'P'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>pfl</name></name> = 2</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == 'w'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name>++ != ' '</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_SMMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>text</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>fnamebuf</name></expr></argument>, <argument><expr>&amp;<name><name>fnamebuf</name><index>[<expr><name>APR_PATH_MAX</name>-1</expr>]</index></name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_FNTL</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = <name><name>commands</name>-&gt;<name>nfiles</name></name> - 1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fnamebuf</name></expr></argument>,<argument><expr><name><name>commands</name>-&gt;<name>fname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>findex</name></name> = <name>i</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
}</block></then></if></for>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>nfiles</name></name> &gt;= <name>NWFILES</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMWFMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>fname</name><index>[<expr><name><name>commands</name>-&gt;<name>nfiles</name></name></expr>]</index></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>commands</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fnamebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>fname</name><index>[<expr><name><name>commands</name>-&gt;<name>nfiles</name></name></expr>]</index></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_OOMMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>findex</name></name> = <name><name>commands</name>-&gt;<name>nfiles</name></name>++</expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'w'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>WCOM</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name>++ != ' '</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_SMMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>text</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>fnamebuf</name></expr></argument>, <argument><expr>&amp;<name><name>fnamebuf</name><index>[<expr><name>APR_PATH_MAX</name>-1</expr>]</index></name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_FNTL</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = <name><name>commands</name>-&gt;<name>nfiles</name></name> - 1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fnamebuf</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>fname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>findex</name></name> = <name>i</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
}</block></then></if></for>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>nfiles</name></name> &gt;= <name>NWFILES</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMWFMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>commands</name>-&gt;<name>fname</name><index>[<expr><name><name>commands</name>-&gt;<name>nfiles</name></name></expr>]</index></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>commands</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fnamebuf</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_OOMMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>findex</name></name> = <name><name>commands</name>-&gt;<name>nfiles</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'x'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>XCOM</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'y'</expr>:
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = <name>YCOM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>sseof</name></name> = *<name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>ycomp</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>re1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<break>break;</break>
</case>}</block></switch>
<label><name>done</name>:</label>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name></name> = <call><name>alloc_reptr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>ad1</name></name> = <name>p</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name>++ != '\0'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>cp</name><index>[<expr>-1</expr>]</index></name> == ';'</expr>)</condition><then>
<goto>goto <name>comploop</name>;</goto></then></if>
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_CGMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>rep</name>-&gt;<name>command</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>lastre</name></name> = <name>op</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>compsub</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>,
<param><decl><type><name>sed_comp_args</name> *</type><name>compargs</name></decl></param>, <param><decl><type><name>char</name> *</type><name>rhsbuf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = <name>rhsbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> = <name><name>commands</name>-&gt;<name>cp</name></name></expr>;</expr_stmt>
<for>for(<init>;</init><condition>;</condition><incr/>) <block>{
<if>if<condition>(<expr><name>p</name> &gt; &amp;<name><name>commands</name>-&gt;<name>respace</name><index>[<expr><name>RESIZE</name>-1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if<condition>(<expr>(*<name>p</name> = *<name>q</name>++) == '\\'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
<if>if<condition>(<expr><name>p</name> &gt; &amp;<name><name>commands</name>-&gt;<name>respace</name><index>[<expr><name>RESIZE</name>-1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p</name> = *<name>q</name>++</expr>;</expr_stmt>
<if>if<condition>(<expr>*<name>p</name> &gt; <name><name>compargs</name>-&gt;<name>nbra</name></name> + '0' &amp;&amp; *<name>p</name> &lt;= '9'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_DOORNG</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if<condition>(<expr>*<name>p</name> == <name><name>commands</name>-&gt;<name>sseof</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p</name>++ = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name> = <name>q</name></expr>;</expr_stmt>
<return>return<expr>(<name>p</name>)</expr>;</return>
}</block></then></if>
<if>if<condition>(<expr>*<name>p</name>++ == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_EDMOSUB</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rline</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>fin</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>lbuf</name></decl></param>, <param><decl><type><name>char</name> *</type><name>lbend</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = <name>lbuf</name></expr>;</expr_stmt>
<if>if<condition>(<expr><name><name>commands</name>-&gt;<name>eflag</name></name></expr>)</condition><then> <block>{
<if>if<condition>(<expr><name><name>commands</name>-&gt;<name>eflag</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>eflag</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> = <name><name>commands</name>-&gt;<name>earg</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr>(<name>t</name> = *<name>q</name>++) != '\0'</expr>)</condition> <block>{
<if>if<condition>(<expr><name>t</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>saveq</name></name> = <name>q</name></expr>;</expr_stmt>
<goto>goto <name>out1</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>p</name> &lt; <name>lbend</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p</name>++ = <name>t</name></expr>;</expr_stmt></then></if>
<if>if<condition>(<expr><name>t</name> == '\\'</expr>)</condition><then> <block>{
<if>if<condition>(<expr>(<name>t</name> = *<name>q</name>++) == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>saveq</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return<expr>(-1)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>p</name> &lt; <name>lbend</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p</name>++ = <name>t</name></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></while>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>saveq</name></name> = <name>NULL</name></expr>;</expr_stmt>
<label><name>out1</name>:</label>
<if>if <condition>(<expr><name>p</name> == <name>lbend</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_CLTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
<return>return<expr>(1)</expr>;</return>
}</block></then></if>
<if>if<condition>(<expr>(<name>q</name> = <name><name>commands</name>-&gt;<name>saveq</name></name>) == 0</expr>)</condition><then> <return>return<expr>(-1)</expr>;</return></then></if>
<while>while<condition>(<expr>(<name>t</name> = *<name>q</name>++) != '\0'</expr>)</condition> <block>{
<if>if<condition>(<expr><name>t</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>saveq</name></name> = <name>q</name></expr>;</expr_stmt>
<goto>goto <name>out2</name>;</goto>
}</block></then></if>
<if>if<condition>(<expr><name>p</name> &lt; <name>lbend</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p</name>++ = <name>t</name></expr>;</expr_stmt></then></if>
<if>if<condition>(<expr><name>t</name> == '\\'</expr>)</condition><then> <block>{
<if>if<condition>(<expr>(<name>t</name> = *<name>q</name>++) == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>saveq</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return<expr>(-1)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>p</name> &lt; <name>lbend</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p</name>++ = <name>t</name></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></while>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>saveq</name></name> = <name>NULL</name></expr>;</expr_stmt>
<label><name>out2</name>:</label>
<if>if <condition>(<expr><name>p</name> == <name>lbend</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_CLTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
<return>return<expr>(1)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bytes_read</name> = 1</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_file_read</name><argument_list>(<argument><expr><name>fin</name></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>, <argument><expr>&amp;<name>bytes_read</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition> <block>{
<if>if<condition>(<expr><name>t</name> == '\n'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>p</name> == <name>lbend</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_CLTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
<return>return<expr>(1)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>p</name> &lt; <name>lbend</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p</name>++ = <name>t</name></expr>;</expr_stmt></then></if>
<if>if<condition>(<expr><name>t</name> == '\\'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>bytes_read</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_file_read</name><argument_list>(<argument><expr><name>fin</name></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>, <argument><expr>&amp;<name>bytes_read</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if<condition>(<expr><name>p</name> &lt; <name>lbend</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p</name>++ = <name>t</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><name>bytes_read</name> = 1</expr>;</expr_stmt>
}</block></while>
<return>return<expr>(-1)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>address</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>char</name> *</type><name>expbuf</name></decl></param>,
<param><decl><type><name>apr_status_t</name>*</type> <name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>rcp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>lno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_comp_args</name></type> <name>compargs</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>status</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
<if>if<condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == '$'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>expbuf</name> &gt; &amp;<name><name>commands</name>-&gt;<name>respace</name><index>[<expr><name>RESIZE</name>-2</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>status</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>expbuf</name>++ = <name>CEND</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>expbuf</name>++ = <name>CCEOF</name></expr>;</expr_stmt>
<return>return<expr>(<name>expbuf</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == '/' || *<name><name>commands</name>-&gt;<name>cp</name></name> == '\\'</expr> )</condition><then> <block>{
<if>if <condition>( <expr>*<name><name>commands</name>-&gt;<name>cp</name></name> == '\\'</expr> )</condition><then>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>sseof</name></name> = *<name><name>commands</name>-&gt;<name>cp</name></name>++</expr>;</expr_stmt>
<return>return<expr>(<call><name>comple</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>&amp;<name>compargs</name></expr></argument>, <argument><expr>(<name>char</name> *) 0</expr></argument>, <argument><expr><name>expbuf</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>reend</name></name></expr></argument>,
<argument><expr><name><name>commands</name>-&gt;<name>sseof</name></name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rcp</name> = <name><name>commands</name>-&gt;<name>cp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lno</name> = 0</expr>;</expr_stmt>
<while>while<condition>(<expr>*<name>rcp</name> &gt;= '0' &amp;&amp; *<name>rcp</name> &lt;= '9'</expr>)</condition>
<expr_stmt><expr><name>lno</name> = <name>lno</name>*10 + *<name>rcp</name>++ - '0'</expr>;</expr_stmt></while>
<if>if<condition>(<expr><name>rcp</name> &gt; <name><name>commands</name>-&gt;<name>cp</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>expbuf</name> &gt; &amp;<name><name>commands</name>-&gt;<name>respace</name><index>[<expr><name>RESIZE</name>-3</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>status</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>expbuf</name>++ = <name>CLNUM</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>expbuf</name>++ = <name><name>commands</name>-&gt;<name>nlno</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>tlno</name><index>[<expr><name><name>commands</name>-&gt;<name>nlno</name></name>++</expr>]</index></name> = <name>lno</name></expr>;</expr_stmt>
<if>if<condition>(<expr><name><name>commands</name>-&gt;<name>nlno</name></name> &gt;= <name>SED_NLINES</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMLNMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>status</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>expbuf</name>++ = <name>CCEOF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name> = <name>rcp</name></expr>;</expr_stmt>
<return>return<expr>(<name>expbuf</name>)</expr>;</return>
}</block></then></if>
<return>return<expr>(<name>NULL</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>text</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>char</name> *</type><name>textbuf</name></decl></param>, <param><decl><type><name>char</name> *</type><name>tbend</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = <name>textbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> = <name><name>commands</name>-&gt;<name>cp</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>S5EMUL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while<condition>(<expr>*<name>q</name> == '\t' || *<name>q</name> == ' '</expr>)</condition> <expr_stmt><expr><name>q</name>++</expr>;</expr_stmt></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for(<init>;</init><condition>;</condition><incr/>) <block>{
<if>if<condition>(<expr><name>p</name> &gt; <name>tbend</name></expr>)</condition><then>
<return>return<expr>(<name>NULL</name>)</expr>;</return></then></if>
<if>if<condition>(<expr>(*<name>p</name> = *<name>q</name>++) == '\\'</expr>)</condition><then>
<expr_stmt><expr>*<name>p</name> = *<name>q</name>++</expr>;</expr_stmt></then></if>
<if>if<condition>(<expr>*<name>p</name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name> = --<name>q</name></expr>;</expr_stmt>
<return>return<expr>(++<name>p</name>)</expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>S5EMUL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if<condition>(<expr>*<name>p</name> == '\n'</expr>)</condition><then> <block>{
<while>while<condition>(<expr>*<name>q</name> == '\t' || *<name>q</name> == ' '</expr>)</condition> <expr_stmt><expr><name>q</name>++</expr>;</expr_stmt></while>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>sed_label_t</name> *</type><name>search</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sed_label_t</name> *</type><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sed_label_t</name> *</type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rp</name> = <name><name>commands</name>-&gt;<name>labtab</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> = <name><name>commands</name>-&gt;<name>lab</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rp</name> &lt; <name>ptr</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>asc</name></name></expr></argument>, <argument><expr><name><name>ptr</name>-&gt;<name>asc</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>rp</name></expr>;</return></then></if>
<expr_stmt><expr><name>rp</name>++</expr>;</expr_stmt>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>ycomp</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>char</name> *</type><name>expbuf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ep</name></decl>, *<decl><type ref="prev"/><name>tsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>sp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ep</name> = <name>expbuf</name></expr>;</expr_stmt>
<if>if<condition>(<expr><name>ep</name> + 0377 &gt; &amp;<name><name>commands</name>-&gt;<name>respace</name><index>[<expr><name>RESIZE</name>-1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMMES</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>sp</name> = <name><name>commands</name>-&gt;<name>cp</name></name></expr>;</expr_stmt>
<for>for(<init><expr><name>tsp</name> = <name><name>commands</name>-&gt;<name>cp</name></name></expr>;</init> <condition><expr>(<name>c</name> = *<name>tsp</name>) != <name><name>commands</name>-&gt;<name>sseof</name></name></expr>;</condition> <incr><expr><name>tsp</name>++</expr></incr>) <block>{
<if>if<condition>(<expr><name>c</name> == '\\'</expr>)</condition><then>
<expr_stmt><expr><name>tsp</name>++</expr>;</expr_stmt></then></if>
<if>if<condition>(<expr><name>c</name> == '\0' || <name>c</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_EDMOSTR</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>tsp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0400</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr>(<name>c</name> = *<name>sp</name>++) != <name><name>commands</name>-&gt;<name>sseof</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>c</name> &amp;= 0377</expr>;</expr_stmt>
<if>if<condition>(<expr><name>c</name> == '\\' &amp;&amp; *<name>sp</name> == 'n'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>sp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = '\n'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>cint</name> = (<name>int</name>) <name>c</name></expr>;</expr_stmt>
<if>if<condition>(<expr>(<name><name>ep</name><index>[<expr><name>cint</name></expr>]</index></name> = *<name>tsp</name>++) == '\\' &amp;&amp; *<name>tsp</name> == 'n'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ep</name><index>[<expr><name>cint</name></expr>]</index></name> = '\n'</expr>;</expr_stmt>
<expr_stmt><expr><name>tsp</name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if<condition>(<expr><name><name>ep</name><index>[<expr><name>cint</name></expr>]</index></name> == <name><name>commands</name>-&gt;<name>sseof</name></name> || <name><name>ep</name><index>[<expr><name>cint</name></expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TSNTSS</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<if>if<condition>(<expr>*<name>tsp</name> != <name><name>commands</name>-&gt;<name>sseof</name></name></expr>)</condition><then> <block>{
<if>if<condition>(<expr>*<name>tsp</name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_EDMOSTR</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TSNTSS</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name> = ++<name>tsp</name></expr>;</expr_stmt>
<for>for(<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 0400</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if<condition>(<expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name> = <name>i</name></expr>;</expr_stmt></then></if></for>
<return>return<expr>(<name>ep</name> + 0400)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>comple</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>sed_comp_args</name> *</type><name>compargs</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>x1</name></decl></param>, <param><decl><type><name>char</name> *</type><name>ep</name></decl></param>, <param><decl><type><name>char</name> *</type><name>x3</name></decl></param>, <param><decl><type><name>char</name></type> <name>x4</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = <call><name>sed_compile</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>compargs</name></expr></argument>, <argument><expr><name>ep</name> + 1</expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>p</name> == <name>ep</name> + 1</expr>)</condition><then>
<return>return<expr>(<name>ep</name>)</expr>;</return></then></if>
<expr_stmt><expr>*<name>ep</name> = <name><name>compargs</name>-&gt;<name>circf</name></name></expr>;</expr_stmt>
<return>return<expr>(<name>p</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>sed_reptr_t</name> *</type><name>alloc_reptr</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>var</name></decl>;</decl_stmt>
<expr_stmt><expr><name>var</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>commands</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sed_reptr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>var</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_OOMMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>var</name>-&gt;<name>nrep</name></name> = <name><name>commands</name>-&gt;<name>nrep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name>-&gt;<name>findex</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>nrep</name></name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>commands</name>-&gt;<name>ptrspace</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>ptrspace</name></name> = <name>var</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>commands</name>-&gt;<name>ptrend</name>-&gt;<name>next</name></name> = <name>var</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>ptrend</name></name> = <name>var</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>labtab</name>-&gt;<name>address</name></name> = <name>var</name></expr>;</expr_stmt>
<return>return <expr><name>var</name></expr>;</return>
}</block></function>
</unit>
