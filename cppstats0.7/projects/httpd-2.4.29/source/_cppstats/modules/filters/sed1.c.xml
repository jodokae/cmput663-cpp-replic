<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/filters/sed1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libsed.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sed.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regexp.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name><name>trans</name><index>[<expr>040</expr>]</index></name> <init>= <expr><block>{
<expr>"\\01"</expr>,
<expr>"\\02"</expr>,
<expr>"\\03"</expr>,
<expr>"\\04"</expr>,
<expr>"\\05"</expr>,
<expr>"\\06"</expr>,
<expr>"\\07"</expr>,
<expr>"\\10"</expr>,
<expr>"\\11"</expr>,
<expr>"\n"</expr>,
<expr>"\\13"</expr>,
<expr>"\\14"</expr>,
<expr>"\\15"</expr>,
<expr>"\\16"</expr>,
<expr>"\\17"</expr>,
<expr>"\\20"</expr>,
<expr>"\\21"</expr>,
<expr>"\\22"</expr>,
<expr>"\\23"</expr>,
<expr>"\\24"</expr>,
<expr>"\\25"</expr>,
<expr>"\\26"</expr>,
<expr>"\\27"</expr>,
<expr>"\\30"</expr>,
<expr>"\\31"</expr>,
<expr>"\\32"</expr>,
<expr>"\\33"</expr>,
<expr>"\\34"</expr>,
<expr>"\\35"</expr>,
<expr>"\\36"</expr>,
<expr>"\\37"</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>rub</name><index>[]</index></name> <init>= <expr><block>{<expr>"\\177"</expr>}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sed_step</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>p1</name></decl></param>, <param><decl><type><name>char</name> *</type><name>p2</name></decl></param>, <param><decl><type><name>int</name></type> <name>circf</name></decl></param>, <param><decl><type><name>step_vars_storage</name> *</type><name>vars</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>substitute</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>sed_reptr_t</name> *</type><name>ipc</name></decl></param>,
<param><decl><type><name>step_vars_storage</name> *</type><name>step_vars</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>match</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>char</name> *</type><name>expbuf</name></decl></param>, <param><decl><type><name>int</name></type> <name>gf</name></decl></param>,
<param><decl><type><name>step_vars_storage</name> *</type><name>step_vars</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dosub</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>char</name> *</type><name>rhsbuf</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>,
<param><decl><type><name>step_vars_storage</name> *</type><name>step_vars</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>place</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>char</name> *</type><name>asp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>al1</name></decl></param>, <param><decl><type><name>char</name> *</type><name>al2</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>command</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>sed_reptr_t</name> *</type><name>ipc</name></decl></param>,
<param><decl><type><name>step_vars_storage</name> *</type><name>step_vars</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>wline</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>sz</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>arout</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type> <name>eval_errf</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>errfn</name></name> &amp;&amp; <name><name>eval</name>-&gt;<name>pool</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> = <call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>eval</name>-&gt;<name>errfn</name></name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_BUF_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>grow_buffer</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> **</type><name>buffer</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>spend</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>cursize</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>newsize</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name>*</type> <name>newbuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spendsize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>cursize</name> &gt;= <name>newsize</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name>newsize</name> &lt; *<name>cursize</name> * 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>newsize</name> = *<name>cursize</name> * 2</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>newsize</name> = (<name>newsize</name> + ((1 &lt;&lt; 12) - 1)) &amp; ~((1 &lt;&lt; 12) -1)</expr>;</expr_stmt>
<expr_stmt><expr><name>newbuffer</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>spend</name> &amp;&amp; *<name>buffer</name> &amp;&amp; (*<name>cursize</name> &gt; 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>spendsize</name> = *<name>spend</name> - *<name>buffer</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(*<name>cursize</name> &gt; 0) &amp;&amp; *<name>buffer</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newbuffer</name></expr></argument>, <argument><expr>*<name>buffer</name></expr></argument>, <argument><expr>*<name>cursize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>buffer</name> = <name>newbuffer</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>cursize</name> = <name>newsize</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>spend</name> != <name>buffer</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>spend</name> = *<name>buffer</name> + <name>spendsize</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>grow_line_buffer</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>int</name></type> <name>newsize</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>grow_buffer</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>, <argument><expr>&amp;<name><name>eval</name>-&gt;<name>lspend</name></name></expr></argument>,
<argument><expr>&amp;<name><name>eval</name>-&gt;<name>lsize</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>grow_hold_buffer</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>int</name></type> <name>newsize</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>grow_buffer</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>eval</name>-&gt;<name>holdbuf</name></name></expr></argument>, <argument><expr>&amp;<name><name>eval</name>-&gt;<name>hspend</name></name></expr></argument>,
<argument><expr>&amp;<name><name>eval</name>-&gt;<name>hsize</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>grow_gen_buffer</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>int</name></type> <name>newsize</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>gspend</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>gspend</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>gspend</name> = &amp;<name><name>eval</name>-&gt;<name>genbuf</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>grow_buffer</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>, <argument><expr><name>gspend</name></expr></argument>,
<argument><expr>&amp;<name><name>eval</name>-&gt;<name>gsize</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lcomend</name></name> = &amp;<name><name>eval</name>-&gt;<name>genbuf</name><index>[<expr>71</expr>]</index></name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>appendmem_to_linebuf</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>sz</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>reqsize</name> <init>= <expr>(<name><name>eval</name>-&gt;<name>lspend</name></name> - <name><name>eval</name>-&gt;<name>linebuf</name></name>) + <name>len</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>lsize</name></name> &lt; <name>reqsize</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>grow_line_buffer</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>reqsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>lspend</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lspend</name></name> += <name>len</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>append_to_linebuf</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>sz</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>appendmem_to_linebuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>--<name><name>eval</name>-&gt;<name>lspend</name></name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_to_linebuf</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>sz</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lspend</name></name> = <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_to_linebuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>append_to_holdbuf</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>sz</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>reqsize</name> <init>= <expr>(<name><name>eval</name>-&gt;<name>hspend</name></name> - <name><name>eval</name>-&gt;<name>holdbuf</name></name>) + <name>len</name> + 1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>hsize</name></name> &lt;= <name>reqsize</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>grow_hold_buffer</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>reqsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>hspend</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>hspend</name></name> += <name>len</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_to_holdbuf</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>sz</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>hspend</name></name> = <name><name>eval</name>-&gt;<name>holdbuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_to_holdbuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>append_to_genbuf</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>sz</name></decl></param>, <param><decl><type><name>char</name> **</type><name>gspend</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>reqsize</name> <init>= <expr>(*<name>gspend</name> - <name><name>eval</name>-&gt;<name>genbuf</name></name>) + <name>len</name> + 1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>gsize</name></name> &lt; <name>reqsize</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>grow_gen_buffer</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>reqsize</name></expr></argument>, <argument><expr><name>gspend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr>*<name>gspend</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>gspend</name> += <name>len</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_to_genbuf</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>sz</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>reqsize</name> <init>= <expr><name>len</name> + 1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>gsize</name></name> &lt; <name>reqsize</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>grow_gen_buffer</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>reqsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>sed_init_eval</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>sed_err_fn_t</name> *</type><name>errfn</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>sed_write_fn_t</name> *</type><name>writefn</name></decl></param>, <param><decl><type><name>apr_pool_t</name>*</type> <name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>pool</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>writefn</name></name> = <name>writefn</name></expr>;</expr_stmt>
<return>return <expr><call><name>sed_reset_eval</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>commands</name></expr></argument>, <argument><expr><name>errfn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>sed_reset_eval</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>sed_err_fn_t</name> *</type><name>errfn</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>errfn</name></name> = <name>errfn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>commands</name></name> = <name>commands</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lnum</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>fout</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>linebuf</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lsize</name></name> = <name>INIT_BUF_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>linebuf</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>lsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>holdbuf</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>hsize</name></name> = <name>INIT_BUF_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>holdbuf</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>hsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>genbuf</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>gsize</name></name> = <name>INIT_BUF_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>genbuf</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>gsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lspend</name></name> = <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>hspend</name></name> = <name><name>eval</name>-&gt;<name>holdbuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lcomend</name></name> = &amp;<name><name>eval</name>-&gt;<name>genbuf</name><index>[<expr>71</expr>]</index></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>abuf</name></name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>abuf</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>eval</name>-&gt;<name>abuf</name><index>[<expr><name>i</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt></for>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>aptr</name></name> = <name><name>eval</name>-&gt;<name>abuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>pending</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>inar</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>nrep</name></name> * sizeof(<name>unsigned</name> <name>char</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>nrep</name></name> = <name><name>commands</name>-&gt;<name>nrep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>dolflag</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>sflag</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>jflag</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>delflag</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lreadyflag</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>quitflag</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>finalflag</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>numpass</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>nullmatch</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>col</name></name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>commands</name>-&gt;<name>nfiles</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>filename</name> <init>= <expr><name><name>commands</name>-&gt;<name>fname</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name><name>eval</name>-&gt;<name>fcode</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name>APR_WRITE</name> | <name>APR_CREATE</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name><name>eval</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>eval_errf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>SEDERR_COMES</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>sed_destroy_eval</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>eval</name>-&gt;<name>commands</name>-&gt;<name>nfiles</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>fcode</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>fcode</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>fcode</name><index>[<expr><name>i</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>sed_eval_file</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>fin</name></decl></param>, <param><decl><type><name>void</name> *</type><name>fout</name></decl></param>)</parameter_list> <block>{
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>read_bytes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>read_bytes</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_file_read</name><argument_list>(<argument><expr><name>fin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>read_bytes</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><call><name>sed_eval_buffer</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>read_bytes</name></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>quitflag</name></name></expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
}</block></for>
<return>return <expr><call><name>sed_finalize_eval</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>sed_eval_buffer</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>bufsz</name></decl></param>, <param><decl><type><name>void</name> *</type><name>fout</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>quitflag</name></name></expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>sed_canbe_finalized</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>commands</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>error</name> <init>= <expr><call><name>sed_get_finalize_error</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>commands</name></name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>eval_errf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>fout</name></name> = <name>fout</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bufsz</name> &amp;&amp; <name><name>eval</name>-&gt;<name>lreadyflag</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lreadyflag</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lspend</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>eval</name>-&gt;<name>lspend</name></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>execute</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></then></if>
<while>while <condition>(<expr><name>bufsz</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>llen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>'\n'</expr></argument>, <argument><expr><name>bufsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> == <name>NULL</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>llen</name> = <name>n</name> - <name>buf</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>llen</name> == <name>bufsz</name> - 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lreadyflag</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>appendmem_to_linebuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>llen</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>--<name><name>eval</name>-&gt;<name>lspend</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>eval</name>-&gt;<name>lspend</name></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> += (<name>llen</name> + 1)</expr>;</expr_stmt>
<expr_stmt><expr><name>bufsz</name> -= (<name>llen</name> + 1)</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>execute</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>quitflag</name></name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></while>
<if>if <condition>(<expr><name>bufsz</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>appendmem_to_linebuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>sed_finalize_eval</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>void</name> *</type><name>fout</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>quitflag</name></name></expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>finalflag</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>dolflag</name></name> = 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>fout</name></name> = <name>fout</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>lspend</name></name> &gt; <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>lreadyflag</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lreadyflag</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lspend</name></name>--</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>append_to_linebuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name><name>eval</name>-&gt;<name>lspend</name></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>execute</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>quitflag</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sed_reptr_t</name> *</type><name>ipc</name> <init>= <expr><name><name>eval</name>-&gt;<name>commands</name>-&gt;<name>ptrspace</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>step_vars_storage</name></type> <name>step_vars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lnum</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>sflag</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>pending</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ipc</name> = <name><name>eval</name>-&gt;<name>pending</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>pending</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>step_vars</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>step_vars</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>ipc</name>-&gt;<name>command</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p1</name> = <name><name>ipc</name>-&gt;<name>ad1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> = <name><name>ipc</name>-&gt;<name>ad2</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p1</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>inar</name><index>[<expr><name><name>ipc</name>-&gt;<name>nrep</name></name></expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>p2</name> == <name>CEND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>p1</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>p2</name> == <name>CLNUM</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)<name><name>p2</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>lnum</name></name> &gt; <name><name>eval</name>-&gt;<name>commands</name>-&gt;<name>tlno</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>inar</name><index>[<expr><name><name>ipc</name>-&gt;<name>nrep</name></name></expr>]</index></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ipc</name>-&gt;<name>negfl</name></name></expr>)</condition><then>
<goto>goto <name>yes</name>;</goto></then></if>
<expr_stmt><expr><name>ipc</name> = <name><name>ipc</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>lnum</name></name> == <name><name>eval</name>-&gt;<name>commands</name>-&gt;<name>tlno</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>inar</name><index>[<expr><name><name>ipc</name>-&gt;<name>nrep</name></name></expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>step_vars</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>inar</name><index>[<expr><name><name>ipc</name>-&gt;<name>nrep</name></name></expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>*<name>p1</name> == <name>CEND</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>eval</name>-&gt;<name>dolflag</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ipc</name>-&gt;<name>negfl</name></name></expr>)</condition><then>
<goto>goto <name>yes</name>;</goto></then></if>
<expr_stmt><expr><name>ipc</name> = <name><name>ipc</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>*<name>p1</name> == <name>CLNUM</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)<name><name>p1</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>lnum</name></name> != <name><name>eval</name>-&gt;<name>commands</name>-&gt;<name>tlno</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ipc</name>-&gt;<name>negfl</name></name></expr>)</condition><then>
<goto>goto <name>yes</name>;</goto></then></if>
<expr_stmt><expr><name>ipc</name> = <name><name>ipc</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>p2</name></expr>)</condition><then>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>inar</name><index>[<expr><name><name>ipc</name>-&gt;<name>nrep</name></name></expr>]</index></name> = 1</expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>step_vars</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>p2</name></expr>)</condition><then>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>inar</name><index>[<expr><name><name>ipc</name>-&gt;<name>nrep</name></name></expr>]</index></name> = 1</expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>ipc</name>-&gt;<name>negfl</name></name></expr>)</condition><then>
<goto>goto <name>yes</name>;</goto></then></if>
<expr_stmt><expr><name>ipc</name> = <name><name>ipc</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></else></if></else></if></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>ipc</name>-&gt;<name>negfl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ipc</name> = <name><name>ipc</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<label><name>yes</name>:</label>
<expr_stmt><expr><name>rv</name> = <call><name>command</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>ipc</name></expr></argument>, <argument><expr>&amp;<name>step_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>quitflag</name></name></expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>pending</name></name></expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>delflag</name></name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>jflag</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>jflag</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>ipc</name> = <name><name>ipc</name>-&gt;<name>lb1</name></name>) == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ipc</name> = <name><name>eval</name>-&gt;<name>commands</name>-&gt;<name>ptrspace</name></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>ipc</name> = <name><name>ipc</name>-&gt;<name>next</name></name></expr>;</expr_stmt></else></if>
}</block></while>
<if>if <condition>(<expr>!<name><name>eval</name>-&gt;<name>commands</name>-&gt;<name>nflag</name></name> &amp;&amp; !<name><name>eval</name>-&gt;<name>delflag</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>lspend</name></name> - <name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>aptr</name></name> &gt; <name><name>eval</name>-&gt;<name>abuf</name></name></expr>)</condition><then>
<expr_stmt><expr><name>rv</name> = <call><name>arout</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>delflag</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lspend</name></name> = <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>match</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>char</name> *</type><name>expbuf</name></decl></param>, <param><decl><type><name>int</name></type> <name>gf</name></decl></param>,
<param><decl><type><name>step_vars_storage</name> *</type><name>step_vars</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>circf</name></decl>;</decl_stmt>
<if>if<condition>(<expr><name>gf</name></expr>)</condition><then> <block>{
<if>if<condition>(<expr>*<name>expbuf</name></expr>)</condition><then> <return>return<expr>(0)</expr>;</return></then></if>
<expr_stmt><expr><name><name>step_vars</name>-&gt;<name>locs</name></name> = <name>p1</name> = <name><name>step_vars</name>-&gt;<name>loc2</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>p1</name> = <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>step_vars</name>-&gt;<name>locs</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>circf</name> = *<name>expbuf</name>++</expr>;</expr_stmt>
<return>return<expr>(<call><name>sed_step</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>expbuf</name></expr></argument>, <argument><expr><name>circf</name></expr></argument>, <argument><expr><name>step_vars</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>substitute</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>sed_reptr_t</name> *</type><name>ipc</name></decl></param>,
<param><decl><type><name>step_vars_storage</name> *</type><name>step_vars</name></decl></param>)</parameter_list> <block>{
<if>if<condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>ipc</name>-&gt;<name>re1</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>step_vars</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <return>return<expr>(0)</expr>;</return></then></if>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>numpass</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>sflag</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>dosub</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>ipc</name>-&gt;<name>rhs</name></name></expr></argument>, <argument><expr><name><name>ipc</name>-&gt;<name>gfl</name></name></expr></argument>, <argument><expr><name>step_vars</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if<condition>(<expr><name><name>ipc</name>-&gt;<name>gfl</name></name></expr>)</condition><then> <block>{
<while>while<condition>(<expr>*<name><name>step_vars</name>-&gt;<name>loc2</name></name></expr>)</condition> <block>{
<if>if<condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>ipc</name>-&gt;<name>re1</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>step_vars</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <break>break;</break></then></if>
<if>if <condition>(<expr><call><name>dosub</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>ipc</name>-&gt;<name>rhs</name></name></expr></argument>, <argument><expr><name><name>ipc</name>-&gt;<name>gfl</name></name></expr></argument>, <argument><expr><name>step_vars</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></while>
}</block></then></if>
<return>return<expr>(<name><name>eval</name>-&gt;<name>sflag</name></name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dosub</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>char</name> *</type><name>rhsbuf</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>,
<param><decl><type><name>step_vars_storage</name> *</type><name>step_vars</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>lp</name></decl>, *<decl><type ref="prev"/><name>sp</name></decl>, *<decl><type ref="prev"/><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr><name>n</name> &gt; 0 &amp;&amp; <name>n</name> &lt; 999</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>numpass</name></name>++</expr>;</expr_stmt>
<if>if<condition>(<expr><name>n</name> != <name><name>eval</name>-&gt;<name>numpass</name></name></expr>)</condition><then> <return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>sflag</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>lp</name> = <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> = <name><name>eval</name>-&gt;<name>genbuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> = <name>rhsbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> = <call><name>place</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>, <argument><expr><name><name>step_vars</name>-&gt;<name>loc1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>c</name> = *<name>rp</name>++) != 0</expr>)</condition> <block>{
<if>if <condition>(<expr><name>c</name> == '&amp;'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>sp</name> = <call><name>place</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name><name>step_vars</name>-&gt;<name>loc1</name></name></expr></argument>, <argument><expr><name><name>step_vars</name>-&gt;<name>loc2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sp</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> == '\\'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>c</name> = *<name>rp</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> &gt;= '1' &amp;&amp; <name>c</name> &lt; <name>NBRA</name>+'1'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>sp</name> = <call><name>place</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name><name>step_vars</name>-&gt;<name>braslist</name><index>[<expr><name>c</name>-'1'</expr>]</index></name></expr></argument>,
<argument><expr><name><name>step_vars</name>-&gt;<name>braelist</name><index>[<expr><name>c</name>-'1'</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sp</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return></then></if>
}</block></then> <else>else
<expr_stmt><expr>*<name>sp</name>++ = <name>c</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else
<expr_stmt><expr>*<name>sp</name>++ = <name>c</name></expr>;</expr_stmt></else></if></else></if>
<if>if <condition>(<expr><name>sp</name> &gt;= <name><name>eval</name>-&gt;<name>genbuf</name></name> + <name><name>eval</name>-&gt;<name>gsize</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>grow_gen_buffer</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>gsize</name></name> + 1024</expr></argument>, <argument><expr>&amp;<name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<expr_stmt><expr><name>lp</name> = <name><name>step_vars</name>-&gt;<name>loc2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>step_vars</name>-&gt;<name>loc2</name></name> = <name>sp</name> - <name><name>eval</name>-&gt;<name>genbuf</name></name> + <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_to_genbuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>, <argument><expr>&amp;<name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_to_linebuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>place</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>char</name> *</type><name>asp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>al1</name></decl></param>, <param><decl><type><name>char</name> *</type><name>al2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>sp</name> <init>= <expr><name>asp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>al2</name> - <name>al1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>reqsize</name> <init>= <expr>(<name>sp</name> - <name><name>eval</name>-&gt;<name>genbuf</name></name>) + <name>n</name> + 1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>eval</name>-&gt;<name>gsize</name></name> &lt; <name>reqsize</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>grow_gen_buffer</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>reqsize</name></expr></argument>, <argument><expr>&amp;<name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>al1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sp</name> + <name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>command</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>sed_reptr_t</name> *</type><name>ipc</name></decl></param>,
<param><decl><type><name>step_vars_storage</name> *</type><name>step_vars</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p1</name></decl>, *<decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sz</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>ipc</name>-&gt;<name>command</name></name></expr>)</condition> <block>{
<case>case <expr><name>ACOM</name></expr>:
<if>if<condition>(<expr><name><name>eval</name>-&gt;<name>aptr</name></name> &gt;= &amp;<name><name>eval</name>-&gt;<name>abuf</name><index>[<expr><name>SED_ABUFSIZE</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>eval_errf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>SEDERR_TMAMES</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name><name>eval</name>-&gt;<name>aptr</name></name>++ = <name>ipc</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>eval</name>-&gt;<name>aptr</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>CCOM</name></expr>:
<expr_stmt><expr><name><name>eval</name>-&gt;<name>delflag</name></name> = 1</expr>;</expr_stmt>
<if>if<condition>(<expr>!<name><name>eval</name>-&gt;<name>inar</name><index>[<expr><name><name>ipc</name>-&gt;<name>nrep</name></name></expr>]</index></name> || <name><name>eval</name>-&gt;<name>dolflag</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>p1</name> = <name><name>ipc</name>-&gt;<name>re1</name></name></expr>;</init> <condition><expr>*<name>p1</name></expr>;</condition> <incr><expr><name>p1</name>++</expr></incr>)
<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>ipc</name>-&gt;<name>re1</name></name></expr></argument>, <argument><expr><name>p1</name> - <name><name>ipc</name>-&gt;<name>re1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>DCOM</name></expr>:
<expr_stmt><expr><name><name>eval</name>-&gt;<name>delflag</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>CDCOM</name></expr>:
<expr_stmt><expr><name>p1</name> = <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr>*<name>p1</name> != '\n'</expr>)</condition> <block>{
<if>if<condition>(<expr>*<name>p1</name>++ == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eval</name>-&gt;<name>delflag</name></name>++</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
}</block></while>
<expr_stmt><expr><name>p1</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_to_linebuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>jflag</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>EQCOM</name></expr>:
<expr_stmt><expr><name>length</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr>(<name>int</name>) <name><name>eval</name>-&gt;<name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>GCOM</name></expr>:
<expr_stmt><expr><call><name>copy_to_linebuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>holdbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>CGCOM</name></expr>:
<expr_stmt><expr><call><name>append_to_linebuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_to_linebuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>holdbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>HCOM</name></expr>:
<expr_stmt><expr><call><name>copy_to_holdbuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>CHCOM</name></expr>:
<expr_stmt><expr><call><name>append_to_holdbuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_to_holdbuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ICOM</name></expr>:
<for>for (<init><expr><name>p1</name> = <name><name>ipc</name>-&gt;<name>re1</name></name></expr>;</init> <condition><expr>*<name>p1</name></expr>;</condition> <incr><expr><name>p1</name>++</expr></incr>)<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>ipc</name>-&gt;<name>re1</name></name></expr></argument>, <argument><expr><name>p1</name> - <name><name>ipc</name>-&gt;<name>re1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>BCOM</name></expr>:
<expr_stmt><expr><name><name>eval</name>-&gt;<name>jflag</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>LCOM</name></expr>:
<expr_stmt><expr><name>p1</name> = <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> = <name><name>eval</name>-&gt;<name>genbuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>genbuf</name><index>[<expr>72</expr>]</index></name> = 0</expr>;</expr_stmt>
<while>while<condition>(<expr>*<name>p1</name></expr>)</condition>
<if>if<condition>(<expr>(<name>unsigned</name> <name>char</name>)*<name>p1</name> &gt;= 040</expr>)</condition><then> <block>{
<if>if<condition>(<expr>*<name>p1</name> == 0177</expr>)</condition><then> <block>{
<expr_stmt><expr><name>p3</name> = <name>rub</name></expr>;</expr_stmt>
<while>while <condition>(<expr>(*<name>p2</name>++ = *<name>p3</name>++) != 0</expr>)</condition>
<if>if<condition>(<expr><name>p2</name> &gt;= <name><name>eval</name>-&gt;<name>lcomend</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p2</name> = '\\'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<expr_stmt><expr><name>p2</name> = <name><name>eval</name>-&gt;<name>genbuf</name></name></expr>;</expr_stmt>
}</block></then></if></while>
<expr_stmt><expr><name>p2</name>--</expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if<condition>(<expr>!<call><name>isprint</name><argument_list>(<argument><expr>*<name>p1</name> &amp; 0377</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p2</name>++ = '\\'</expr>;</expr_stmt>
<if>if<condition>(<expr><name>p2</name> &gt;= <name><name>eval</name>-&gt;<name>lcomend</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p2</name> = '\\'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<expr_stmt><expr><name>p2</name> = <name><name>eval</name>-&gt;<name>genbuf</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>p2</name>++ = (*<name>p1</name> &gt;&gt; 6) + '0'</expr>;</expr_stmt>
<if>if<condition>(<expr><name>p2</name> &gt;= <name><name>eval</name>-&gt;<name>lcomend</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p2</name> = '\\'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<expr_stmt><expr><name>p2</name> = <name><name>eval</name>-&gt;<name>genbuf</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>p2</name>++ = ((*<name>p1</name> &gt;&gt; 3) &amp; 07) + '0'</expr>;</expr_stmt>
<if>if<condition>(<expr><name>p2</name> &gt;= <name><name>eval</name>-&gt;<name>lcomend</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p2</name> = '\\'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<expr_stmt><expr><name>p2</name> = <name><name>eval</name>-&gt;<name>genbuf</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>p2</name>++ = (*<name>p1</name>++ &amp; 07) + '0'</expr>;</expr_stmt>
<if>if<condition>(<expr><name>p2</name> &gt;= <name><name>eval</name>-&gt;<name>lcomend</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p2</name> = '\\'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<expr_stmt><expr><name>p2</name> = <name><name>eval</name>-&gt;<name>genbuf</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>p2</name>++ = *<name>p1</name>++</expr>;</expr_stmt>
<if>if<condition>(<expr><name>p2</name> &gt;= <name><name>eval</name>-&gt;<name>lcomend</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p2</name> = '\\'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<expr_stmt><expr><name>p2</name> = <name><name>eval</name>-&gt;<name>genbuf</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>p3</name> = <name><name>trans</name><index>[<expr>(<name>unsigned</name> <name>char</name>)*<name>p1</name>-1</expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr>(*<name>p2</name>++ = *<name>p3</name>++) != 0</expr>)</condition>
<if>if<condition>(<expr><name>p2</name> &gt;= <name><name>eval</name>-&gt;<name>lcomend</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p2</name> = '\\'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<expr_stmt><expr><name>p2</name> = <name><name>eval</name>-&gt;<name>genbuf</name></name></expr>;</expr_stmt>
}</block></then></if></while>
<expr_stmt><expr><name>p2</name>--</expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name>++</expr>;</expr_stmt>
}</block></else></if></while>
<expr_stmt><expr>*<name>p2</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>NCOM</name></expr>:
<if>if<condition>(<expr>!<name><name>eval</name>-&gt;<name>commands</name>-&gt;<name>nflag</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>lspend</name></name> - <name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></then></if>
<if>if<condition>(<expr><name><name>eval</name>-&gt;<name>aptr</name></name> &gt; <name><name>eval</name>-&gt;<name>abuf</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>arout</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>lspend</name></name> = <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>pending</name></name> = <name><name>ipc</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>CNCOM</name></expr>:
<if>if<condition>(<expr><name><name>eval</name>-&gt;<name>aptr</name></name> &gt; <name><name>eval</name>-&gt;<name>abuf</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>arout</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>append_to_linebuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>pending</name></name> = <name><name>ipc</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>PCOM</name></expr>:
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>lspend</name></name> - <name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>CPCOM</name></expr>:
<for>for (<init><expr><name>p1</name> = <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>;</init> <condition><expr>*<name>p1</name> != '\n' &amp;&amp; *<name>p1</name> != '\0'</expr>;</condition> <incr><expr><name>p1</name>++</expr></incr>)<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>, <argument><expr><name>p1</name> - <name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>QCOM</name></expr>:
<if>if <condition>(<expr>!<name><name>eval</name>-&gt;<name>commands</name>-&gt;<name>nflag</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>lspend</name></name> - <name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></then></if>
<if>if<condition>(<expr><name><name>eval</name>-&gt;<name>aptr</name></name> &gt; <name><name>eval</name>-&gt;<name>abuf</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>arout</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>quitflag</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>RCOM</name></expr>:
<if>if<condition>(<expr><name><name>eval</name>-&gt;<name>aptr</name></name> &gt;= &amp;<name><name>eval</name>-&gt;<name>abuf</name><index>[<expr><name>SED_ABUFSIZE</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>eval_errf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>SEDERR_TMRMES</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name><name>eval</name>-&gt;<name>aptr</name></name>++ = <name>ipc</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>eval</name>-&gt;<name>aptr</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>SCOM</name></expr>:
<expr_stmt><expr><name>i</name> = <call><name>substitute</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>ipc</name></expr></argument>, <argument><expr><name>step_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> == -1</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if<condition>(<expr><name><name>ipc</name>-&gt;<name>pfl</name></name> &amp;&amp; <name><name>eval</name>-&gt;<name>commands</name>-&gt;<name>nflag</name></name> &amp;&amp; <name>i</name></expr>)</condition><then> <block>{
<if>if<condition>(<expr><name><name>ipc</name>-&gt;<name>pfl</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>lspend</name></name> -
<name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></then> <else>else <block>{
<for>for (<init><expr><name>p1</name> = <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>;</init> <condition><expr>*<name>p1</name> != '\n' &amp;&amp; *<name>p1</name> != '\0'</expr>;</condition> <incr><expr><name>p1</name>++</expr></incr>)<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>, <argument><expr><name>p1</name> - <name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>i</name> &amp;&amp; (<name><name>ipc</name>-&gt;<name>findex</name></name> &gt;= 0) &amp;&amp; <name><name>eval</name>-&gt;<name>fcode</name><index>[<expr><name><name>ipc</name>-&gt;<name>findex</name></name></expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>fcode</name><index>[<expr><name><name>ipc</name>-&gt;<name>findex</name></name></expr>]</index></name></expr></argument>, <argument><expr>"%s\n"</expr></argument>,
<argument><expr><name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>TCOM</name></expr>:
<if>if<condition>(<expr><name><name>eval</name>-&gt;<name>sflag</name></name> == 0</expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>sflag</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>jflag</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>WCOM</name></expr>:
<if>if <condition>(<expr><name><name>ipc</name>-&gt;<name>findex</name></name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>fcode</name><index>[<expr><name><name>ipc</name>-&gt;<name>findex</name></name></expr>]</index></name></expr></argument>, <argument><expr>"%s\n"</expr></argument>,
<argument><expr><name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>XCOM</name></expr>:
<expr_stmt><expr><call><name>copy_to_genbuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_to_linebuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>holdbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_to_holdbuf</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>genbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>YCOM</name></expr>:
<expr_stmt><expr><name>p1</name> = <name><name>eval</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> = <name><name>ipc</name>-&gt;<name>re1</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr>(*<name>p1</name> = <name><name>p2</name><index>[<expr>(<name>unsigned</name> <name>char</name>)*<name>p1</name></expr>]</index></name>) != 0</expr>)</condition> <expr_stmt><expr><name>p1</name>++</expr>;</expr_stmt></while>
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>arout</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>aptr</name></name> = <name><name>eval</name>-&gt;<name>abuf</name></name> - 1</expr>;</expr_stmt>
<while>while <condition>(<expr>*++<name><name>eval</name>-&gt;<name>aptr</name></name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>(*<name><name>eval</name>-&gt;<name>aptr</name></name>)-&gt;<name>command</name></name> == <name>ACOM</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p1</name></decl>;</decl_stmt>
<for>for (<init><expr><name>p1</name> = <name>(*<name><name>eval</name>-&gt;<name>aptr</name></name>)-&gt;<name>re1</name></name></expr>;</init> <condition><expr>*<name>p1</name></expr>;</condition> <incr><expr><name>p1</name>++</expr></incr>)<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name>rv</name> = <call><name>wline</name><argument_list>(<argument><expr><name>eval</name></expr></argument>, <argument><expr><name>(*<name><name>eval</name>-&gt;<name>aptr</name></name>)-&gt;<name>re1</name></name></expr></argument>, <argument><expr><name>p1</name> - <name>(*<name><name>eval</name>-&gt;<name>aptr</name></name>)-&gt;<name>re1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>512</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>n</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fi</name></expr></argument>, <argument><expr><name>(*<name><name>eval</name>-&gt;<name>aptr</name></name>)-&gt;<name>re1</name></name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>eval</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>
!= <name>APR_SUCCESS</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<while>while <condition>(<expr>(<call><name>apr_file_read</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>rv</name> = <call><name><name>eval</name>-&gt;<name>writefn</name></name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>fout</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>n</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<expr_stmt><expr><name><name>eval</name>-&gt;<name>aptr</name></name> = <name><name>eval</name>-&gt;<name>abuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>eval</name>-&gt;<name>aptr</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>wline</name><parameter_list>(<param><decl><type><name>sed_eval_t</name> *</type><name>eval</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>sz</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name><name>eval</name>-&gt;<name>writefn</name></name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>fout</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name><name>eval</name>-&gt;<name>writefn</name></name><argument_list>(<argument><expr><name><name>eval</name>-&gt;<name>fout</name></name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
</unit>
