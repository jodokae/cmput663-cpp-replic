<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/metadata/mod_usertrack.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>usertrack_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>always</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expires</name></decl>;</decl_stmt>
}</block></struct></type> <name>cookie_log_state</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>CT_UNSET</name></decl>,
<decl><name>CT_NETSCAPE</name></decl>,
<decl><name>CT_COOKIE</name></decl>,
<decl><name>CT_COOKIE2</name></decl>
}</block></enum></type> <name>cookie_type_e</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cookie_type_e</name></type> <name>style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cookie_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cookie_domain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>regexp_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>regexp</name></decl>;</decl_stmt>
}</block></struct></type> <name>cookie_dir_rec</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COOKIE_NAME</name></cpp:macro> <cpp:value>"Apache"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>make_cookie</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cookie_log_state</name> *</type><name>cls</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>usertrack_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cookiebuf</name><index>[<expr>2 * (<sizeof>sizeof<argument_list>(<argument><expr><name>apr_uint64_t</name></expr></argument>)</argument_list></sizeof> + <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof>) + 2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>random</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name> <init>= <expr><name><name>r</name>-&gt;<name>request_time</name></name> ? <name><name>r</name>-&gt;<name>request_time</name></name> : <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>new_cookie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cookie_dir_rec</name> *</type><name>dcfg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_random_insecure_bytes</name><argument_list>(<argument><expr>&amp;<name>random</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>random</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>cookiebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cookiebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%x.%" <name>APR_UINT64_T_HEX_FMT</name></expr></argument>,
<argument><expr><name>random</name></expr></argument>, <argument><expr>(<name>apr_uint64_t</name>)<name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dcfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>usertrack_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cls</name>-&gt;<name>expires</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new_cookie</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s=%s; path=/"</expr></argument>,
<argument><expr><name><name>dcfg</name>-&gt;<name>cookie_name</name></name></expr></argument>, <argument><expr><name>cookiebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>dcfg</name>-&gt;<name>style</name></name> == <name>CT_UNSET</name>) || (<name><name>dcfg</name>-&gt;<name>style</name></name> == <name>CT_NETSCAPE</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>tms</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_time_exp_gmt</name><argument_list>(<argument><expr>&amp;<name>tms</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>request_time</name></name>
+ <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name><name>cls</name>-&gt;<name>expires</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_cookie</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"%s; expires=%s, "
"%.2d-%s-%.2d %.2d:%.2d:%.2d GMT"</expr></argument>,
<argument><expr><name>new_cookie</name></expr></argument>, <argument><expr><name><name>apr_day_snames</name><index>[<expr><name><name>tms</name>.<name>tm_wday</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tms</name>.<name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>apr_month_snames</name><index>[<expr><name><name>tms</name>.<name>tm_mon</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tms</name>.<name>tm_year</name></name> % 100</expr></argument>,
<argument><expr><name><name>tms</name>.<name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tms</name>.<name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tms</name>.<name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>new_cookie</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s; max-age=%d"</expr></argument>,
<argument><expr><name>new_cookie</name></expr></argument>, <argument><expr><name><name>cls</name>-&gt;<name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>new_cookie</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s=%s; path=/"</expr></argument>,
<argument><expr><name><name>dcfg</name>-&gt;<name>cookie_name</name></name></expr></argument>, <argument><expr><name>cookiebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>dcfg</name>-&gt;<name>cookie_domain</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new_cookie</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>new_cookie</name></expr></argument>, <argument><expr>"; domain="</expr></argument>,
<argument><expr><name><name>dcfg</name>-&gt;<name>cookie_domain</name></name></expr></argument>,
<argument><expr>(<name><name>dcfg</name>-&gt;<name>style</name></name> == <name>CT_COOKIE2</name>
? "; version=1"
: "")</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>,
<argument><expr>(<name><name>dcfg</name>-&gt;<name>style</name></name> == <name>CT_COOKIE2</name> ? "Set-Cookie2" : "Set-Cookie")</expr></argument>,
<argument><expr><name>new_cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"cookie"</expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>cookiebuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SUBS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_and_comp_regexp</name><parameter_list>(<param><decl><type><name>cookie_dir_rec</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cookie_name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>danger_chars</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sp</name> <init>= <expr><name>cookie_name</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>sp</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr>*<name>sp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>danger_chars</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>++<name>sp</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>danger_chars</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cp</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sp</name> - <name>cookie_name</name> + <name>danger_chars</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> = <name>cookie_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cookie_name</name> = <name>cp</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>sp</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr>*<name>sp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>cp</name>++ = '\\'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>cp</name>++ = *<name>sp</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>cp</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>regexp_string</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"^"</expr></argument>,
<argument><expr><name>cookie_name</name></expr></argument>,
<argument><expr>"=([^;,]+)|[;,][ \t]*"</expr></argument>,
<argument><expr><name>cookie_name</name></expr></argument>,
<argument><expr>"=([^;,]+)"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>regexp</name></name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dcfg</name>-&gt;<name>regexp_string</name></name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>dcfg</name>-&gt;<name>regexp</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>spot_cookie</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cookie_dir_rec</name> *</type><name>dcfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>usertrack_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cookie_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>regm</name><index>[<expr><name>NUM_SUBS</name></expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>dcfg</name>-&gt;<name>enabled</name></name> || <name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>cookie_header</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Cookie"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>dcfg</name>-&gt;<name>regexp</name></name></expr></argument>, <argument><expr><name>cookie_header</name></expr></argument>, <argument><expr><name>NUM_SUBS</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cookieval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>regm</name><index>[<expr>1</expr>]</index></name>.<name>rm_so</name> != -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cookieval</name> = <call><name>ap_pregsub</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"$1"</expr></argument>, <argument><expr><name>cookie_header</name></expr></argument>,
<argument><expr><name>NUM_SUBS</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cookieval</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = 1</expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>regm</name><index>[<expr>2</expr>]</index></name>.<name>rm_so</name> != -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cookieval</name> = <call><name>ap_pregsub</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"$2"</expr></argument>, <argument><expr><name>cookie_header</name></expr></argument>,
<argument><expr><name>NUM_SUBS</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cookieval</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = 1</expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01499</expr></argument>)</argument_list></call>
"Failed to extract cookie value (out of mem?)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"cookie"</expr></argument>, <argument><expr><name>cookieval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>make_cookie</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>make_cookie_log_state</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cookie_log_state</name> *</type><name>cls</name> <init>=
<expr>(<name>cookie_log_state</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cookie_log_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>expires</name></name> = 0</expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *) <name>cls</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>make_cookie_dir</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cookie_dir_rec</name> *</type><name>dcfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dcfg</name> = (<name>cookie_dir_rec</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cookie_dir_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>cookie_name</name></name> = <name>COOKIE_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>cookie_domain</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>style</name></name> = <name>CT_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>enabled</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_and_comp_regexp</name><argument_list>(<argument><expr><name>dcfg</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>COOKIE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dcfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_enable</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cookie_dir_rec</name> *</type><name>dcfg</name> <init>= <expr><name>mconfig</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>enabled</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_exp</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cookie_log_state</name> *</type><name>cls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>factor</name></decl>, <decl><type ref="prev"/><name>modifier</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>num</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>word</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cls</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>usertrack_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cls</name>-&gt;<name>expires</name></name> = <call><name>atol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"plus"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if><empty_stmt>;</empty_stmt>
<while>while <condition>(<expr><name><name>word</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>word</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>num</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<return>return <expr>"bad expires code, numeric value expected."</expr>;</return></else></if>
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>word</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
<return>return <expr>"bad expires code, missing &lt;type&gt;"</expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"years"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>factor</name> = 60 * 60 * 24 * 365</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"months"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>factor</name> = 60 * 60 * 24 * 30</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"weeks"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>factor</name> = 60 * 60 * 24 * 7</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"days"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>factor</name> = 60 * 60 * 24</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"hours"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>factor</name> = 60 * 60</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"minutes"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>factor</name> = 60</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"seconds"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>factor</name> = 1</expr>;</expr_stmt></then>
<else>else
<return>return <expr>"bad expires code, unrecognized type"</expr>;</return></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<expr_stmt><expr><name>modifier</name> = <name>modifier</name> + <name>factor</name> * <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>expires</name></name> = <name>modifier</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_name</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cookie_dir_rec</name> *</type><name>dcfg</name> <init>= <expr>(<name>cookie_dir_rec</name> *) <name>mconfig</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>cookie_name</name></name> = <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_and_comp_regexp</name><argument_list>(<argument><expr><name>dcfg</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dcfg</name>-&gt;<name>regexp</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"Regular expression could not be compiled."</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dcfg</name>-&gt;<name>regexp</name>-&gt;<name>re_nsub</name></name> + 1 != <name>NUM_SUBS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid cookie name \""</expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr>"\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_domain</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cookie_dir_rec</name> *</type><name>dcfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dcfg</name> = (<name>cookie_dir_rec</name> *) <name>mconfig</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>name</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr>"CookieDomain values may not be null"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name> != '.'</expr>)</condition><then> <block>{
<return>return <expr>"CookieDomain values must begin with a dot"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr>&amp;<name><name>name</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"CookieDomain values must contain at least one embedded dot"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>cookie_domain</name></name> = <name>name</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_style</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cookie_dir_rec</name> *</type><name>dcfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dcfg</name> = (<name>cookie_dir_rec</name> *) <name>mconfig</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"Netscape"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>style</name></name> = <name>CT_NETSCAPE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"Cookie"</expr></argument>)</argument_list></call> == 0)
|| (<call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"RFC2109"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>style</name></name> = <name>CT_COOKIE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"Cookie2"</expr></argument>)</argument_list></call> == 0)
|| (<call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"RFC2965"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>style</name></name> = <name>CT_COOKIE2</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid %s keyword: '%s'"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>cookie_log_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CookieExpires"</expr></argument>, <argument><expr><name>set_cookie_exp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"an expiry date code"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CookieDomain"</expr></argument>, <argument><expr><name>set_cookie_domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"domain to which this cookie applies"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CookieStyle"</expr></argument>, <argument><expr><name>set_cookie_style</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"'Netscape', 'Cookie' (RFC2109), or 'Cookie2' (RFC2965)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CookieTracking"</expr></argument>, <argument><expr><name>set_cookie_enable</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"whether or not to enable cookies"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CookieName"</expr></argument>, <argument><expr><name>set_cookie_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"name of the tracking cookie"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>spot_cookie</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>usertrack</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>make_cookie_dir</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>make_cookie_log_state</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>cookie_log_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
