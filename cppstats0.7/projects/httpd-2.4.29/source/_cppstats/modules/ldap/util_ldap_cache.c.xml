<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/ldap/util_ldap_cache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ldap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ldap_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_LDAP</name></expr></cpp:if>
<function><type><name>unsigned</name> <name>long</name></type> <name>util_ldap_url_node_hash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_url_node_t</name> *</type><name>node</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>util_ald_hash_string</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>util_ldap_url_node_compare</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_url_node_t</name> *</type><name>na</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_url_node_t</name> *</type><name>nb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>na</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call> == 0)</expr>;</return>
}</block></function>
<function><type><name>void</name> *</type><name>util_ldap_url_node_copy</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_url_node_t</name> *</type><name>n</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_url_node_t</name> *</type><name>node</name> <init>= <expr><call><name>util_ald_alloc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr>sizeof *<name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>node</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name><name>node</name>-&gt;<name>url</name></name> = <call><name>util_ald_strdup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>node</name>-&gt;<name>search_cache</name></name> = <name><name>n</name>-&gt;<name>search_cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name>-&gt;<name>compare_cache</name></name> = <name><name>n</name>-&gt;<name>compare_cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name>-&gt;<name>dn_compare_cache</name></name> = <name><name>n</name>-&gt;<name>dn_compare_cache</name></name></expr>;</expr_stmt>
<return>return <expr><name>node</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>util_ldap_url_node_free</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_url_node_t</name> *</type><name>node</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_destroy_cache</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>search_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_destroy_cache</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>compare_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_destroy_cache</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>dn_compare_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>util_ldap_url_node_display</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_url_node_t</name> *</type><name>node</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>date_str</name><index>[<expr><name>APR_CTIME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ald_cache_t</name> *</type><name>cache_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for (<init><expr><name>x</name>=0</expr>;</init> <condition><expr><name>x</name>&lt;3</expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name>x</name></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<expr_stmt><expr><name>cache_node</name> = <name><name>node</name>-&gt;<name>search_cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_str</name> = "Searches"</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>1</expr>:
<expr_stmt><expr><name>cache_node</name> = <name><name>node</name>-&gt;<name>compare_cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_str</name> = "Compares"</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>2</expr>:
</case><default>default:
<expr_stmt><expr><name>cache_node</name> = <name><name>node</name>-&gt;<name>dn_compare_cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_str</name> = "DN Compares"</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name><name>cache_node</name>-&gt;<name>marktime</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_ctime</name><argument_list>(<argument><expr><name>date_str</name></expr></argument>, <argument><expr><name><name>cache_node</name>-&gt;<name>marktime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>date_str</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>"&lt;tr valign='top'&gt;"
"&lt;td nowrap&gt;%s (%s)&lt;/td&gt;"
"&lt;td nowrap&gt;%ld&lt;/td&gt;"
"&lt;td nowrap&gt;%ld&lt;/td&gt;"
"&lt;td nowrap&gt;%ld&lt;/td&gt;"
"&lt;td nowrap&gt;%ld&lt;/td&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;/tr&gt;"</expr></argument>,
<argument><expr><name><name>node</name>-&gt;<name>url</name></name></expr></argument>,
<argument><expr><name>type_str</name></expr></argument>,
<argument><expr><name><name>cache_node</name>-&gt;<name>size</name></name></expr></argument>,
<argument><expr><name><name>cache_node</name>-&gt;<name>maxentries</name></name></expr></argument>,
<argument><expr><name><name>cache_node</name>-&gt;<name>numentries</name></name></expr></argument>,
<argument><expr><name><name>cache_node</name>-&gt;<name>fullmark</name></name></expr></argument>,
<argument><expr><name>date_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><name>unsigned</name> <name>long</name></type> <name>util_ldap_search_node_hash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_search_node_t</name> *</type><name>node</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>util_ald_hash_string</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>util_ldap_search_node_compare</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_search_node_t</name> *</type><name>na</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_search_node_t</name> *</type><name>nb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>na</name>-&gt;<name>username</name></name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call> == 0)</expr>;</return>
}</block></function>
<function><type><name>void</name> *</type><name>util_ldap_search_node_copy</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_search_node_t</name> *</type><name>node</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_search_node_t</name> *</type><name>newnode</name> <init>= <expr><call><name>util_ald_alloc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr>sizeof *<name>newnode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>newnode</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>vals</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>node</name>-&gt;<name>numvals</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name><name>newnode</name>-&gt;<name>vals</name></name> = <call><name>util_ald_alloc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * (<name>k</name>+1)</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ldap_search_node_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>newnode</name>-&gt;<name>numvals</name></name> = <name><name>node</name>-&gt;<name>numvals</name></name></expr>;</expr_stmt>
<for>for (<init>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name>--</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name><name>newnode</name>-&gt;<name>vals</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>util_ald_strdup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ldap_search_node_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else
<expr_stmt><expr><name><name>newnode</name>-&gt;<name>vals</name><index>[<expr><name>i</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>newnode</name>-&gt;<name>vals</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!(<name><name>newnode</name>-&gt;<name>username</name></name> = <call><name>util_ald_strdup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call>) ||
!(<name><name>newnode</name>-&gt;<name>dn</name></name> = <call><name>util_ald_strdup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call>)</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>util_ldap_search_node_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>bindpw</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name><name>newnode</name>-&gt;<name>bindpw</name></name> = <call><name>util_ald_strdup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>bindpw</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ldap_search_node_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>newnode</name>-&gt;<name>bindpw</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>newnode</name>-&gt;<name>lastbind</name></name> = <name><name>node</name>-&gt;<name>lastbind</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name>void</name> *)<name>newnode</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>util_ldap_search_node_free</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_search_node_t</name> *</type><name>node</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>node</name>-&gt;<name>numvals</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>vals</name></name></expr>)</condition><then> <block>{
<for>for (<init>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name>--</expr>,<expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>vals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>bindpw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>util_ldap_search_node_display</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_search_node_t</name> *</type><name>node</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>date_str</name><index>[<expr><name>APR_CTIME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_ctime</name><argument_list>(<argument><expr><name>date_str</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>lastbind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>"&lt;tr valign='top'&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;/tr&gt;"</expr></argument>,
<argument><expr><name><name>node</name>-&gt;<name>username</name></name></expr></argument>,
<argument><expr><name><name>node</name>-&gt;<name>dn</name></name></expr></argument>,
<argument><expr><name>date_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>unsigned</name> <name>long</name></type> <name>util_ldap_compare_node_hash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_compare_node_t</name> *</type><name>node</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>util_ald_hash_string</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>dn</name></name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>attrib</name></name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>util_ldap_compare_node_compare</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_compare_node_t</name> *</type><name>na</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_compare_node_t</name> *</type><name>nb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>na</name>-&gt;<name>dn</name></name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call> == 0 &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>na</name>-&gt;<name>attrib</name></name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>attrib</name></name></expr></argument>)</argument_list></call> == 0 &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>na</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call> == 0)</expr>;</return>
}</block></function>
<function><type><name>void</name> *</type><name>util_ldap_compare_node_copy</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_compare_node_t</name> *</type><name>n</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_compare_node_t</name> *</type><name>node</name> <init>= <expr><call><name>util_ald_alloc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr>sizeof *<name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>node</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name><name>node</name>-&gt;<name>dn</name></name> = <call><name>util_ald_strdup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call>) ||
!(<name><name>node</name>-&gt;<name>attrib</name></name> = <call><name>util_ald_strdup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>attrib</name></name></expr></argument>)</argument_list></call>) ||
!(<name><name>node</name>-&gt;<name>value</name></name> = <call><name>util_ald_strdup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call>) ||
((<name><name>n</name>-&gt;<name>subgroupList</name></name>) &amp;&amp; !(<name><name>node</name>-&gt;<name>subgroupList</name></name> = <call><name>util_ald_sgl_dup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>subgroupList</name></name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ldap_compare_node_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>node</name>-&gt;<name>lastcompare</name></name> = <name><name>n</name>-&gt;<name>lastcompare</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name>-&gt;<name>result</name></name> = <name><name>n</name>-&gt;<name>result</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name>-&gt;<name>sgl_processed</name></name> = <name><name>n</name>-&gt;<name>sgl_processed</name></name></expr>;</expr_stmt>
<return>return <expr><name>node</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>util_ldap_compare_node_free</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_compare_node_t</name> *</type><name>node</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>util_ald_sgl_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr>&amp;(<name><name>node</name>-&gt;<name>subgroupList</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>attrib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>util_ldap_compare_node_display</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_compare_node_t</name> *</type><name>node</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>date_str</name><index>[<expr><name>APR_CTIME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cmp_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>sub_groups_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>sub_groups_checked</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_ctime</name><argument_list>(<argument><expr><name>date_str</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>lastcompare</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>result</name></name> == <name>LDAP_COMPARE_TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cmp_result</name> = "LDAP_COMPARE_TRUE"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>node</name>-&gt;<name>result</name></name> == <name>LDAP_COMPARE_FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cmp_result</name> = "LDAP_COMPARE_FALSE"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>cmp_result</name> = <call><name>apr_itoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>subgroupList</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sub_groups_val</name> = "Yes"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>sub_groups_val</name> = "No"</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>sgl_processed</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sub_groups_checked</name> = "Yes"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>sub_groups_checked</name> = "No"</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>"&lt;tr valign='top'&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;/tr&gt;"</expr></argument>,
<argument><expr><name><name>node</name>-&gt;<name>dn</name></name></expr></argument>,
<argument><expr><name><name>node</name>-&gt;<name>attrib</name></name></expr></argument>,
<argument><expr><name><name>node</name>-&gt;<name>value</name></name></expr></argument>,
<argument><expr><name>date_str</name></expr></argument>,
<argument><expr><name>cmp_result</name></expr></argument>,
<argument><expr><name>sub_groups_val</name></expr></argument>,
<argument><expr><name>sub_groups_checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>unsigned</name> <name>long</name></type> <name>util_ldap_dn_compare_node_hash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_dn_compare_node_t</name> *</type><name>node</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>util_ald_hash_string</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>reqdn</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>util_ldap_dn_compare_node_compare</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_dn_compare_node_t</name> *</type><name>na</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_dn_compare_node_t</name> *</type><name>nb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>na</name>-&gt;<name>reqdn</name></name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>reqdn</name></name></expr></argument>)</argument_list></call> == 0)</expr>;</return>
}</block></function>
<function><type><name>void</name> *</type><name>util_ldap_dn_compare_node_copy</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_dn_compare_node_t</name> *</type><name>n</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_dn_compare_node_t</name> *</type><name>node</name> <init>= <expr><call><name>util_ald_alloc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr>sizeof *<name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>node</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name><name>node</name>-&gt;<name>reqdn</name></name> = <call><name>util_ald_strdup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>reqdn</name></name></expr></argument>)</argument_list></call>) ||
!(<name><name>node</name>-&gt;<name>dn</name></name> = <call><name>util_ald_strdup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ldap_dn_compare_node_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>node</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>util_ldap_dn_compare_node_free</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_dn_compare_node_t</name> *</type><name>node</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>reqdn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>util_ldap_dn_compare_node_display</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_dn_compare_node_t</name> *</type><name>node</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>"&lt;tr valign='top'&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;td nowrap&gt;%s&lt;/td&gt;"
"&lt;/tr&gt;"</expr></argument>,
<argument><expr><name><name>node</name>-&gt;<name>reqdn</name></name></expr></argument>,
<argument><expr><name><name>node</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>util_ldap_cache_module_kill</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>util_ald_destroy_cache</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>util_ldap_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>cache_rmm</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_rmm_destroy</name> <argument_list>(<argument><expr><name><name>st</name>-&gt;<name>cache_rmm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>cache_rmm</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>cache_shm</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>result</name> <init>= <expr><call><name>apr_shm_destroy</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>cache_shm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>cache_shm</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>util_ldap_cache_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>util_ldap_state_t</name> *</type><name>st</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>cache_bytes</name></name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>cache_file</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_shm_remove</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>cache_file</name></name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>size</name> = <call><name>APR_ALIGN_DEFAULT</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>cache_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>apr_shm_create</name><argument_list>(<argument><expr>&amp;<name><name>st</name>-&gt;<name>cache_shm</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>cache_file</name></name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>size</name> = <call><name>apr_shm_size_get</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>cache_shm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>apr_rmm_init</name><argument_list>(<argument><expr>&amp;<name><name>st</name>-&gt;<name>cache_rmm</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>apr_shm_baseaddr_get</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>cache_shm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument> , <argument><expr><name>util_ldap_cache_module_kill</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>util_ldap_cache</name></name> =
<call><name>util_ald_create_cache</name><argument_list>(<argument><expr><name>st</name></expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>search_cache_size</name></name></expr></argument>,
<argument><expr><name>util_ldap_url_node_hash</name></expr></argument>,
<argument><expr><name>util_ldap_url_node_compare</name></expr></argument>,
<argument><expr><name>util_ldap_url_node_copy</name></expr></argument>,
<argument><expr><name>util_ldap_url_node_free</name></expr></argument>,
<argument><expr><name>util_ldap_url_node_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
