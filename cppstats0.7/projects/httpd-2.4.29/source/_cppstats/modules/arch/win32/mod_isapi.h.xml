<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/arch/win32/mod_isapi.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MOD_ISAPI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_ISAPI_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>HSE_VERSION_INFO</name> <block>{
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>dwExtensionVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>lpszExtensionDesc</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>HSE_VERSION_INFO</name>;</typedef>
<function_decl><type><name>int</name> <name>APR_THREAD_FUNC</name></type> <name>GetExtensionVersion</name><parameter_list>(<param><decl><type><name>HSE_VERSION_INFO</name> *</type><name>ver_info</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APR_THREAD_FUNC</name> *<name>PFN_GETEXTENSIONVERSION</name>)<parameter_list>(<param><decl><type><name>HSE_VERSION_INFO</name> *</type><name>ver_info</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type>struct <name>isapi_cid</name></type> <name>isapi_cid</name>;</typedef>
<typedef>typedef <type>struct <name>isapi_cid</name> *</type><name>HCONN</name>;</typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APR_THREAD_FUNC</name>
*<name>PFN_GETSERVERVARIABLE</name>)<parameter_list>(<param><decl><type><name>HCONN</name></type> <name>cid</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>variable_name</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>buf_data</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APR_THREAD_FUNC</name>
*<name>PFN_WRITECLIENT</name>)<parameter_list>(<param><decl><type><name>HCONN</name></type> <name>cid</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>buf_data</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APR_THREAD_FUNC</name>
*<name>PFN_READCLIENT</name>)<parameter_list>(<param><decl><type><name>HCONN</name></type> <name>cid</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>buf_data</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APR_THREAD_FUNC</name>
*<name>PFN_SERVERSUPPORTFUNCTION</name>)<parameter_list>(<param><decl><type><name>HCONN</name></type> <name>cid</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name></type> <name>HSE_code</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>buf_data</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name> *</type><name>flags</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>EXTENSION_CONTROL_BLOCK</name> <block>{
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>cbSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>dwVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCONN</name></type> <name>ConnID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>dwHttpStatusCode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>lpszLogData</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lpszMethod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lpszQueryString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lpszPathInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lpszPathTranslated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>cbTotalBytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>cbAvailable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>lpbData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lpszContentType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_GETSERVERVARIABLE</name></type> <name>GetServerVariable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_WRITECLIENT</name></type> <name>WriteClient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_READCLIENT</name></type> <name>ReadClient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_SERVERSUPPORTFUNCTION</name></type> <name>ServerSupportFunction</name></decl>;</decl_stmt>
}</block></struct></type> <name>EXTENSION_CONTROL_BLOCK</name>;</typedef>
<typedef>typedef <type><struct>struct <name>HSE_SEND_HEADER_EX_INFO</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>pszStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>pszHeader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>cchStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>cchHeader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fKeepConn</name></decl>;</decl_stmt>
}</block></struct></type> <name>HSE_SEND_HEADER_EX_INFO</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_IO_SEND_HEADERS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_IO_SYNC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_IO_ASYNC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_IO_DISCONNECT_AFTER_SEND</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_IO_NODELAY</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APR_THREAD_FUNC</name> *<name>PFN_HSE_IO_COMPLETION</name>)
<parameter_list>(<param><decl><type><name>EXTENSION_CONTROL_BLOCK</name> *</type><name>ecb</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>ctxt</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name></type> <name>cbIO</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name></type> <name>dwError</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>HSE_TF_INFO</name> <block>{
<decl_stmt><decl><type><name>PFN_HSE_IO_COMPLETION</name></type> <name>pfnHseIO</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>pContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_os_file_t</name></type> <name>hFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pszStatusCode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>BytesToWrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>Offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>pHead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>HeadLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>pTail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>TailLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>dwFlags</name></decl>;</decl_stmt>
}</block></struct></type> <name>HSE_TF_INFO</name>;</typedef>
<typedef>typedef <type><struct>struct <name>HSE_URL_MAPEX_INFO</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>lpszPath</name><index>[<expr>260</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>dwFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>cchMatchingPath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>cchMatchingURL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>dwReserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>dwReserved2</name></decl>;</decl_stmt>
}</block></struct></type> <name>HSE_URL_MAPEX_INFO</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_SEND_URL_REDIRECT_RESP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_SEND_URL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_SEND_RESPONSE_HEADER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_DONE_WITH_SESSION</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_MAP_URL_TO_PATH</name></cpp:macro> <cpp:value>1001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_GET_SSPI_INFO</name></cpp:macro> <cpp:value>1002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_APPEND_LOG_PARAMETER</name></cpp:macro> <cpp:value>1003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_IO_COMPLETION</name></cpp:macro> <cpp:value>1005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_TRANSMIT_FILE</name></cpp:macro> <cpp:value>1006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_REFRESH_ISAPI_ACL</name></cpp:macro> <cpp:value>1007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_IS_KEEP_CONN</name></cpp:macro> <cpp:value>1008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_ASYNC_READ_CLIENT</name></cpp:macro> <cpp:value>1010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_GET_IMPERSONATION_TOKEN</name></cpp:macro> <cpp:value>1011</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_MAP_URL_TO_PATH_EX</name></cpp:macro> <cpp:value>1012</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_ABORTIVE_CLOSE</name></cpp:macro> <cpp:value>1014</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_GET_CERT_INFO_EX</name></cpp:macro> <cpp:value>1015</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_SEND_RESPONSE_HEADER_EX</name></cpp:macro> <cpp:value>1016</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_CLOSE_CONNECTION</name></cpp:macro> <cpp:value>1017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_IS_CONNECTED</name></cpp:macro> <cpp:value>1018</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_EXTENSION_TRIGGER</name></cpp:macro> <cpp:value>1020</cpp:value></cpp:define>
<function_decl><type><name>apr_uint32_t</name> <name>APR_THREAD_FUNC</name></type> <name>HttpExtensionProc</name><parameter_list>(<param><decl><type><name>EXTENSION_CONTROL_BLOCK</name> *</type><name>ecb</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>apr_uint32_t</name></type> (<name>APR_THREAD_FUNC</name>
*<name>PFN_HTTPEXTENSIONPROC</name>)<parameter_list>(<param><decl><type><name>EXTENSION_CONTROL_BLOCK</name> *</type><name>ecb</name></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_STATUS_SUCCESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_STATUS_SUCCESS_AND_KEEP_CONN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_STATUS_PENDING</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_STATUS_ERROR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ERROR_INSUFFICIENT_BUFFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INSUFFICIENT_BUFFER</name></cpp:macro> <cpp:value>ENOBUFS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ERROR_INVALID_INDEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INVALID_INDEX</name></cpp:macro> <cpp:value>EINVAL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INVALID_PARAMETER</name></cpp:macro> <cpp:value>EINVAL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ERROR_READ_FAULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_READ_FAULT</name></cpp:macro> <cpp:value>EIO</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ERROR_WRITE_FAULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_WRITE_FAULT</name></cpp:macro> <cpp:value>EIO</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ERROR_SUCCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_TERM_MUST_UNLOAD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_TERM_ADVISORY_UNLOAD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<function_decl><type><name>int</name> <name>APR_THREAD_FUNC</name></type> <name>TerminateExtension</name><parameter_list>(<param><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APR_THREAD_FUNC</name> *<name>PFN_TERMINATEEXTENSION</name>)<parameter_list>(<param><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_TERM_MUST_UNLOAD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_TERM_ADVISORY_UNLOAD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
