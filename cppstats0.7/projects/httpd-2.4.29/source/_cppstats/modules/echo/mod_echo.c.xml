<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/echo/mod_echo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mmn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>echo_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>bEnabled</name></decl>;</decl_stmt>
}</block></struct></type> <name>EchoConfig</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_echo_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>EchoConfig</name> *</type><name>pConfig</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>pConfig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pConfig</name>-&gt;<name>bEnabled</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>pConfig</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>echo_on</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>EchoConfig</name> *</type><name>pConfig</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>echo_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pConfig</name>-&gt;<name>bEnabled</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>brigade_peek</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bbIn</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buff</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>bufflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>readbytes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>bufflen</name>--</expr>)</condition><then>
<expr_stmt><expr>*<name>buff</name> = '\0'</expr>;</expr_stmt></then>
<else>else
<return>return <expr><name>APR_EGENERAL</name></expr>;</return></else></if>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bbIn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return></then></if>
<expr_stmt><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bbIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bbIn</name></expr></argument>)</argument_list></call>) &amp;&amp; (<name>readbytes</name> &lt; <name>bufflen</name>)</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_NONBLOCK_READ</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>pos</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>APR_ASCII_LF</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>len</name> = <name>pos</name> - <name>str</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>len</name> &gt; <name>bufflen</name> - <name>readbytes</name></expr>)</condition><then>
<expr_stmt><expr><name>len</name> = <name>bufflen</name> - <name>readbytes</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buff</name> + <name>readbytes</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>readbytes</name> += <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buff</name><index>[<expr><name>readbytes</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>update_echo_child_status</name><parameter_list>(<param><decl><type><name>ap_sb_handle_t</name> *</type><name>sbh</name></decl></param>,
<param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>last_echoed</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>worker_score</name> *</type><name>ws</name> <init>= <expr><call><name>ap_get_scoreboard_worker</name><argument_list>(<argument><expr><name>sbh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_status</name> <init>= <expr><name><name>ws</name>-&gt;<name>status</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ap_extended_status</name></expr>)</condition><then>
<return>return <expr><name>old_status</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>last_used</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>client</name></name></expr></argument>,
<argument><expr><call><name>ap_get_remote_host</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name>-&gt;<name>lookup_defaults</name></name></expr></argument>,
<argument><expr><name>REMOTE_NOLOOKUP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>client</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>vhost</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name>-&gt;<name>server_hostname</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>vhost</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>request</name></name></expr></argument>, <argument><expr>"ECHO "</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>request</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>last_echoed</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>brigade_peek</name><argument_list>(<argument><expr><name>last_echoed</name></expr></argument>, <argument><expr><name><name>ws</name>-&gt;<name>request</name></name> + <sizeof>sizeof<argument_list>(<argument><expr>"ECHO "</expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>request</name></name></expr></argument>)</argument_list></sizeof> - <sizeof>sizeof<argument_list>(<argument><expr>"ECHO "</expr></argument>)</argument_list></sizeof> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>old_status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>process_echo_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>csd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EchoConfig</name> *</type><name>pConfig</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>base_server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>echo_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>pConfig</name>-&gt;<name>bEnabled</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_time_process_request</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>START_PREQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_echo_child_status</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_READ</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for ( <init>;</init> <condition>;</condition> <incr/>) <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>((<name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>AP_MODE_GETLINE</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; ! <call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01611</expr></argument>)</argument_list></call>
"ProtocolEcho: Failure reading from %s"</expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01612</expr></argument>)</argument_list></call>
"ProtocolEcho: Error - read empty brigade from %s!"</expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<name>csd</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>csd</name> = <call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>csd</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name>-&gt;<name>keep_alive_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>update_echo_child_status</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01613</expr></argument>)</argument_list></call>
"ProtocolEcho: Failure writing to %s"</expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_echo_child_status</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_KEEPALIVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_time_process_request</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>STOP_PREQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_echo_child_status</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_CLOSING</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>echo_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProtocolEcho"</expr></argument>, <argument><expr><name>echo_on</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Run an echo server on this host"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_process_connection</name><argument_list>(<argument><expr><name>process_echo_connection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>echo</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>create_echo_server_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>echo_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
