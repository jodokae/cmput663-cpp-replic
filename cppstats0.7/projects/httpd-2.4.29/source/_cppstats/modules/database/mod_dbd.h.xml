<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/database/mod_dbd.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DBD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DBD_DECLARE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DBD_DECLARE_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_DECLARE_DATA</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBD_DECLARE_DATA</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_optional.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hooks.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>persist</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>nmin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nkeep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exptime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>set</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>queries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>init_queries</name></decl>;</decl_stmt>
}</block></struct></type> <name>dbd_cfg_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_dbd_t</name> *</type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_dbd_driver_t</name> *</type><name>driver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>prepared</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_dbd_t</name>;</typedef>
<macro><name>DBD_DECLARE_NONSTD</name><argument_list>(<argument>ap_dbd_t*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_dbd_open</name><argument_list>(<argument><expr><name>apr_pool_t</name>*</expr></argument>, <argument><expr><name>server_rec</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DBD_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_dbd_close</name><argument_list>(<argument><expr><name>server_rec</name>*</expr></argument>, <argument><expr><name>ap_dbd_t</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DBD_DECLARE_NONSTD</name><argument_list>(<argument>ap_dbd_t*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_dbd_acquire</name><argument_list>(<argument><expr><name>request_rec</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DBD_DECLARE_NONSTD</name><argument_list>(<argument>ap_dbd_t*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_dbd_cacquire</name><argument_list>(<argument><expr><name>conn_rec</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DBD_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_dbd_prepare</name><argument_list>(<argument><expr><name>server_rec</name>*</expr></argument>, <argument><expr>const <name>char</name>*</expr></argument>, <argument><expr>const <name>char</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_t</name>*</expr></argument>, <argument><expr><name>ap_dbd_open</name></expr></argument>, <argument><expr>(<name>apr_pool_t</name>*, <name>server_rec</name>*)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>ap_dbd_close</name></expr></argument>, <argument><expr>(<name>server_rec</name>*, <name>ap_dbd_t</name>*)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_t</name>*</expr></argument>, <argument><expr><name>ap_dbd_acquire</name></expr></argument>, <argument><expr>(<name>request_rec</name>*)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_t</name>*</expr></argument>, <argument><expr><name>ap_dbd_cacquire</name></expr></argument>, <argument><expr>(<name>conn_rec</name>*)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>ap_dbd_prepare</name></expr></argument>, <argument><expr>(<name>server_rec</name>*, const <name>char</name>*, const <name>char</name>*)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>dbd</argument>, <argument>DBD</argument>, <argument>apr_status_t</argument>, <argument>post_connect</argument>,
<argument>(apr_pool_t *, dbd_cfg_t *, ap_dbd_t *)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
