<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/http/chunk_filter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ebcdic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>bad_gateway_seen</name></decl>;</decl_stmt>
<function><type><name>apr_status_t</name></type> <name>ap_http_chunk_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCII_CRLF</name></cpp:macro> <cpp:value>"\015\012"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCII_ZERO</name></cpp:macro> <cpp:value>"\060"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>more</name></decl>, *<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<for>for (<init><expr><name>more</name> = <name>tmp</name> = <name>NULL</name></expr>;</init> <condition><expr><name>b</name></expr>;</condition> <incr><expr><name>b</name> = <name>more</name></expr>, <expr><name>more</name> = <name>NULL</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>eos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>flush</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>chunk_hdr</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>eos</name> = <name>e</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>AP_BUCKET_IS_ERROR</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call>
&amp;&amp; ((<call>(<name>ap_bucket_error</name> *)<argument_list>(<argument><expr><name><name>e</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call>)-&gt;<name>status</name>
== <name>HTTP_BAD_GATEWAY</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = &amp;<name>bad_gateway_seen</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flush</name> = <name>e</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>e</name> != <call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>more</name> = <call><name>apr_brigade_split_ex</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name><name>e</name>-&gt;<name>length</name></name> == (<name>apr_size_t</name>)-1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>bytes</name> += <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>more</name> = <call><name>apr_brigade_split_ex</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <block>{
<continue>continue;</continue>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>bytes</name> += <name><name>e</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>bytes</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>hdr_len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hdr_len</name> = <macro><name>apr_snprintf</name><argument_list>(<argument>chunk_hdr</argument>, <argument>sizeof(chunk_hdr)</argument>,
<argument>"%" APR_UINT64_T_HEX_FMT CRLF</argument>, <argument>(apr_uint64_t)bytes</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>chunk_hdr</name></expr></argument>, <argument><expr><name>hdr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>chunk_hdr</name></expr></argument>, <argument><expr><name>hdr_len</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_HEAD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_immortal_create</name><argument_list>(<argument><expr><name>ASCII_CRLF</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>eos</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_INSERT_BEFORE</name><argument_list>(<argument><expr><name>eos</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>flush</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_INSERT_BEFORE</name><argument_list>(<argument><expr><name>flush</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>eos</name> &amp;&amp; !<name><name>f</name>-&gt;<name>ctx</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <macro><name>apr_bucket_immortal_create</name><argument_list>(<argument>ASCII_ZERO ASCII_CRLF
ASCII_CRLF</argument>, <argument>5</argument>, <argument>c-&gt;bucket_alloc</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_INSERT_BEFORE</name><argument_list>(<argument><expr><name>eos</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || <name>eos</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>tmp</name> = <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
</unit>
