<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/http/http_core.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ebcdic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>ap_filter_rec_t</name> *</type><name>ap_http_input_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>ap_filter_rec_t</name> *</type><name>ap_http_header_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>ap_filter_rec_t</name> *</type><name>ap_chunk_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>ap_filter_rec_t</name> *</type><name>ap_http_outerror_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>ap_filter_rec_t</name> *</type><name>ap_byterange_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>const</specifier> <name>char</name> *</type><name>ap_multipart_boundary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>async_mpm</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_keep_alive_timeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_timeout_parameter_parse</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>timeout</name></expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr>"KeepAliveTimeout has wrong format"</expr>;</return></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>keep_alive_timeout</name></name> = <name>timeout</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>is_virtual</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>keep_alive_timeout_set</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_keep_alive</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>keep_alive</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_keep_alive_max</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>keep_alive_max</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>http_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"KeepAliveTimeout"</expr></argument>, <argument><expr><name>set_keep_alive_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Keep-Alive timeout duration (sec)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"MaxKeepAliveRequests"</expr></argument>, <argument><expr><name>set_keep_alive_max</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Maximum number of Keep-Alive requests per connection, "
"or 0 for infinite"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"KeepAlive"</expr></argument>, <argument><expr><name>set_keep_alive</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Whether persistent connections should be On or Off"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>http_scheme</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_scheme</name></name> &amp;&amp;
(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_scheme</name></name></expr></argument>, <argument><expr>"https"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
<return>return <expr>"https"</expr>;</return></then></if>
<return>return <expr>"http"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_port_t</name></type> <name>http_port</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_scheme</name></name> &amp;&amp;
(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_scheme</name></name></expr></argument>, <argument><expr>"https"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
<return>return <expr><name>DEFAULT_HTTPS_PORT</name></expr>;</return></then></if>
<return>return <expr><name>DEFAULT_HTTP_PORT</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ap_process_http_async_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_state_t</name> *</type><name>cs</name> <init>= <expr><name><name>c</name>-&gt;<name>cs</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>cs</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name><name>cs</name>-&gt;<name>state</name></name> == <name>CONN_STATE_READ_REQUEST_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>cs</name>-&gt;<name>state</name></name> == <name>CONN_STATE_READ_REQUEST_LINE</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_update_child_status_from_conn</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_READ</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>r</name> = <call><name>ap_read_request</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_UNKNOWN</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cs</name>-&gt;<name>state</name></name> = <name>CONN_STATE_HANDLER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_update_child_status</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_WRITE</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_process_async_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>cs</name>-&gt;<name>state</name></name> != <name>CONN_STATE_WRITE_COMPLETION</name> &amp;&amp;
<name><name>cs</name>-&gt;<name>state</name></name> != <name>CONN_STATE_SUSPENDED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cs</name>-&gt;<name>state</name></name> = <name>CONN_STATE_LINGER</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cs</name>-&gt;<name>state</name></name> = <name>CONN_STATE_LINGER</name></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ap_process_http_sync_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_state_t</name> *</type><name>cs</name> <init>= <expr><name><name>c</name>-&gt;<name>cs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>csd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mpm_state</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_update_child_status_from_conn</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_READ</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>r</name> = <call><name>ap_read_request</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>keep_alive_timeout</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>keep_alive_timeout</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>server</name>-&gt;<name>keep_alive_timeout_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>keep_alive_timeout</name> = <name><name>c</name>-&gt;<name>base_server</name>-&gt;<name>keep_alive_timeout</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_UNKNOWN</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>cs</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cs</name>-&gt;<name>state</name></name> = <name>CONN_STATE_HANDLER</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_update_child_status</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_WRITE</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_process_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>keepalive</name></name> != <name>AP_CONN_KEEPALIVE</name> || <name><name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>ap_update_child_status</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_KEEPALIVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MPM_STATE</name></expr></argument>, <argument><expr>&amp;<name>mpm_state</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>mpm_state</name> == <name>AP_MPMQ_STOPPING</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<name>csd</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>csd</name> = <call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name>csd</name></expr></argument>, <argument><expr><name>APR_INCOMPLETE_READ</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>csd</name></expr></argument>, <argument><expr><name>keep_alive_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ap_process_http_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>async_mpm</name> &amp;&amp; !<name><name>c</name>-&gt;<name>clogging_input_filters</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_process_http_async_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>ap_process_http_sync_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>http_create_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name/></name>main &amp;&amp; !<name><name>r</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(<argument><expr><name>ap_byterange_filter_handle</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(<argument><expr><name>ap_content_length_filter_handle</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(<argument><expr><name>ap_http_header_filter_handle</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(<argument><expr><name>ap_http_outerror_filter_handle</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>http_send_options</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_OPTIONS</name>) &amp;&amp; <name><name>r</name>-&gt;<name>uri</name></name> &amp;&amp; (<name><name>r</name>-&gt;<name>uri</name><index>[<expr>0</expr>]</index></name> == '*') &amp;&amp;
(<name><name>r</name>-&gt;<name>uri</name><index>[<expr>1</expr>]</index></name> == '\0')</expr>)</condition><then> <block>{
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>http_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>val</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_IS_ASYNC</name></expr></argument>, <argument><expr>&amp;<name>async_mpm</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>async_mpm</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_random_insecure_bytes</name><argument_list>(<argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_multipart_boundary</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%0" <name>APR_UINT64_T_HEX_FMT</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>http_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_process_connection</name><argument_list>(<argument><expr><name>ap_process_http_connection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_map_to_storage</name><argument_list>(<argument><expr><name>ap_send_http_trace</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_map_to_storage</name><argument_list>(<argument><expr><name>http_send_options</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_http_scheme</name><argument_list>(<argument><expr><name>http_scheme</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_default_port</name><argument_list>(<argument><expr><name>http_port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_create_request</name><argument_list>(<argument><expr><name>http_create_request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_http_input_filter_handle</name> =
<call><name>ap_register_input_filter</name><argument_list>(<argument><expr>"HTTP_IN"</expr></argument>, <argument><expr><name>ap_http_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_http_header_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"HTTP_HEADER"</expr></argument>, <argument><expr><name>ap_http_header_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_chunk_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"CHUNK"</expr></argument>, <argument><expr><name>ap_http_chunk_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_TRANSCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_http_outerror_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"HTTP_OUTERROR"</expr></argument>, <argument><expr><name>ap_http_outerror_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_byterange_filter_handle</name> =
<call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"BYTERANGE"</expr></argument>, <argument><expr><name>ap_byterange_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_method_registry_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>http_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
