<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/http/mod_mime.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>attrib_info</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>attrib_info</name>;</typedef>
<typedef>typedef <type><struct>struct <name>extension_info</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>forced_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>encoding_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>language_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>charset_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>input_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>output_filters</name></decl>;</decl_stmt>
}</block></struct></type> <name>extension_info</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIMATCH_UNSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIMATCH_ANY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIMATCH_NEGOTIATED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIMATCH_HANDLERS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIMATCH_FILTERS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extension_mappings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>remove_mappings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>default_language</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>multimatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_path_info</name></decl>;</decl_stmt>
}</block></struct></type> <name>mime_dir_config</name>;</typedef>
<typedef>typedef <type><struct>struct <name>param_s</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>param_s</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>param</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>type_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>subtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>subtype_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>param</name> *</type><name>param</name></decl>;</decl_stmt>
}</block></struct></type> <name>content_type</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tspecial</name><index>[]</index></name> <init>= <expr><block>{
<expr>'('</expr>, <expr>')'</expr>, <expr>'&lt;'</expr>, <expr>'&gt;'</expr>, <expr>'@'</expr>, <expr>','</expr>, <expr>';'</expr>, <expr>':'</expr>,
<expr>'\\'</expr>, <expr>'"'</expr>, <expr>'/'</expr>, <expr>'['</expr>, <expr>']'</expr>, <expr>'?'</expr>, <expr>'='</expr>,
<expr>'\0'</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>mime_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_mime_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mime_dir_config</name> *</type><name>new</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mime_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>extension_mappings</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>remove_mappings</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>default_language</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>multimatch</name></name> = <name>MULTIMATCH_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>use_path_info</name></name> = 2</expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>overlay_extension_mappings</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl></param>,
<param><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>overlay_val</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>base_val</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>extension_info</name> *</type><name>overlay_info</name> <init>= <expr>(const <name>extension_info</name> *)<name>overlay_val</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>extension_info</name> *</type><name>base_info</name> <init>= <expr>(const <name>extension_info</name> *)<name>base_val</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>extension_info</name> *</type><name>new_info</name> <init>= <expr><call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>base_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extension_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>overlay_info</name>-&gt;<name>forced_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>forced_type</name></name> = <name><name>overlay_info</name>-&gt;<name>forced_type</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>overlay_info</name>-&gt;<name>encoding_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>encoding_type</name></name> = <name><name>overlay_info</name>-&gt;<name>encoding_type</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>overlay_info</name>-&gt;<name>language_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>language_type</name></name> = <name><name>overlay_info</name>-&gt;<name>language_type</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>overlay_info</name>-&gt;<name>handler</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>handler</name></name> = <name><name>overlay_info</name>-&gt;<name>handler</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>overlay_info</name>-&gt;<name>charset_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>charset_type</name></name> = <name><name>overlay_info</name>-&gt;<name>charset_type</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>overlay_info</name>-&gt;<name>input_filters</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>input_filters</name></name> = <name><name>overlay_info</name>-&gt;<name>input_filters</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>overlay_info</name>-&gt;<name>output_filters</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>output_filters</name></name> = <name><name>overlay_info</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>new_info</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_items</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_array_header_t</name> *</type><name>remove</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>mappings</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>attrib_info</name> *</type><name>suffix</name> <init>= <expr>(<name>attrib_info</name> *) <name><name>remove</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>remove</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>extension_info</name> *</type><name>exinfo</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mappings</name></expr></argument>,
<argument><expr><name><name>suffix</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>exinfo</name> &amp;&amp; *(const <name>char</name>**)((<name>char</name> *)<name>exinfo</name> + <name><name>suffix</name><index>[<expr><name>i</name></expr>]</index></name>.<name>offset</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>extension_info</name> *</type><name>copyinfo</name> <init>= <expr><name>exinfo</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>exinfo</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>copyinfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>exinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>mappings</name></expr></argument>, <argument><expr><name><name>suffix</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>exinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name>**)((<name>char</name> *)<name>exinfo</name> + <name><name>suffix</name><index>[<expr><name>i</name></expr>]</index></name>.<name>offset</name>) = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_mime_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mime_dir_config</name> *</type><name>base</name> <init>= <expr>(<name>mime_dir_config</name> *)<name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mime_dir_config</name> *</type><name>add</name> <init>= <expr>(<name>mime_dir_config</name> *)<name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mime_dir_config</name> *</type><name>new</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mime_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>base</name>-&gt;<name>extension_mappings</name></name> &amp;&amp; <name><name>add</name>-&gt;<name>extension_mappings</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>extension_mappings</name></name> = <call><name>apr_hash_merge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>extension_mappings</name></name></expr></argument>,
<argument><expr><name><name>base</name>-&gt;<name>extension_mappings</name></name></expr></argument>,
<argument><expr><name>overlay_extension_mappings</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>base</name>-&gt;<name>extension_mappings</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>extension_mappings</name></name> = <name><name>add</name>-&gt;<name>extension_mappings</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>extension_mappings</name></name> = <name><name>base</name>-&gt;<name>extension_mappings</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>extension_mappings</name></name> &amp;&amp; <name><name>add</name>-&gt;<name>remove_mappings</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>extension_mappings</name></name> =
<call><name>apr_hash_copy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>extension_mappings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>extension_mappings</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>remove_mappings</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>remove_items</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>remove_mappings</name></name></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>extension_mappings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>remove_mappings</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>default_language</name></name> = <name><name>add</name>-&gt;<name>default_language</name></name> ?
<name><name>add</name>-&gt;<name>default_language</name></name> : <name><name>base</name>-&gt;<name>default_language</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>multimatch</name></name> = (<name><name>add</name>-&gt;<name>multimatch</name></name> != <name>MULTIMATCH_UNSET</name>) ?
<name><name>add</name>-&gt;<name>multimatch</name></name> : <name><name>base</name>-&gt;<name>multimatch</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>add</name>-&gt;<name>use_path_info</name></name> &amp; 2) == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>use_path_info</name></name> = <name><name>add</name>-&gt;<name>use_path_info</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>use_path_info</name></name> = <name><name>base</name>-&gt;<name>use_path_info</name></name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_extension_info</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>m_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>ext</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mime_dir_config</name> *</type><name>m</name><init>=<expr><name>m_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>extension_info</name> *</type><name>exinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>(<name>int</name>) (<name>long</name>) <name><name>cmd</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>key</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>value</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>key</name> == '.'</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>key</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>m</name>-&gt;<name>extension_mappings</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>m</name>-&gt;<name>extension_mappings</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exinfo</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>exinfo</name> = (<name>extension_info</name>*)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>extension_mappings</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<name>exinfo</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>exinfo</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extension_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>extension_mappings</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>exinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*(const <name>char</name>**)((<name>char</name> *)<name>exinfo</name> + <name>offset</name>) = <name>value</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>remove_extension_type</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>m_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ext</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_extension_info</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>m_</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>remove_extension_info</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>m_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ext</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mime_dir_config</name> *</type><name>m</name> <init>= <expr>(<name>mime_dir_config</name> *) <name>m_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attrib_info</name> *</type><name>suffix</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>ext</name> == '.'</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>ext</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>m</name>-&gt;<name>remove_mappings</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>m</name>-&gt;<name>remove_mappings</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>suffix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>suffix</name> = (<name>attrib_info</name> *)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>remove_mappings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>suffix</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name><name>suffix</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>suffix</name>-&gt;<name>offset</name></name> = (<name>int</name>) (<name>long</name>) <name><name>cmd</name>-&gt;<name>info</name></name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_types_config</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>mime_module</name></expr></argument>,
<argument><expr>(<name>void</name> *)<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>multiviews_match</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>m_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>include</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mime_dir_config</name> *</type><name>m</name> <init>= <expr>(<name>mime_dir_config</name> *) <name>m_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_LOCATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>errmsg</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>include</name></expr></argument>, <argument><expr>"Any"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>multimatch</name></name> &amp;&amp; (<name><name>m</name>-&gt;<name>multimatch</name></name> &amp; ~<name>MULTIMATCH_ANY</name>)</expr>)</condition><then> <block>{
<return>return <expr>"Any is incompatible with NegotiatedOnly, "
"Filters and Handlers"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>m</name>-&gt;<name>multimatch</name></name> |= <name>MULTIMATCH_ANY</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>include</name></expr></argument>, <argument><expr>"NegotiatedOnly"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>multimatch</name></name> &amp;&amp; (<name><name>m</name>-&gt;<name>multimatch</name></name> &amp; ~<name>MULTIMATCH_NEGOTIATED</name>)</expr>)</condition><then> <block>{
<return>return <expr>"NegotiatedOnly is incompatible with Any, "
"Filters and Handlers"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>m</name>-&gt;<name>multimatch</name></name> |= <name>MULTIMATCH_NEGOTIATED</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>include</name></expr></argument>, <argument><expr>"Filters"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>multimatch</name></name> &amp;&amp; (<name><name>m</name>-&gt;<name>multimatch</name></name> &amp; (<name>MULTIMATCH_NEGOTIATED</name>
| <name>MULTIMATCH_ANY</name>))</expr>)</condition><then> <block>{
<return>return <expr>"Filters is incompatible with Any and NegotiatedOnly"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>m</name>-&gt;<name>multimatch</name></name> |= <name>MULTIMATCH_FILTERS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>include</name></expr></argument>, <argument><expr>"Handlers"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>multimatch</name></name> &amp;&amp; (<name><name>m</name>-&gt;<name>multimatch</name></name> &amp; (<name>MULTIMATCH_NEGOTIATED</name>
| <name>MULTIMATCH_ANY</name>))</expr>)</condition><then> <block>{
<return>return <expr>"Handlers is incompatible with Any and NegotiatedOnly"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>m</name>-&gt;<name>multimatch</name></name> |= <name>MULTIMATCH_HANDLERS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unrecognized option '%s'"</expr></argument>, <argument><expr><name>include</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>mime_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddCharset"</expr></argument>, <argument><expr><name>add_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>charset_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"a charset (e.g., iso-2022-jp), followed by one or more "
"file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddEncoding"</expr></argument>, <argument><expr><name>add_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>encoding_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"an encoding (e.g., gzip), followed by one or more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddHandler"</expr></argument>, <argument><expr><name>add_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"a handler name followed by one or more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddInputFilter"</expr></argument>, <argument><expr><name>add_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>input_filters</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"input filter name (or ; delimited names) followed by one or "
"more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddLanguage"</expr></argument>, <argument><expr><name>add_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>language_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"a language (e.g., fr), followed by one or more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddOutputFilter"</expr></argument>, <argument><expr><name>add_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>output_filters</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"output filter name (or ; delimited names) followed by one or "
"more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddType"</expr></argument>, <argument><expr><name>add_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>forced_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"a mime type followed by one or more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DefaultLanguage"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>mime_dir_config</name></expr></argument>, <argument><expr><name>default_language</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"language to use for documents with no other language file extension"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"MultiviewsMatch"</expr></argument>, <argument><expr><name>multiviews_match</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"NegotiatedOnly (default), Handlers and/or Filters, or Any"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"RemoveCharset"</expr></argument>, <argument><expr><name>remove_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>charset_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"one or more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"RemoveEncoding"</expr></argument>, <argument><expr><name>remove_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>encoding_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"one or more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"RemoveHandler"</expr></argument>, <argument><expr><name>remove_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"one or more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"RemoveInputFilter"</expr></argument>, <argument><expr><name>remove_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>input_filters</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"one or more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"RemoveLanguage"</expr></argument>, <argument><expr><name>remove_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>language_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"one or more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"RemoveOutputFilter"</expr></argument>, <argument><expr><name>remove_extension_info</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>output_filters</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"one or more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"RemoveType"</expr></argument>, <argument><expr><name>remove_extension_type</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>extension_info</name></expr></argument>, <argument><expr><name>forced_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"one or more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"TypesConfig"</expr></argument>, <argument><expr><name>set_types_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"the MIME types config file"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ModMimeUsePathInfo"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>mime_dir_config</name></expr></argument>, <argument><expr><name>use_path_info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Set to 'yes' to allow mod_mime to use path info for type checking"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>mime_type_extensions</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mime_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_configfile_t</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>l</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>types_confname</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>mime_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>types_confname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>types_confname</name> = <name>AP_TYPES_CONFIG_FILE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>types_confname</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>types_confname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>types_confname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EBADPATH</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01596</expr></argument>)</argument_list></call>
"Invalid mime types config path %s"</expr></argument>,
<argument><expr>(const <name>char</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>mime_module</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>status</name> = <call><name>ap_pcfg_openfile</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>types_confname</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01597</expr></argument>)</argument_list></call>
"could not open mime types config file %s."</expr></argument>,
<argument><expr><name>types_confname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>mime_type_extensions</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>!(<call><name>ap_cfg_getline</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ll</name> <init>= <expr><name>l</name></expr></init>, *<name>ct</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>l</name><index>[<expr>0</expr>]</index></name> == '#'</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>ct</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>ll</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ext</name> <init>= <expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>ll</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>mime_type_extensions</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></while>
<expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>zap_sp</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>s</name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr>(<name>s</name>)</expr>;</return>
}</block></then></if>
<for>for (<init>;</init> <condition><expr>*<name>s</name> == ' ' || *<name>s</name> == '\t' || *<name>s</name> == '\n'</expr>;</condition> <incr><expr><name>s</name>++</expr></incr>)
<empty_stmt>;</empty_stmt></for>
<return>return <expr>(<name>s</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>zap_sp_and_dup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr>(<name>start</name> &lt; <name>end</name>) &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>start</name>++</expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr>(<name>end</name> &gt; <name>start</name>) &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*(<name>end</name> - 1)</expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>end</name>--</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>len</name> = <name>end</name> - <name>start</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name> - <name>start</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_token</name><parameter_list>(<param><decl><type><name>char</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> = (<call><name>apr_isascii</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>apr_isgraph</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
&amp;&amp; (<call><name>strchr</name><argument_list>(<argument><expr><name>tspecial</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> == <name>NULL</name>)) ? 1 : -1</expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_qtext</name><parameter_list>(<param><decl><type><name>char</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> = (<call><name>apr_isascii</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>c</name> != '"') &amp;&amp; (<name>c</name> != '\\') &amp;&amp; (<name>c</name> != '\n'))
? 1 : -1</expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_quoted_pair</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>s</name> == '\\'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>c</name> = (<name>int</name>) *(<name>s</name> + 1)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> &amp;&amp; <call><name>apr_isascii</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr>(<name>res</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>content_type</name> *</type><name>analyze_ct</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>attribute</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quoted</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type> <name>ss</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type> <name>p</name> <init>= <expr><name><name>r</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>content_type</name> *</type><name>ctp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>param</name> *</type><name>pp</name></decl>, *<decl><type ref="prev"/><name>npp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ctp</name> = (<name>content_type</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>content_type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctp</name>-&gt;<name>type</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctp</name>-&gt;<name>subtype</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctp</name>-&gt;<name>param</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mp</name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> = <name>mp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!*<name>cp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01598</expr></argument>)</argument_list></call>
"mod_mime: analyze_ct: cannot get media type from '%s'"</expr></argument>,
<argument><expr>(const <name>char</name> *) <name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctp</name>-&gt;<name>type</name></name> = <name>cp</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
}</block> while <condition>(<expr>*<name>cp</name> &amp;&amp; (*<name>cp</name> != '/') &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call> &amp;&amp; (*<name>cp</name> != ';')</expr>)</condition>;</do>
<if>if <condition>(<expr>!*<name>cp</name> || (*<name>cp</name> == ';')</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01599</expr></argument>)</argument_list></call>
"Cannot get media type from '%s'"</expr></argument>,
<argument><expr>(const <name>char</name> *) <name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>cp</name> != '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01600</expr></argument>)</argument_list></call>
"mod_mime: analyze_ct: cannot get media type from '%s'"</expr></argument>,
<argument><expr>(const <name>char</name> *) <name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctp</name>-&gt;<name>type_len</name></name> = <name>cp</name> - <name><name>ctp</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!*<name>cp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01601</expr></argument>)</argument_list></call>
"Cannot get media subtype."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctp</name>-&gt;<name>subtype</name></name> = <name>cp</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
}</block> while <condition>(<expr>*<name>cp</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call> &amp;&amp; (*<name>cp</name> != ';')</expr>)</condition>;</do>
<expr_stmt><expr><name><name>ctp</name>-&gt;<name>subtype_len</name></name> = <name>cp</name> - <name><name>ctp</name>-&gt;<name>subtype</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>cp</name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr>(<name>ctp</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> = <call><name>zap_sp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cp</name> == <name>NULL</name> || *<name>cp</name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01602</expr></argument>)</argument_list></call>
"Cannot get media parameter."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>mp</name> = <name>cp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>attribute</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cp</name> != <name>NULL</name> &amp;&amp; *<name>cp</name> != '\0'</expr>)</condition> <block>{
<if>if <condition>(<expr><name>attribute</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>is_token</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr>*<name>cp</name> == ' ' || *<name>cp</name> == '\t' || *<name>cp</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr>*<name>cp</name> == '='</expr>)</condition><then> <block>{
<expr_stmt><expr><name>attribute</name> = <call><name>zap_sp_and_dup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>attribute</name> == <name>NULL</name> || *<name>attribute</name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01603</expr></argument>)</argument_list></call>
"Cannot get media parameter."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> = <call><name>zap_sp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cp</name> == <name>NULL</name> || *<name>cp</name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01604</expr></argument>)</argument_list></call>
"Cannot get media parameter."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>mp</name> = <name>cp</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01605</expr></argument>)</argument_list></call>
"Cannot get media parameter."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></else></if></else></if></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>mp</name> == <name>cp</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>cp</name> == '"'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>quoted</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>quoted</name> = 0</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>quoted</name> &gt; 0</expr>)</condition><then> <block>{
<while>while <condition>(<expr><name>quoted</name> &amp;&amp; *<name>cp</name> != '\0'</expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>is_qtext</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>is_quoted_pair</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cp</name> += 2</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>cp</name> == '"'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>cp</name> == ' ' || *<name>cp</name> == '\t' || *<name>cp</name> == '\n'</expr>)</condition> <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>cp</name> != ';' &amp;&amp; *<name>cp</name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01606</expr></argument>)</argument_list></call>
"Cannot get media parameter."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>quoted</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01607</expr></argument>)</argument_list></call>
"Cannot get media parameter."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></else></if></else></if></else></if>
}</block></while>
}</block></then> <else>else <block>{
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>is_token</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>cp</name> == '\0' || *<name>cp</name> == ';'</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01608</expr></argument>)</argument_list></call>
"Cannot get media parameter."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></else></if></else></if>
}</block></while>
}</block></else></if>
<expr_stmt><expr><name>value</name> = <call><name>zap_sp_and_dup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> == <name>NULL</name> || *<name>value</name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01609</expr></argument>)</argument_list></call>
"Cannot get media parameter."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pp</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name>-&gt;<name>attr</name></name> = <name>attribute</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name>-&gt;<name>val</name></name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctp</name>-&gt;<name>param</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctp</name>-&gt;<name>param</name></name> = <name>pp</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>npp</name> = <name><name>ctp</name>-&gt;<name>param</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>npp</name>-&gt;<name>next</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>npp</name> = <name><name>npp</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>npp</name>-&gt;<name>next</name></name> = <name>pp</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>quoted</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>attribute</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>cp</name> == '\0'</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>mp</name> = <name>cp</name></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<return>return <expr>(<name>ctp</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>find_ct</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mime_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>exception_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fn</name></decl>, *<decl><type ref="prev"/><name>fntmp</name></decl>, *<decl><type ref="prev"/><name>type</name></decl>, *<decl><type ref="prev"/><name>charset</name> <init>= <expr><name>NULL</name></expr></init>, *<name>resource_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_metadata</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DIR_MAGIC_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = (<name>mime_dir_config</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>mime_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exception_list</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>use_path_info</name></name> &amp; 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>resource_name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>resource_name</name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>(<name>fn</name> = <call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>resource_name</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fn</name> = <name>resource_name</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>++<name>fn</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>fntmp</name> = <name>fn</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>fntmp</name> == '.'</expr>)</condition>
<expr_stmt><expr><name>fntmp</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr><name>fntmp</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>fntmp</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fntmp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ext</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>fntmp</name> - <name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fn</name> = <name>fntmp</name> + 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ext</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fn</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*((const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>exception_list</name></expr></argument>)</argument_list></call>) = <name>ext</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>fn</name> &amp;&amp; (<name>ext</name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>fn</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>extension_info</name> *</type><name>exinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>extcase</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>ext</name> == '\0'</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>found</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>extcase</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>extension_mappings</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>exinfo</name> = (<name>extension_info</name>*)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>extension_mappings</name></name></expr></argument>,
<argument><expr><name>ext</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>exinfo</name> == <name>NULL</name> || !<name><name>exinfo</name>-&gt;<name>forced_type</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>type</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mime_type_extensions</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>(<name>char</name>*) <name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>exinfo</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>exinfo</name>-&gt;<name>forced_type</name></name> &amp;&amp; *<name><name>exinfo</name>-&gt;<name>forced_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>exinfo</name>-&gt;<name>forced_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>exinfo</name>-&gt;<name>charset_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>charset</name> = <name><name>exinfo</name>-&gt;<name>charset_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>exinfo</name>-&gt;<name>language_type</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>content_languages</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_languages</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*((const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>content_languages</name></name></expr></argument>)</argument_list></call>)
= <name><name>exinfo</name>-&gt;<name>language_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>exinfo</name>-&gt;<name>encoding_type</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>content_encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <name><name>exinfo</name>-&gt;<name>encoding_type</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr></argument>,
<argument><expr>", "</expr></argument>,
<argument><expr><name><name>exinfo</name>-&gt;<name>encoding_type</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>exinfo</name>-&gt;<name>handler</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>proxyreq</name></name> == <name>PROXYREQ_NONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = <name><name>exinfo</name>-&gt;<name>handler</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>multimatch</name></name> &amp; <name>MULTIMATCH_HANDLERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>exinfo</name>-&gt;<name>input_filters</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filter</name></decl>, *<decl><type ref="prev"/><name>filters</name> <init>= <expr><name><name>exinfo</name>-&gt;<name>input_filters</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>filters</name>
&amp;&amp; (<name>filter</name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>filters</name></expr></argument>, <argument><expr>';'</expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_add_input_filter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>multimatch</name></name> &amp; <name>MULTIMATCH_FILTERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>exinfo</name>-&gt;<name>output_filters</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filter</name></decl>, *<decl><type ref="prev"/><name>filters</name> <init>= <expr><name><name>exinfo</name>-&gt;<name>output_filters</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>filters</name>
&amp;&amp; (<name>filter</name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>filters</name></expr></argument>, <argument><expr>';'</expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>multimatch</name></name> &amp; <name>MULTIMATCH_FILTERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>found</name> || (<name><name>conf</name>-&gt;<name>multimatch</name></name> &amp; <name>MULTIMATCH_ANY</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>found_metadata</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>exception_list</name></expr></argument>)</argument_list></call>) = <name>extcase</name></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<if>if <condition>(<expr><name>found_metadata</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"ap-mime-exceptions-list"</expr></argument>,
<argument><expr>(<name>void</name> *)<name>exception_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>content_type</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>content_type</name> *</type><name>ctp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>override</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>ctp</name> = <call><name>analyze_ct</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>param</name> *</type><name>pp</name> <init>= <expr><name><name>ctp</name>-&gt;<name>param</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>base_content_type</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctp</name>-&gt;<name>type_len</name></name> +
<name><name>ctp</name>-&gt;<name>subtype_len</name></name> +
<sizeof>sizeof<argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr><name>base_content_type</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ctp</name>-&gt;<name>type</name></name></expr></argument>, <argument><expr><name><name>ctp</name>-&gt;<name>type_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> += <name><name>ctp</name>-&gt;<name>type_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>tmp</name>++ = '/'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ctp</name>-&gt;<name>subtype</name></name></expr></argument>, <argument><expr><name><name>ctp</name>-&gt;<name>subtype_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> += <name><name>ctp</name>-&gt;<name>subtype_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>tmp</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base_content_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pp</name> != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>charset</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pp</name>-&gt;<name>attr</name></name></expr></argument>, <argument><expr>"charset"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>override</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>,
<argument><expr>"; charset="</expr></argument>,
<argument><expr><name>charset</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>override</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>,
<argument><expr>"; "</expr></argument>, <argument><expr><name><name>pp</name>-&gt;<name>attr</name></name></expr></argument>,
<argument><expr>"="</expr></argument>, <argument><expr><name><name>pp</name>-&gt;<name>val</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>pp</name> = <name><name>pp</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>charset</name> &amp;&amp; !<name>override</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>,
<argument><expr>"; charset="</expr></argument>, <argument><expr><name>charset</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>content_languages</name></name> &amp;&amp; <name><name>conf</name>-&gt;<name>default_language</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>new</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>content_languages</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_languages</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>new</name> = (const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>content_languages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>new</name> = <name><name>conf</name>-&gt;<name>default_language</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>content_type</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>mime_post_config</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_type_checker</name><argument_list>(<argument><expr><name>find_ct</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>mime</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_mime_dir_config</name></expr>,
<expr><name>merge_mime_dir_configs</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>mime_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
