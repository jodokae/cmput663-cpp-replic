<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/http/http_protocol.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_signal.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_MEMFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_vhost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ebcdic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDARG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>status_lines</name><index>[<expr><name>RESPONSE_CODES</name></expr>]</index></name> <init>= <expr><block>{
<expr>"100 Continue"</expr>,
<expr>"101 Switching Protocols"</expr>,
<expr>"102 Processing"</expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_200</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<expr>"200 OK"</expr>,
<expr>"201 Created"</expr>,
<expr>"202 Accepted"</expr>,
<expr>"203 Non-Authoritative Information"</expr>,
<expr>"204 No Content"</expr>,
<expr>"205 Reset Content"</expr>,
<expr>"206 Partial Content"</expr>,
<expr>"207 Multi-Status"</expr>,
<expr>"208 Already Reported"</expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr>"226 IM Used"</expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_300</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<expr>"300 Multiple Choices"</expr>,
<expr>"301 Moved Permanently"</expr>,
<expr>"302 Found"</expr>,
<expr>"303 See Other"</expr>,
<expr>"304 Not Modified"</expr>,
<expr>"305 Use Proxy"</expr>,
<expr><name>NULL</name></expr>,
<expr>"307 Temporary Redirect"</expr>,
<expr>"308 Permanent Redirect"</expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_400</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>
<expr>"400 Bad Request"</expr>,
<expr>"401 Unauthorized"</expr>,
<expr>"402 Payment Required"</expr>,
<expr>"403 Forbidden"</expr>,
<expr>"404 Not Found"</expr>,
<expr>"405 Method Not Allowed"</expr>,
<expr>"406 Not Acceptable"</expr>,
<expr>"407 Proxy Authentication Required"</expr>,
<expr>"408 Request Timeout"</expr>,
<expr>"409 Conflict"</expr>,
<expr>"410 Gone"</expr>,
<expr>"411 Length Required"</expr>,
<expr>"412 Precondition Failed"</expr>,
<expr>"413 Request Entity Too Large"</expr>,
<expr>"414 Request-URI Too Long"</expr>,
<expr>"415 Unsupported Media Type"</expr>,
<expr>"416 Requested Range Not Satisfiable"</expr>,
<expr>"417 Expectation Failed"</expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr>"421 Misdirected Request"</expr>,
<expr>"422 Unprocessable Entity"</expr>,
<expr>"423 Locked"</expr>,
<expr>"424 Failed Dependency"</expr>,
<expr><name>NULL</name></expr>,
<expr>"426 Upgrade Required"</expr>,
<expr><name>NULL</name></expr>,
<expr>"428 Precondition Required"</expr>,
<expr>"429 Too Many Requests"</expr>,
<expr><name>NULL</name></expr>,
<expr>"431 Request Header Fields Too Large"</expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr>"451 Unavailable For Legal Reasons"</expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_500</name></cpp:macro> <cpp:value>91</cpp:value></cpp:define>
<expr>"500 Internal Server Error"</expr>,
<expr>"501 Not Implemented"</expr>,
<expr>"502 Bad Gateway"</expr>,
<expr>"503 Service Unavailable"</expr>,
<expr>"504 Gateway Timeout"</expr>,
<expr>"505 HTTP Version Not Supported"</expr>,
<expr>"506 Variant Also Negotiates"</expr>,
<expr>"507 Insufficient Storage"</expr>,
<expr>"508 Loop Detected"</expr>,
<expr><name>NULL</name></expr>,
<expr>"510 Not Extended"</expr>,
<expr>"511 Network Authentication Required"</expr>
}</block></expr></init></decl>;</decl_stmt>
<macro><name>APR_HOOK_STRUCT</name><argument_list>(
<argument>APR_HOOK_LINK(insert_error_filter)</argument>
)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_VOID</name><argument_list>(<argument>insert_error_filter</argument>, <argument>(request_rec *r)</argument>, <argument>(r)</argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_NUMBER_FIRST</name></cpp:macro> <cpp:value>(M_INVALID + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_NUMBER_LAST</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_mpm_running</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mpm_state</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MPM_STATE</name></expr></argument>, <argument><expr>&amp;<name>mpm_state</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>mpm_state</name> == <name>AP_MPMQ_STOPPING</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_set_keepalive</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ka_sent</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>keep_alive_max</name></name> - <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalives</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wimpy</name> <init>= <expr><call><name>ap_find_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Connection"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"close"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conn</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Connection"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> != <name>AP_CONN_CLOSE</name>)
&amp;&amp; !<name><name>r</name>-&gt;<name>expecting_100</name></name>
&amp;&amp; ((<name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NOT_MODIFIED</name>)
|| (<name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NO_CONTENT</name>)
|| <name><name>r</name>-&gt;<name>header_only</name></name>
|| <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call>
|| <call><name>ap_find_last_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"chunked"</expr></argument>)</argument_list></call>
|| ((<name><name>r</name>-&gt;<name>proto_num</name></name> &gt;= <call><name>HTTP_VERSION</name><argument_list>(<argument><expr>1</expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call>)
&amp;&amp; (<name><name>r</name>-&gt;<name>chunked</name></name> = 1)))
&amp;&amp; <name><name>r</name>-&gt;<name>server</name>-&gt;<name>keep_alive</name></name>
&amp;&amp; (<name><name>r</name>-&gt;<name>server</name>-&gt;<name>keep_alive_timeout</name></name> &gt; 0)
&amp;&amp; ((<name><name>r</name>-&gt;<name>server</name>-&gt;<name>keep_alive_max</name></name> == 0)
|| (<name>left</name> &gt; 0))
&amp;&amp; !<call><name>ap_status_drops_connection</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call>
&amp;&amp; !<name>wimpy</name>
&amp;&amp; !<call><name>ap_find_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr>"close"</expr></argument>)</argument_list></call>
&amp;&amp; (!<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"nokeepalive"</expr></argument>)</argument_list></call>
|| <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Via"</expr></argument>)</argument_list></call>)
&amp;&amp; ((<name>ka_sent</name> = <call><name>ap_find_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr>"keep-alive"</expr></argument>)</argument_list></call>)
|| (<name><name>r</name>-&gt;<name>proto_num</name></name> &gt;= <call><name>HTTP_VERSION</name><argument_list>(<argument><expr>1</expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call>))
&amp;&amp; <call><name>is_mpm_running</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_KEEPALIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalives</name></name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>ka_sent</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>keep_alive_max</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Keep-Alive"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"timeout=%d, max=%d"</expr></argument>,
<argument><expr>(<name>int</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>keep_alive_timeout</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Keep-Alive"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"timeout=%d"</expr></argument>,
<argument><expr>(<name>int</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>keep_alive_timeout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Connection"</expr></argument>, <argument><expr>"Keep-Alive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>wimpy</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Connection"</expr></argument>, <argument><expr>"close"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> != <name>AP_CONN_CLOSE</name>)
&amp;&amp; <name><name>r</name>-&gt;<name>server</name>-&gt;<name>keep_alive_max</name></name>
&amp;&amp; !<name>left</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalives</name></name>++</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_condition_e</argument>)</argument_list></macro> <macro><name>ap_condition_if_match</name><argument_list>(<argument>request_rec *r</argument>,
<argument>apr_table_t *headers</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>if_match</name></decl>, *<decl><type ref="prev"/><name>etag</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>if_match</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Match"</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>if_match</name><index>[<expr>0</expr>]</index></name> == '*'
|| ((<name>etag</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"ETag"</expr></argument>)</argument_list></call>) != <name>NULL</name>
&amp;&amp; <call><name>ap_find_etag_strong</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>if_match</name></expr></argument>, <argument><expr><name>etag</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>AP_CONDITION_STRONG</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>AP_CONDITION_NOMATCH</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>AP_CONDITION_NONE</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_condition_e</argument>)</argument_list></macro> <macro><name>ap_condition_if_unmodified_since</name><argument_list>(<argument>request_rec *r</argument>,
<argument>apr_table_t *headers</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>if_unmodified</name></decl>;</decl_stmt>
<expr_stmt><expr><name>if_unmodified</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Unmodified-Since"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>if_unmodified</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>mtime</name></decl>, <decl><type ref="prev"/><name>reqtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>ius</name> <init>= <expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><call><name>apr_date_parse_http</name><argument_list>(<argument><expr><name>if_unmodified</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><call><name>apr_date_parse_http</name><argument_list>(
<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"Last-Modified"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mtime</name> == <name>APR_DATE_BAD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>mtime</name></name> ? <name><name>r</name>-&gt;<name>mtime</name></name> : <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>reqtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><call><name>apr_date_parse_http</name><argument_list>(
<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"Date"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>reqtime</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reqtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>ius</name> != <name>APR_DATE_BAD</name>) &amp;&amp; (<name>mtime</name> &gt; <name>ius</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>reqtime</name> &lt; <name>mtime</name> + 60</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Range"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>AP_CONDITION_NOMATCH</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>AP_CONDITION_WEAK</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr><name>AP_CONDITION_STRONG</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr><name>AP_CONDITION_NOMATCH</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>AP_CONDITION_NONE</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_condition_e</argument>)</argument_list></macro> <macro><name>ap_condition_if_none_match</name><argument_list>(<argument>request_rec *r</argument>,
<argument>apr_table_t *headers</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>if_nonematch</name></decl>, *<decl><type ref="prev"/><name>etag</name></decl>;</decl_stmt>
<expr_stmt><expr><name>if_nonematch</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-None-Match"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>if_nonematch</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>if_nonematch</name><index>[<expr>0</expr>]</index></name> == '*'</expr>)</condition><then> <block>{
<return>return <expr><name>AP_CONDITION_STRONG</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_GET</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>etag</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"ETag"</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Range"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ap_find_etag_strong</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>if_nonematch</name></expr></argument>, <argument><expr><name>etag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>AP_CONDITION_STRONG</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>ap_find_etag_weak</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>if_nonematch</name></expr></argument>, <argument><expr><name>etag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>AP_CONDITION_WEAK</name></expr>;</return>
}</block></then></if>
}</block></else></if>
}</block></then></if>
}</block></then>
<else>else <if>if <condition>(<expr>(<name>etag</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"ETag"</expr></argument>)</argument_list></call>) != <name>NULL</name>
&amp;&amp; <call><name>ap_find_etag_strong</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>if_nonematch</name></expr></argument>, <argument><expr><name>etag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>AP_CONDITION_STRONG</name></expr>;</return>
}</block></then></if></else></if>
<return>return <expr><name>AP_CONDITION_NOMATCH</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>AP_CONDITION_NONE</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_condition_e</argument>)</argument_list></macro> <macro><name>ap_condition_if_modified_since</name><argument_list>(<argument>request_rec *r</argument>,
<argument>apr_table_t *headers</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>if_modified_since</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>if_modified_since</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Modified-Since"</expr></argument>)</argument_list></call>)
!= <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>ims</name></decl>, <decl><type ref="prev"/><name>reqtime</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><call><name>apr_date_parse_http</name><argument_list>(
<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"Last-Modified"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mtime</name> == <name>APR_DATE_BAD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>mtime</name></name> ? <name><name>r</name>-&gt;<name>mtime</name></name> : <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>reqtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><call><name>apr_date_parse_http</name><argument_list>(
<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"Date"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>reqtime</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reqtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>ims</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><call><name>apr_date_parse_http</name><argument_list>(<argument><expr><name>if_modified_since</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ims</name> &gt;= <name>mtime</name> &amp;&amp; <name>ims</name> &lt;= <name>reqtime</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>reqtime</name> &lt; <name>mtime</name> + 60</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Range"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>AP_CONDITION_NOMATCH</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>AP_CONDITION_WEAK</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr><name>AP_CONDITION_STRONG</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr><name>AP_CONDITION_NOMATCH</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>AP_CONDITION_NONE</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_condition_e</argument>)</argument_list></macro> <macro><name>ap_condition_if_range</name><argument_list>(<argument>request_rec *r</argument>,
<argument>apr_table_t *headers</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>if_range</name></decl>, *<decl><type ref="prev"/><name>etag</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>if_range</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Range"</expr></argument>)</argument_list></call>)
&amp;&amp; <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Range"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>if_range</name><index>[<expr>0</expr>]</index></name> == '"'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>etag</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"ETag"</expr></argument>)</argument_list></call>)
&amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name>if_range</name></expr></argument>, <argument><expr><name>etag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>AP_CONDITION_STRONG</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>AP_CONDITION_NOMATCH</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>rtime</name></decl>, <decl><type ref="prev"/><name>reqtime</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><call><name>apr_date_parse_http</name><argument_list>(
<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"Last-Modified"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mtime</name> == <name>APR_DATE_BAD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>mtime</name></name> ? <name><name>r</name>-&gt;<name>mtime</name></name> : <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>reqtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><call><name>apr_date_parse_http</name><argument_list>(
<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"Date"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>reqtime</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reqtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rtime</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><call><name>apr_date_parse_http</name><argument_list>(<argument><expr><name>if_range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rtime</name> == <name>mtime</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>reqtime</name> &lt; <name>mtime</name> + 60</expr>)</condition><then> <block>{
<return>return <expr><name>AP_CONDITION_NOMATCH</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>AP_CONDITION_STRONG</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr><name>AP_CONDITION_NOMATCH</name></expr>;</return>
}</block></else></if>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>AP_CONDITION_NONE</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_meets_conditions</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>not_modified</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_condition_e</name></type> <name>cond</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>ap_is_HTTP_SUCCESS</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call> || <name><name>r</name>-&gt;<name>no_local_copy</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cond</name> = <call><name>ap_condition_if_match</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>AP_CONDITION_NOMATCH</name> == <name>cond</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_PRECONDITION_FAILED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cond</name> = <call><name>ap_condition_if_unmodified_since</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>AP_CONDITION_NOMATCH</name> == <name>cond</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>not_modified</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>cond</name> &gt;= <name>AP_CONDITION_WEAK</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_PRECONDITION_FAILED</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name>cond</name> = <call><name>ap_condition_if_none_match</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>AP_CONDITION_NOMATCH</name> == <name>cond</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>not_modified</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>cond</name> &gt;= <name>AP_CONDITION_WEAK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_GET</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>not_modified</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>not_modified</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<return>return <expr><name>HTTP_PRECONDITION_FAILED</name></expr>;</return>
}</block></else></if>
}</block></then></if></else></if>
<expr_stmt><expr><name>cond</name> = <call><name>ap_condition_if_modified_since</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>AP_CONDITION_NOMATCH</name> == <name>cond</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>not_modified</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>cond</name> &gt;= <name>AP_CONDITION_WEAK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_GET</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>not_modified</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>not_modified</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if></else></if>
<expr_stmt><expr><name>cond</name> = <call><name>ap_condition_if_range</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cond</name> &gt; <name>AP_CONDITION_NONE</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>not_modified</name> == 1</expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_NOT_MODIFIED</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>methods_registry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cur_method_number</name> <init>= <expr><name>METHOD_NUMBER_FIRST</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_one_method</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>methname</name></decl></param>,
<param><decl><type><name>int</name></type> <name>methnum</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name> *</type><name>pnum</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>pnum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>pnum</name> = <name>methnum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>methods_registry</name></expr></argument>, <argument><expr><name>methname</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_method_registry_destroy</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>notused</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>methods_registry</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_method_number</name> = <name>METHOD_NUMBER_FIRST</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_method_registry_init</name><argument_list>(<argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><name>methods_registry</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ap_method_registry_destroy</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"GET"</expr></argument>, <argument><expr><name>M_GET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"HEAD"</expr></argument>, <argument><expr><name>M_GET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"PUT"</expr></argument>, <argument><expr><name>M_PUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"POST"</expr></argument>, <argument><expr><name>M_POST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"DELETE"</expr></argument>, <argument><expr><name>M_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"CONNECT"</expr></argument>, <argument><expr><name>M_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"OPTIONS"</expr></argument>, <argument><expr><name>M_OPTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"TRACE"</expr></argument>, <argument><expr><name>M_TRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"PATCH"</expr></argument>, <argument><expr><name>M_PATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"PROPFIND"</expr></argument>, <argument><expr><name>M_PROPFIND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"PROPPATCH"</expr></argument>, <argument><expr><name>M_PROPPATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"MKCOL"</expr></argument>, <argument><expr><name>M_MKCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"COPY"</expr></argument>, <argument><expr><name>M_COPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"MOVE"</expr></argument>, <argument><expr><name>M_MOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"LOCK"</expr></argument>, <argument><expr><name>M_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"UNLOCK"</expr></argument>, <argument><expr><name>M_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"VERSION-CONTROL"</expr></argument>, <argument><expr><name>M_VERSION_CONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"CHECKOUT"</expr></argument>, <argument><expr><name>M_CHECKOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"UNCHECKOUT"</expr></argument>, <argument><expr><name>M_UNCHECKOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"CHECKIN"</expr></argument>, <argument><expr><name>M_CHECKIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"UPDATE"</expr></argument>, <argument><expr><name>M_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"LABEL"</expr></argument>, <argument><expr><name>M_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"REPORT"</expr></argument>, <argument><expr><name>M_REPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"MKWORKSPACE"</expr></argument>, <argument><expr><name>M_MKWORKSPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"MKACTIVITY"</expr></argument>, <argument><expr><name>M_MKACTIVITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"BASELINE-CONTROL"</expr></argument>, <argument><expr><name>M_BASELINE_CONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"MERGE"</expr></argument>, <argument><expr><name>M_MERGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_method_register</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *methname</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name> *</type><name>methnum</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>methods_registry</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_method_registry_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>methname</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>M_INVALID</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>methnum</name> = (<name>int</name> *)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>methods_registry</name></expr></argument>, <argument><expr><name>methname</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>methnum</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr>*<name>methnum</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>cur_method_number</name> &gt; <name>METHOD_NUMBER_LAST</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01610</expr></argument>)</argument_list></call>
"Maximum new request methods %d reached while "
"registering method %s."</expr></argument>,
<argument><expr><name>METHOD_NUMBER_LAST</name></expr></argument>, <argument><expr><name>methname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>M_INVALID</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>register_one_method</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>methname</name></expr></argument>, <argument><expr><name>cur_method_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cur_method_number</name>++</expr>;</return>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNKNOWN_METHOD</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lookup_builtin_method</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{
<case>case <expr>3</expr>:
<switch>switch <condition>(<expr><name><name>method</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'P'</expr>:
<return>return <expr>(<name><name>method</name><index>[<expr>1</expr>]</index></name> == 'U'
&amp;&amp; <name><name>method</name><index>[<expr>2</expr>]</index></name> == 'T'
? <name>M_PUT</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'G'</expr>:
<return>return <expr>(<name><name>method</name><index>[<expr>1</expr>]</index></name> == 'E'
&amp;&amp; <name><name>method</name><index>[<expr>2</expr>]</index></name> == 'T'
? <name>M_GET</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><default>default:
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return>
</default>}</block></switch>
</case><case>case <expr>4</expr>:
<switch>switch <condition>(<expr><name><name>method</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'H'</expr>:
<return>return <expr>(<name><name>method</name><index>[<expr>1</expr>]</index></name> == 'E'
&amp;&amp; <name><name>method</name><index>[<expr>2</expr>]</index></name> == 'A'
&amp;&amp; <name><name>method</name><index>[<expr>3</expr>]</index></name> == 'D'
? <name>M_GET</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'P'</expr>:
<return>return <expr>(<name><name>method</name><index>[<expr>1</expr>]</index></name> == 'O'
&amp;&amp; <name><name>method</name><index>[<expr>2</expr>]</index></name> == 'S'
&amp;&amp; <name><name>method</name><index>[<expr>3</expr>]</index></name> == 'T'
? <name>M_POST</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'M'</expr>:
<return>return <expr>(<name><name>method</name><index>[<expr>1</expr>]</index></name> == 'O'
&amp;&amp; <name><name>method</name><index>[<expr>2</expr>]</index></name> == 'V'
&amp;&amp; <name><name>method</name><index>[<expr>3</expr>]</index></name> == 'E'
? <name>M_MOVE</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'L'</expr>:
<return>return <expr>(<name><name>method</name><index>[<expr>1</expr>]</index></name> == 'O'
&amp;&amp; <name><name>method</name><index>[<expr>2</expr>]</index></name> == 'C'
&amp;&amp; <name><name>method</name><index>[<expr>3</expr>]</index></name> == 'K'
? <name>M_LOCK</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'C'</expr>:
<return>return <expr>(<name><name>method</name><index>[<expr>1</expr>]</index></name> == 'O'
&amp;&amp; <name><name>method</name><index>[<expr>2</expr>]</index></name> == 'P'
&amp;&amp; <name><name>method</name><index>[<expr>3</expr>]</index></name> == 'Y'
? <name>M_COPY</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><default>default:
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return>
</default>}</block></switch>
</case><case>case <expr>5</expr>:
<switch>switch <condition>(<expr><name><name>method</name><index>[<expr>2</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'T'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"PATCH"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0
? <name>M_PATCH</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'R'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"MERGE"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0
? <name>M_MERGE</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'C'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"MKCOL"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0
? <name>M_MKCOL</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'B'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"LABEL"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0
? <name>M_LABEL</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'A'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"TRACE"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0
? <name>M_TRACE</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><default>default:
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return>
</default>}</block></switch>
</case><case>case <expr>6</expr>:
<switch>switch <condition>(<expr><name><name>method</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'U'</expr>:
<switch>switch <condition>(<expr><name><name>method</name><index>[<expr>5</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'K'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"UNLOCK"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> == 0
? <name>M_UNLOCK</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'E'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"UPDATE"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> == 0
? <name>M_UPDATE</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><default>default:
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return>
</default>}</block></switch>
</case><case>case <expr>'R'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"REPORT"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> == 0
? <name>M_REPORT</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'D'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"DELETE"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> == 0
? <name>M_DELETE</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><default>default:
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return>
</default>}</block></switch>
</case><case>case <expr>7</expr>:
<switch>switch <condition>(<expr><name><name>method</name><index>[<expr>1</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'P'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"OPTIONS"</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call> == 0
? <name>M_OPTIONS</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'O'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"CONNECT"</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call> == 0
? <name>M_CONNECT</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'H'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"CHECKIN"</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call> == 0
? <name>M_CHECKIN</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><default>default:
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return>
</default>}</block></switch>
</case><case>case <expr>8</expr>:
<switch>switch <condition>(<expr><name><name>method</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'P'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"PROPFIND"</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> == 0
? <name>M_PROPFIND</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'C'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"CHECKOUT"</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> == 0
? <name>M_CHECKOUT</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><default>default:
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return>
</default>}</block></switch>
</case><case>case <expr>9</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"PROPPATCH"</expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call> == 0
? <name>M_PROPPATCH</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>10</expr>:
<switch>switch <condition>(<expr><name><name>method</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'U'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"UNCHECKOUT"</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> == 0
? <name>M_UNCHECKOUT</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>'M'</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"MKACTIVITY"</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> == 0
? <name>M_MKACTIVITY</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><default>default:
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return>
</default>}</block></switch>
</case><case>case <expr>11</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"MKWORKSPACE"</expr></argument>, <argument><expr>11</expr></argument>)</argument_list></call> == 0
? <name>M_MKWORKSPACE</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>15</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"VERSION-CONTROL"</expr></argument>, <argument><expr>15</expr></argument>)</argument_list></call> == 0
? <name>M_VERSION_CONTROL</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><case>case <expr>16</expr>:
<return>return <expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr>"BASELINE-CONTROL"</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call> == 0
? <name>M_BASELINE_CONTROL</name> : <name>UNKNOWN_METHOD</name>)</expr>;</return>
</case><default>default:
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_method_number_of</name><argument_list>(<argument>const char *method</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>which</name> <init>= <expr><call><name>lookup_builtin_method</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>which</name> != <name>UNKNOWN_METHOD</name></expr>)</condition><then>
<return>return <expr><name>which</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>methods_registry</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name> *</type><name>methnum</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>methods_registry</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>methnum</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>*<name>methnum</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>M_INVALID</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_method_name_of</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>int methnum</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name> <init>= <expr><call><name>apr_hash_first</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>methods_registry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*(<name>int</name> *)<name>val</name> == <name>methnum</name></expr>)</condition><then>
<return>return <expr><name>key</name></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_index_of_response</name><argument_list>(<argument>int status</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>shortcut</name><index>[<expr>6</expr>]</index></name> <init>= <expr><block>{<expr>0</expr>, <expr><name>LEVEL_200</name></expr>, <expr><name>LEVEL_300</name></expr>, <expr><name>LEVEL_400</name></expr>,
<expr><name>LEVEL_500</name></expr>, <expr><name>RESPONSE_CODES</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 100</expr>)</condition><then> <block>{
<return>return <expr><name>LEVEL_500</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>status</name> -= 100</expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 100</expr>)</condition><then> <block>{
<expr_stmt><expr><name>pos</name> = (<name>status</name> + <name><name>shortcut</name><index>[<expr><name>i</name></expr>]</index></name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>pos</name> &lt; <name><name>shortcut</name><index>[<expr><name>i</name> + 1</expr>]</index></name> &amp;&amp; <name><name>status_lines</name><index>[<expr><name>pos</name></expr>]</index></name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>pos</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>LEVEL_500</name></expr>;</return>
}</block></else></if>
}</block></then></if>
}</block></for>
<return>return <expr><name>LEVEL_500</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_get_status_line</name><argument_list>(<argument>int status</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>status_lines</name><index>[<expr><call><name>ap_index_of_response</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>make_allow</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>allow</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name> <init>= <expr><call><name>apr_hash_first</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>methods_registry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mask</name> = <name><name>r</name>-&gt;<name>allowed_methods</name>-&gt;<name>method_mask</name></name></expr>;</expr_stmt>
<for>for (<init>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>mask</name> &amp; (<name>AP_METHOD_BIT</name> &lt;&lt; *(<name>int</name> *)<name>val</name>)) != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>allow</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>key</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>trace_enable</name></name> != <name>AP_TRACE_DISABLE</name></expr>)</condition><then>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>allow</name></expr></argument>)</argument_list></call> = "TRACE"</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>mask</name> &amp; (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_INVALID</name>))
&amp;&amp; (<name><name>r</name>-&gt;<name>allowed_methods</name>-&gt;<name>method_list</name></name> != <name>NULL</name>)
&amp;&amp; (<name><name>r</name>-&gt;<name>allowed_methods</name>-&gt;<name>method_list</name>-&gt;<name>nelts</name></name> != 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_array_cat</name><argument_list>(<argument><expr><name>allow</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>allowed_methods</name>-&gt;<name>method_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>allow</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_send_http_options</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>assbackwards</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Allow"</expr></argument>, <argument><expr><call><name>make_allow</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_set_content_type</name><argument_list>(<argument>request_rec *r</argument>, <argument>const char *ct</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>!<name>ct</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_type</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>content_type</name></name> || <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_type</name></name> = <name>ct</name></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_set_accept_ranges</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>d</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Accept-Ranges"</expr></argument>,
<argument><expr>(<name><name>d</name>-&gt;<name>max_ranges</name></name> == <name>AP_MAXRANGES_NORANGES</name>) ? "none"
: "bytes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_optional_notes</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>suffix</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>notes</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>notes</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>result</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>notes</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>get_canned_error_string</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>location</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>r</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error_notes</name></decl>, *<decl><type ref="prev"/><name>h1</name></decl>, *<decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{
<case>case <expr><name>HTTP_MOVED_PERMANENTLY</name></expr>:
</case><case>case <expr><name>HTTP_MOVED_TEMPORARILY</name></expr>:
</case><case>case <expr><name>HTTP_TEMPORARY_REDIRECT</name></expr>:
</case><case>case <expr><name>HTTP_PERMANENT_REDIRECT</name></expr>:
<return>return<expr>(<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;The document has moved &lt;a href=\""</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_SEE_OTHER</name></expr>:
<return>return<expr>(<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;The answer to your request is located "
"&lt;a href=\""</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_USE_PROXY</name></expr>:
<return>return<expr>(<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;This resource is only accessible "
"through the proxy\n"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;br /&gt;\nYou will need to configure "
"your client to use that proxy.&lt;/p&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_PROXY_AUTHENTICATION_REQUIRED</name></expr>:
</case><case>case <expr><name>HTTP_UNAUTHORIZED</name></expr>:
<return>return<expr>("&lt;p&gt;This server could not verify that you\n"
"are authorized to access the document\n"
"requested. Either you supplied the wrong\n"
"credentials (e.g., bad password), or your\n"
"browser doesn't understand how to supply\n"
"the credentials required.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_BAD_REQUEST</name></expr>:
<return>return<expr>(<call><name>add_optional_notes</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>"&lt;p&gt;Your browser sent a request that "
"this server could not understand.&lt;br /&gt;\n"</expr></argument>,
<argument><expr>"error-notes"</expr></argument>,
<argument><expr>"&lt;/p&gt;\n"</expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_FORBIDDEN</name></expr>:
<expr_stmt><expr><name>s1</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;You don't have permission to access "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\non this server.&lt;br /&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr>(<call><name>add_optional_notes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr>"error-notes"</expr></argument>, <argument><expr>"&lt;/p&gt;\n"</expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_NOT_FOUND</name></expr>:
<return>return<expr>(<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;The requested URL "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>" was not found on this server.&lt;/p&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr>:
<return>return<expr>(<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;The requested method "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>" is not allowed for the URL "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>".&lt;/p&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_NOT_ACCEPTABLE</name></expr>:
<expr_stmt><expr><name>s1</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;An appropriate representation of the "
"requested resource "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>" could not be found on this server.&lt;/p&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr>(<call><name>add_optional_notes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr>"variant-list"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_MULTIPLE_CHOICES</name></expr>:
<return>return<expr>(<call><name>add_optional_notes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"variant-list"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_LENGTH_REQUIRED</name></expr>:
<expr_stmt><expr><name>s1</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;A request of the requested method "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>" requires a valid Content-length.&lt;br /&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr>(<call><name>add_optional_notes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr>"error-notes"</expr></argument>, <argument><expr>"&lt;/p&gt;\n"</expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_PRECONDITION_FAILED</name></expr>:
<return>return<expr>(<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;The precondition on the request "
"for the URL "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>" evaluated to false.&lt;/p&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_NOT_IMPLEMENTED</name></expr>:
<expr_stmt><expr><name>s1</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" to "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>" not supported.&lt;br /&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr>(<call><name>add_optional_notes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr>"error-notes"</expr></argument>, <argument><expr>"&lt;/p&gt;\n"</expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_BAD_GATEWAY</name></expr>:
<expr_stmt><expr><name>s1</name> = "&lt;p&gt;The proxy server received an invalid" <name>CRLF</name>
"response from an upstream server.&lt;br /&gt;" <name>CRLF</name></expr>;</expr_stmt>
<return>return<expr>(<call><name>add_optional_notes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr>"error-notes"</expr></argument>, <argument><expr>"&lt;/p&gt;\n"</expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_VARIANT_ALSO_VARIES</name></expr>:
<return>return<expr>(<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;A variant for the requested "
"resource\n&lt;pre&gt;\n"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\n&lt;/pre&gt;\nis itself a negotiable resource. "
"This indicates a configuration error.&lt;/p&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_REQUEST_TIME_OUT</name></expr>:
<return>return<expr>("&lt;p&gt;Server timeout waiting for the HTTP request from the client.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_GONE</name></expr>:
<return>return<expr>(<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;The requested resource&lt;br /&gt;"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;br /&gt;\nis no longer available on this server "
"and there is no forwarding address.\n"
"Please remove all references to this "
"resource.&lt;/p&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr>:
<return>return<expr>(<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"The requested resource&lt;br /&gt;"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"&lt;br /&gt;\n"</expr></argument>,
<argument><expr>"does not allow request data with "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>" requests, or the amount of data provided in\n"
"the request exceeds the capacity limit.\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_REQUEST_URI_TOO_LARGE</name></expr>:
<expr_stmt><expr><name>s1</name> = "&lt;p&gt;The requested URL's length exceeds the capacity\n"
"limit for this server.&lt;br /&gt;\n"</expr>;</expr_stmt>
<return>return<expr>(<call><name>add_optional_notes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr>"error-notes"</expr></argument>, <argument><expr>"&lt;/p&gt;\n"</expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>HTTP_UNSUPPORTED_MEDIA_TYPE</name></expr>:
<return>return<expr>("&lt;p&gt;The supplied request data is not in a format\n"
"acceptable for processing by this resource.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_RANGE_NOT_SATISFIABLE</name></expr>:
<return>return<expr>("&lt;p&gt;None of the range-specifier values in the Range\n"
"request-header field overlap the current extent\n"
"of the selected resource.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_EXPECTATION_FAILED</name></expr>:
<expr_stmt><expr><name>s1</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Expect"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s1</name></expr>)</condition><then>
<expr_stmt><expr><name>s1</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;The expectation given in the Expect request-header\n"
"field could not be met by this server.\n"
"The client sent&lt;pre&gt;\n Expect: "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"\n&lt;/pre&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>s1</name> = "&lt;p&gt;No expectation was seen, the Expect request-header \n"
"field was not presented by the client.\n"</expr>;</expr_stmt></else></if>
<return>return <expr><call><name>add_optional_notes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr>"error-notes"</expr></argument>, <argument><expr>"&lt;/p&gt;"
"&lt;p&gt;Only the 100-continue expectation is supported.&lt;/p&gt;\n"</expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>HTTP_UNPROCESSABLE_ENTITY</name></expr>:
<return>return<expr>("&lt;p&gt;The server understands the media type of the\n"
"request entity, but was unable to process the\n"
"contained instructions.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_LOCKED</name></expr>:
<return>return<expr>("&lt;p&gt;The requested resource is currently locked.\n"
"The lock must be released or proper identification\n"
"given before the method can be applied.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_FAILED_DEPENDENCY</name></expr>:
<return>return<expr>("&lt;p&gt;The method could not be performed on the resource\n"
"because the requested action depended on another\n"
"action and that other action failed.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_UPGRADE_REQUIRED</name></expr>:
<return>return<expr>("&lt;p&gt;The requested resource can only be retrieved\n"
"using SSL. The server is willing to upgrade the current\n"
"connection to SSL, but your client doesn't support it.\n"
"Either upgrade your client, or try requesting the page\n"
"using https://\n")</expr>;</return>
</case><case>case <expr><name>HTTP_PRECONDITION_REQUIRED</name></expr>:
<return>return<expr>("&lt;p&gt;The request is required to be conditional.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_TOO_MANY_REQUESTS</name></expr>:
<return>return<expr>("&lt;p&gt;The user has sent too many requests\n"
"in a given amount of time.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE</name></expr>:
<return>return<expr>("&lt;p&gt;The server refused this request because\n"
"the request header fields are too large.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_INSUFFICIENT_STORAGE</name></expr>:
<return>return<expr>("&lt;p&gt;The method could not be performed on the resource\n"
"because the server is unable to store the\n"
"representation needed to successfully complete the\n"
"request. There is insufficient free space left in\n"
"your storage allocation.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>:
<return>return<expr>("&lt;p&gt;The server is temporarily unable to service your\n"
"request due to maintenance downtime or capacity\n"
"problems. Please try again later.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_GATEWAY_TIME_OUT</name></expr>:
<return>return<expr>("&lt;p&gt;The gateway did not receive a timely response\n"
"from the upstream server or application.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_LOOP_DETECTED</name></expr>:
<return>return<expr>("&lt;p&gt;The server terminated an operation because\n"
"it encountered an infinite loop.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_NOT_EXTENDED</name></expr>:
<return>return<expr>("&lt;p&gt;A mandatory extension policy in the request is not\n"
"accepted by the server for this resource.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_NETWORK_AUTHENTICATION_REQUIRED</name></expr>:
<return>return<expr>("&lt;p&gt;The client needs to authenticate to gain\n"
"network access.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_MISDIRECTED_REQUEST</name></expr>:
<return>return<expr>("&lt;p&gt;The client needs a new connection for this\n"
"request as the requested host name does not match\n"
"the Server Name Indication (SNI) in use for this\n"
"connection.&lt;/p&gt;\n")</expr>;</return>
</case><case>case <expr><name>HTTP_UNAVAILABLE_FOR_LEGAL_REASONS</name></expr>:
<expr_stmt><expr><name>s1</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;Access to "</expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\nhas been denied for legal reasons.&lt;br /&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr>(<call><name>add_optional_notes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr>"error-notes"</expr></argument>, <argument><expr>"&lt;/p&gt;\n"</expr></argument>)</argument_list></call>)</expr>;</return>
</case><default>default:
<if>if <condition>(<expr>((<name>error_notes</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>,
<argument><expr>"error-notes"</expr></argument>)</argument_list></call>) != <name>NULL</name>)
&amp;&amp; (<name>h1</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"verbose-error-to"</expr></argument>)</argument_list></call>) != <name>NULL</name>
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<return>return<expr>(<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>error_notes</name></expr></argument>, <argument><expr>"&lt;p /&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></then> <else>else <block>{
<return>return<expr>(<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;p&gt;The server encountered an internal "
"error or\n"
"misconfiguration and was unable to complete\n"
"your request.&lt;/p&gt;\n"
"&lt;p&gt;Please contact the server "
"administrator at \n "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_admin</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>" to inform them of the time this "
"error occurred,\n"
" and the actions you performed just before "
"this error.&lt;/p&gt;\n"
"&lt;p&gt;More information about this error "
"may be available\n"
"in the server error log.&lt;/p&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></else></if>
</default>}</block></switch>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_send_error_response</name><argument_list>(<argument>request_rec *r</argument>, <argument>int recursive_error</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name><name>r</name>-&gt;<name>status</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>ap_index_of_response</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>custom_response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>location</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>eos_sent</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>output_filters</name></name> = <name><name>r</name>-&gt;<name>proto_output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_run_insert_error_filter</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>location</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>location</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>status</name> == <name>HTTP_NOT_MODIFIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_finalize_request_protocol</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name>status</name> == <name>HTTP_NO_CONTENT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_finalize_request_protocol</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>assbackwards</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>tmp</name> <init>= <expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <name><name>r</name>-&gt;<name>err_headers_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name> = <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_clear</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_is_HTTP_REDIRECT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> || (<name>status</name> == <name>HTTP_CREATED</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>location</name> != <name>NULL</name>) &amp;&amp; *<name>location</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>location</name> = ""</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_languages</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>clength</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>"suppress-error-charset"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>request_conf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>request_conf</name>-&gt;<name>suppress_charset</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/html"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/html; charset=iso-8859-1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>(<name>status</name> == <name>HTTP_METHOD_NOT_ALLOWED</name>)
|| (<name>status</name> == <name>HTTP_NOT_IMPLEMENTED</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Allow"</expr></argument>, <argument><expr><call><name>make_allow</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_finalize_request_protocol</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>custom_response</name> = <call><name>ap_response_code_string</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>custom_response</name><index>[<expr>0</expr>]</index></name> == '\"'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name>custom_response</name> + 1</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_finalize_request_protocol</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></then></if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>title</name> <init>= <expr><name><name>status_lines</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>h1</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status_line</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &gt;= 3
&amp;&amp; <call><name>apr_strtoi64</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> == <name><name>r</name>-&gt;<name>status</name></name>
&amp;&amp; (<name>end</name> - 3) == <name><name>r</name>-&gt;<name>status_line</name></name>
&amp;&amp; (<name>len</name> &lt; 4 || <call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status_line</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call>)
&amp;&amp; (<name>len</name> &lt; 5 || <call><name>apr_isalnum</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status_line</name><index>[<expr>4</expr>]</index></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>len</name> == 3</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></argument>, <argument><expr>" Unknown Reason"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>len</name> == 4</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></argument>, <argument><expr>"Unknown Reason"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name>title</name> = <name><name>r</name>-&gt;<name>status_line</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>h1</name> = &amp;<name><name>title</name><index>[<expr>4</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs_proto_in_ascii</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr><name>DOCTYPE_HTML_2_0</name>
"&lt;html&gt;&lt;head&gt;\n&lt;title&gt;"</expr></argument>, <argument><expr><name>title</name></expr></argument>,
<argument><expr>"&lt;/title&gt;\n&lt;/head&gt;&lt;body&gt;\n&lt;h1&gt;"</expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr>"&lt;/h1&gt;\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs_proto_in_ascii</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>get_canned_error_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>recursive_error</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs_proto_in_ascii</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;p&gt;Additionally, a "</expr></argument>,
<argument><expr><name><name>status_lines</name><index>[<expr><call><name>ap_index_of_response</name><argument_list>(<argument><expr><name>recursive_error</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,
<argument><expr>"\nerror was encountered while trying to use an "
"ErrorDocument to handle the request.&lt;/p&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rvputs_proto_in_ascii</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ap_psignature</name><argument_list>(<argument><expr>"&lt;hr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs_proto_in_ascii</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/body&gt;&lt;/html&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>ap_finalize_request_protocol</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_method_list_t *</argument>)</argument_list></macro> <macro><name>ap_make_method_list</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>int nelts</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_method_list_t</name> *</type><name>ml</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ml</name> = (<name>ap_method_list_t</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_method_list_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name>-&gt;<name>method_mask</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name>-&gt;<name>method_list</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nelts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ml</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_copy_method_list</name><argument_list>(<argument>ap_method_list_t *dest</argument>,
<argument>ap_method_list_t *src</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>imethods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>omethods</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dest</name>-&gt;<name>method_mask</name></name> = <name><name>src</name>-&gt;<name>method_mask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>imethods</name> = (<name>char</name> **) <name><name>src</name>-&gt;<name>method_list</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>src</name>-&gt;<name>method_list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>omethods</name> = (<name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>dest</name>-&gt;<name>method_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>omethods</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>dest</name>-&gt;<name>method_list</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>imethods</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_method_in_list</name><argument_list>(<argument>ap_method_list_t *l</argument>, <argument>const char *method</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>methnum</name></decl>;</decl_stmt>
<expr_stmt><expr><name>methnum</name> = <call><name>ap_method_number_of</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>methnum</name> != <name>M_INVALID</name></expr>)</condition><then> <block>{
<return>return <expr>!!(<name><name>l</name>-&gt;<name>method_mask</name></name> &amp; (<name>AP_METHOD_BIT</name> &lt;&lt; <name>methnum</name>))</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>l</name>-&gt;<name>method_list</name></name> == <name>NULL</name>) || (<name><name>l</name>-&gt;<name>method_list</name>-&gt;<name>nelts</name></name> == 0)</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr><call><name>ap_array_str_contains</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>method_list</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_method_list_add</name><argument_list>(<argument>ap_method_list_t *l</argument>, <argument>const char *method</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>methnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>xmethod</name></decl>;</decl_stmt>
<expr_stmt><expr><name>methnum</name> = <call><name>ap_method_number_of</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>methnum</name> != <name>M_INVALID</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>l</name>-&gt;<name>method_mask</name></name> |= (<name>AP_METHOD_BIT</name> &lt;&lt; <name>methnum</name>)</expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_array_str_contains</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>method_list</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>xmethod</name> = (const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>method_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>xmethod</name> = <name>method</name></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_method_list_remove</name><argument_list>(<argument>ap_method_list_t *l</argument>,
<argument>const char *method</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>methnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>methods</name></decl>;</decl_stmt>
<expr_stmt><expr><name>methnum</name> = <call><name>ap_method_number_of</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>methnum</name> != <name>M_INVALID</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>l</name>-&gt;<name>method_mask</name></name> &amp;= ~(<name>AP_METHOD_BIT</name> &lt;&lt; <name>methnum</name>)</expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>l</name>-&gt;<name>method_list</name>-&gt;<name>nelts</name></name> != 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<expr_stmt><expr><name>methods</name> = (<name>char</name> **)<name><name>l</name>-&gt;<name>method_list</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>l</name>-&gt;<name>method_list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr/>) <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name><name>methods</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<for>for (<init><expr><name>j</name> = <name>i</name></expr>, <expr><name>k</name> = <name>i</name> + 1</expr>;</init> <condition><expr><name>k</name> &lt; <name><name>l</name>-&gt;<name>method_list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr>, <expr>++<name>k</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>methods</name><index>[<expr><name>j</name></expr>]</index></name> = <name><name>methods</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>--<name><name>l</name>-&gt;<name>method_list</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
}</block></then></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_clear_method_list</name><argument_list>(<argument>ap_method_list_t *l</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><name><name>l</name>-&gt;<name>method_mask</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>method_list</name>-&gt;<name>nelts</name></name> = 0</expr>;</expr_stmt>
}</block>
</unit>
