<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/http2/h2_ngn_shed.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_mutex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_cond.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_http2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_mplx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_ngn_shed.h"</cpp:file></cpp:include>
<typedef>typedef <type>struct <name>h2_ngn_entry</name></type> <name>h2_ngn_entry</name>;</typedef>
<struct>struct <name>h2_ngn_entry</name> <block>{
<macro><name>APR_RING_ENTRY</name><argument_list>(<argument>h2_ngn_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_NGN_ENTRY_NEXT</name><parameter_list>(<param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_NEXT((e), link)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_NGN_ENTRY_PREV</name><parameter_list>(<param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_PREV((e), link)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_NGN_ENTRY_REMOVE</name><parameter_list>(<param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_REMOVE((e), link)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_REQ_ENTRIES_SENTINEL</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_SENTINEL((b), h2_ngn_entry, link)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_REQ_ENTRIES_EMPTY</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_EMPTY((b), h2_ngn_entry, link)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_REQ_ENTRIES_FIRST</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_FIRST(b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_REQ_ENTRIES_LAST</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_LAST(b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_REQ_ENTRIES_INSERT_HEAD</name><parameter_list>(<param><type><name>b</name></type></param>, <param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { h2_ngn_entry *ap__b = (e); APR_RING_INSERT_HEAD((b), ap__b, h2_ngn_entry, link); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_REQ_ENTRIES_INSERT_TAIL</name><parameter_list>(<param><type><name>b</name></type></param>, <param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { h2_ngn_entry *ap__b = (e); APR_RING_INSERT_TAIL((b), ap__b, h2_ngn_entry, link); } while (0)</cpp:value></cpp:define>
<struct>struct <name>h2_req_engine</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_ngn_shed</name> *</type><name>shed</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>shutdown</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>done</name> : 1</expr>;</expr_stmt>
<macro><name>APR_RING_HEAD</name><argument_list>(<argument>h2_req_entries</argument>, <argument>h2_ngn_entry</argument>)</argument_list></macro> <expr_stmt><expr><name>entries</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>capacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_assigned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_live</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_finished</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_output_consumed</name> *</type><name>out_consumed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>out_consumed_ctx</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>h2_req_engine_get_id</name><parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>engine</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>engine</name>-&gt;<name>id</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>h2_req_engine_is_shutdown</name><parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>engine</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>engine</name>-&gt;<name>shutdown</name></name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_req_engine_out_consumed</name><parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>engine</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>engine</name>-&gt;<name>out_consumed</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>engine</name>-&gt;<name>out_consumed</name></name><argument_list>(<argument><expr><name><name>engine</name>-&gt;<name>out_consumed_ctx</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>h2_ngn_shed</name> *</type><name>h2_ngn_shed_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><name>int</name></type> <name>default_capacity</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>req_buffer_size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_ngn_shed</name> *</type><name>shed</name></decl>;</decl_stmt>
<expr_stmt><expr><name>shed</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>shed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shed</name>-&gt;<name>c</name></name> = <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shed</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shed</name>-&gt;<name>default_capacity</name></name> = <name>default_capacity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shed</name>-&gt;<name>req_buffer_size</name></name> = <name>req_buffer_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shed</name>-&gt;<name>ngns</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>shed</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_ngn_shed_set_ctx</name><parameter_list>(<param><decl><type><name>h2_ngn_shed</name> *</type><name>shed</name></decl></param>, <param><decl><type><name>void</name> *</type><name>user_ctx</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>shed</name>-&gt;<name>user_ctx</name></name> = <name>user_ctx</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name> *</type><name>h2_ngn_shed_get_ctx</name><parameter_list>(<param><decl><type><name>h2_ngn_shed</name> *</type><name>shed</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>shed</name>-&gt;<name>user_ctx</name></name></expr>;</return>
}</block></function>
<function><type><name>h2_ngn_shed</name> *</type><name>h2_ngn_shed_get_shed</name><parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>ngn</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>ngn</name>-&gt;<name>shed</name></name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_ngn_shed_abort</name><parameter_list>(<param><decl><type><name>h2_ngn_shed</name> *</type><name>shed</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03394</expr></argument>)</argument_list></call>
"h2_ngn_shed(%ld): abort"</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shed</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ngn_add_task</name><parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>ngn</name></decl></param>, <param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_ngn_entry</name> *</type><name>entry</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_RING_ELEM_INIT</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H2_REQ_ENTRIES_INSERT_TAIL</name><argument_list>(<argument><expr>&amp;<name><name>ngn</name>-&gt;<name>entries</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ngn</name>-&gt;<name>no_assigned</name></name>++</expr>;</expr_stmt>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_ngn_shed_push_request</name><parameter_list>(<param><decl><type><name>h2_ngn_shed</name> *</type><name>shed</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ngn_type</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>http2_req_engine_init</name> *</type><name>einit</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_req_engine</name> *</type><name>ngn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name> <init>= <expr><call><name>h2_ctx_rget_task</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_ngn_shed(%ld): PUSHing request (task=%s)"</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>serialize</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EOF</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>assigned</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>--<name><name>task</name>-&gt;<name>assigned</name>-&gt;<name>no_assigned</name></name></expr>;</expr_stmt>
<expr_stmt><expr>--<name><name>task</name>-&gt;<name>assigned</name>-&gt;<name>no_live</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>assigned</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>engine</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_ngn_shed(%ld): push task(%s) hosting engine %s "
"already with %d tasks"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>engine</name>-&gt;<name>id</name></name></expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>engine</name>-&gt;<name>no_assigned</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>assigned</name></name> = <name><name>task</name>-&gt;<name>engine</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ngn_add_task</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>engine</name></name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ngn</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>shed</name>-&gt;<name>ngns</name></name></expr></argument>, <argument><expr><name>ngn_type</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ngn</name> &amp;&amp; !<name><name>ngn</name>-&gt;<name>shutdown</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_ngn_shed(%ld): pushing request %s to %s"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>h2_task_has_thawed</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_task_freeze</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ngn_add_task</name><argument_list>(<argument><expr><name>ngn</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>einit</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name><name>task</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_req_engine</name> *</type><name>newngn</name></decl>;</decl_stmt>
<expr_stmt><expr><name>newngn</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ngn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newngn</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newngn</name>-&gt;<name>id</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"ngn-%s"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newngn</name>-&gt;<name>type</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ngn_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newngn</name>-&gt;<name>c</name></name> = <name><name>task</name>-&gt;<name>c</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newngn</name>-&gt;<name>shed</name></name> = <name>shed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newngn</name>-&gt;<name>capacity</name></name> = <name><name>shed</name>-&gt;<name>default_capacity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newngn</name>-&gt;<name>no_assigned</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>newngn</name>-&gt;<name>no_live</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_RING_INIT</name><argument_list>(<argument><expr>&amp;<name><name>newngn</name>-&gt;<name>entries</name></name></expr></argument>, <argument><expr><name>h2_ngn_entry</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>einit</name><argument_list>(<argument><expr><name>newngn</name></expr></argument>, <argument><expr><name><name>newngn</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>newngn</name>-&gt;<name>type</name></name></expr></argument>, <argument><expr><name><name>newngn</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>req_buffer_size</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>&amp;<name><name>newngn</name>-&gt;<name>out_consumed</name></name></expr></argument>, <argument><expr>&amp;<name><name>newngn</name>-&gt;<name>out_consumed_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03395</expr></argument>)</argument_list></call>
"h2_ngn_shed(%ld): create engine %s (%s)"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>newngn</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>newngn</name>-&gt;<name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>newngn</name>-&gt;<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>engine</name></name> = <name>newngn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>assigned</name></name> = <name>newngn</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>shed</name>-&gt;<name>ngns</name></name></expr></argument>, <argument><expr><name><name>newngn</name>-&gt;<name>type</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>newngn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_EOF</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>h2_ngn_entry</name> *</type><name>pop_detached</name><parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>ngn</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_ngn_entry</name> *</type><name>entry</name></decl>;</decl_stmt>
<for>for (<init><expr><name>entry</name> = <call><name>H2_REQ_ENTRIES_FIRST</name><argument_list>(<argument><expr>&amp;<name><name>ngn</name>-&gt;<name>entries</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>entry</name> != <call><name>H2_REQ_ENTRIES_SENTINEL</name><argument_list>(<argument><expr>&amp;<name><name>ngn</name>-&gt;<name>entries</name></name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>entry</name> = <call><name>H2_NGN_ENTRY_NEXT</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>h2_task_has_thawed</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>task</name></name></expr></argument>)</argument_list></call>
|| (<name><name>entry</name>-&gt;<name>task</name>-&gt;<name>engine</name></name> == <name>ngn</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>H2_NGN_ENTRY_REMOVE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>entry</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_ngn_shed_pull_request</name><parameter_list>(<param><decl><type><name>h2_ngn_shed</name> *</type><name>shed</name></decl></param>,
<param><decl><type><name>h2_req_engine</name> *</type><name>ngn</name></decl></param>,
<param><decl><type><name>int</name></type> <name>capacity</name></decl></param>,
<param><decl><type><name>int</name></type> <name>want_shutdown</name></decl></param>,
<param><decl><type><name>request_rec</name> **</type><name>pr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_ngn_entry</name> *</type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>ngn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pr</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03396</expr></argument>)</argument_list></call>
"h2_ngn_shed(%ld): pull task for engine %s, shutdown=%d"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>want_shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>shed</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03397</expr></argument>)</argument_list></call>
"h2_ngn_shed(%ld): abort while pulling requests %s"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ngn</name>-&gt;<name>shutdown</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>APR_ECONNABORTED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ngn</name>-&gt;<name>capacity</name></name> = <name>capacity</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>H2_REQ_ENTRIES_EMPTY</name><argument_list>(<argument><expr>&amp;<name><name>ngn</name>-&gt;<name>entries</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>want_shutdown</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_ngn_shed(%ld): emtpy queue, shutdown engine %s"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ngn</name>-&gt;<name>shutdown</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name><name>ngn</name>-&gt;<name>shutdown</name></name>? <name>APR_EOF</name> : <name>APR_EAGAIN</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>entry</name> = <call><name>pop_detached</name><argument_list>(<argument><expr><name>ngn</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>task</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03398</expr></argument>)</argument_list></call>
"h2_ngn_shed(%ld): pulled request %s for engine %s"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ngn</name>-&gt;<name>no_live</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>pr</name> = <name><name>entry</name>-&gt;<name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>task</name>-&gt;<name>assigned</name></name> = <name>ngn</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>task</name>-&gt;<name>c</name></name> &amp;&amp; <name><name>ngn</name>-&gt;<name>c</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>task</name>-&gt;<name>c</name>-&gt;<name>current_thread</name></name> = <name><name>ngn</name>-&gt;<name>c</name>-&gt;<name>current_thread</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>task</name>-&gt;<name>engine</name></name> == <name>ngn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_task_thaw</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_ngn_entry</name> *</type><name>entry</name> <init>= <expr><call><name>H2_REQ_ENTRIES_FIRST</name><argument_list>(<argument><expr>&amp;<name><name>ngn</name>-&gt;<name>entries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03399</expr></argument>)</argument_list></call>
"h2_ngn_shed(%ld): pull task, nothing, first task %s"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_EAGAIN</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ngn_done_task</name><parameter_list>(<param><decl><type><name>h2_ngn_shed</name> *</type><name>shed</name></decl></param>, <param><decl><type><name>h2_req_engine</name> *</type><name>ngn</name></decl></param>,
<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type><name>int</name></type> <name>waslive</name></decl></param>, <param><decl><type><name>int</name></type> <name>aborted</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03400</expr></argument>)</argument_list></call>
"h2_ngn_shed(%ld): task %s %s by %s"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>aborted</name>? "aborted":"done"</expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ngn</name>-&gt;<name>no_finished</name></name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>waslive</name></expr>)</condition><then> <expr_stmt><expr><name><name>ngn</name>-&gt;<name>no_live</name></name>--</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ngn</name>-&gt;<name>no_assigned</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>assigned</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_ngn_shed_done_task</name><parameter_list>(<param><decl><type><name>h2_ngn_shed</name> *</type><name>shed</name></decl></param>,
<param><decl><type>struct <name>h2_req_engine</name> *</type><name>ngn</name></decl></param>, <param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ngn_done_task</name><argument_list>(<argument><expr><name>shed</name></expr></argument>, <argument><expr><name>ngn</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_ngn_shed_done_ngn</name><parameter_list>(<param><decl><type><name>h2_ngn_shed</name> *</type><name>shed</name></decl></param>, <param><decl><type>struct <name>h2_req_engine</name> *</type><name>ngn</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>ngn</name>-&gt;<name>done</name></name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>shed</name>-&gt;<name>aborted</name></name> &amp;&amp; !<call><name>H2_REQ_ENTRIES_EMPTY</name><argument_list>(<argument><expr>&amp;<name><name>ngn</name>-&gt;<name>entries</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_ngn_entry</name> *</type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_ngn_shed(%ld): exit engine %s (%s), "
"has still requests queued, shutdown=%d,"
"assigned=%ld, live=%ld, finished=%ld"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>type</name></name></expr></argument>,
<argument><expr><name><name>ngn</name>-&gt;<name>shutdown</name></name></expr></argument>,
<argument><expr>(<name>long</name>)<name><name>ngn</name>-&gt;<name>no_assigned</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name><name>ngn</name>-&gt;<name>no_live</name></name></expr></argument>,
<argument><expr>(<name>long</name>)<name><name>ngn</name>-&gt;<name>no_finished</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>entry</name> = <call><name>H2_REQ_ENTRIES_FIRST</name><argument_list>(<argument><expr>&amp;<name><name>ngn</name>-&gt;<name>entries</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>entry</name> != <call><name>H2_REQ_ENTRIES_SENTINEL</name><argument_list>(<argument><expr>&amp;<name><name>ngn</name>-&gt;<name>entries</name></name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>entry</name> = <call><name>H2_NGN_ENTRY_NEXT</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name> <init>= <expr><name><name>entry</name>-&gt;<name>task</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_ngn_shed(%ld): engine %s has queued task %s, "
"frozen=%d, aborting"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>frozen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ngn_done_task</name><argument_list>(<argument><expr><name>shed</name></expr></argument>, <argument><expr><name>ngn</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>engine</name></name> = <name><name>task</name>-&gt;<name>assigned</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>shed</name>-&gt;<name>aborted</name></name> &amp;&amp; (<name><name>ngn</name>-&gt;<name>no_assigned</name></name> &gt; 1 || <name><name>ngn</name>-&gt;<name>no_live</name></name> &gt; 1)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_ngn_shed(%ld): exit engine %s (%s), "
"assigned=%ld, live=%ld, finished=%ld"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>type</name></name></expr></argument>,
<argument><expr>(<name>long</name>)<name><name>ngn</name>-&gt;<name>no_assigned</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name><name>ngn</name>-&gt;<name>no_live</name></name></expr></argument>,
<argument><expr>(<name>long</name>)<name><name>ngn</name>-&gt;<name>no_finished</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>shed</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_ngn_shed(%ld): exit engine %s"</expr></argument>,
<argument><expr><name><name>shed</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>shed</name>-&gt;<name>ngns</name></name></expr></argument>, <argument><expr><name><name>ngn</name>-&gt;<name>type</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ngn</name>-&gt;<name>done</name></name> = 1</expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>h2_ngn_shed_destroy</name><parameter_list>(<param><decl><type><name>h2_ngn_shed</name> *</type><name>shed</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>shed</name>-&gt;<name>ngns</name></name></expr></argument>)</argument_list></call> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
