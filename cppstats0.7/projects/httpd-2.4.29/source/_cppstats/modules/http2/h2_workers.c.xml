<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/http2/h2_workers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_atomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_mutex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_cond.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mpm_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_mplx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_workers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_util.h"</cpp:file></cpp:include>
<typedef>typedef <type>struct <name>h2_slot</name></type> <name>h2_slot</name>;</typedef>
<struct>struct <name>h2_slot</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_slot</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_workers</name> *</type><name>workers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aborted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sticks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_thread_t</name> *</type><name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_thread_cond_t</name> *</type><name>not_idle</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>h2_slot</name> *</type><name>pop_slot</name><parameter_list>(<param><decl><type><name>h2_slot</name> **</type><name>phead</name></decl></param>)</parameter_list> <block>{
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<decl_stmt><decl><type><name>h2_slot</name> *</type><name>first</name> <init>= <expr>*<name>phead</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>first</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_atomic_casptr</name><argument_list>(<argument><expr>(<name>void</name>*)<name>phead</name></expr></argument>, <argument><expr><name><name>first</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call> == <name>first</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>first</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>first</name></expr>;</return>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>push_slot</name><parameter_list>(<param><decl><type><name>h2_slot</name> **</type><name>phead</name></decl></param>, <param><decl><type><name>h2_slot</name> *</type><name>slot</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr>!<name><name>slot</name>-&gt;<name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<decl_stmt><decl><type><name>h2_slot</name> *</type><name>next</name> <init>= <expr><name><name>slot</name>-&gt;<name>next</name></name> = *<name>phead</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_atomic_casptr</name><argument_list>(<argument><expr>(<name>void</name>*)<name>phead</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call> == <name>next</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
}</block></for>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>void</name>* <name>APR_THREAD_FUNC</name></type> <name>slot_run</name><parameter_list>(<param><decl><type><name>apr_thread_t</name> *</type><name>thread</name></decl></param>, <param><decl><type><name>void</name> *</type><name>wctx</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>activate_slot</name><parameter_list>(<param><decl><type><name>h2_workers</name> *</type><name>workers</name></decl></param>, <param><decl><type><name>h2_slot</name> *</type><name>slot</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>slot</name>-&gt;<name>workers</name></name> = <name>workers</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name>-&gt;<name>aborted</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name>-&gt;<name>task</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>slot</name>-&gt;<name>lock</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>slot</name>-&gt;<name>lock</name></name></expr></argument>,
<argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>,
<argument><expr><name><name>workers</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_slot</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>free</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>slot</name>-&gt;<name>not_idle</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_thread_cond_create</name><argument_list>(<argument><expr>&amp;<name><name>slot</name>-&gt;<name>not_idle</name></name></expr></argument>, <argument><expr><name><name>workers</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_slot</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>free</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>workers</name>-&gt;<name>s</name></name></expr></argument>,
<argument><expr>"h2_workers: new thread for slot %d"</expr></argument>, <argument><expr><name><name>slot</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_create</name><argument_list>(<argument><expr>&amp;<name><name>slot</name>-&gt;<name>thread</name></name></expr></argument>, <argument><expr><name><name>workers</name>-&gt;<name>thread_attr</name></name></expr></argument>, <argument><expr><name>slot_run</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>,
<argument><expr><name><name>workers</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>slot</name>-&gt;<name>thread</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_slot</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>free</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOMEM</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_atomic_inc32</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>worker_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>add_worker</name><parameter_list>(<param><decl><type><name>h2_workers</name> *</type><name>workers</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_slot</name> *</type><name>slot</name> <init>= <expr><call><name>pop_slot</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>free</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>slot</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>activate_slot</name><argument_list>(<argument><expr><name>workers</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_EAGAIN</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>wake_idle_worker</name><parameter_list>(<param><decl><type><name>h2_workers</name> *</type><name>workers</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_slot</name> *</type><name>slot</name> <init>= <expr><call><name>pop_slot</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>idle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>slot</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_cond_signal</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>not_idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>workers</name>-&gt;<name>dynamic</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>add_worker</name><argument_list>(<argument><expr><name>workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_zombies</name><parameter_list>(<param><decl><type><name>h2_workers</name> *</type><name>workers</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_slot</name> *</type><name>slot</name></decl>;</decl_stmt>
<while>while <condition>(<expr>(<name>slot</name> = <call><name>pop_slot</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>zombies</name></name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>slot</name>-&gt;<name>thread</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_thread_join</name><argument_list>(<argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr><name><name>slot</name>-&gt;<name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name>-&gt;<name>thread</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_atomic_dec32</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>worker_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push_slot</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>free</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slot_pull_task</name><parameter_list>(<param><decl><type><name>h2_slot</name> *</type><name>slot</name></decl></param>, <param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>h2_mplx_pop_task</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>&amp;<name><name>slot</name>-&gt;<name>task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>slot</name>-&gt;<name>task</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>slot</name>-&gt;<name>sticks</name></name> = <name><name>slot</name>-&gt;<name>workers</name>-&gt;<name>max_workers</name></name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>slot</name>-&gt;<name>sticks</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>APR_EOF</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>h2_fifo_op_t</name></type> <name>mplx_peek</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>head</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_mplx</name> *</type><name>m</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_slot</name> *</type><name>slot</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>slot_pull_task</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> == <name>APR_EAGAIN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>wake_idle_worker</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>H2_FIFO_OP_REPUSH</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>H2_FIFO_OP_PULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>get_next</name><parameter_list>(<param><decl><type><name>h2_slot</name> *</type><name>slot</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_workers</name> *</type><name>workers</name> <init>= <expr><name><name>slot</name>-&gt;<name>workers</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>slot</name>-&gt;<name>task</name></name> = <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr>!<name><name>slot</name>-&gt;<name>aborted</name></name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<name><name>slot</name>-&gt;<name>task</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>h2_fifo_try_peek</name><argument_list>(<argument><expr><name><name>workers</name>-&gt;<name>mplxs</name></name></expr></argument>, <argument><expr><name>mplx_peek</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_EOF</name></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>slot</name>-&gt;<name>task</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>cleanup_zombies</name><argument_list>(<argument><expr><name>workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push_slot</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>idle</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_cond_wait</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>not_idle</name></name></expr></argument>, <argument><expr><name><name>slot</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_EOF</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>slot_done</name><parameter_list>(<param><decl><type><name>h2_slot</name> *</type><name>slot</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>push_slot</name><argument_list>(<argument><expr>&amp;(<name><name>slot</name>-&gt;<name>workers</name>-&gt;<name>zombies</name></name>)</expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name>* <name>APR_THREAD_FUNC</name></type> <name>slot_run</name><parameter_list>(<param><decl><type><name>apr_thread_t</name> *</type><name>thread</name></decl></param>, <param><decl><type><name>void</name> *</type><name>wctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_slot</name> *</type><name>slot</name> <init>= <expr><name>wctx</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>!<name><name>slot</name>-&gt;<name>aborted</name></name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>get_next</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>slot</name>-&gt;<name>task</name></name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>h2_task_do</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>task</name></name></expr></argument>, <argument><expr><name>thread</name></expr></argument>, <argument><expr><name><name>slot</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>slot</name>-&gt;<name>aborted</name></name> &amp;&amp; (--<name><name>slot</name>-&gt;<name>sticks</name></name> &gt; 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_mplx_task_done</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>task</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name><name>slot</name>-&gt;<name>task</name></name></expr></argument>, <argument><expr>&amp;<name><name>slot</name>-&gt;<name>task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>h2_mplx_task_done</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>task</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name><name>slot</name>-&gt;<name>task</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name>-&gt;<name>task</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
}</block></while>
<expr_stmt><expr><call><name>slot_done</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>workers_pool_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_workers</name> *</type><name>workers</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_slot</name> *</type><name>slot</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>workers</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>workers</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>slot</name> = <call><name>pop_slot</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>slot</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_cond_signal</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>not_idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>slot</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<break>break;</break>
}</block></else></if>
}</block></for>
<expr_stmt><expr><call><name>h2_fifo_term</name><argument_list>(<argument><expr><name><name>workers</name>-&gt;<name>mplxs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_fifo_interrupt</name><argument_list>(<argument><expr><name><name>workers</name>-&gt;<name>mplxs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cleanup_zombies</name><argument_list>(<argument><expr><name>workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>h2_workers</name> *</type><name>h2_workers_create</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>server_pool</name></decl></param>,
<param><decl><type><name>int</name></type> <name>min_workers</name></decl></param>, <param><decl><type><name>int</name></type> <name>max_workers</name></decl></param>,
<param><decl><type><name>int</name></type> <name>idle_secs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_workers</name> *</type><name>workers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>server_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>server_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"h2_workers"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>workers</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h2_workers</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>workers</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>workers</name>-&gt;<name>s</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>workers</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>workers</name>-&gt;<name>min_workers</name></name> = <name>min_workers</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>workers</name>-&gt;<name>max_workers</name></name> = <name>max_workers</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>workers</name>-&gt;<name>max_idle_secs</name></name> = (<name>idle_secs</name> &gt; 0)? <name>idle_secs</name> : 10</expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>h2_fifo_create</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>mplxs</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>2 * <name><name>workers</name>-&gt;<name>max_workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_threadattr_create</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>thread_attr</name></name></expr></argument>, <argument><expr><name><name>workers</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ap_thread_stacksize</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_threadattr_stacksize_set</name><argument_list>(<argument><expr><name><name>workers</name>-&gt;<name>thread_attr</name></name></expr></argument>,
<argument><expr><name>ap_thread_stacksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"h2_workers: using stacksize=%ld"</expr></argument>,
<argument><expr>(<name>long</name>)<name>ap_thread_stacksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>lock</name></name></expr></argument>,
<argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>,
<argument><expr><name><name>workers</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>n</name> = <name><name>workers</name>-&gt;<name>nslots</name></name> = <name><name>workers</name>-&gt;<name>max_workers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>workers</name>-&gt;<name>slots</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>workers</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>n</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>h2_slot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>workers</name>-&gt;<name>slots</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>workers</name>-&gt;<name>nslots</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>APR_ENOMEM</name></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>workers</name>-&gt;<name>slots</name><index>[<expr><name>i</name></expr>]</index></name>.<name>id</name> = <name>i</name></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>n</name> = <name><name>workers</name>-&gt;<name>max_workers</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name>n</name>-1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>status</name> = <call><name>activate_slot</name><argument_list>(<argument><expr><name>workers</name></expr></argument>, <argument><expr>&amp;<name><name>workers</name>-&gt;<name>slots</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for(<init><expr><name>i</name> = <name>n</name></expr>;</init> <condition><expr><name>i</name> &lt; <name><name>workers</name>-&gt;<name>nslots</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>push_slot</name><argument_list>(<argument><expr>&amp;<name><name>workers</name>-&gt;<name>free</name></name></expr></argument>, <argument><expr>&amp;<name><name>workers</name>-&gt;<name>slots</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>workers</name>-&gt;<name>dynamic</name></name> = (<name><name>workers</name>-&gt;<name>worker_count</name></name> &lt; <name><name>workers</name>-&gt;<name>max_workers</name></name>)</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_pre_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>workers</name></expr></argument>, <argument><expr><name>workers_pool_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>workers</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_workers_register</name><parameter_list>(<param><decl><type><name>h2_workers</name> *</type><name>workers</name></decl></param>, <param><decl><type>struct <name>h2_mplx</name> *</type><name>m</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>h2_fifo_push</name><argument_list>(<argument><expr><name><name>workers</name>-&gt;<name>mplxs</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wake_idle_worker</name><argument_list>(<argument><expr><name>workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_workers_unregister</name><parameter_list>(<param><decl><type><name>h2_workers</name> *</type><name>workers</name></decl></param>, <param><decl><type>struct <name>h2_mplx</name> *</type><name>m</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_fifo_remove</name><argument_list>(<argument><expr><name><name>workers</name>-&gt;<name>mplxs</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
