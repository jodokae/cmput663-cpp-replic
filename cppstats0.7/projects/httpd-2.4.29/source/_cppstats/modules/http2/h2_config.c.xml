<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/http2/h2_config.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_vhost.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ap_mpm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_alt_svc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_VAL</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_CONFIG_GET</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>, <param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((a)-&gt;n == DEF_VAL)? (b) : (a))-&gt;n</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>h2_config</name></type> <name>defconf</name> <init>= <expr><block>{
<expr>"default"</expr>,
<expr>100</expr>,
<expr><name>H2_INITIAL_WINDOW_SIZE</name></expr>,
<expr>-1</expr>,
<expr>-1</expr>,
<expr>10 * 60</expr>,
<expr>32 * 1024</expr>,
<expr><name>NULL</name></expr>,
<expr>-1</expr>,
<expr>0</expr>,
<expr>-1</expr>,
<expr>1</expr>,
<expr>-1</expr>,
<expr>1024*1024</expr>,
<expr>1</expr>,
<expr>1</expr>,
<expr><name>NULL</name></expr>,
<expr>256</expr>,
<expr>0</expr>,
<expr><name>NULL</name></expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>h2_config_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>(<name>void</name>)<name>pool</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>h2_config_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>conf</name> <init>= <expr>(<name>h2_config</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h2_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name> <init>= <expr><name>x</name>? <name>x</name> : "unknown"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr>"["</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>"]"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>h2_max_streams</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>h2_window_size</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>min_workers</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>max_workers</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>max_worker_idle_secs</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>stream_max_mem_size</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>alt_svc_max_age</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>serialize_headers</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>h2_direct</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>modern_tls_only</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>h2_upgrade</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>tls_warmup_size</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>tls_cooldown_secs</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>h2_push</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>priorities</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>push_diary_size</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>copy_files</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>push_list</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>early_hints</name></name> = <name>DEF_VAL</name></expr>;</expr_stmt>
<return>return <expr><name>conf</name></expr>;</return>
}</block></function>
<function><type><name>void</name> *</type><name>h2_config_create_svr</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_config_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"srv"</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>defn_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name> *</type><name>h2_config_create_dir</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> *</type><name>x</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_config_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"dir"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>h2_config_merge</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>base</name> <init>= <expr>(<name>h2_config</name> *)<name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_config</name> *</type><name>add</name> <init>= <expr>(<name>h2_config</name> *)<name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_config</name> *</type><name>n</name> <init>= <expr>(<name>h2_config</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h2_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"merged["</expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>", "</expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"]"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>h2_max_streams</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>h2_max_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>h2_window_size</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>h2_window_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>min_workers</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>min_workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>max_workers</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>max_workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>max_worker_idle_secs</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>max_worker_idle_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>stream_max_mem_size</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>stream_max_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>alt_svcs</name></name> = <name><name>add</name>-&gt;<name>alt_svcs</name></name>? <name><name>add</name>-&gt;<name>alt_svcs</name></name> : <name><name>base</name>-&gt;<name>alt_svcs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>alt_svc_max_age</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>alt_svc_max_age</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>serialize_headers</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>serialize_headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>h2_direct</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>h2_direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>modern_tls_only</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>modern_tls_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>h2_upgrade</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>h2_upgrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>tls_warmup_size</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>tls_warmup_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>tls_cooldown_secs</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>tls_cooldown_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>h2_push</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>h2_push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>priorities</name></name> &amp;&amp; <name><name>base</name>-&gt;<name>priorities</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>n</name>-&gt;<name>priorities</name></name> = <call><name>apr_hash_overlay</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>priorities</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>priorities</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>n</name>-&gt;<name>priorities</name></name> = <name><name>add</name>-&gt;<name>priorities</name></name>? <name><name>add</name>-&gt;<name>priorities</name></name> : <name><name>base</name>-&gt;<name>priorities</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>n</name>-&gt;<name>push_diary_size</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>push_diary_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>copy_files</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>copy_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>push_list</name></name> &amp;&amp; <name><name>base</name>-&gt;<name>push_list</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>n</name>-&gt;<name>push_list</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>push_list</name></name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>push_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>n</name>-&gt;<name>push_list</name></name> = <name><name>add</name>-&gt;<name>push_list</name></name>? <name><name>add</name>-&gt;<name>push_list</name></name> : <name><name>base</name>-&gt;<name>push_list</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>n</name>-&gt;<name>early_hints</name></name> = <call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>early_hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
}</block></function>
<function><type><name>void</name> *</type><name>h2_config_merge_dir</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_config_merge</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>basev</name></expr></argument>, <argument><expr><name>addv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name> *</type><name>h2_config_merge_svr</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_config_merge</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>basev</name></expr></argument>, <argument><expr><name>addv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>h2_config_geti</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>h2_config_var_t</name></type> <name>var</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>int</name>)<call><name>h2_config_geti64</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_int64_t</name></type> <name>h2_config_geti64</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>h2_config_var_t</name></type> <name>var</name></decl></param>)</parameter_list> <block>{
<switch>switch<condition>(<expr><name>var</name></expr>)</condition> <block>{
<case>case <expr><name>H2_CONF_MAX_STREAMS</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>h2_max_streams</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_WIN_SIZE</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>h2_window_size</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_MIN_WORKERS</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>min_workers</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_MAX_WORKERS</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>max_workers</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_MAX_WORKER_IDLE_SECS</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>max_worker_idle_secs</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_STREAM_MAX_MEM</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>stream_max_mem_size</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_ALT_SVC_MAX_AGE</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>alt_svc_max_age</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_SER_HEADERS</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>serialize_headers</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_MODERN_TLS_ONLY</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>modern_tls_only</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_UPGRADE</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>h2_upgrade</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_DIRECT</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>h2_direct</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_TLS_WARMUP_SIZE</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>tls_warmup_size</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_TLS_COOLDOWN_SECS</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>tls_cooldown_secs</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_PUSH</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>h2_push</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_PUSH_DIARY_SIZE</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>push_diary_size</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_COPY_FILES</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>copy_files</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>H2_CONF_EARLY_HINTS</name></expr>:
<return>return <expr><call><name>H2_CONFIG_GET</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>defconf</name></expr></argument>, <argument><expr><name>early_hints</name></expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<return>return <expr><name>DEF_VAL</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>const</specifier> <name>h2_config</name> *</type><name>h2_config_sget</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>http2_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> struct <name>h2_priority</name> *</type><name>h2_config_get_priority</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>conf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>content_type</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>content_type</name> &amp;&amp; <name><name>conf</name>-&gt;<name>priorities</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>content_type</name></expr></argument>, <argument><expr>"; \t"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_priority</name> *</type><name>prio</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>priorities</name></name></expr></argument>, <argument><expr><name>content_type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>prio</name>? <name>prio</name> : <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>priorities</name></name></expr></argument>, <argument><expr>"*"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_max_streams</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>h2_max_streams</name></name> = (<name>int</name>)<call><name>apr_atoi64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>h2_max_streams</name></name> &lt; 1</expr>)</condition><then> <block>{
<return>return <expr>"value must be &gt; 0"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_window_size</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>h2_window_size</name></name> = (<name>int</name>)<call><name>apr_atoi64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>h2_window_size</name></name> &lt; 1024</expr>)</condition><then> <block>{
<return>return <expr>"value must be &gt;= 1024"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_min_workers</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>min_workers</name></name> = (<name>int</name>)<call><name>apr_atoi64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>min_workers</name></name> &lt; 1</expr>)</condition><then> <block>{
<return>return <expr>"value must be &gt; 0"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_max_workers</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>max_workers</name></name> = (<name>int</name>)<call><name>apr_atoi64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>max_workers</name></name> &lt; 1</expr>)</condition><then> <block>{
<return>return <expr>"value must be &gt; 0"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_max_worker_idle_secs</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>max_worker_idle_secs</name></name> = (<name>int</name>)<call><name>apr_atoi64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>max_worker_idle_secs</name></name> &lt; 1</expr>)</condition><then> <block>{
<return>return <expr>"value must be &gt; 0"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_stream_max_mem_size</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>stream_max_mem_size</name></name> = (<name>int</name>)<call><name>apr_atoi64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>stream_max_mem_size</name></name> &lt; 1024</expr>)</condition><then> <block>{
<return>return <expr>"value must be &gt;= 1024"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_add_alt_svc</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>value</name> &amp;&amp; *<name>value</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_alt_svc</name> *</type><name>as</name> <init>= <expr><call><name>h2_alt_svc_parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>as</name></expr>)</condition><then> <block>{
<return>return <expr>"unable to parse alt-svc specifier"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>cfg</name>-&gt;<name>alt_svcs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>alt_svcs</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h2_alt_svc</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>alt_svcs</name></name></expr></argument>, <argument><expr><name>h2_alt_svc</name>*</expr></argument>)</argument_list></call> = <name>as</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_alt_svc_max_age</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>alt_svc_max_age</name></name> = (<name>int</name>)<call><name>apr_atoi64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_session_extra_files</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"H2SessionExtraFiles is obsolete and will be ignored"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_serialize_headers</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>serialize_headers</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>serialize_headers</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<return>return <expr>"value must be On or Off"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_direct</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>h2_direct</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>h2_direct</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<return>return <expr>"value must be On or Off"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_push</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>h2_push</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>h2_push</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<return>return <expr>"value must be On or Off"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_add_push_priority</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>_cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ctype</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sdependency</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sweight</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sdefweight</name> <init>= <expr>"16"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_dependency</name></type> <name>dependency</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_priority</name> *</type><name>priority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>weight</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!*<name>ctype</name></expr>)</condition><then> <block>{
<return>return <expr>"1st argument must be a mime-type, like 'text/css' or '*'"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>sweight</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>sdependency</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sweight</name> = <name>sdependency</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sdependency</name> = "AFTER"</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr>"AFTER"</expr></argument>, <argument><expr><name>sdependency</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dependency</name> = <name>H2_DEPENDANT_AFTER</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr>"BEFORE"</expr></argument>, <argument><expr><name>sdependency</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dependency</name> = <name>H2_DEPENDANT_BEFORE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sweight</name></expr>)</condition><then> <block>{
<return>return <expr>"dependecy 'Before' does not allow a weight"</expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr>"INTERLEAVED"</expr></argument>, <argument><expr><name>sdependency</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dependency</name> = <name>H2_DEPENDANT_INTERLEAVED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sdefweight</name> = "256"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"dependency must be one of 'After', 'Before' or 'Interleaved'"</expr>;</return>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name>weight</name> = (<name>int</name>)<call><name>apr_atoi64</name><argument_list>(<argument><expr><name>sweight</name>? <name>sweight</name> : <name>sdefweight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>weight</name> &lt; <name>NGHTTP2_MIN_WEIGHT</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"weight must be a number &gt;= %d"</expr></argument>,
<argument><expr><name>NGHTTP2_MIN_WEIGHT</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>priority</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>priority</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priority</name>-&gt;<name>dependency</name></name> = <name>dependency</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priority</name>-&gt;<name>weight</name></name> = <name>weight</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>cfg</name>-&gt;<name>priorities</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>priorities</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priorities</name></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_modern_tls_only</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>modern_tls_only</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>modern_tls_only</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<return>return <expr>"value must be On or Off"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_upgrade</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>h2_upgrade</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>h2_upgrade</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<return>return <expr>"value must be On or Off"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_tls_warmup_size</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>tls_warmup_size</name></name> = <call><name>apr_atoi64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_tls_cooldown_secs</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>tls_cooldown_secs</name></name> = (<name>int</name>)<call><name>apr_atoi64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_push_diary_size</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>push_diary_size</name></name> = (<name>int</name>)<call><name>apr_atoi64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>push_diary_size</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"value must be &gt;= 0"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>push_diary_size</name></name> &gt; 0 &amp;&amp; (<name><name>cfg</name>-&gt;<name>push_diary_size</name></name> &amp; (<name><name>cfg</name>-&gt;<name>push_diary_size</name></name>-1))</expr>)</condition><then> <block>{
<return>return <expr>"value must a power of 2"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>push_diary_size</name></name> &gt; (1 &lt;&lt; 15)</expr>)</condition><then> <block>{
<return>return <expr>"value must &lt;= 65536"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_copy_files</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<name>arg</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>copy_files</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>copy_files</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<return>return <expr>"value must be On or Off"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_push</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>h2_config</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>h2_push_res</name> *</type><name>push</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_push_res</name> *</type><name>new</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>push_list</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>push_list</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>push</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>push_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>uri_ref</name></name> = <name><name>push</name>-&gt;<name>uri_ref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>critical</name></name> = <name><name>push</name>-&gt;<name>critical</name></name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_add_push_res</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dirconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg3</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>dconf</name> <init>= <expr>(<name>h2_config</name>*)<name>dirconf</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>h2_config</name> *</type><name>sconf</name> <init>= <expr>(<name>h2_config</name>*)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_push_res</name></type> <name>push</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last</name> <init>= <expr><name>arg3</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>push</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>push</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr>"add"</expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>push</name>.<name>uri_ref</name></name> = <name>arg2</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>push</name>.<name>uri_ref</name></name> = <name>arg1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> = <name>arg2</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>arg3</name></expr>)</condition><then> <block>{
<return>return <expr>"too many parameter"</expr>;</return>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>last</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr>"critical"</expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>push</name>.<name>critical</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"unknown last parameter"</expr>;</return>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>add_push</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sconf</name></expr></argument>, <argument><expr>&amp;<name>push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_push</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>, <argument><expr>&amp;<name>push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>add_push</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>, <argument><expr>&amp;<name>push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_conf_set_early_hints</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>early_hints</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>early_hints</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<return>return <expr>"value must be On or Off"</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_END_CMD</name></cpp:macro> <cpp:value>AP_INIT_TAKE1(NULL, NULL, NULL, RSRC_CONF, NULL)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name></type> <name><name>h2_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2MaxSessionStreams"</expr></argument>, <argument><expr><name>h2_conf_set_max_streams</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"maximum number of open streams per session"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2WindowSize"</expr></argument>, <argument><expr><name>h2_conf_set_window_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"window size on client DATA"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2MinWorkers"</expr></argument>, <argument><expr><name>h2_conf_set_min_workers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"minimum number of worker threads per child"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2MaxWorkers"</expr></argument>, <argument><expr><name>h2_conf_set_max_workers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"maximum number of worker threads per child"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2MaxWorkerIdleSeconds"</expr></argument>, <argument><expr><name>h2_conf_set_max_worker_idle_secs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"maximum number of idle seconds before a worker shuts down"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2StreamMaxMemSize"</expr></argument>, <argument><expr><name>h2_conf_set_stream_max_mem_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"maximum number of bytes buffered in memory for a stream"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2AltSvc"</expr></argument>, <argument><expr><name>h2_add_alt_svc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"adds an Alt-Svc for this server"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2AltSvcMaxAge"</expr></argument>, <argument><expr><name>h2_conf_set_alt_svc_max_age</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"set the maximum age (in seconds) that client can rely on alt-svc information"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2SerializeHeaders"</expr></argument>, <argument><expr><name>h2_conf_set_serialize_headers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"on to enable header serialization for compatibility"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2ModernTLSOnly"</expr></argument>, <argument><expr><name>h2_conf_set_modern_tls_only</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"off to not impose RFC 7540 restrictions on TLS"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2Upgrade"</expr></argument>, <argument><expr><name>h2_conf_set_upgrade</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"on to allow HTTP/1 Upgrades to h2/h2c"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2Direct"</expr></argument>, <argument><expr><name>h2_conf_set_direct</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"on to enable direct HTTP/2 mode"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2SessionExtraFiles"</expr></argument>, <argument><expr><name>h2_conf_set_session_extra_files</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"number of extra file a session might keep open (obsolete)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2TLSWarmUpSize"</expr></argument>, <argument><expr><name>h2_conf_set_tls_warmup_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"number of bytes on TLS connection before doing max writes"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2TLSCoolDownSecs"</expr></argument>, <argument><expr><name>h2_conf_set_tls_cooldown_secs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"seconds of idle time on TLS before shrinking writes"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2Push"</expr></argument>, <argument><expr><name>h2_conf_set_push</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"off to disable HTTP/2 server push"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"H2PushPriority"</expr></argument>, <argument><expr><name>h2_conf_add_push_priority</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"define priority of PUSHed resources per content type"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2PushDiarySize"</expr></argument>, <argument><expr><name>h2_conf_set_push_diary_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"size of push diary"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2CopyFiles"</expr></argument>, <argument><expr><name>h2_conf_set_copy_files</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_FILEINFO</name></expr></argument>, <argument><expr>"on to perform copy of file data"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE123</name><argument_list>(<argument><expr>"H2PushResource"</expr></argument>, <argument><expr><name>h2_conf_add_push_res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_FILEINFO</name></expr></argument>, <argument><expr>"add a resource to be pushed in this location/on this server."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"H2EarlyHints"</expr></argument>, <argument><expr><name>h2_conf_set_early_hints</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"on to enable interim status 103 responses"</expr></argument>)</argument_list></call></expr>,
<expr><name>AP_END_CMD</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>const</specifier> <name>h2_config</name> *</type><name>h2_config_rget</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_config</name> *</type><name>cfg</name> <init>= <expr>(<name>h2_config</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>http2_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>cfg</name>? <name>cfg</name> : <call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>h2_config</name> *</type><name>h2_config_get</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name> <init>= <expr><call><name>h2_ctx_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ctx</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>config</name></name></expr>)</condition><then> <block>{
<return>return <expr><name><name>ctx</name>-&gt;<name>config</name></name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>server</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>config</name></name> = <call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ctx</name>-&gt;<name>config</name></name></expr>;</return>
}</block></then></if></else></if>
}</block></then></if>
<return>return <expr><call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
