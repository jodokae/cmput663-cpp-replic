<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/modules/aaa/mod_authz_dbd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_dbd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_dbd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_authz_dbd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>authz_dbd_module</name></decl>;</decl_stmt>
<macro><name>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><argument_list>(<argument>authz_dbd</argument>, <argument>AUTHZ_DBD</argument>, <argument>int</argument>, <argument>client_login</argument>,
<argument>(request_rec *r, int code, const char *action)</argument>,
<argument>(r, code, action)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>redir_query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>redirect</name></decl>;</decl_stmt>
}</block></struct></type> <name>authz_dbd_cfg</name> ;</typedef>
<expr_stmt><expr>static <call><call><name>ap_dbd_t</name> *<argument_list>(<argument><expr>*<name>dbd_handle</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>request_rec</name>*</expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><call><name>void</name> <argument_list>(<argument><expr>*<name>dbd_prepare</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>server_rec</name>*</expr></argument>, <argument><expr>const <name>char</name>*</expr></argument>, <argument><expr>const <name>char</name>*</expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name>noerror</name> <init>= <expr>"???"</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>authz_dbd_cr_cfg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_dbd_cfg</name> *</type><name>ret</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authz_dbd_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>redirect</name></name> = -1</expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>authz_dbd_merge_cfg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>BASE</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ADD</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_dbd_cfg</name> *</type><name>base</name> <init>= <expr><name>BASE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_dbd_cfg</name> *</type><name>add</name> <init>= <expr><name>ADD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_dbd_cfg</name> *</type><name>ret</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authz_dbd_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>query</name></name> = (<name><name>add</name>-&gt;<name>query</name></name> == <name>NULL</name>) ? <name><name>base</name>-&gt;<name>query</name></name> : <name><name>add</name>-&gt;<name>query</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>redir_query</name></name> = (<name><name>add</name>-&gt;<name>redir_query</name></name> == <name>NULL</name>)
? <name><name>base</name>-&gt;<name>redir_query</name></name> : <name><name>add</name>-&gt;<name>redir_query</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>redirect</name></name> = (<name><name>add</name>-&gt;<name>redirect</name></name> == -1) ? <name><name>base</name>-&gt;<name>redirect</name></name> : <name><name>add</name>-&gt;<name>redirect</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>authz_dbd_prepare</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>query</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>label_num</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>dbd_prepare</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dbd_prepare</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dbd_prepare</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"You must load mod_dbd to enable AuthzDBD functions"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dbd_handle</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_acquire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>label</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"authz_dbd_%d"</expr></argument>, <argument><expr>++<name>label_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbd_prepare</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_set_string_slot</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>authz_dbd_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthzDBDLoginToReferer"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authz_dbd_cfg</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Whether to redirect to referer on successful login"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthzDBDQuery"</expr></argument>, <argument><expr><name>authz_dbd_prepare</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authz_dbd_cfg</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"SQL query for DBD Authz or login"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthzDBDRedirectQuery"</expr></argument>, <argument><expr><name>authz_dbd_prepare</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authz_dbd_cfg</name></expr></argument>, <argument><expr><name>redir_query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"SQL query to get per-user redirect URL after login"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authz_dbd_login</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>authz_dbd_cfg</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>newuri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nrows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>dbd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_prepared_t</name> *</type><name>query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_results_t</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_row_t</name> *</type><name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>query</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01642</expr></argument>)</argument_list></call>
"No query configured for %s!"</expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dbd</name> = <call><name>dbd_handle</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dbd</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02902</expr></argument>)</argument_list></call>
"No db handle available for %s! "
"Check your database access"</expr></argument>,
<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>query</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>prepared</name></name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>query</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>query</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01643</expr></argument>)</argument_list></call>
"Error retrieving Query for %s!"</expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbd_pvquery</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>&amp;<name>nrows</name></expr></argument>,
<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>nrows</name> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01644</expr></argument>)</argument_list></call>
"authz_dbd: %s of user %s updated %d rows"</expr></argument>,
<argument><expr><name>action</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>message</name> = <call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01645</expr></argument>)</argument_list></call>
"authz_dbd: query for %s failed; user %s [%s]"</expr></argument>,
<argument><expr><name>action</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>message</name>?<name>message</name>:<name>noerror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>redirect</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>newuri</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Referer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>newuri</name> &amp;&amp; <name><name>cfg</name>-&gt;<name>redir_query</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>query</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>prepared</name></name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>redir_query</name></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>query</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01646</expr></argument>)</argument_list></call>
"authz_dbd: no redirect query!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_dbd_pvselect</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>,
<argument><expr>&amp;<name>res</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then> <block>{
<for>for (<init><expr><name>rv</name> = <call><name>apr_dbd_get_row</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>rv</name> != -1</expr>;</condition>
<incr><expr><name>rv</name> = <call><name>apr_dbd_get_row</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><name>rv</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>message</name> = <call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01647</expr></argument>)</argument_list></call>
"authz_dbd in get_row; action=%s user=%s [%s]"</expr></argument>,
<argument><expr><name>action</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>message</name>?<name>message</name>:<name>noerror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>newuri</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>newuri</name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_dbd_get_entry</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></for>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>message</name> = <call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01648</expr></argument>)</argument_list></call>
"authz_dbd/redirect for %s of %s [%s]"</expr></argument>,
<argument><expr><name>action</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>message</name>?<name>message</name>:<name>noerror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>newuri</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_MOVED_TEMPORARILY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>newuri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>authz_dbd_run_client_login</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>OK</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authz_dbd_group_query</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>authz_dbd_cfg</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>groups</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>dbd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_prepared_t</name> *</type><name>query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_results_t</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_row_t</name> *</type><name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>query</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01649</expr></argument>)</argument_list></call>
"No query configured for dbd-group!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dbd</name> = <call><name>dbd_handle</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dbd</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02903</expr></argument>)</argument_list></call>
"No db handle available for dbd-query! "
"Check your database access"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>query</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>prepared</name></name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>query</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>query</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01650</expr></argument>)</argument_list></call>
"Error retrieving query for dbd-group!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbd_pvselect</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>,
<argument><expr><name>query</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == 0</expr>)</condition><then> <block>{
<for>for (<init><expr><name>rv</name> = <call><name>apr_dbd_get_row</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>rv</name> != -1</expr>;</condition>
<incr><expr><name>rv</name> = <call><name>apr_dbd_get_row</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><name>rv</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_dbd_get_entry</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>message</name> = <call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01651</expr></argument>)</argument_list></call>
"authz_dbd in get_row; group query for user=%s [%s]"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>message</name>?<name>message</name>:<name>noerror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
}</block></for>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>message</name> = <call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01652</expr></argument>)</argument_list></call>
"authz_dbd, in groups query for %s [%s]"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>message</name>?<name>message</name>:<name>noerror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>dbdgroup_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_args</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>groups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_expr_info_t</name> *</type><name>expr</name> <init>= <expr><name>parsed_require_args</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_dbd_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authz_dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTHZ_DENIED_NO_USER</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>groups</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>authz_dbd_group_query</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>require</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02590</expr></argument>)</argument_list></call>
"authz_dbd authorize: require dbd-group: Can't "
"evaluate require expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>t</name> = <name>require</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>t</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_white</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_array_str_contains</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
}</block></then></if>
}</block></while>
<return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>dbdlogin_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_args</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_dbd_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authz_dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTHZ_DENIED_NO_USER</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<call><name>authz_dbd_login</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr>"login"</expr></argument>)</argument_list></call> == <name>OK</name> ? <name>AUTHZ_GRANTED</name> : <name>AUTHZ_DENIED</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>dbdlogout_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_args</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_dbd_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authz_dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTHZ_DENIED_NO_USER</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<call><name>authz_dbd_login</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr>"logout"</expr></argument>)</argument_list></call> == <name>OK</name> ? <name>AUTHZ_GRANTED</name> : <name>AUTHZ_DENIED</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dbd_parse_config</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> **</type><name>parsed_require_line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>expr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>expr</name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>require_line</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
<argument><expr>&amp;<name>expr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expr_err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"Cannot parse expression in require line: "</expr></argument>,
<argument><expr><name>expr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>parsed_require_line</name> = <name>expr</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_dbdgroup_provider</name> <init>= <expr><block>{
<expr>&amp;<name>dbdgroup_check_authorization</name></expr>,
<expr>&amp;<name>dbd_parse_config</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_dbdlogin_provider</name> <init>= <expr><block>{
<expr>&amp;<name>dbdlogin_check_authorization</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_dbdlogout_provider</name> <init>= <expr><block>{
<expr>&amp;<name>dbdlogout_check_authorization</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>authz_dbd_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"dbd-group"</expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>authz_dbdgroup_provider</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"dbd-login"</expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>authz_dbdlogin_provider</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"dbd-logout"</expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>authz_dbdlogout_provider</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>authz_dbd</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>authz_dbd_cr_cfg</name></expr>,
<expr><name>authz_dbd_merge_cfg</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>authz_dbd_cmds</name></expr>,
<expr><name>authz_dbd_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
