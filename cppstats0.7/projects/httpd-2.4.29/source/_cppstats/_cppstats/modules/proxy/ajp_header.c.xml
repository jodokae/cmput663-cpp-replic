<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/proxy/ajp_header.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ajp_header.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ajp.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>proxy_ajp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>response_trans_headers</name><index>[]</index></name> <init>= <expr><block>{
<expr>"Content-Type"</expr>,
<expr>"Content-Language"</expr>,
<expr>"Content-Length"</expr>,
<expr>"Date"</expr>,
<expr>"Last-Modified"</expr>,
<expr>"Location"</expr>,
<expr>"Set-Cookie"</expr>,
<expr>"Set-Cookie2"</expr>,
<expr>"Servlet-Engine"</expr>,
<expr>"Status"</expr>,
<expr>"WWW-Authenticate"</expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>long_res_header_for_sc</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sc</name> = <name>sc</name> &amp; 0X00FF</expr>;</expr_stmt>
<if>if <condition>(<expr><name>sc</name> &lt;= <name>SC_RES_HEADERS_NUM</name> &amp;&amp; <name>sc</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <name><name>response_trans_headers</name><index>[<expr><name>sc</name> - 1</expr>]</index></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNKNOWN_METHOD</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sc_for_req_header</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>header</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>header_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name> <init>= <expr><name>header_name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &lt; 4 || <name>len</name> &gt; 15</expr>)</condition><then>
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return></then></if>
<while>while <condition>(<expr>*<name>p</name></expr>)</condition>
<expr_stmt><expr><name><name>header</name><index>[<expr><name>i</name>++</expr>]</index></name> = <call><name>apr_toupper</name><argument_list>(<argument><expr>*<name>p</name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
<expr_stmt><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = &amp;<name><name>header</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>header</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'A'</expr>:
<if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"CCEPT"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>header</name><index>[<expr>6</expr>]</index></name></expr>)</condition><then>
<return>return <expr><name>SC_ACCEPT</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name><name>header</name><index>[<expr>6</expr>]</index></name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name> += 6</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"CHARSET"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_ACCEPT_CHARSET</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"ENCODING"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_ACCEPT_ENCODING</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"LANGUAGE"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_ACCEPT_LANGUAGE</name></expr>;</return></then>
<else>else
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return></else></if></else></if></else></if>
}</block></then> <else>else
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"UTHORIZATION"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_AUTHORIZATION</name></expr>;</return></then>
<else>else
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return></else></if></else></if>
<break>break;</break>
</case><case>case <expr>'C'</expr>:
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"OOKIE2"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_COOKIE2</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"OOKIE"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_COOKIE</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"ONNECTION"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_CONNECTION</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"ONTENT-TYPE"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_CONTENT_TYPE</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"ONTENT-LENGTH"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_CONTENT_LENGTH</name></expr>;</return></then>
<else>else
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return></else></if></else></if></else></if></else></if></else></if>
<break>break;</break>
</case><case>case <expr>'H'</expr>:
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"OST"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_HOST</name></expr>;</return></then>
<else>else
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return></else></if>
<break>break;</break>
</case><case>case <expr>'P'</expr>:
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"RAGMA"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_PRAGMA</name></expr>;</return></then>
<else>else
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return></else></if>
<break>break;</break>
</case><case>case <expr>'R'</expr>:
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"EFERER"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_REFERER</name></expr>;</return></then>
<else>else
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return></else></if>
<break>break;</break>
</case><case>case <expr>'U'</expr>:
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"SER-AGENT"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SC_USER_AGENT</name></expr>;</return></then>
<else>else
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return></else></if>
<break>break;</break>
</case><default>default:
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sc_for_req_method_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SC_M_GET</name></expr>,
<expr><name>SC_M_PUT</name></expr>,
<expr><name>SC_M_POST</name></expr>,
<expr><name>SC_M_DELETE</name></expr>,
<expr>0</expr>,
<expr><name>SC_M_OPTIONS</name></expr>,
<expr><name>SC_M_TRACE</name></expr>,
<expr>0</expr>,
<expr><name>SC_M_PROPFIND</name></expr>,
<expr><name>SC_M_PROPPATCH</name></expr>,
<expr><name>SC_M_MKCOL</name></expr>,
<expr><name>SC_M_COPY</name></expr>,
<expr><name>SC_M_MOVE</name></expr>,
<expr><name>SC_M_LOCK</name></expr>,
<expr><name>SC_M_UNLOCK</name></expr>,
<expr><name>SC_M_VERSION_CONTROL</name></expr>,
<expr><name>SC_M_CHECKOUT</name></expr>,
<expr><name>SC_M_UNCHECKOUT</name></expr>,
<expr><name>SC_M_CHECKIN</name></expr>,
<expr><name>SC_M_UPDATE</name></expr>,
<expr><name>SC_M_LABEL</name></expr>,
<expr><name>SC_M_REPORT</name></expr>,
<expr><name>SC_M_MKWORKSPACE</name></expr>,
<expr><name>SC_M_MKACTIVITY</name></expr>,
<expr><name>SC_M_BASELINE_CONTROL</name></expr>,
<expr><name>SC_M_MERGE</name></expr>,
<expr>0</expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sc_for_req_method_by_id</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>method_id</name> <init>= <expr><name><name>r</name>-&gt;<name>method_number</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>method_id</name> &lt; 0 || <name>method_id</name> &gt; <name>M_INVALID</name></expr>)</condition><then> <block>{
<return>return <expr><name>UNKNOWN_METHOD</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>SC_M_HEAD</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name><name>sc_for_req_method_table</name><index>[<expr><name>method_id</name></expr>]</index></name> ?
<name><name>sc_for_req_method_table</name><index>[<expr><name>method_id</name></expr>]</index></name> : <name>UNKNOWN_METHOD</name></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ajp_marshal_into_msgb</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_uri_t</name> *</type><name>uri</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_headers</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_byte_t</name></type> <name>is_ssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>remote_host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>session_route</name></decl>, *<decl><type ref="prev"/><name>envvar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>arr</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name> <init>= <expr>(const <name>apr_table_entry_t</name> *)<name><name>arr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"Into ajp_marshal_into_msgb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>method</name> = <call><name>sc_for_req_method_by_id</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) == <name>UNKNOWN_METHOD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02437</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb - Sending unknown method %s as request attribute"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>method</name> = <name>SC_M_JK_STORED</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>is_ssl</name> = (<name>apr_byte_t</name>) <call><name>ap_proxy_conn_is_https</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>headers_in</name></name> &amp;&amp; <call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>t</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>num_headers</name> = <name><name>t</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>remote_host</name> = (<name>char</name> *)<call><name>ap_get_useragent_host</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REMOTE_HOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ajp_msg_reset</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>CMD_AJP13_FORWARD_REQUEST</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>) <name>method</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>useragent_ip</name></name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>remote_host</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>(<name>apr_uint16_t</name>)<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>is_ssl</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>(<name>apr_uint16_t</name>) <name>num_headers</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00968</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the message beginning"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr> ;</init> <condition><expr><name>i</name> &lt; <name>num_headers</name></expr> ;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>t</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name> <init>= <expr>(<name>apr_table_entry_t</name> *)<name><name>t</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>sc</name> = <call><name>sc_for_req_header</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call>) != <name>UNKNOWN_METHOD</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ajp_msg_append_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>(<name>apr_uint16_t</name>)<name>sc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00969</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the header name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00970</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the header name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00971</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the header value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ajp_marshal_into_msgb: Header[%d] [%s] = [%s]"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_REMOTE_USER</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00972</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the remote user"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_AUTH_TYPE</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00973</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the auth type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>uri</name>-&gt;<name>query</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_QUERY_STRING</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>query</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00974</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the query string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>session_route</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"session-route"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_JVM_ROUTE</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>session_route</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00975</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the jvm route"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>is_ssl</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>envvar</name> = <call><name>ap_proxy_ssl_val</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name>AJP13_SSL_CLIENT_CERT_INDICATOR</name></expr></argument>)</argument_list></call>)
&amp;&amp; <name><name>envvar</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_SSL_CERT</name></expr></argument>)</argument_list></call>
|| <call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>envvar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00976</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the SSL certificates"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>envvar</name> = <call><name>ap_proxy_ssl_val</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name>AJP13_SSL_CIPHER_INDICATOR</name></expr></argument>)</argument_list></call>)
&amp;&amp; <name><name>envvar</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_SSL_CIPHER</name></expr></argument>)</argument_list></call>
|| <call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>envvar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00977</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the SSL ciphers"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>envvar</name> = <call><name>ap_proxy_ssl_val</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name>AJP13_SSL_SESSION_INDICATOR</name></expr></argument>)</argument_list></call>)
&amp;&amp; <name><name>envvar</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_SSL_SESSION</name></expr></argument>)</argument_list></call>
|| <call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>envvar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00978</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the SSL session"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>envvar</name> = <call><name>ap_proxy_ssl_val</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name>AJP13_SSL_KEY_SIZE_INDICATOR</name></expr></argument>)</argument_list></call>)
&amp;&amp; <name><name>envvar</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_SSL_KEY_SIZE</name></expr></argument>)</argument_list></call>
|| <call><name>ajp_msg_append_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>short</name>) <call><name>atoi</name><argument_list>(<argument><expr><name>envvar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00979</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the SSL key size"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>method</name> == <name>SC_M_JK_STORED</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_STORED_METHOD</name></expr></argument>)</argument_list></call>
|| <call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02438</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the method '%s' as request attribute"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>is_ssl</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>envvar</name> = <call><name>ap_proxy_ssl_val</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name>AJP13_SSL_PROTOCOL_INDICATOR</name></expr></argument>)</argument_list></call>)
&amp;&amp; <name><name>envvar</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><name>SC_A_SSL_PROTOCOL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_REQ_ATTRIBUTE</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>envvar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02830</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending attribute %s=%s"</expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>envvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><name>SC_A_REQ_REMOTE_PORT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>val</name> <init>= <expr><call><name>apr_itoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>useragent_addr</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_REQ_ATTRIBUTE</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00980</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending attribute %s=%s"</expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><name>SC_A_REQ_LOCAL_ADDR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>val</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_ip</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_REQ_ATTRIBUTE</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02646</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending attribute %s=%s"</expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; (<name>apr_uint32_t</name>)<name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"AJP_"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_REQ_ATTRIBUTE</name></expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name> + 4</expr></argument>)</argument_list></call> ||
<call><name>ajp_msg_append_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00981</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending attribute %s=%s"</expr></argument>,
<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>SC_A_ARE_DONE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00982</expr></argument>)</argument_list></call>
"ajp_marshal_into_msgb: "
"Error appending the message end"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ajp_marshal_into_msgb: Done"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>addit_dammit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>v</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ajp_unmarshal_response</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>proxy_dir_conf</name> *</type><name>dconf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>num_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_get_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00983</expr></argument>)</argument_list></call>
"ajp_unmarshal_response: Null status"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_get_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<expr_stmt><expr><name>ptr</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_from_ascii</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%d %s"</expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ajp_unmarshal_response: status = %d"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_get_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>num_headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>save_table</name></decl>;</decl_stmt>
<expr_stmt><expr><name>save_table</name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>num_headers</name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>addit_dammit</name></expr></argument>, <argument><expr><name>save_table</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr>"Set-Cookie"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <name>save_table</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_headers</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ajp_unmarshal_response: Number of headers is = %d"</expr></argument>,
<argument><expr><name>num_headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; (<name>int</name>)<name>num_headers</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>stringname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_peek_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>name</name> &amp; 0XFF00) == 0XA000</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ajp_msg_get_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stringname</name> = <call><name>long_res_header_for_sc</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stringname</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00984</expr></argument>)</argument_list></call>
"ajp_unmarshal_response: "
"No such sc (%08x)"</expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EBAD_HEADER</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>name</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_get_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>stringname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00985</expr></argument>)</argument_list></call>
"ajp_unmarshal_response: "
"Null header name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_xlate_proto_from_ascii</name><argument_list>(<argument><expr><name>stringname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>stringname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_get_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00986</expr></argument>)</argument_list></call>
"ajp_unmarshal_response: "
"Null header value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>stringname</name></expr></argument>, <argument><expr>"Set-Cookie"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = <call><name>ap_proxy_cookie_reverse_map</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>stringname</name></expr></argument>, <argument><expr>"Location"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>stringname</name></expr></argument>, <argument><expr>"Content-Location"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>stringname</name></expr></argument>, <argument><expr>"URI"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>stringname</name></expr></argument>, <argument><expr>"Destination"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = <call><name>ap_proxy_location_reverse_map</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>ap_xlate_proto_from_ascii</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ajp_unmarshal_response: Header[%d] [%s] = [%s]"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>stringname</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>stringname</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>stringname</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ajp_unmarshal_response: ap_set_content_type to '%s'"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ajp_send_header</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>buffsize</name></decl></param>,
<param><decl><type><name>apr_uri_t</name> *</type><name>uri</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr>&amp;<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00987</expr></argument>)</argument_list></call>
"ajp_send_header: ajp_msg_create failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_marshal_into_msgb</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00988</expr></argument>)</argument_list></call>
"ajp_send_header: ajp_marshal_into_msgb failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_ilink_send</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ajp_msg_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_send_header: ajp_ilink_send packet dump"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00989</expr></argument>)</argument_list></call>
"ajp_send_header: ajp_ilink_send failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ajp_read_header</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>buffsize</name></decl></param>,
<param><decl><type><name>ajp_msg_t</name> **</type><name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_byte_t</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>msg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_reuse</name><argument_list>(<argument><expr>*<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00990</expr></argument>)</argument_list></call>
"ajp_read_header: ajp_msg_reuse failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00991</expr></argument>)</argument_list></call>
"ajp_read_header: ajp_msg_create failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>ajp_msg_reset</name><argument_list>(<argument><expr>*<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_ilink_receive</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr>*<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00992</expr></argument>)</argument_list></call>
"ajp_read_header: ajp_ilink_receive failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ajp_msg_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>*<name>msg</name></expr></argument>, <argument><expr>"ajp_read_header: ajp_ilink_receive packet dump"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_peek_uint8</name><argument_list>(<argument><expr>*<name>msg</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00993</expr></argument>)</argument_list></call>
"ajp_read_header: ajp_msg_peek_uint8 failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ajp_read_header: ajp_ilink_received %s (0x%02x)"</expr></argument>,
<argument><expr><call><name>ajp_type_str</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>ajp_parse_type</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_byte_t</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ajp_msg_peek_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE6</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ajp_parse_type: got %s (0x%02x)"</expr></argument>,
<argument><expr><call><name>ajp_type_str</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>int</name>) <name>result</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ajp_parse_header</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_byte_t</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_get_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00994</expr></argument>)</argument_list></call>
"ajp_parse_headers: ajp_msg_get_byte failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> != <name>CMD_AJP13_SEND_HEADERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00995</expr></argument>)</argument_list></call>
"ajp_parse_headers: wrong type %s (0x%02x) expecting %s (0x%02x)"</expr></argument>,
<argument><expr><call><name>ajp_type_str</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>,
<argument><expr><call><name>ajp_type_str</name><argument_list>(<argument><expr><name>CMD_AJP13_SEND_HEADERS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CMD_AJP13_SEND_HEADERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EBAD_HEADER</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>ajp_unmarshal_response</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ajp_parse_data</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>,
<param><decl><type><name>apr_uint16_t</name> *</type><name>len</name></decl></param>, <param><decl><type><name>char</name> **</type><name>ptr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_byte_t</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>expected_len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_get_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00996</expr></argument>)</argument_list></call>
"ajp_parse_data: ajp_msg_get_byte failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> != <name>CMD_AJP13_SEND_BODY_CHUNK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00997</expr></argument>)</argument_list></call>
"ajp_parse_data: wrong type %s (0x%02x) expecting %s (0x%02x)"</expr></argument>,
<argument><expr><call><name>ajp_type_str</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>,
<argument><expr><call><name>ajp_type_str</name><argument_list>(<argument><expr><name>CMD_AJP13_SEND_BODY_CHUNK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CMD_AJP13_SEND_BODY_CHUNK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EBAD_HEADER</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_get_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>expected_len</name> = <name><name>msg</name>-&gt;<name>len</name></name> - (<name>AJP_HEADER_LEN</name> + <name>AJP_HEADER_SZ_LEN</name> + 1 + 1)</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>len</name> != <name>expected_len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00998</expr></argument>)</argument_list></call>
"ajp_parse_data: Wrong chunk length. Length of chunk is %i,"
" expected length is %i."</expr></argument>, <argument><expr>*<name>len</name></expr></argument>, <argument><expr><name>expected_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EBAD_HEADER</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>ptr</name> = (<name>char</name> *)&amp;(<name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name><name>msg</name>-&gt;<name>pos</name></name></expr>]</index></name>)</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ajp_parse_reuse</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>,
<param><decl><type><name>apr_byte_t</name> *</type><name>reuse</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_byte_t</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_get_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00999</expr></argument>)</argument_list></call>
"ajp_parse_reuse: ajp_msg_get_byte failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> != <name>CMD_AJP13_END_RESPONSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01000</expr></argument>)</argument_list></call>
"ajp_parse_reuse: wrong type %s (0x%02x) expecting %s (0x%02x)"</expr></argument>,
<argument><expr><call><name>ajp_type_str</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>,
<argument><expr><call><name>ajp_type_str</name><argument_list>(<argument><expr><name>CMD_AJP13_END_RESPONSE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CMD_AJP13_END_RESPONSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EBAD_HEADER</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>ajp_msg_get_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>reuse</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ajp_alloc_data_msg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> **</type><name>ptr</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>,
<param><decl><type><name>ajp_msg_t</name> **</type><name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>ajp_msg_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rc</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ajp_msg_reset</name><argument_list>(<argument><expr>*<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ptr</name> = (<name>char</name> *)&amp;(<name>(*<name>msg</name>)-&gt;<name>buf</name></name><index>[<expr>6</expr>]</index>)</expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> = *<name>len</name> - 6</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ajp_send_data_msg</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>,
<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr>4</expr>]</index></name> = <call>(<name>apr_byte_t</name>)<argument_list>(<argument><expr>(<name>len</name> &gt;&gt; 8) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr>5</expr>]</index></name> = <call>(<name>apr_byte_t</name>)<argument_list>(<argument><expr><name>len</name> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name>-&gt;<name>len</name></name> += <name>len</name> + 2</expr>;</expr_stmt>
<return>return <expr><call><name>ajp_ilink_send</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
