<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/proxy/mod_proxy_balancer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_watchdog.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>balancer_mutex_type</name> <init>= <expr>"proxy-balancer-shm"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_provider_t</name> *</type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>proxy_balancer_module</name></decl>;</decl_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>set_worker_hc_param</name></expr></argument>)</argument_list></call> *<name>set_worker_hc_param_f</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><call><name>int</name> <argument_list>(<argument><expr>*<name>ap_proxy_retry_worker_fn</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr>const <name>char</name> *<name>proxy_function</name></expr></argument>,
<argument><expr><name>proxy_worker</name> *<name>worker</name></expr></argument>, <argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>hc_show_exprs</name></expr></argument>)</argument_list></call> *<name>hc_show_exprs_f</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>hc_select_exprs</name></expr></argument>)</argument_list></call> *<name>hc_select_exprs_f</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>hc_valid_expr</name></expr></argument>)</argument_list></call> *<name>hc_valid_expr_f</name> = <name>NULL</name></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>balancer_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_mutex_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>balancer_mutex_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_LOCK_DEFAULT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>set_worker_hc_param_f</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>set_worker_hc_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hc_show_exprs_f</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>hc_show_exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hc_select_exprs_f</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>hc_select_exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hc_valid_expr_f</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>hc_valid_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
extern void proxy_update_members(proxy_balancer **balancer, request_rec *r,
proxy_server_conf *conf);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_balancer_canon</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>search</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"balancer:"</expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> += 9</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"canonicalising URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>ap_proxy_canon_netloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01157</expr></argument>)</argument_list></call>
"error parsing URL %s: %s"</expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-nocanon"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> = <name>url</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>path</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc_path</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>search</name> = <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>path</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy:" <name>BALANCER_PREFIX</name></expr></argument>, <argument><expr><name>host</name></expr></argument>,
<argument><expr>"/"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>(<name>search</name>) ? "?" : ""</expr></argument>, <argument><expr>(<name>search</name>) ? <name>search</name> : ""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>path_info</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>init_balancer_members</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>workers</name></decl>;</decl_stmt>
<expr_stmt><expr><name>workers</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>worker_is_initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr>*<name>workers</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01158</expr></argument>)</argument_list></call>
"Looking at %s -&gt; %s initialized?"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>worker_is_initialized</name> = <call><name>PROXY_WORKER_IS_INITIALIZED</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>worker_is_initialized</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_initialize_worker</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>++<name>workers</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>max_attempts_set</name></name> &amp;&amp; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name> &gt; 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>max_attempts</name></name> = <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>max_attempts_set</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>get_path_param</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>int</name></type> <name>scolon_sep</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>pathdelims</name> <init>= <expr>"?&amp;"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>scolon_sep</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pathdelims</name> = ";?&amp;"</expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>path</name> = <call><name>strstr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>path</name></expr>;</condition> <incr><expr><name>path</name> = <call><name>strstr</name><argument_list>(<argument><expr><name>path</name> + 1</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><name>path</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>path</name> == '='</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>path</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>path</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><name>path</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pathdelims</name></expr></argument>, <argument><expr>&amp;<name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>path</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>get_cookie_param</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cookies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start_cookie</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>cookies</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Cookie"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<for>for (<init><expr><name>start_cookie</name> = <call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>cookies</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>start_cookie</name></expr>;</condition>
<incr><expr><name>start_cookie</name> = <call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>start_cookie</name> + 1</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><name>start_cookie</name> == <name>cookies</name> ||
<name><name>start_cookie</name><index>[<expr>-1</expr>]</index></name> == ';' ||
<name><name>start_cookie</name><index>[<expr>-1</expr>]</index></name> == ',' ||
<call><name>isspace</name><argument_list>(<argument><expr><name><name>start_cookie</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>start_cookie</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr>*<name>start_cookie</name> &amp;&amp; <call><name>isspace</name><argument_list>(<argument><expr>*<name>start_cookie</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr>++<name>start_cookie</name></expr>;</expr_stmt></while>
<if>if <condition>(<expr>*<name>start_cookie</name>++ == '=' &amp;&amp; *<name>start_cookie</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>end_cookie</name></decl>, *<decl><type ref="prev"/><name>cookie</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cookie</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>start_cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>end_cookie</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr>';'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>end_cookie</name> = '\0'</expr>;</expr_stmt></then></if>
<if>if<condition>(<expr>(<name>end_cookie</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>end_cookie</name> = '\0'</expr>;</expr_stmt></then></if>
<return>return <expr><name>cookie</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></for>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>proxy_worker</name> *</type><name>find_route_worker</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>route</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>int</name></type> <name>recursion</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>checking_standby</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>checked_standby</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>workers</name></decl>;</decl_stmt>
<expr_stmt><expr><name>checking_standby</name> = <name>checked_standby</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>!<name>checked_standby</name></expr>)</condition> <block>{
<expr_stmt><expr><name>workers</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>workers</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr>*<name>workers</name></expr></init></decl>;</decl_stmt>
<if>if <condition>( <expr>(<name>checking_standby</name> ? !<call><name>PROXY_WORKER_IS_STANDBY</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call> : <call><name>PROXY_WORKER_IS_STANDBY</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call>)</expr> )</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr>*(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>route</name></name>) &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>route</name></name></expr></argument>, <argument><expr><name>route</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>worker</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_proxy_retry_worker_fn</name><argument_list>(<argument><expr>"BALANCER"</expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>worker</name></expr>;</return>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(*<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>redirect</name></name>)
&amp;&amp; (<name>recursion</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>rworker</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rworker</name> = <call><name>find_route_worker</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>redirect</name></name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>recursion</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rworker</name> &amp;&amp; !<call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr><name>rworker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_retry_worker_fn</name><argument_list>(<argument><expr>"BALANCER"</expr></argument>, <argument><expr><name>rworker</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rworker</name> &amp;&amp; <call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr><name>rworker</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>rworker</name></expr>;</return></then></if>
}</block></then></if>
}</block></else></if>
}</block></else></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>checked_standby</name> = <name>checking_standby</name>++</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>proxy_worker</name> *</type><name>find_session_route</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>route</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>sticky_used</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!*<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr>*<name>route</name> = <call><name>get_path_param</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>*<name>url</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>scolonsep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>route</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01159</expr></argument>)</argument_list></call>
"Found value %s for stickysession %s"</expr></argument>,
<argument><expr>*<name>route</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>sticky_used</name> = <name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>route</name> = <call><name>get_cookie_param</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>route</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>sticky_used</name> = <name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01160</expr></argument>)</argument_list></call>
"Found value %s for stickysession %s"</expr></argument>,
<argument><expr>*<name>route</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr>(*<name>route</name>) &amp;&amp; (<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_separator</name></name> != 0) &amp;&amp; ((*<name>route</name> = <call><name>strchr</name><argument_list>(<argument><expr>*<name>route</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_separator</name></name></expr></argument>)</argument_list></call>) != <name>NULL</name> )</expr>)</condition><then>
<expr_stmt><expr>(*<name>route</name>)++</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(*<name>route</name>) &amp;&amp; (**<name>route</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01161</expr></argument>)</argument_list></call> "Found route %s"</expr></argument>, <argument><expr>*<name>route</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>worker</name> = <call><name>find_route_worker</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>, <argument><expr>*<name>route</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>worker</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr>*<name>route</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>route</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"BALANCER_ROUTE_CHANGED"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01162</expr></argument>)</argument_list></call>
"Route changed from %s to %s"</expr></argument>,
<argument><expr>*<name>route</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>route</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>worker</name></expr>;</return>
}</block></then> <else>else
<return>return <expr><name>NULL</name></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>proxy_worker</name> *</type><name>find_best_worker</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>candidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_THREAD_LOCK</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01163</expr></argument>)</argument_list></call>
"%s: Lock failed for find_best_worker()"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>candidate</name> = <call>(*<name><name>balancer</name>-&gt;<name>lbmethod</name>-&gt;<name>finder</name></name>)<argument_list>(<argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>candidate</name></expr>)</condition><then>
<expr_stmt><expr><name><name>candidate</name>-&gt;<name>s</name>-&gt;<name>elected</name></name>++</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_THREAD_UNLOCK</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01164</expr></argument>)</argument_list></call>
"%s: Unlock failed for find_best_worker()"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>candidate</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name> <init>= <expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>step</name></decl>, <decl><type ref="prev"/><name>tval</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> = <name>timeout</name> / 100</expr>;</expr_stmt>
<while>while <condition>(<expr><name>tval</name> &lt; <name>timeout</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>candidate</name> = <call><name>find_best_worker</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>tval</name> += <name>step</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name> = <name>timeout</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>candidate</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rewrite_url</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr>*<name>url</name></expr></argument>, <argument><expr>"://"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>scheme</name></expr>)</condition><then>
<expr_stmt><expr><name>path</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>scheme</name> + 3</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>worker</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"missing worker. URI cannot be parsed: "</expr></argument>, <argument><expr>*<name>url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>url</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>force_recovery</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>worker</name></decl>;</decl_stmt>
<expr_stmt><expr><name>worker</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>worker</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!(<name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>status</name></name></name> &amp; <name>PROXY_WORKER_IN_ERROR</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ok</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_proxy_retry_worker_fn</name><argument_list>(<argument><expr>"BALANCER"</expr></argument>, <argument><expr>*<name>worker</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>status</name></name></name> &amp; <name>PROXY_WORKER_IN_ERROR</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ok</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></else></if>
}</block></for>
<if>if <condition>(<expr>!<name>ok</name> &amp;&amp; <name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>forcerecovery</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>worker</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>worker</name>++</expr></incr>) <block>{
<expr_stmt><expr>++<name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>retries</name></name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>status</name></name></name> &amp;= ~<name>PROXY_WORKER_IN_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01165</expr></argument>)</argument_list></call>
"%s: Forcing recovery for worker (%s)"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>hostname</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>decrement_busy_count</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>worker_</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr><name>worker_</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>busy</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>busy</name></name>--</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_balancer_pre_request</name><parameter_list>(<param><decl><type><name>proxy_worker</name> **</type><name>worker</name></decl></param>,
<param><decl><type><name>proxy_balancer</name> **</type><name>balancer</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>char</name> **</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>runtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>route</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sticky</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>worker</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>balancer</name> &amp;&amp;
!(*<name>balancer</name> = <call><name>ap_proxy_get_balancer</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr>*<name>url</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_THREAD_LOCK</name><argument_list>(<argument><expr>*<name>balancer</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01166</expr></argument>)</argument_list></call>
"%s: Lock failed for pre_request"</expr></argument>, <argument><expr><name>(*<name>balancer</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>force_recovery</name><argument_list>(<argument><expr>*<name>balancer</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_sync_balancer</name><argument_list>(<argument><expr>*<name>balancer</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>runtime</name> = <call><name>find_session_route</name><argument_list>(<argument><expr>*<name>balancer</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>route</name></expr></argument>, <argument><expr>&amp;<name>sticky</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>runtime</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>(*<name>balancer</name>)-&gt;<name>lbmethod</name></name> &amp;&amp; <name>(*<name>balancer</name>)-&gt;<name><name>lbmethod</name>-&gt;<name>updatelbstatus</name></name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>(*<name>balancer</name>)-&gt;<name><name>lbmethod</name>-&gt;<name>updatelbstatus</name></name></name><argument_list>(<argument><expr>*<name>balancer</name></expr></argument>, <argument><expr><name>runtime</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>total_factor</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>workers</name></decl>;</decl_stmt>
<expr_stmt><expr><name>workers</name> = <call>(<name>proxy_worker</name> **)<argument_list>(<argument><expr>*<name>balancer</name></expr></argument>)</argument_list></call>-&gt;<name><name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>(*<name>balancer</name>)-&gt;<name><name>workers</name>-&gt;<name>nelts</name></name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr>*<name>workers</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>workers</name>)-&gt;<name><name>s</name>-&gt;<name>lbstatus</name></name></name> += <name>(*<name>workers</name>)-&gt;<name><name>s</name>-&gt;<name>lbfactor</name></name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_factor</name> += <name>(*<name>workers</name>)-&gt;<name><name>s</name>-&gt;<name>lbfactor</name></name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>workers</name>++</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>runtime</name>-&gt;<name>s</name>-&gt;<name>lbstatus</name></name> -= <name>total_factor</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>runtime</name>-&gt;<name>s</name>-&gt;<name>elected</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>worker</name> = <name>runtime</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>route</name> &amp;&amp; <name>(*<name>balancer</name>)-&gt;<name><name>s</name>-&gt;<name>sticky_force</name></name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>member_of</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>workers</name></decl>;</decl_stmt>
<expr_stmt><expr><name>workers</name> = <call>(<name>proxy_worker</name> **)<argument_list>(<argument><expr>*<name>balancer</name></expr></argument>)</argument_list></call>-&gt;<name><name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>(*<name>balancer</name>)-&gt;<name><name>workers</name>-&gt;<name>nelts</name></name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>*(<name>(*<name>workers</name>)-&gt;<name><name>s</name>-&gt;<name>route</name></name></name>) &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>(*<name>workers</name>)-&gt;<name><name>s</name>-&gt;<name>route</name></name></name></expr></argument>, <argument><expr><name>route</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>member_of</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>workers</name>++</expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>member_of</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01167</expr></argument>)</argument_list></call>
"%s: All workers are in error state for route (%s)"</expr></argument>,
<argument><expr><name>(*<name>balancer</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>, <argument><expr><name>route</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_THREAD_UNLOCK</name><argument_list>(<argument><expr>*<name>balancer</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01168</expr></argument>)</argument_list></call>
"%s: Unlock failed for pre_request"</expr></argument>,
<argument><expr><name>(*<name>balancer</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
}</block></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_THREAD_UNLOCK</name><argument_list>(<argument><expr>*<name>balancer</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01169</expr></argument>)</argument_list></call>
"%s: Unlock failed for pre_request"</expr></argument>,
<argument><expr><name>(*<name>balancer</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!*<name>worker</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>runtime</name> = <call><name>find_best_worker</name><argument_list>(<argument><expr>*<name>balancer</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>runtime</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>(*<name>balancer</name>)-&gt;<name><name>workers</name>-&gt;<name>nelts</name></name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01170</expr></argument>)</argument_list></call>
"%s: All workers are in error state"</expr></argument>,
<argument><expr><name>(*<name>balancer</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01171</expr></argument>)</argument_list></call>
"%s: No workers in balancer"</expr></argument>,
<argument><expr><name>(*<name>balancer</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>(*<name>balancer</name>)-&gt;<name><name>s</name>-&gt;<name>sticky</name></name></name> &amp;&amp; <name>runtime</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"BALANCER_ROUTE_CHANGED"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>worker</name> = <name>runtime</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>busy</name></name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>*<name>worker</name></expr></argument>, <argument><expr><name>decrement_busy_count</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>"BALANCER_NAME"</expr></argument>, <argument><expr><name>(*<name>balancer</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>"BALANCER_WORKER_NAME"</expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>"BALANCER_WORKER_ROUTE"</expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>route</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>access_status</name> = <call><name>rewrite_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>*<name>worker</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>route</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"session-sticky"</expr></argument>, <argument><expr><name>sticky</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"session-route"</expr></argument>, <argument><expr><name>route</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>"BALANCER_SESSION_STICKY"</expr></argument>, <argument><expr><name>sticky</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>"BALANCER_SESSION_ROUTE"</expr></argument>, <argument><expr><name>route</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01172</expr></argument>)</argument_list></call>
"%s: worker (%s) rewritten to %s"</expr></argument>,
<argument><expr><name>(*<name>balancer</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>, <argument><expr>*<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>access_status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_balancer_post_request</name><parameter_list>(<param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_THREAD_LOCK</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01173</expr></argument>)</argument_list></call>
"%s: Lock failed for post_request"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>errstatuses</name></name></expr></argument>)</argument_list></call>
&amp;&amp; !(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> &amp; <name>PROXY_WORKER_IGNORE_ERRORS</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>balancer</name>-&gt;<name>errstatuses</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr>((<name>int</name> *)<name><name>balancer</name>-&gt;<name>errstatuses</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>val</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01174</expr></argument>)</argument_list></call>
"%s: Forcing worker (%s) into error state "
"due to status code %d matching 'failonstatus' "
"balancer parameter"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> |= <name>PROXY_WORKER_IN_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>error_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name><name>balancer</name>-&gt;<name>failontimeout</name></name>
&amp;&amp; !(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> &amp; <name>PROXY_WORKER_IGNORE_ERRORS</name>)
&amp;&amp; (<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy_timedout"</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02460</expr></argument>)</argument_list></call>
"%s: Forcing worker (%s) into error state "
"due to timeout and 'failontimeout' parameter being set"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> |= <name>PROXY_WORKER_IN_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>error_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_THREAD_UNLOCK</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01175</expr></argument>)</argument_list></call>
"%s: Unlock failed for post_request"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01176</expr></argument>)</argument_list></call>
"proxy_balancer_post_request for (%s)"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>recalc_factors</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>workers</name></decl>;</decl_stmt>
<expr_stmt><expr><name>workers</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>workers</name>)-&gt;<name><name>s</name>-&gt;<name>lbstatus</name></name></name> = <name>(*<name>workers</name>)-&gt;<name><name>s</name>-&gt;<name>lbfactor</name></name></name> = 100</expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>workers</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name><name>s</name>-&gt;<name>lbstatus</name></name> = <name><name>workers</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name><name>s</name>-&gt;<name>lbfactor</name></name></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>lock_remove</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name> <init>= <expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name> <init>= <expr>(<name>proxy_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>balancer</name> = (<name>proxy_balancer</name> *)<name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>balancer</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>balancer</name>-&gt;<name>gmutex</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_global_mutex_destroy</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>gmutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>gmutex</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return<expr>(0)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>balancer_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_instance_t</name> *</type><name>new</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>tstamp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_MAIN_STATE</name></expr></argument>)</argument_list></call> == <name>AP_SQ_MS_CREATE_PRE_CONFIG</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>ap_proxy_retry_worker_fn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_proxy_retry_worker_fn</name> =
<call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_proxy_retry_worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ap_proxy_retry_worker_fn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02230</expr></argument>)</argument_list></call>
"mod_proxy must be loaded for mod_proxy_balancer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>storage</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AP_SLOTMEM_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"shm"</expr></argument>,
<argument><expr><name>AP_SLOTMEM_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>storage</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01177</expr></argument>)</argument_list></call>
"Failed to lookup provider 'shm' for '%s': is "
"mod_slotmem_shm loaded??"</expr></argument>,
<argument><expr><name>AP_SLOTMEM_PROVIDER_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>tstamp</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_type_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name> <init>= <expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>proxy_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>"%s.%s.%d.%s.%s.%u.%s"</expr></argument>,
<argument><expr>(<name><name>s</name>-&gt;<name>server_scheme</name></name> ? <name><name>s</name>-&gt;<name>server_scheme</name></name> : "????")</expr></argument>,
<argument><expr>(<name><name>s</name>-&gt;<name>server_hostname</name></name> ? <name><name>s</name>-&gt;<name>server_hostname</name></name> : "???")</expr></argument>,
<argument><expr>(<name>int</name>)<name><name>s</name>-&gt;<name>port</name></name></expr></argument>,
<argument><expr>(<name><name>s</name>-&gt;<name>server_admin</name></name> ? <name><name>s</name>-&gt;<name>server_admin</name></name> : "??")</expr></argument>,
<argument><expr>(<name><name>s</name>-&gt;<name>defn_name</name></name> ? <name><name>s</name>-&gt;<name>defn_name</name></name> : "?")</expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>defn_line_number</name></name></expr></argument>,
<argument><expr>(<name><name>s</name>-&gt;<name>error_fname</name></name> ? <name><name>s</name>-&gt;<name>error_fname</name></name> : <name>DEFAULT_ERRORLOG</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>id</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>"p%x"</expr></argument>,
<argument><expr><call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>bslot</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>bal_persist</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>type</name> = <name>AP_SLOTMEM_TYPE_PERSIST</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>type</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>max_balancers</name></name> = <name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name> + <name><name>conf</name>-&gt;<name>bgrowth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01178</expr></argument>)</argument_list></call> "Doing balancers create: %d, %d (%d)"</expr></argument>,
<argument><expr>(<name>int</name>)<name>ALIGNED_PROXY_BALANCER_SHARED_SIZE</name></expr></argument>,
<argument><expr>(<name>int</name>)<name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>max_balancers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name><name>storage</name>-&gt;<name>create</name></name><argument_list>(<argument><expr>&amp;<name>new</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>id</name></name></expr></argument>,
<argument><expr><name>ALIGNED_PROXY_BALANCER_SHARED_SIZE</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>max_balancers</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01179</expr></argument>)</argument_list></call> "balancer slotmem_create failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>bslot</name></name> = <name>new</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>storage</name></name> = <name>storage</name></expr>;</expr_stmt>
<expr_stmt><expr><name>balancer</name> = (<name>proxy_balancer</name> *)<name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>balancer</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>workers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer_shared</name> *</type><name>bshm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_pstr2_alnum</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name> + <sizeof>sizeof<argument_list>(<argument><expr><name>BALANCER_PREFIX</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr>&amp;<name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sname</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>"_"</expr></argument>, <argument><expr><name>sname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sname</name></name></expr></argument>, <argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>max_workers</name></name> = <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name> + <name><name>balancer</name>-&gt;<name>growth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_global_mutex_create</name><argument_list>(<argument><expr>&amp;(<name><name>balancer</name>-&gt;<name>gmutex</name></name>)</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>balancer_mutex_type</name></expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sname</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || !<name><name>balancer</name>-&gt;<name>gmutex</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01180</expr></argument>)</argument_list></call>
"mutex creation of %s : %s failed"</expr></argument>, <argument><expr><name>balancer_mutex_type</name></expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>s</name></expr></argument>, <argument><expr><name>lock_remove</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bshm</name> = <call><name>ap_proxy_find_balancershm</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>bslot</name></name></expr></argument>, <argument><expr><name>balancer</name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bshm</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name><name>storage</name>-&gt;<name>fgrab</name></name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>bslot</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02408</expr></argument>)</argument_list></call> "balancer slotmem_fgrab failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name><name>storage</name>-&gt;<name>grab</name></name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>bslot</name></name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01181</expr></argument>)</argument_list></call> "balancer slotmem_grab failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name><name>storage</name>-&gt;<name>dptr</name></name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>bslot</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>bshm</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01182</expr></argument>)</argument_list></call> "balancer slotmem_dptr failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_proxy_share_balancer</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>bshm</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01183</expr></argument>)</argument_list></call> "Cannot share balancer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01184</expr></argument>)</argument_list></call> "Doing workers create: %s (%s), %d, %d [%u]"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sname</name></name></expr></argument>,
<argument><expr>(<name>int</name>)<name>ALIGNED_PROXY_WORKER_SHARED_SIZE</name></expr></argument>,
<argument><expr>(<name>int</name>)<name><name>balancer</name>-&gt;<name>max_workers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name><name>storage</name>-&gt;<name>create</name></name><argument_list>(<argument><expr>&amp;<name>new</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sname</name></name></expr></argument>,
<argument><expr><name>ALIGNED_PROXY_WORKER_SHARED_SIZE</name></expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>max_workers</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01185</expr></argument>)</argument_list></call> "worker slotmem_create failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>wslot</name></name> = <name>new</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>storage</name></name> = <name>storage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>wupdated</name></name> = <name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>wupdated</name></name> = <name>tstamp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>workers</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr>, <expr><name>workers</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>proxy_worker_shared</name> *</type><name>shm</name></decl>;</decl_stmt>
<expr_stmt><expr><name>worker</name> = *<name>workers</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shm</name> = <call><name>ap_proxy_find_workershm</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>wslot</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>shm</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name><name>storage</name>-&gt;<name>fgrab</name></name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>wslot</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02409</expr></argument>)</argument_list></call> "worker slotmem_fgrab failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name><name>storage</name>-&gt;<name>grab</name></name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>wslot</name></name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01186</expr></argument>)</argument_list></call> "worker slotmem_grab failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name><name>storage</name>-&gt;<name>dptr</name></name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>wslot</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>shm</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01187</expr></argument>)</argument_list></call> "worker slotmem_dptr failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_proxy_share_worker</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>shm</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01188</expr></argument>)</argument_list></call> "Cannot share worker"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>updated</name></name> = <name>tstamp</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>bal_persist</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>wupdated</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_sync_balancer</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>create_radio</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;&lt;label for='"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"1'&gt;On&lt;/label&gt; &lt;input name='"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"' id='"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"1' value='1' type=radio"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>flag</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" checked"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&gt; &lt;br/&gt; &lt;label for='"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"0'&gt;Off&lt;/label&gt; &lt;input name='"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"' id='"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"0' value='0' type=radio"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>flag</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" checked"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&gt;&lt;/td&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>push2table</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>params</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>allowed</name><index>[]</index></name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tok</name></decl>, *<decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>input</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>args</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"&amp;"</expr></argument>, <argument><expr>&amp;<name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>key</name></expr>)</condition> <block>{
<expr_stmt><expr><name>val</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>val</name>++ = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>val</name> = ""</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>allowed</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>ok</name> <init>= <expr><name>allowed</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>ok</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>*<name>ok</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>ok</name>++</expr>;</expr_stmt>
}</block></while>
}</block></else></if>
<expr_stmt><expr><name>key</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"&amp;"</expr></argument>, <argument><expr>&amp;<name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>balancer_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl>, *<decl><type ref="prev"/><name>bsel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl>, *<decl><type ref="prev"/><name>wsel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>workers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok2change</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"balancer-manager"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>allowed</name></name> = 0
| (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_GET</name>)
| (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_POST</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name>) &amp;&amp; (<name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_POST</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>sconf</name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>conf</name> = (<name>proxy_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>params</name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>balancer</name> = (<name>proxy_balancer</name> *)<name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>balancer</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_THREAD_LOCK</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01189</expr></argument>)</argument_list></call>
"%s: Lock failed for balancer_handler"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_proxy_sync_balancer</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_THREAD_UNLOCK</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01190</expr></argument>)</argument_list></call>
"%s: Unlock failed for balancer_handler"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name> &amp;&amp; (<name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_GET</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>allowed</name><index>[]</index></name> <init>= <expr><block>{ <expr>"w"</expr>, <expr>"b"</expr>, <expr>"nonce"</expr>, <expr>"xml"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01191</expr></argument>)</argument_list></call> "parsing r-&gt;args"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push2table</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>allowed</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_POST</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>ib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr>1024</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>len</name>+1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ib</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>ib</name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_map_http_request_error</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name>ib</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>push2table</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>name</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"b"</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><name>bsel</name> = <call><name>ap_proxy_get_balancer</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>BALANCER_PREFIX</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>name</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>wsel</name> = <call><name>ap_proxy_get_worker</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>bsel</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>bsel</name> ||
(*<name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>nonce</name></name> &amp;&amp;
(
(<name>name</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"nonce"</expr></argument>)</argument_list></call>) == <name>NULL</name> ||
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>nonce</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> != 0
)
)</expr>
)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_clear</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok2change</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>wsel</name> &amp;&amp; <name>ok2change</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>was_usable</name> <init>= <expr><call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr><name>wsel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01192</expr></argument>)</argument_list></call> "settings worker params"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_lf"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ival</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>fval</name> <init>= <expr><call><name>atof</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ival</name> = <name>fval</name> * 100.0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &gt;= 100 &amp;&amp; <name>ival</name> &lt;= 10000</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>lbfactor</name></name> = <name>ival</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bsel</name></expr>)</condition><then>
<expr_stmt><expr><call><name>recalc_factors</name><argument_list>(<argument><expr><name>bsel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_wr"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>route</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>route</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>route</name></name> = '\0'</expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_rr"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>redirect</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>redirect</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>redirect</name></name> = '\0'</expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_status_I"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_set_wstatus</name><argument_list>(<argument><expr><name>PROXY_WORKER_IGNORE_ERRORS_FLAG</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wsel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_status_N"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_set_wstatus</name><argument_list>(<argument><expr><name>PROXY_WORKER_DRAIN_FLAG</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wsel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_status_D"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_set_wstatus</name><argument_list>(<argument><expr><name>PROXY_WORKER_DISABLED_FLAG</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wsel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_status_H"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_set_wstatus</name><argument_list>(<argument><expr><name>PROXY_WORKER_HOT_STANDBY_FLAG</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wsel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_status_S"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_set_wstatus</name><argument_list>(<argument><expr><name>PROXY_WORKER_STOPPED_FLAG</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wsel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_status_C"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_set_wstatus</name><argument_list>(<argument><expr><name>PROXY_WORKER_HC_FAIL_FLAG</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wsel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_ls"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ival</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ival</name> &gt;= 0 &amp;&amp; <name>ival</name> &lt;= 99</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>lbset</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_hi"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>hci</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_timeout_parameter_parse</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>hci</name></expr></argument>, <argument><expr>"ms"</expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>hci</name> &gt;= <name>AP_WD_TM_SLICE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>interval</name></name> = <name>hci</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_hp"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ival</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ival</name> &gt;= 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>passes</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_hf"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ival</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ival</name> &gt;= 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>fails</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_hm"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_hcmethods_t</name> *</type><name>method</name> <init>= <expr><name>proxy_hcmethods</name></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name><name>method</name>-&gt;<name>name</name></name></expr>;</condition> <incr><expr><name>method</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>method</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>method</name>-&gt;<name>implemented</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>method</name></name> = <name><name>method</name>-&gt;<name>method</name></name></expr>;</expr_stmt></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_hu"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name> = '\0'</expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>hc_valid_expr_f</name> &amp;&amp; (<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"w_he"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>hc_valid_expr_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name> = '\0'</expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>method</name></name> == <name>NONE</name> || <name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>method</name></name> == <name>TCP</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>bsel</name> &amp;&amp; !<name>was_usable</name> &amp;&amp; <call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr><name>wsel</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>need_reset</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>bsel</name> &amp;&amp; <name>ok2change</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ival</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01193</expr></argument>)</argument_list></call>
"settings balancer params"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"b_lbm"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>lbpname</name></name></expr></argument>)</argument_list></sizeof>-1)) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>lbpname</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_balancer_method</name> *</type><name>lbmethod</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lbmethod</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>PROXY_LBMETHOD</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lbmethod</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>lbpname</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsel</name>-&gt;<name>lbmethod</name></name> = <name>lbmethod</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>wupdated</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>need_reset</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"b_tmo"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &gt;= 0 &amp;&amp; <name>ival</name> &lt;= 7200</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>ival</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"b_max"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &gt;= 0 &amp;&amp; <name>ival</name> &lt;= 99</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>max_attempts</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"b_sforce"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky_force</name></name> = (<name>ival</name> != 0)</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"b_ss"</expr></argument>)</argument_list></call>) &amp;&amp; *<name>val</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>)</argument_list></sizeof>-1)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>val</name> == '-' &amp;&amp; *(<name>val</name>+1) == '\0'</expr>)</condition><then>
<expr_stmt><expr>*<name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name> = *<name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name> = '\0'</expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>path</name> = <call><name>strchr</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr>'|'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>path</name>++ = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"b_wyes"</expr></argument>)</argument_list></call>) &amp;&amp;
(*<name>val</name> == '1' &amp;&amp; *(<name>val</name>+1) == '\0') &amp;&amp;
(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"b_nwrkr"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>nworker</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nworker</name> = <call><name>ap_proxy_get_worker</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>bsel</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>nworker</name> &amp;&amp; <call><name><name>storage</name>-&gt;<name>num_free_slots</name></name><argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>wslot</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_GLOBAL_LOCK</name><argument_list>(<argument><expr><name>bsel</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01194</expr></argument>)</argument_list></call>
"%s: Lock failed for adding worker"</expr></argument>,
<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>ap_proxy_define_worker</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>nworker</name></expr></argument>, <argument><expr><name>bsel</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ret</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker_shared</name> *</type><name>shm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PROXY_COPY_CONF_PARAMS</name><argument_list>(<argument><expr><name>nworker</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name><name>storage</name>-&gt;<name>grab</name></name><argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>wslot</name></name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01195</expr></argument>)</argument_list></call>
"worker slotmem_grab failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_GLOBAL_UNLOCK</name><argument_list>(<argument><expr><name>bsel</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01196</expr></argument>)</argument_list></call>
"%s: Unlock failed for adding worker"</expr></argument>,
<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name><name>storage</name>-&gt;<name>dptr</name></name><argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>wslot</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>shm</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01197</expr></argument>)</argument_list></call>
"worker slotmem_dptr failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_GLOBAL_UNLOCK</name><argument_list>(<argument><expr><name>bsel</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01198</expr></argument>)</argument_list></call>
"%s: Unlock failed for adding worker"</expr></argument>,
<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_proxy_share_worker</name><argument_list>(<argument><expr><name>nworker</name></expr></argument>, <argument><expr><name>shm</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01199</expr></argument>)</argument_list></call>
"Cannot share worker"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_GLOBAL_UNLOCK</name><argument_list>(<argument><expr><name>bsel</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01200</expr></argument>)</argument_list></call>
"%s: Unlock failed for adding worker"</expr></argument>,
<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_proxy_initialize_worker</name><argument_list>(<argument><expr><name>nworker</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01201</expr></argument>)</argument_list></call>
"Cannot init worker"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_GLOBAL_UNLOCK</name><argument_list>(<argument><expr><name>bsel</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01202</expr></argument>)</argument_list></call>
"%s: Unlock failed for adding worker"</expr></argument>,
<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>bsel</name>-&gt;<name>wupdated</name></name> = <name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>wupdated</name></name> = <name><name>nworker</name>-&gt;<name>s</name>-&gt;<name>updated</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_set_wstatus</name><argument_list>(<argument><expr><name>PROXY_WORKER_DISABLED_FLAG</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>nworker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>PROXY_GLOBAL_UNLOCK</name><argument_list>(<argument><expr><name>bsel</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01203</expr></argument>)</argument_list></call>
"%s: Unlock failed for adding worker"</expr></argument>,
<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>action</name> = <call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01204</expr></argument>)</argument_list></call> "genning page"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>"xml"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><name>APR_RFC822_DATE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;?xml version='1.0' encoding='UTF-8' ?&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;httpd:manager xmlns:httpd='http://httpd.apache.org'&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;httpd:balancers&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>balancer</name> = (<name>proxy_balancer</name> *)<name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;httpd:balancer&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:name&gt;"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"&lt;/httpd:name&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:stickysession&gt;"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>,
<argument><expr>"&lt;/httpd:stickysession&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:nofailover&gt;%s&lt;/httpd:nofailover&gt;\n"</expr></argument>,
<argument><expr>(<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_force</name></name> ? "On" : "Off")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:timeout&gt;%" <name>APR_TIME_T_FMT</name> "&lt;/httpd:timeout&gt;"</expr></argument>,
<argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>max_attempts_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:maxattempts&gt;%d&lt;/httpd:maxattempts&gt;\n"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>max_attempts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:lbmethod&gt;"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>lbmethod</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&lt;/httpd:lbmethod&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:scolonpathdelim&gt;%s&lt;/httpd:scolonpathdelim&gt;\n"</expr></argument>,
<argument><expr>(<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>scolonsep</name></name> ? "On" : "Off")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;httpd:workers&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>workers</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>worker</name> = *<name>workers</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;httpd:worker&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:name&gt;"</expr></argument>, <argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/httpd:name&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:scheme&gt;"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>,
<argument><expr>"&lt;/httpd:scheme&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:hostname&gt;"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>,
<argument><expr>"&lt;/httpd:hostname&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:loadfactor&gt;%.2f&lt;/httpd:loadfactor&gt;\n"</expr></argument>,
<argument><expr><call>(<name>float</name>)<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>lbfactor</name></name></expr></argument>)</argument_list></call>/100.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:port&gt;%d&lt;/httpd:port&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:min&gt;%d&lt;/httpd:min&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:smax&gt;%d&lt;/httpd:smax&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>smax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:max&gt;%d&lt;/httpd:max&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:ttl&gt;%" <name>APR_TIME_T_FMT</name> "&lt;/httpd:ttl&gt;\n"</expr></argument>,
<argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ttl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>timeout_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:timeout&gt;%" <name>APR_TIME_T_FMT</name> "&lt;/httpd:timeout&gt;\n"</expr></argument>,
<argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>acquire_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:acquire&gt;%" <name>APR_TIME_T_FMT</name> "&lt;/httpd:acquire&gt;\n"</expr></argument>,
<argument><expr><call><name>apr_time_msec</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>acquire</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>recv_buffer_size_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:recv_buffer_size&gt;%" <name>APR_SIZE_T_FMT</name> "&lt;/httpd:recv_buffer_size&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>recv_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>io_buffer_size_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:io_buffer_size&gt;%" <name>APR_SIZE_T_FMT</name> "&lt;/httpd:io_buffer_size&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>io_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>keepalive_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:keepalive&gt;%s&lt;/httpd:keepalive&gt;\n"</expr></argument>,
<argument><expr>(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>keepalive</name></name> ? "On" : "Off")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;httpd:status&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>ap_proxy_parse_wstatus</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/httpd:status&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>error_time</name></name> &gt; 0) &amp;&amp; <call><name>apr_rfc822_date</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>error_time</name></name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:error_time&gt;"</expr></argument>, <argument><expr><name>date</name></expr></argument>,
<argument><expr>"&lt;/httpd:error_time&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:retries&gt;%d&lt;/httpd:retries&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>retries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:lbstatus&gt;%d&lt;/httpd:lbstatus&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>lbstatus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:loadfactor&gt;%.2f&lt;/httpd:loadfactor&gt;\n"</expr></argument>,
<argument><expr><call>(<name>float</name>)<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>lbfactor</name></name></expr></argument>)</argument_list></call>/100.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:transferred&gt;%" <name>APR_OFF_T_FMT</name> "&lt;/httpd:transferred&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>transferred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:read&gt;%" <name>APR_OFF_T_FMT</name> "&lt;/httpd:read&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:elected&gt;%" <name>APR_SIZE_T_FMT</name> "&lt;/httpd:elected&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>elected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:route&gt;"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>route</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/httpd:route&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:redirect&gt;"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>redirect</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/httpd:redirect&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:busy&gt;%" <name>APR_SIZE_T_FMT</name> "&lt;/httpd:busy&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;httpd:lbset&gt;%d&lt;/httpd:lbset&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>lbset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr>"ajp"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;httpd:flushpackets&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>flush_packets</name></name></expr>)</condition> <block>{
<case>case <expr><name>flush_off</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"Off"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>flush_on</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"On"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>flush_auto</name></expr>:
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"Auto"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/httpd:flushpackets&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>flush_packets</name></name> == <name>flush_auto</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:flushwait&gt;%d&lt;/httpd:flushwait&gt;\n"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>flush_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:ping&gt;%" <name>APR_TIME_T_FMT</name> "&lt;/httpd:ping&gt;"</expr></argument>,
<argument><expr><call><name>apr_time_msec</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:disablereuse&gt;%s&lt;/httpd:disablereuse&gt;\n"</expr></argument>,
<argument><expr>(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name> ? "On" : "Off")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>conn_timeout_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:connectiontimeout&gt;%" <name>APR_TIME_T_FMT</name> "&lt;/httpd:connectiontimeout&gt;\n"</expr></argument>,
<argument><expr><call><name>apr_time_msec</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>conn_timeout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>retry_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr>" &lt;httpd:retry&gt;%" <name>APR_TIME_T_FMT</name> "&lt;/httpd:retry&gt;\n"</expr></argument>,
<argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>retry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/httpd:worker&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>workers</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/httpd:workers&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/httpd:balancer&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>balancer</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/httpd:balancers&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/httpd:manager&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/html; charset=ISO-8859-1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name>DOCTYPE_HTML_3_2</name>
"&lt;html&gt;&lt;head&gt;&lt;title&gt;Balancer Manager&lt;/title&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;style type='text/css'&gt;\n"
"table {\n"
" border-width: 1px;\n"
" border-spacing: 3px;\n"
" border-style: solid;\n"
" border-color: gray;\n"
" border-collapse: collapse;\n"
" background-color: white;\n"
" text-align: center;\n"
"}\n"
"th {\n"
" border-width: 1px;\n"
" padding: 2px;\n"
" border-style: dotted;\n"
" border-color: gray;\n"
" background-color: lightgray;\n"
" text-align: center;\n"
"}\n"
"td {\n"
" border-width: 1px;\n"
" padding: 2px;\n"
" border-style: dotted;\n"
" border-color: gray;\n"
" background-color: white;\n"
" text-align: center;\n"
"}\n"
"&lt;/style&gt;\n&lt;/head&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;body&gt;&lt;h1&gt;Load Balancer Manager for "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/h1&gt;\n\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dl&gt;&lt;dt&gt;Server Version: "</expr></argument>,
<argument><expr><call><name>ap_get_server_description</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;Server Built: "</expr></argument>,
<argument><expr><call><name>ap_get_server_built</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;Balancer changes will "</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>bal_persist</name></name> ? "" : "NOT "</expr></argument>,
<argument><expr>"be persisted on restart.&lt;/dt&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;Balancers are "</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>inherit</name></name> ? "" : "NOT "</expr></argument>,
<argument><expr>"inherited from main server.&lt;/dt&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;ProxyPass settings are "</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>ppinherit</name></name> ? "" : "NOT "</expr></argument>,
<argument><expr>"inherited from main server.&lt;/dt&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dl&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>balancer</name> = (<name>proxy_balancer</name> *)<name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr /&gt;\n&lt;h3&gt;LoadBalancer Status for "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;a href='"</expr></argument>, <argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"?b="</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name> + <sizeof>sizeof<argument_list>(<argument><expr><name>BALANCER_PREFIX</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr>"&amp;amp;nonce="</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>nonce</name></name></expr></argument>,
<argument><expr>"'&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"&lt;/a&gt; ["</expr></argument>,<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sname</name></name></expr></argument>, <argument><expr>"]&lt;/h3&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n\n&lt;table&gt;&lt;tr&gt;"
"&lt;th&gt;MaxMembers&lt;/th&gt;&lt;th&gt;StickySession&lt;/th&gt;&lt;th&gt;DisableFailover&lt;/th&gt;&lt;th&gt;Timeout&lt;/th&gt;&lt;th&gt;FailoverAttempts&lt;/th&gt;&lt;th&gt;Method&lt;/th&gt;"
"&lt;th&gt;Path&lt;/th&gt;&lt;th&gt;Active&lt;/th&gt;&lt;/tr&gt;\n&lt;tr&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%d [%d Used]&lt;/td&gt;\n"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>max_workers</name></name></expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>max_workers</name></name> - (<name>int</name>)<call><name><name>storage</name>-&gt;<name>num_free_slots</name></name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>wslot</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr>" | "</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;td&gt; (None) "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;\n"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_force</name></name> ? "On" : "Off"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%" <name>APR_TIME_T_FMT</name> "&lt;/td&gt;"</expr></argument>,
<argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%d&lt;/td&gt;\n"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>max_attempts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%s&lt;/td&gt;\n"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>lbpname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;td&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>vhost</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>vhost</name></name></expr></argument>, <argument><expr>" -&gt; "</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>vpath</name></name></expr></argument>, <argument><expr>"&lt;/td&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%s&lt;/td&gt;\n"</expr></argument>,
<argument><expr>!<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>inactive</name></name> ? "Yes" : "No"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/table&gt;\n&lt;br /&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n\n&lt;table&gt;&lt;tr&gt;"
"&lt;th&gt;Worker URL&lt;/th&gt;"
"&lt;th&gt;Route&lt;/th&gt;&lt;th&gt;RouteRedir&lt;/th&gt;"
"&lt;th&gt;Factor&lt;/th&gt;&lt;th&gt;Set&lt;/th&gt;&lt;th&gt;Status&lt;/th&gt;"
"&lt;th&gt;Elected&lt;/th&gt;&lt;th&gt;Busy&lt;/th&gt;&lt;th&gt;Load&lt;/th&gt;&lt;th&gt;To&lt;/th&gt;&lt;th&gt;From&lt;/th&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>set_worker_hc_param_f</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;th&gt;HC Method&lt;/th&gt;&lt;th&gt;HC Interval&lt;/th&gt;&lt;th&gt;Passes&lt;/th&gt;&lt;th&gt;Fails&lt;/th&gt;&lt;th&gt;HC uri&lt;/th&gt;&lt;th&gt;HC Expr&lt;/th&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>workers</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>fbuf</name><index>[<expr>50</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>worker</name> = *<name>workers</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;tr&gt;\n&lt;td&gt;&lt;a href='"</expr></argument>,
<argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"?b="</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name> + <sizeof>sizeof<argument_list>(<argument><expr><name>BALANCER_PREFIX</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>, <argument><expr>"&amp;amp;w="</expr></argument>,
<argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&amp;amp;nonce="</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>nonce</name></name></expr></argument>,
<argument><expr>"'&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>(*<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>uds_path</name></name> ? "&lt;i&gt;" : "")</expr></argument>, <argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(*<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>uds_path</name></name> ? "&lt;/i&gt;" : "")</expr></argument>, <argument><expr>"&lt;/a&gt;&lt;/td&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;"</expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>route</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td&gt;"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>redirect</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td&gt;%.2f&lt;/td&gt;"</expr></argument>, <argument><expr><call>(<name>float</name>)<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>lbfactor</name></name></expr></argument>)</argument_list></call>/100.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>lbset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ap_proxy_parse_wstatus</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%" <name>APR_SIZE_T_FMT</name> "&lt;/td&gt;"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>elected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%" <name>APR_SIZE_T_FMT</name> "&lt;/td&gt;"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>lbstatus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>apr_strfsize</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>transferred</name></name></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>apr_strfsize</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>read</name></name></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>set_worker_hc_param_f</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;"</expr></argument>, <argument><expr><call><name>ap_proxy_show_hcmethod</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%" <name>APR_TIME_T_FMT</name> "ms&lt;/td&gt;"</expr></argument>, <argument><expr><call><name>apr_time_as_msec</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>interval</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%d (%d)&lt;/td&gt;"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>passes</name></name></expr></argument>,<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>pcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%d (%d)&lt;/td&gt;"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>fails</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>fcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%s&lt;/td&gt;"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%s"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>workers</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/table&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>balancer</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr /&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hc_show_exprs_f</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>hc_show_exprs_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>wsel</name> &amp;&amp; <name>bsel</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;h3&gt;Edit worker settings for "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>(*<name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>uds_path</name></name>?"&lt;i&gt;":"")</expr></argument>, <argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>wsel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(*<name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>uds_path</name></name>?"&lt;/i&gt;":"")</expr></argument>, <argument><expr>"&lt;/h3&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;form method='POST' enctype='application/x-www-form-urlencoded' action='"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"'&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;table&gt;&lt;tr&gt;&lt;td&gt;Load factor:&lt;/td&gt;&lt;td&gt;&lt;input name='w_lf' id='w_lf' type=text "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"value='%.2f'&gt;&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><call>(<name>float</name>)<argument_list>(<argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>lbfactor</name></name></expr></argument>)</argument_list></call>/100.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td&gt;LB Set:&lt;/td&gt;&lt;td&gt;&lt;input name='w_ls' id='w_ls' type=text "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"value='%d'&gt;&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>lbset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td&gt;Route:&lt;/td&gt;&lt;td&gt;&lt;input name='w_wr' id='w_wr' type=text "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"value='"</expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>route</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"'&gt;&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td&gt;Route Redirect:&lt;/td&gt;&lt;td&gt;&lt;input name='w_rr' id='w_rr' type=text "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"value='"</expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>redirect</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"'&gt;&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td&gt;Status:&lt;/td&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;td&gt;&lt;table&gt;&lt;tr&gt;"
"&lt;th&gt;Ignore Errors&lt;/th&gt;"
"&lt;th&gt;Draining Mode&lt;/th&gt;"
"&lt;th&gt;Disabled&lt;/th&gt;"
"&lt;th&gt;Hot Standby&lt;/th&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hc_show_exprs_f</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;th&gt;HC Fail&lt;/th&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;th&gt;Stopped&lt;/th&gt;&lt;/tr&gt;\n&lt;tr&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_radio</name><argument_list>(<argument><expr>"w_status_I"</expr></argument>, <argument><expr>(<call><name>PROXY_WORKER_IS</name><argument_list>(<argument><expr><name>wsel</name></expr></argument>, <argument><expr><name>PROXY_WORKER_IGNORE_ERRORS</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_radio</name><argument_list>(<argument><expr>"w_status_N"</expr></argument>, <argument><expr>(<call><name>PROXY_WORKER_IS</name><argument_list>(<argument><expr><name>wsel</name></expr></argument>, <argument><expr><name>PROXY_WORKER_DRAIN</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_radio</name><argument_list>(<argument><expr>"w_status_D"</expr></argument>, <argument><expr>(<call><name>PROXY_WORKER_IS</name><argument_list>(<argument><expr><name>wsel</name></expr></argument>, <argument><expr><name>PROXY_WORKER_DISABLED</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_radio</name><argument_list>(<argument><expr>"w_status_H"</expr></argument>, <argument><expr>(<call><name>PROXY_WORKER_IS</name><argument_list>(<argument><expr><name>wsel</name></expr></argument>, <argument><expr><name>PROXY_WORKER_HOT_STANDBY</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hc_show_exprs_f</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>create_radio</name><argument_list>(<argument><expr>"w_status_C"</expr></argument>, <argument><expr>(<call><name>PROXY_WORKER_IS</name><argument_list>(<argument><expr><name>wsel</name></expr></argument>, <argument><expr><name>PROXY_WORKER_HC_FAIL</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>create_radio</name><argument_list>(<argument><expr>"w_status_S"</expr></argument>, <argument><expr>(<call><name>PROXY_WORKER_IS</name><argument_list>(<argument><expr><name>wsel</name></expr></argument>, <argument><expr><name>PROXY_WORKER_STOPPED</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hc_select_exprs_f</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_hcmethods_t</name> *</type><name>method</name> <init>= <expr><name>proxy_hcmethods</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td colspan='2'&gt;\n&lt;table align='center'&gt;&lt;tr&gt;&lt;th&gt;Health Check param&lt;/th&gt;&lt;th&gt;Value&lt;/th&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td&gt;Method&lt;/td&gt;&lt;td&gt;&lt;select name='w_hm'&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init>;</init> <condition><expr><name><name>method</name>-&gt;<name>name</name></name></expr>;</condition> <incr><expr><name>method</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>method</name>-&gt;<name>implemented</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;option value='%s' %s &gt;%s&lt;/option&gt;\n"</expr></argument>,
<argument><expr><name><name>method</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>(<name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>method</name></name> == <name><name>method</name>-&gt;<name>method</name></name>) ? "selected" : ""</expr></argument>,
<argument><expr><name><name>method</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/select&gt;\n&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td&gt;Expr&lt;/td&gt;&lt;td&gt;&lt;select name='w_he'&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hc_select_exprs_f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/select&gt;\n&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;tr&gt;&lt;td&gt;Interval (ms)&lt;/td&gt;&lt;td&gt;&lt;input name='w_hi' id='w_hi' type='text'"
"value='%" <name>APR_TIME_T_FMT</name> "'&gt;&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><call><name>apr_time_as_msec</name><argument_list>(<argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>interval</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;tr&gt;&lt;td&gt;Passes trigger&lt;/td&gt;&lt;td&gt;&lt;input name='w_hp' id='w_hp' type='text'"
"value='%d'&gt;&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;tr&gt;&lt;td&gt;Fails trigger)&lt;/td&gt;&lt;td&gt;&lt;input name='w_hf' id='w_hf' type='text'"
"value='%d'&gt;&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>fails</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;tr&gt;&lt;td&gt;HC uri&lt;/td&gt;&lt;td&gt;&lt;input name='w_hu' id='w_hu' type='text'"
"value='%s'&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/table&gt;\n&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td colspan='2'&gt;&lt;input type=submit value='Submit'&gt;&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/table&gt;\n&lt;input type=hidden name='w' id='w' "</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"value='"</expr></argument>, <argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>wsel</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"'&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;input type=hidden name='b' id='b' "</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"value='"</expr></argument>, <argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>name</name></name> + <sizeof>sizeof<argument_list>(<argument><expr><name>BALANCER_PREFIX</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr>"'&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;input type=hidden name='nonce' id='nonce' value='"</expr></argument>,
<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>nonce</name></name></expr></argument>, <argument><expr>"'&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/form&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr /&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>bsel</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>provs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_list_provider_names_t</name> *</type><name>pname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;h3&gt;Edit balancer settings for "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"&lt;/h3&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;form method='POST' enctype='application/x-www-form-urlencoded' action='"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"'&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;table&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>provs</name> = <call><name>ap_list_provider_names</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>PROXY_LBMETHOD</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>provs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td&gt;LBmethod:&lt;/td&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;td&gt;\n&lt;select name='b_lbm' id='b_lbm'&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pname</name> = (<name>ap_list_provider_names_t</name> *)<name><name>provs</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>provs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>pname</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr>"&lt;option value='"</expr></argument>, <argument><expr><name><name>pname</name>-&gt;<name>provider_name</name></name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pname</name>-&gt;<name>provider_name</name></name></expr></argument>, <argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>lbpname</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" selected "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&gt;"</expr></argument>, <argument><expr><name><name>pname</name>-&gt;<name>provider_name</name></name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/select&gt;\n&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td&gt;Timeout:&lt;/td&gt;&lt;td&gt;&lt;input name='b_tmo' id='b_tmo' type=text "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"value='%" <name>APR_TIME_T_FMT</name> "'&gt;&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td&gt;Failover Attempts:&lt;/td&gt;&lt;td&gt;&lt;input name='b_max' id='b_max' type=text "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"value='%d'&gt;&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>max_attempts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td&gt;Disable Failover:&lt;/td&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_radio</name><argument_list>(<argument><expr>"b_sforce"</expr></argument>, <argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky_force</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td&gt;Sticky Session:&lt;/td&gt;&lt;td&gt;&lt;input name='b_ss' id='b_ss' size=64 type=text "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"value ='"</expr></argument>, <argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr>" | "</expr></argument>,
<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"value ='"</expr></argument>, <argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"'&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(Use '-' to delete)&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name><name>storage</name>-&gt;<name>num_free_slots</name></name><argument_list>(<argument><expr><name><name>bsel</name>-&gt;<name>wslot</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td&gt;Add New Worker:&lt;/td&gt;&lt;td&gt;&lt;input name='b_nwrkr' id='b_nwrkr' size=32 type=text&gt;"
"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Are you sure? &lt;input name='b_wyes' id='b_wyes' type=checkbox value='1'&gt;"
"&lt;/td&gt;&lt;/tr&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td colspan=2&gt;&lt;input type=submit value='Submit'&gt;&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/table&gt;\n&lt;input type=hidden name='b' id='b' "</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"value='"</expr></argument>, <argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>name</name></name> + <sizeof>sizeof<argument_list>(<argument><expr><name>BALANCER_PREFIX</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr>"'&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;input type=hidden name='nonce' id='nonce' value='"</expr></argument>,
<argument><expr><name><name>bsel</name>-&gt;<name>s</name>-&gt;<name>nonce</name></name></expr></argument>, <argument><expr>"'&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/form&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr /&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>ap_psignature</name><argument_list>(<argument><expr>""</expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/body&gt;&lt;/html&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rflush</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>DONE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>balancer_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name> <init>= <expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name> <init>= <expr>(<name>proxy_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>storage</name>-&gt;<name>attach</name></name><argument_list>(<argument><expr>&amp;(<name><name>conf</name>-&gt;<name>bslot</name></name>)</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr>&amp;<name>num</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>bslot</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01205</expr></argument>)</argument_list></call> "slotmem_attach failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>balancer</name> = (<name>proxy_balancer</name> *)<name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>balancer</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_proxy_initialize_balancer</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01206</expr></argument>)</argument_list></call>
"Failed to init balancer %s in child"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>init_balancer_members</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>balancer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_proxy_balancer_register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name><name>aszPred</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mpm_winnt.c"</expr>, <expr>"mod_slotmem_shm.c"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name><name>aszPred2</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mod_proxy.c"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>balancer_post_config</name></expr></argument>, <argument><expr><name>aszPred2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>balancer_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>balancer_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>balancer_child_init</name></expr></argument>, <argument><expr><name>aszPred</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_hook_pre_request</name><argument_list>(<argument><expr><name>proxy_balancer_pre_request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_hook_post_request</name><argument_list>(<argument><expr><name>proxy_balancer_post_request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_hook_canon_handler</name><argument_list>(<argument><expr><name>proxy_balancer_canon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>proxy_balancer</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>ap_proxy_balancer_register_hook</name></expr>
}</block></expr>;</expr_stmt>
</unit>
