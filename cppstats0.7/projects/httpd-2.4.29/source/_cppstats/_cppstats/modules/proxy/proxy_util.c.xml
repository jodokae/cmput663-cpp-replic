<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/proxy/proxy_util.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proxy_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ajp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scgi.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>APR_MAJOR_VERSION</name> &lt; 1)</expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>apr_socket_create</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>apr_socket_create</name></cpp:macro> <cpp:value>apr_socket_create_ex</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_UN_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>APR_MAJOR_VERSION</name> &lt; 2)</expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_support.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>use_http_connect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>target_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_auth</name></decl>;</decl_stmt>
}</block></struct></type> <name>forward_info</name>;</typedef>
<decl_stmt><decl><type><name>int</name> <name>PROXY_DECLARE_DATA</name></type> <name>proxy_lb_workers</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lb_workers_limit</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_strmatch_pattern</name> <name>PROXY_DECLARE_DATA</name> *</type><name>ap_proxy_strmatch_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_strmatch_pattern</name> <name>PROXY_DECLARE_DATA</name> *</type><name>ap_proxy_strmatch_domain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>apr_global_mutex_t</name> *</type><name>proxy_mutex</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>proxy_match_ipaddr</name><parameter_list>(<param><decl><type>struct <name>dirconn_entry</name> *</type><name>This</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>proxy_match_domainname</name><parameter_list>(<param><decl><type>struct <name>dirconn_entry</name> *</type><name>This</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>proxy_match_hostname</name><parameter_list>(<param><decl><type>struct <name>dirconn_entry</name> *</type><name>This</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>proxy_match_word</name><parameter_list>(<param><decl><type>struct <name>dirconn_entry</name> *</type><name>This</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<macro><name>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>create_req</argument>,
<argument>(request_rec *r, request_rec *pr)</argument>, <argument>(r, pr)</argument>,
<argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_strncpy</name><argument_list>(<argument>char *dst</argument>, <argument>const char *src</argument>,
<argument>apr_size_t dlen</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>thenil</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>thelen</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>dlen</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>src</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>dst</name> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>thenil</name> = <call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>thelen</name> = <name>thenil</name> - <name>dst</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>src</name><index>[<expr><name>thelen</name></expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_hex2c</name><argument_list>(<argument>const char *x</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><name><name>x</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name> = <name>ch</name> - '0'</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>apr_isupper</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name> = <name>ch</name> - ('A' - 10)</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>i</name> = <name>ch</name> - ('a' - 10)</expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name>i</name> &lt;&lt;= 4</expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> = <name><name>x</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name> += <name>ch</name> - '0'</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>apr_isupper</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name> += <name>ch</name> - ('A' - 10)</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>i</name> += <name>ch</name> - ('a' - 10)</expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><name>i</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>1 == <call><name>sscanf</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr>"%2x"</expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = <name>i</name> &amp; 0xFF</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_from_ascii</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>buf</name><index>[<expr>0</expr>]</index></name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr>0</expr>;</return>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_proxy_c2hex</name><argument_list>(<argument>int ch</argument>, <argument>char *x</argument>)</argument_list></macro> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr>0</expr>]</index></name> = '%'</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = (<name>ch</name> &amp; 0xF0) &gt;&gt; 4</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt;= 10</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>x</name><index>[<expr>1</expr>]</index></name> = ('A' - 10) + <name>i</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>x</name><index>[<expr>1</expr>]</index></name> = '0' + <name>i</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>i</name> = <name>ch</name> &amp; 0x0F</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt;= 10</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>x</name><index>[<expr>2</expr>]</index></name> = ('A' - 10) + <name>i</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>x</name><index>[<expr>2</expr>]</index></name> = '0' + <name>i</name></expr>;</expr_stmt>
}</block></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ntoa</name><index>[]</index></name> <init>= <expr><block>{ <expr>"0123456789ABCDEF"</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>ch</name> &amp;= 0xFF</expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr>0</expr>]</index></name> = '%'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr>1</expr>]</index></name> = <name><name>ntoa</name><index>[<expr>(<name><name>buf</name><index>[<expr>0</expr>]</index></name> &gt;&gt; 4) &amp; 0x0F</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr>2</expr>]</index></name> = <name><name>ntoa</name><index>[<expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> &amp; 0x0F</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr>3</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro><macro><name>ap_proxy_canonenc</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *x</argument>, <argument>int len</argument>,
<argument>enum enctype t</argument>, <argument>int forcedec</argument>,
<argument>int proxyreq</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>allowed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>reserved</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>t</name> == <name>enc_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>allowed</name> = "~$-_.+!*'(),;:@&amp;="</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>t</name> == <name>enc_search</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>allowed</name> = "$-_.!*'(),;:@&amp;="</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>t</name> == <name>enc_user</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>allowed</name> = "$-_.+!*'(),;@&amp;="</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>t</name> == <name>enc_fpath</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>allowed</name> = "$-_.+!*'(),?:@&amp;="</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>allowed</name> = "$-_.+!*'(),?/:@&amp;="</expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>t</name> == <name>enc_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reserved</name> = "/"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>t</name> == <name>enc_search</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reserved</name> = "+"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>reserved</name> = ""</expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name>y</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>3 * <name>len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>j</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>j</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>ch</name> = <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>reserved</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name> = <name>ch</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>(<name>forcedec</name> || (<name>proxyreq</name> &amp;&amp; <name>proxyreq</name> != <name>PROXYREQ_REVERSE</name>)) &amp;&amp; <name>ch</name> == '%'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>apr_isxdigit</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name> + 1</expr>]</index></name></expr></argument>)</argument_list></call> || !<call><name>apr_isxdigit</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name> + 2</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ch</name> = <call><name>ap_proxy_hex2c</name><argument_list>(<argument><expr>&amp;<name><name>x</name><index>[<expr><name>i</name> + 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> += 2</expr>;</expr_stmt>
<if>if <condition>(<expr><name>ch</name> != 0 &amp;&amp; <call><name>strchr</name><argument_list>(<argument><expr><name>reserved</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_c2hex</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr>&amp;<name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> += 2</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>strchr</name><argument_list>(<argument><expr><name>allowed</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_c2hex</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr>&amp;<name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> += 2</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name> = <name>ch</name></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<expr_stmt><expr><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>y</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro>
<macro><name>ap_proxy_canon_netloc</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>char **const urlp</argument>, <argument>char **userp</argument>,
<argument>char **passwordp</argument>, <argument>char **hostp</argument>, <argument>apr_port_t *port</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>addr</name></decl>, *<decl><type ref="prev"/><name>scope_id</name></decl>, *<decl><type ref="prev"/><name>strp</name></decl>, *<decl><type ref="prev"/><name>host</name></decl>, *<decl><type ref="prev"/><name>url</name> <init>= <expr>*<name>urlp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>user</name> <init>= <expr><name>NULL</name></expr></init>, *<name>password</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>tmp_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>url</name><index>[<expr>0</expr>]</index></name> != '/' || <name><name>url</name><index>[<expr>1</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<return>return <expr>"Malformed URL"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>host</name> = <name>url</name> + 2</expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>url</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> = ""</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*(<name>url</name>++) = '\0'</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>strp</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>'@'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>strp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>strp</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>user</name> = <name>host</name></expr>;</expr_stmt>
<expr_stmt><expr><name>host</name> = <name>strp</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>strp</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>strp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>strp</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>password</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>strp</name> + 1</expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>strp</name> + 1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc_user</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>password</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"Bad %-escape in URL (password)"</expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>user</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc_user</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>user</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"Bad %-escape in URL (username)"</expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>userp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>userp</name> = <name>user</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>passwordp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>passwordp</name> = <name>password</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_parse_addr_port</name><argument_list>(<argument><expr>&amp;<name>addr</name></expr></argument>, <argument><expr>&amp;<name>scope_id</name></expr></argument>, <argument><expr>&amp;<name>tmp_port</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || <name>addr</name> == <name>NULL</name> || <name>scope_id</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"Invalid host/port"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>tmp_port</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>port</name> = <name>tmp_port</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>urlp</name> = <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>hostp</name> = <name>addr</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxyerror</name><argument_list>(<argument>request_rec *r</argument>, <argument>int statuscode</argument>, <argument>const char *message</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name> <init>= <expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"error-notes"</expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"The proxy server could not handle the request &lt;em&gt;&lt;a href=\""</expr></argument>,
<argument><expr><name>uri</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"&amp;nbsp;"</expr></argument>, <argument><expr><name>uri</name></expr></argument>,
<argument><expr>"&lt;/a&gt;&lt;/em&gt;.&lt;p&gt;\n"
"Reason: &lt;strong&gt;"</expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/strong&gt;&lt;/p&gt;"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"verbose-error-to"</expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%3.3u Proxy Error"</expr></argument>, <argument><expr><name>statuscode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00898</expr></argument>)</argument_list></call> "%s returned by %s"</expr></argument>, <argument><expr><name>message</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>statuscode</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>proxy_get_host_of_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>url</name></decl>, *<decl><type ref="prev"/><name>user</name> <init>= <expr><name>NULL</name></expr></init>, *<name>password</name> <init>= <expr><name>NULL</name></expr></init>, *<name>err</name></decl>, *<decl><type ref="prev"/><name>host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>hostname</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name><name>r</name>-&gt;<name>hostname</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>url</name> = <call><name>strchr</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>) == <name>NULL</name> || <name><name>url</name><index>[<expr>1</expr>]</index></name> != '/' || <name><name>url</name><index>[<expr>2</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>url</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>url</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>ap_proxy_canon_netloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr>&amp;<name>user</name></expr></argument>, <argument><expr>&amp;<name>password</name></expr></argument>, <argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00899</expr></argument>)</argument_list></call> "%s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>hostname</name></name> = <name>host</name></expr>;</expr_stmt>
<return>return <expr><name>host</name></expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_is_ipaddr</name><argument_list>(<argument>struct dirconn_entry *This</argument>, <argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>addr</name> <init>= <expr><name><name>This</name>-&gt;<name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name><name>ip_addr</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>quads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bits</name></decl>;</decl_stmt>
<for>for (<init><expr><name>quads</name> = 0</expr>;</init> <condition><expr><name>quads</name> &lt; 4 &amp;&amp; *<name>addr</name> != '\0'</expr>;</condition> <incr><expr>++<name>quads</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>addr</name> == '/' &amp;&amp; <name>quads</name> &gt; 0</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ip_addr</name><index>[<expr><name>quads</name></expr>]</index></name> = <call><name>strtol</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmp</name> == <name>addr</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ip_addr</name><index>[<expr><name>quads</name></expr>]</index></name> &lt; 0 || <name><name>ip_addr</name><index>[<expr><name>quads</name></expr>]</index></name> &gt; 255</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>addr</name> = <name>tmp</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>addr</name> == '.' &amp;&amp; <name>quads</name> != 3</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>addr</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<for>for (<init><expr><name><name>This</name>-&gt;<name>addr</name>.<name>s_addr</name></name> = 0</expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>quads</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>This</name>-&gt;<name>addr</name>.<name>s_addr</name></name> |= <call><name>htonl</name><argument_list>(<argument><expr><name><name>ip_addr</name><index>[<expr><name>i</name></expr>]</index></name> &lt;&lt; (24 - 8 * <name>i</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>addr</name><index>[<expr>0</expr>]</index></name> == '/' &amp;&amp; <call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>addr</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr>++<name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmp</name> == <name>addr</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>addr</name> = <name>tmp</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bits</name> &lt; 0 || <name>bits</name> &gt; 32</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<while>while <condition>(<expr><name>quads</name> &gt; 0 &amp;&amp; <name><name>ip_addr</name><index>[<expr><name>quads</name> - 1</expr>]</index></name> == 0</expr>)</condition> <block>{
<expr_stmt><expr>--<name>quads</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>quads</name> &lt; 1</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bits</name> = 8 * <name>quads</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bits</name> != 32</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00900</expr></argument>)</argument_list></call>
"Warning: NetMask not supplied with IP-Addr; guessing: %s/%ld"</expr></argument>,
<argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>This</name>-&gt;<name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>This</name>-&gt;<name>mask</name>.<name>s_addr</name></name> = <call><name>htonl</name><argument_list>(<argument><expr><name>APR_INADDR_NONE</name> &lt;&lt; (32 - <name>bits</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>addr</name> == '\0' &amp;&amp; (<name><name>This</name>-&gt;<name>addr</name>.<name>s_addr</name></name> &amp; ~<name><name>This</name>-&gt;<name>mask</name>.<name>s_addr</name></name>) != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00901</expr></argument>)</argument_list></call>
"Warning: NetMask and IP-Addr disagree in %s/%ld"</expr></argument>,
<argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>This</name>-&gt;<name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>This</name>-&gt;<name>addr</name>.<name>s_addr</name></name> &amp;= <name><name>This</name>-&gt;<name>mask</name>.<name>s_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00902</expr></argument>)</argument_list></call>
" Set to %s/%ld"</expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>This</name>-&gt;<name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name>addr</name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>This</name>-&gt;<name>matcher</name></name> = <name>proxy_match_ipaddr</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr>(*<name>addr</name> == '\0')</expr>;</return>
}</block></else></if>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_match_ipaddr</name><parameter_list>(<param><decl><type>struct <name>dirconn_entry</name> *</type><name>This</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name><name>ip_addr</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>in_addr</name></type> <name>addr</name></decl>, *<decl><type ref="prev"/><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host</name> <init>= <expr><call><name>proxy_get_host_of_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>host</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>addr</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr>sizeof <name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ip_addr</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr>sizeof <name>ip_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>4 == <call><name>sscanf</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>"%d.%d.%d.%d"</expr></argument>, <argument><expr>&amp;<name><name>ip_addr</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>ip_addr</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>ip_addr</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>ip_addr</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<for>for (<init><expr><name><name>addr</name>.<name>s_addr</name></name> = 0</expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>addr</name>.<name>s_addr</name></name> |= <call><name>htonl</name><argument_list>(<argument><expr><name><name>ip_addr</name><index>[<expr><name>i</name></expr>]</index></name> &lt;&lt; (24 - 8 * <name>i</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>This</name>-&gt;<name>addr</name>.<name>s_addr</name></name> == (<name><name>addr</name>.<name>s_addr</name></name> &amp; <name><name>This</name>-&gt;<name>mask</name>.<name>s_addr</name></name>)</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGING</name></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00903</expr></argument>)</argument_list></call>
"1)IP-Match: %s[%s] &lt;-&gt; "</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00904</expr></argument>)</argument_list></call>
"%s/"</expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>This</name>-&gt;<name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00905</expr></argument>)</argument_list></call>
"%s"</expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>This</name>-&gt;<name>mask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>1</expr>;</return>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGING</name></expr></cpp:if>
<else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00906</expr></argument>)</argument_list></call>
"1)IP-NoMatch: %s[%s] &lt;-&gt; "</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00907</expr></argument>)</argument_list></call>
"%s/"</expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>This</name>-&gt;<name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00908</expr></argument>)</argument_list></call>
"%s"</expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>This</name>-&gt;<name>mask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <block>{
<decl_stmt><decl><type>struct <name>apr_sockaddr_t</name> *</type><name>reqaddr</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>reqaddr</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGING</name></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00909</expr></argument>)</argument_list></call>
"2)IP-NoMatch: hostname=%s msg=Host not found"</expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name>reqaddr</name></expr>)</condition> <block>{
<expr_stmt><expr><name>ip</name> = (struct <name>in_addr</name> *) <name><name>reqaddr</name>-&gt;<name>ipaddr_ptr</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>This</name>-&gt;<name>addr</name>.<name>s_addr</name></name> == (<name><name>ip</name>-&gt;<name>s_addr</name></name> &amp; <name><name>This</name>-&gt;<name>mask</name>.<name>s_addr</name></name>)</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGING</name></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00910</expr></argument>)</argument_list></call>
"3)IP-Match: %s[%s] &lt;-&gt; "</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr>*<name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00911</expr></argument>)</argument_list></call>
"%s/"</expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>This</name>-&gt;<name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00912</expr></argument>)</argument_list></call>
"%s"</expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>This</name>-&gt;<name>mask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>1</expr>;</return>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGING</name></expr></cpp:if>
<else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00913</expr></argument>)</argument_list></call>
"3)IP-NoMatch: %s[%s] &lt;-&gt; "</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr>*<name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00914</expr></argument>)</argument_list></call>
"%s/"</expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>This</name>-&gt;<name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00915</expr></argument>)</argument_list></call>
"%s"</expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>This</name>-&gt;<name>mask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>reqaddr</name> = <name><name>reqaddr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
}</block></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_is_domainname</name><argument_list>(<argument>struct dirconn_entry *This</argument>, <argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>addr</name> <init>= <expr><name><name>This</name>-&gt;<name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>addr</name><index>[<expr>0</expr>]</index></name> != '.'</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><call><name>apr_isalnum</name><argument_list>(<argument><expr><name><name>addr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> || <name><name>addr</name><index>[<expr><name>i</name></expr>]</index></name> == '-' || <name><name>addr</name><index>[<expr><name>i</name></expr>]</index></name> == '.'</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<continue>continue;</continue>
}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
if (addr[i] == ':') {
ap_log_error(APLOG_MARK, APLOG_STARTUP, 0, NULL, APLOGNO(03234)
"@@@@ handle optional port in proxy_is_domainname()");
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>addr</name><index>[<expr><name>i</name></expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> - 1</expr>;</init> <condition><expr><name>i</name> &gt; 0 &amp;&amp; <name><name>addr</name><index>[<expr><name>i</name></expr>]</index></name> == '.'</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>addr</name><index>[<expr><name>i</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>This</name>-&gt;<name>matcher</name></name> = <name>proxy_match_domainname</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_match_domainname</name><parameter_list>(<param><decl><type>struct <name>dirconn_entry</name> *</type><name>This</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host</name> <init>= <expr><call><name>proxy_get_host_of_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>This</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr></init>, <name>h_len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>host</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>h_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>d_len</name> &gt; 0 &amp;&amp; <name><name>This</name>-&gt;<name>name</name><index>[<expr><name>d_len</name> - 1</expr>]</index></name> == '.'</expr>)</condition> <block>{
<expr_stmt><expr>--<name>d_len</name></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name>h_len</name> &gt; 0 &amp;&amp; <name><name>host</name><index>[<expr><name>h_len</name> - 1</expr>]</index></name> == '.'</expr>)</condition> <block>{
<expr_stmt><expr>--<name>h_len</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>h_len</name> &gt; <name>d_len</name>
&amp;&amp; <call><name>strncasecmp</name><argument_list>(<argument><expr>&amp;<name><name>host</name><index>[<expr><name>h_len</name> - <name>d_len</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>This</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>d_len</name></expr></argument>)</argument_list></call> == 0</expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_is_hostname</name><argument_list>(<argument>struct dirconn_entry *This</argument>, <argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type>struct <name>apr_sockaddr_t</name> *</type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>host</name> <init>= <expr><name><name>This</name>-&gt;<name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>host</name><index>[<expr>0</expr>]</index></name> == '.'</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><call><name>apr_isalnum</name><argument_list>(<argument><expr><name><name>host</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> || <name><name>host</name><index>[<expr><name>i</name></expr>]</index></name> == '-' || <name><name>host</name><index>[<expr><name>i</name></expr>]</index></name> == '.'</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)<empty_stmt>;</empty_stmt></for>
<if>if <condition>(<expr><name><name>host</name><index>[<expr><name>i</name></expr>]</index></name> != '\0' || <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>addr</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>This</name>-&gt;<name>hostaddr</name></name> = <name>addr</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> - 1</expr>;</init> <condition><expr><name>i</name> &gt; 0 &amp;&amp; <name><name>host</name><index>[<expr><name>i</name></expr>]</index></name> == '.'</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>host</name><index>[<expr><name>i</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>This</name>-&gt;<name>matcher</name></name> = <name>proxy_match_hostname</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_match_hostname</name><parameter_list>(<param><decl><type>struct <name>dirconn_entry</name> *</type><name>This</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>host</name> <init>= <expr><name><name>This</name>-&gt;<name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host2</name> <init>= <expr><call><name>proxy_get_host_of_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h2_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h1_len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>host</name> == <name>NULL</name> || <name>host2</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>h2_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>host2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h1_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
struct apr_sockaddr_t *addr = *This-&gt;hostaddr;
while (addr) {
if (addr-&gt;ipaddr_ptr == ? ? ? ? ? ? ? ? ? ? ? ? ?)
return 1;
addr = addr-&gt;next;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><name>h2_len</name> &gt; 0 &amp;&amp; <name><name>host2</name><index>[<expr><name>h2_len</name> - 1</expr>]</index></name> == '.'</expr>)</condition> <block>{
<expr_stmt><expr>--<name>h2_len</name></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name>h1_len</name> &gt; 0 &amp;&amp; <name><name>host</name><index>[<expr><name>h1_len</name> - 1</expr>]</index></name> == '.'</expr>)</condition> <block>{
<expr_stmt><expr>--<name>h1_len</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>h1_len</name> == <name>h2_len</name>
&amp;&amp; <call><name>strncasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>host2</name></expr></argument>, <argument><expr><name>h1_len</name></expr></argument>)</argument_list></call> == 0</expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_is_word</name><argument_list>(<argument>struct dirconn_entry *This</argument>, <argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><name><name>This</name>-&gt;<name>matcher</name></name> = <name>proxy_match_word</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_match_word</name><parameter_list>(<param><decl><type>struct <name>dirconn_entry</name> *</type><name>This</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host</name> <init>= <expr><call><name>proxy_get_host_of_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>host</name> != <name>NULL</name> &amp;&amp; <call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>This</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_checkproxyblock</name><argument_list>(<argument>request_rec *r</argument>, <argument>proxy_server_conf *conf</argument>,
<argument>apr_sockaddr_t *uri_addr</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ap_proxy_checkproxyblock2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>uri_addr</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name>uri_addr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_IP_STR_LEN</name></cpp:macro> <cpp:value>(46)</cpp:value></cpp:define>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_checkproxyblock2</name><argument_list>(<argument>request_rec *r</argument>, <argument>proxy_server_conf *conf</argument>,
<argument>const char *hostname</argument>, <argument>apr_sockaddr_t *addr</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>conf</name>-&gt;<name>noproxies</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>noproxy_entry</name> *</type><name>npent</name> <init>= <expr>(struct <name>noproxy_entry</name> *) <name><name>conf</name>-&gt;<name>noproxies</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_sockaddr_t</name> *</type><name>conf_addr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"checking remote machine [%s] against [%s]"</expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>npent</name><index>[<expr><name>j</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>npent</name><index>[<expr><name>j</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call> || <name><name>npent</name><index>[<expr><name>j</name></expr>]</index></name>.<name><name>name</name><index>[<expr>0</expr>]</index></name> == '*'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00916</expr></argument>)</argument_list></call>
"connect to remote machine %s blocked: name %s "
"matched"</expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>npent</name><index>[<expr><name>j</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>addr</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<for>for (<init><expr><name>conf_addr</name> = <name><name>npent</name><index>[<expr><name>j</name></expr>]</index></name>.<name>addr</name></expr>;</init> <condition><expr><name>conf_addr</name></expr>;</condition> <incr><expr><name>conf_addr</name> = <name><name>conf_addr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>caddr</name><index>[<expr><name>MAX_IP_STR_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>uaddr</name><index>[<expr><name>MAX_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>uri_addr</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_sockaddr_ip_getbuf</name><argument_list>(<argument><expr><name>caddr</name></expr></argument>, <argument><expr>sizeof <name>caddr</name></expr></argument>, <argument><expr><name>conf_addr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<for>for (<init><expr><name>uri_addr</name> = <name>addr</name></expr>;</init> <condition><expr><name>uri_addr</name></expr>;</condition> <incr><expr><name>uri_addr</name> = <name><name>uri_addr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>apr_sockaddr_ip_getbuf</name><argument_list>(<argument><expr><name>uaddr</name></expr></argument>, <argument><expr>sizeof <name>uaddr</name></expr></argument>, <argument><expr><name>uri_addr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ProxyBlock comparing %s and %s"</expr></argument>, <argument><expr><name>caddr</name></expr></argument>, <argument><expr><name>uaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>caddr</name></expr></argument>, <argument><expr><name>uaddr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00917</expr></argument>)</argument_list></call>
"connect to remote machine %s blocked: "
"IP %s matched"</expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>caddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
}</block></for>
}</block></for>
}</block></for>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_pre_http_request</name><argument_list>(<argument>conn_rec *c</argument>, <argument>request_rec *r</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>ap_add_input_filter</name><argument_list>(<argument><expr>"HTTP_IN"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_proxy_location_reverse_map</name><argument_list>(<argument>request_rec *r</argument>,
<argument>proxy_dir_conf *conf</argument>, <argument>const char *url</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>proxy_req_conf</name> *</type><name>rconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>proxy_alias</name> *</type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>u</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> != <name>PROXYREQ_REVERSE</name></expr>)</condition><then> <block>{
<return>return <expr><name>url</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>l1</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>interpolate_env</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ent</name> = (struct <name>proxy_alias</name> *)<name><name>rconf</name>-&gt;<name>raliases</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ent</name> = (struct <name>proxy_alias</name> *)<name><name>conf</name>-&gt;<name>raliases</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
}</block></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>raliases</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>sconf</name> <init>= <expr>(<name>proxy_server_conf</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real</name> <init>= <expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>real</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_proxy_valid_balancer_name</name><argument_list>(<argument><expr>(<name>char</name> *)<name>real</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &amp;&amp;
(<name>balancer</name> = <call><name>ap_proxy_get_balancer</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sconf</name></expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>l3</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>worker</name> <init>= <expr>(<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>urlpart</name> <init>= <expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>real</name> + <sizeof>sizeof<argument_list>(<argument><expr><name>BALANCER_PREFIX</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>urlpart</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>urlpart</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name>urlpart</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>l3</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>urlpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>l2</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>urlpart</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name><index>[<expr><name>l2</name> - 1</expr>]</index> == '/'</expr>)</condition><then>
<expr_stmt><expr>--<name>l2</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>l1</name> &gt;= <name>l2</name> + <name>l3</name>
&amp;&amp; <call><name>strncasecmp</name><argument_list>(<argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call> == 0
&amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>urlpart</name></expr></argument>, <argument><expr><name>url</name> + <name>l2</name></expr></argument>, <argument><expr><name>l3</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>u</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fake</name></expr></argument>, <argument><expr>&amp;<name><name>url</name><index>[<expr><name>l2</name> + <name>l3</name></expr>]</index></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_is_url</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> ? <name>u</name> : <call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>l1</name> &gt;= <name>l2</name> &amp;&amp; <call><name>strncasecmp</name><argument_list>(<argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name><name>fake</name><index>[<expr>0</expr>]</index></name> == '/') &amp;&amp; (<name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name><name>fake</name><index>[<expr>1</expr>]</index></name> == 0) &amp;&amp; (<name><name>url</name><index>[<expr><name>l2</name></expr>]</index></name> == '/')</expr>)</condition><then> <block>{
<expr_stmt><expr><name>u</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>url</name><index>[<expr><name>l2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>u</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fake</name></expr></argument>, <argument><expr>&amp;<name><name>url</name><index>[<expr><name>l2</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><call><name>ap_is_url</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> ? <name>u</name> : <call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name>worker</name>++</expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>part</name> <init>= <expr><name>url</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>l2</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>real</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>part</name> = <call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"://"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>part</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>part</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>part</name>+3</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>part</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>l1</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>part</name> = <name>url</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>part</name> = <name>url</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>l2</name> &gt; 0 &amp;&amp; <name>l1</name> &gt;= <name>l2</name> &amp;&amp; <call><name>strncasecmp</name><argument_list>(<argument><expr><name>real</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>u</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fake</name></expr></argument>, <argument><expr>&amp;<name><name>part</name><index>[<expr><name>l2</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_is_url</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> ? <name>u</name> : <call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></else></if>
}</block></for>
<return>return <expr><name>url</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_proxy_cookie_reverse_map</name><argument_list>(<argument>request_rec *r</argument>,
<argument>proxy_dir_conf *conf</argument>, <argument>const char *str</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>proxy_req_conf</name> *</type><name>rconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>proxy_alias</name> *</type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>newpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>newdomain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>domainp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathe</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>domaine</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>, <decl><type ref="prev"/><name>poffs</name> <init>= <expr>0</expr></init>, <name>doffs</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ddiff</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pdiff</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ret</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> != <name>PROXYREQ_REVERSE</name></expr>)</condition><then> <block>{
<return>return <expr><name>str</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>pathp</name> = <call><name>apr_strmatch</name><argument_list>(<argument><expr><name>ap_proxy_strmatch_path</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pathp</name> += 5</expr>;</expr_stmt>
<expr_stmt><expr><name>poffs</name> = <name>pathp</name> - <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pathe</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>pathp</name></expr></argument>, <argument><expr>';'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l1</name> = <name>pathe</name> ? (<name>pathe</name> - <name>pathp</name>) : <call><name>strlen</name><argument_list>(<argument><expr><name>pathp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pathe</name> = <name>pathp</name> + <name>l1</name></expr> ;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>interpolate_env</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ent</name> = (struct <name>proxy_alias</name> *)<name><name>rconf</name>-&gt;<name>cookie_paths</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ent</name> = (struct <name>proxy_alias</name> *)<name><name>conf</name>-&gt;<name>cookie_paths</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
}</block></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>cookie_paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>l2</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>l1</name> &gt;= <name>l2</name> &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fake</name></expr></argument>, <argument><expr><name>pathp</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>newpath</name> = <name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>real</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pdiff</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>)</argument_list></call> - <name>l1</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr>(<name>domainp</name> = <call><name>apr_strmatch</name><argument_list>(<argument><expr><name>ap_proxy_strmatch_domain</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>domainp</name> += 7</expr>;</expr_stmt>
<expr_stmt><expr><name>doffs</name> = <name>domainp</name> - <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>domaine</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>domainp</name></expr></argument>, <argument><expr>';'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l1</name> = <name>domaine</name> ? (<name>domaine</name> - <name>domainp</name>) : <call><name>strlen</name><argument_list>(<argument><expr><name>domainp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>domaine</name> = <name>domainp</name> + <name>l1</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>interpolate_env</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ent</name> = (struct <name>proxy_alias</name> *)<name><name>rconf</name>-&gt;<name>cookie_domains</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ent</name> = (struct <name>proxy_alias</name> *)<name><name>conf</name>-&gt;<name>cookie_domains</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
}</block></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>cookie_domains</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>l2</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>l1</name> &gt;= <name>l2</name> &amp;&amp; <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fake</name></expr></argument>, <argument><expr><name>domainp</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>newdomain</name> = <name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>real</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ddiff</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>newdomain</name></expr></argument>)</argument_list></call> - <name>l1</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name>newpath</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>len</name> + <name>pdiff</name> + <name>ddiff</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l1</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newdomain</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>l2</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>newdomain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>doffs</name> &gt; <name>poffs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>poffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name> + <name>poffs</name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name> + <name>poffs</name> + <name>l1</name></expr></argument>, <argument><expr><name>pathe</name></expr></argument>, <argument><expr><name>domainp</name> - <name>pathe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name> + <name>doffs</name> + <name>pdiff</name></expr></argument>, <argument><expr><name>newdomain</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ret</name> + <name>doffs</name> + <name>pdiff</name> + <name>l2</name></expr></argument>, <argument><expr><name>domaine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>doffs</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name> + <name>doffs</name></expr></argument>, <argument><expr><name>newdomain</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name> + <name>doffs</name> + <name>l2</name></expr></argument>, <argument><expr><name>domaine</name></expr></argument>, <argument><expr><name>pathp</name> - <name>domaine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name> + <name>poffs</name> + <name>ddiff</name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ret</name> + <name>poffs</name> + <name>ddiff</name> + <name>l1</name></expr></argument>, <argument><expr><name>pathe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>poffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name> + <name>poffs</name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ret</name> + <name>poffs</name> + <name>l1</name></expr></argument>, <argument><expr><name>pathe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>newdomain</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>len</name> + <name>pdiff</name> + <name>ddiff</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>newdomain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>doffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name> + <name>doffs</name></expr></argument>, <argument><expr><name>newdomain</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ret</name> + <name>doffs</name>+<name>l2</name></expr></argument>, <argument><expr><name>domaine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ret</name> = (<name>char</name> *)<name>str</name></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_valid_balancer_name</name><argument_list>(<argument>char *name</argument>, <argument>int i</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>!<name>i</name></expr>)</condition><then>
<expr_stmt><expr><name>i</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>BALANCER_PREFIX</name></expr></argument>)</argument_list></sizeof>-1</expr>;</expr_stmt></then></if>
<return>return <expr>(!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>BALANCER_PREFIX</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>proxy_balancer *</argument>)</argument_list></macro> <macro><name>ap_proxy_get_balancer</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>proxy_server_conf *conf</argument>,
<argument>const char *url</argument>,
<argument>int care</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>c</name></decl>, *<decl><type ref="prev"/><name>uri</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_hashes</name></type> <name>hash</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == <name>NULL</name> || <name><name>c</name><index>[<expr>1</expr>]</index></name> != '/' || <name><name>c</name><index>[<expr>2</expr>]</index></name> != '/' || <name><name>c</name><index>[<expr>3</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>c</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>c</name> + 3</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>c</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name>.<name>def</name></name> = <call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name>.<name>fnv</name></name> = <call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_FNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>balancer</name> = (<name>proxy_balancer</name> *)<name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>balancer</name>-&gt;<name>hash</name>.<name>def</name></name> == <name><name>hash</name>.<name>def</name></name> &amp;&amp; <name><name>balancer</name>-&gt;<name>hash</name>.<name>fnv</name></name> == <name><name>hash</name>.<name>fnv</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>care</name> || !<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>inactive</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>balancer</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>balancer</name>++</expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_proxy_update_balancer</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>proxy_balancer *balancer</argument>,
<argument>const char *url</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>puri</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>url</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_uri_parse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>puri</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"unable to parse: %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>puri</name>.<name>path</name></name> &amp;&amp; <call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>vpath</name></name></expr></argument>, <argument><expr><name><name>puri</name>.<name>path</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"balancer %s front-end virtual-path (%s) too long"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>puri</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>puri</name>.<name>hostname</name></name> &amp;&amp; <call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>vhost</name></name></expr></argument>, <argument><expr><name><name>puri</name>.<name>hostname</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"balancer %s front-end vhost name (%s) too long"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>puri</name>.<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_UNSET_NONCE</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_proxy_define_balancer</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>proxy_balancer **balancer</argument>,
<argument>proxy_server_conf *conf</argument>,
<argument>const char *url</argument>,
<argument>const char *alias</argument>,
<argument>int do_malloc</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>proxy_balancer_method</name> *</type><name>lbmethod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer_shared</name> *</type><name>bshared</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>c</name></decl>, *<decl><type ref="prev"/><name>q</name></decl>, *<decl><type ref="prev"/><name>uri</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sname</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == <name>NULL</name> || <name><name>c</name><index>[<expr>1</expr>]</index></name> != '/' || <name><name>c</name><index>[<expr>2</expr>]</index></name> != '/' || <name><name>c</name><index>[<expr>3</expr>]</index></name> == '\0'</expr>)</condition><then>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Bad syntax for a balancer name (%s)"</expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>q</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>c</name> + 3</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr>*<name>q</name> = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>balancer</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>balancers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>*<name>balancer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_balancer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lbmethod</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>PROXY_LBMETHOD</name></expr></argument>, <argument><expr>"byrequests"</expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>balancer</name>)-&gt;<name>workers</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_worker</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>balancer</name>)-&gt;<name>gmutex</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>balancer</name>)-&gt;<name>tmutex</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>balancer</name>)-&gt;<name>lbmethod</name></name> = <name>lbmethod</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>do_malloc</name></expr>)</condition><then>
<expr_stmt><expr><name>bshared</name> = <call><name>ap_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_balancer_shared</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>bshared</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_balancer_shared</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bshared</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_balancer_shared</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bshared</name>-&gt;<name>was_malloced</name></name> = (<name>do_malloc</name> != 0)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>bshared</name>-&gt;<name>lbpname</name></name></expr></argument>, <argument><expr>"byrequests"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>bshared</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"balancer name (%s) too long"</expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_pstr2_alnum</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>bshared</name>-&gt;<name>name</name></name> + <sizeof>sizeof<argument_list>(<argument><expr><name>BALANCER_PREFIX</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr>&amp;<name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sname</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>"_"</expr></argument>, <argument><expr><name>sname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>bshared</name>-&gt;<name>sname</name></name></expr></argument>, <argument><expr><name>sname</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"balancer safe-name (%s) too long"</expr></argument>, <argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>bshared</name>-&gt;<name>hash</name>.<name>def</name></name> = <call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name><name>bshared</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bshared</name>-&gt;<name>hash</name>.<name>fnv</name></name> = <call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name><name>bshared</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_FNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>balancer</name>)-&gt;<name>hash</name></name> = <name><name>bshared</name>-&gt;<name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bshared</name>-&gt;<name>forcerecovery</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>bshared</name>-&gt;<name>sticky_separator</name></name> = '.'</expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>bshared</name>-&gt;<name>nonce</name></name> = <name>PROXY_UNSET_NONCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>balancer</name>)-&gt;<name>s</name></name> = <name>bshared</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>balancer</name>)-&gt;<name>sconf</name></name> = <name>conf</name></expr>;</expr_stmt>
<return>return <expr><call><name>ap_proxy_update_balancer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>*<name>balancer</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_share_balancer</name><argument_list>(<argument>proxy_balancer *balancer</argument>,
<argument>proxy_balancer_shared *shm</argument>,
<argument>int i</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer_method</name> *</type><name>lbmethod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>action</name> <init>= <expr>"copying"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>shm</name> || !<name><name>balancer</name>-&gt;<name>s</name></name></expr>)</condition><then>
<return>return <expr><name>APR_EINVAL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>def</name></name> != <name><name>shm</name>-&gt;<name>hash</name>.<name>def</name></name>) ||
(<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>fnv</name></name> != <name><name>shm</name>-&gt;<name>hash</name>.<name>fnv</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>shm</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_balancer_shared</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>was_malloced</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>action</name> = "re-using"</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name></name> = <name>shm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>index</name></name> = <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02337</expr></argument>)</argument_list></call>
"%s shm[%d] (0x%pp) for %s"</expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>shm</name></expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lbmethod</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>PROXY_LBMETHOD</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>lbpname</name></name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lbmethod</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>lbmethod</name></name> = <name>lbmethod</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02432</expr></argument>)</argument_list></call>
"Cannot find LB Method: %s"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>lbpname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></else></if>
<if>if <condition>(<expr>*<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>nonce</name></name> == <name>PROXY_UNSET_NONCE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>nonce</name><index>[<expr><name>APR_UUID_FORMATTED_LENGTH</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uuid_t</name></type> <name>uuid</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_uuid_get</name><argument_list>(<argument><expr>&amp;<name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_uuid_format</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>, <argument><expr>&amp;<name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>nonce</name></name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_initialize_balancer</name><argument_list>(<argument>proxy_balancer *balancer</argument>, <argument>server_rec *s</argument>, <argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_provider_t</name> *</type><name>storage</name> <init>= <expr><name><name>balancer</name>-&gt;<name>storage</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>storage</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00918</expr></argument>)</argument_list></call>
"no provider for %s"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>balancer</name>-&gt;<name>gmutex</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00919</expr></argument>)</argument_list></call>
"no mutex %s"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_global_mutex_child_init</name><argument_list>(<argument><expr>&amp;(<name><name>balancer</name>-&gt;<name>gmutex</name></name>)</expr></argument>,
<argument><expr><call><name>apr_global_mutex_lockfile</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>gmutex</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00920</expr></argument>)</argument_list></call>
"Failed to reopen mutex %s in child"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name><name>storage</name>-&gt;<name>attach</name></name><argument_list>(<argument><expr>&amp;(<name><name>balancer</name>-&gt;<name>wslot</name></name>)</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sname</name></name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr>&amp;<name>num</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>balancer</name>-&gt;<name>wslot</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00921</expr></argument>)</argument_list></call> "slotmem_attach failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>balancer</name>-&gt;<name>lbmethod</name></name> &amp;&amp; <name><name>balancer</name>-&gt;<name>lbmethod</name>-&gt;<name>reset</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name><name>balancer</name>-&gt;<name>lbmethod</name>-&gt;<name>reset</name></name><argument_list>(<argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>balancer</name>-&gt;<name>tmutex</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;(<name><name>balancer</name>-&gt;<name>tmutex</name></name>)</expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00922</expr></argument>)</argument_list></call>
"can not create balancer thread mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type> <name>socket_cleanup</name><parameter_list>(<param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>sock</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>tmp_bb</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>connection</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>ssl_hostname</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>scpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>conn_pool_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>theworker</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr>(<name>proxy_worker</name> *)<name>theworker</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>res</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>init_conn_pool</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_conn_pool</name> *</type><name>cp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"proxy_worker_cp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> = (<name>proxy_conn_pool</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_conn_pool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>cp</name></name> = <name>cp</name></expr>;</expr_stmt>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_connection_reusable</name><argument_list>(<argument>proxy_conn_rec *conn</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr><name><name>conn</name>-&gt;<name>worker</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr>! (<name><name>conn</name>-&gt;<name>close</name></name> || !<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>is_address_reusable</name></name> || <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name>)</expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>connection_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>theconn</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name> <init>= <expr>(<name>proxy_conn_rec</name> *)<name>theconn</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr><name><name>conn</name>-&gt;<name>worker</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>pool</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>r</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>r</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>inreslist</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00923</expr></argument>)</argument_list></call>
"Pooled connection 0x%pp for worker %s has been"
" already returned to the connection pool."</expr></argument>, <argument><expr><name>conn</name></expr></argument>,
<argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>is_address_reusable</name></name> || <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>conn</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_conn_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>pool</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>worker</name></name> = <name>worker</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;(<name><name>conn</name>-&gt;<name>scpool</name></name>)</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>scpool</name></name></expr></argument>, <argument><expr>"proxy_conn_scpool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conn</name>-&gt;<name>close</name></name>
|| (<name><name>conn</name>-&gt;<name>connection</name></name>
&amp;&amp; <name><name>conn</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> == <name>AP_CONN_CLOSE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>socket_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 0</expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name> &amp;&amp; <name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>res</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>inreslist</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_reslist_release</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>res</name></name></expr></argument>, <argument><expr>(<name>void</name> *)<name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_ssl_connection_cleanup</name><argument_list>(<argument>proxy_conn_rec *conn</argument>,
<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>sock</name></name> &amp;&amp; <name><name>conn</name>-&gt;<name>connection</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>connection</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>tmp_bb</name></name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>APR_NONBLOCK_READ</name></expr></argument>,
<argument><expr><name>HUGE_STRING_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>tmp_bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_length</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>tmp_bb</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"SSL cleanup brigade contained %"
<name>APR_OFF_T_FMT</name> " bytes of data."</expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>tmp_bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> != <name>APR_SUCCESS</name>) &amp;&amp; !<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>socket_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>connection_constructor</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>resource</name></decl></param>, <param><decl><type><name>void</name> *</type><name>params</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>scpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr>(<name>proxy_worker</name> *)<name>params</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>"proxy_conn_pool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>scpool</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>scpool</name></expr></argument>, <argument><expr>"proxy_conn_scpool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>conn</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_conn_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>pool</name></name> = <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>scpool</name></name> = <name>scpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>worker</name></name> = <name>worker</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>inreslist</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>resource</name> = <name>conn</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>connection_destructor</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>resource</name></decl></param>, <param><decl><type><name>void</name> *</type><name>params</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr><name>params</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>pool</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name> <init>= <expr><name>resource</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_proxy_worker_name</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>proxy_worker *worker</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>!(*<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>uds_path</name></name>) || !<name>p</name></expr>)</condition><then> <block>{
<return>return <expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"unix:"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>uds_path</name></name></expr></argument>, <argument><expr>"|"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>proxy_worker *</argument>)</argument_list></macro> <macro><name>ap_proxy_get_worker</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>proxy_balancer *balancer</argument>,
<argument>proxy_server_conf *conf</argument>,
<argument>const char *url</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>max_worker</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_match</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>url_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>worker_name_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>url_copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>url</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>url</name> = <call><name>ap_proxy_de_socketfy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == <name>NULL</name> || <name><name>c</name><index>[<expr>1</expr>]</index></name> != '/' || <name><name>c</name><index>[<expr>2</expr>]</index></name> != '/' || <name><name>c</name><index>[<expr>3</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>url_length</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url_copy</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>url_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>c</name>+3</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pathstart</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pathstart</name> = <name>url_copy</name> + (<name>c</name> - <name>url</name>)</expr>;</expr_stmt>
<expr_stmt><expr>*<name>pathstart</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>url_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_match</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>url_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pathstart</name> = '/'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>url_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_match</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>url_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>balancer</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>workers</name> <init>= <expr>(<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>workers</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>worker</name> = *<name>workers</name></expr>;</expr_stmt>
<if>if <condition>( <expr>((<name>worker_name_length</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call>) &lt;= <name>url_length</name>)
&amp;&amp; (<name>worker_name_length</name> &gt;= <name>min_match</name>)
&amp;&amp; (<name>worker_name_length</name> &gt; <name>max_match</name>)
&amp;&amp; (<call><name>strncmp</name><argument_list>(<argument><expr><name>url_copy</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>worker_name_length</name></expr></argument>)</argument_list></call> == 0)</expr> )</condition><then> <block>{
<expr_stmt><expr><name>max_worker</name> = <name>worker</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_match</name> = <name>worker_name_length</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>worker</name> = (<name>proxy_worker</name> *)<name><name>conf</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>worker</name>++</expr></incr>) <block>{
<if>if <condition>( <expr>((<name>worker_name_length</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call>) &lt;= <name>url_length</name>)
&amp;&amp; (<name>worker_name_length</name> &gt;= <name>min_match</name>)
&amp;&amp; (<name>worker_name_length</name> &gt; <name>max_match</name>)
&amp;&amp; (<call><name>strncmp</name><argument_list>(<argument><expr><name>url_copy</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>worker_name_length</name></expr></argument>)</argument_list></call> == 0)</expr> )</condition><then> <block>{
<expr_stmt><expr><name>max_worker</name> = <name>worker</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_match</name> = <name>worker_name_length</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></else></if>
<return>return <expr><name>max_worker</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_proxy_define_worker</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>proxy_worker **worker</argument>,
<argument>proxy_balancer *balancer</argument>,
<argument>proxy_server_conf *conf</argument>,
<argument>const char *url</argument>,
<argument>int do_malloc</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>uri</name></decl>, <decl><type ref="prev"/><name>urisock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker_shared</name> *</type><name>wshared</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>, *<decl><type ref="prev"/><name>sockpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr>(<name>char</name> *)<name>url</name></expr></argument>, <argument><expr>'|'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ptr</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>ptr</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>urisock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>urisock</name>.<name>scheme</name></name></expr></argument>, <argument><expr>"unix"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sockpath</name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>urisock</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>url</name> = <name>ptr</name>+1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>ptr</name> = '|'</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Unable to parse URL: "</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>uri</name>.<name>scheme</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"URL must be absolute!: "</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>uri</name>.<name>hostname</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>sockpath</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>uri</name>.<name>hostname</name></name> = "localhost"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"URL must be absolute!: "</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name><name>uri</name>.<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name><name>uri</name>.<name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>balancer</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>runtime</name></decl>;</decl_stmt>
<expr_stmt><expr><name>runtime</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>worker</name> = *<name>runtime</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_worker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>wupdated</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>conf</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>worker</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>worker</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_worker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_worker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>do_malloc</name></expr>)</condition><then>
<expr_stmt><expr><name>wshared</name> = <call><name>ap_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_worker_shared</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>wshared</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_worker_shared</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>wshared</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_worker_shared</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>port</name></name> = (<name><name>uri</name>.<name>port</name></name> ? <name><name>uri</name>.<name>port</name></name> : <call><name>ap_proxy_port_of_scheme</name><argument_list>(<argument><expr><name><name>uri</name>.<name>scheme</name></name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>uri</name>.<name>port</name></name> &amp;&amp; <name><name>uri</name>.<name>port</name></name> == <call><name>ap_proxy_port_of_scheme</name><argument_list>(<argument><expr><name><name>uri</name>.<name>scheme</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>uri</name>.<name>port</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>ptr</name> = <call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>, <argument><expr><name>APR_URI_UNP_REVEALPASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>wshared</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02808</expr></argument>)</argument_list></call>
"Alert! worker name (%s) too long; truncated to: %s"</expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>wshared</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>wshared</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr><name><name>uri</name>.<name>scheme</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"worker scheme (%s) too long"</expr></argument>, <argument><expr><name><name>uri</name>.<name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>wshared</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>uri</name>.<name>hostname</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"worker hostname (%s) too long"</expr></argument>, <argument><expr><name><name>uri</name>.<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>flush_packets</name></name> = <name>flush_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>flush_wait</name></name> = <name>PROXY_FLUSH_WAIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>is_address_reusable</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>lbfactor</name></name> = 100</expr>;</expr_stmt>
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>passes</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>fails</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>interval</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>HCHECK_WATHCHDOG_DEFAULT_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>smax</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>hash</name>.<name>def</name></name> = <call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name><name>wshared</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>hash</name>.<name>fnv</name></name> = <call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name><name>wshared</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_FNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>was_malloced</name></name> = (<name>do_malloc</name> != 0)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>sockpath</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>wshared</name>-&gt;<name>uds_path</name></name></expr></argument>, <argument><expr><name>sockpath</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"worker uds path (%s) too long"</expr></argument>, <argument><expr><name>sockpath</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name><name>wshared</name>-&gt;<name>uds_path</name></name> = '\0'</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<name>balancer</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>wshared</name>-&gt;<name>status</name></name> |= <name>PROXY_WORKER_IGNORE_ERRORS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name>hash</name></name> = <name><name>wshared</name>-&gt;<name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name>context</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name>cp</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name>balancer</name></name> = <name>balancer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name>s</name></name> = <name>wshared</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_share_worker</name><argument_list>(<argument>proxy_worker *worker</argument>, <argument>proxy_worker_shared *shm</argument>,
<argument>int i</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>action</name> <init>= <expr>"copying"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>shm</name> || !<name><name>worker</name>-&gt;<name>s</name></name></expr>)</condition><then>
<return>return <expr><name>APR_EINVAL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>def</name></name> != <name><name>shm</name>-&gt;<name>hash</name>.<name>def</name></name>) ||
(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>fnv</name></name> != <name><name>shm</name>-&gt;<name>hash</name>.<name>fnv</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>shm</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_worker_shared</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>was_malloced</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>action</name> = "re-using"</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name></name> = <name>shm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>index</name></name> = <name>i</name></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name><name>ap_server_conf</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02338</expr></argument>)</argument_list></call>
"%s shm[%d] (0x%pp) for worker: %s"</expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>shm</name></expr></argument>,
<argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pool</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_initialize_worker</name><argument_list>(<argument>proxy_worker *worker</argument>, <argument>server_rec *s</argument>, <argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mpm_threads</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> &amp; <name>PROXY_WORKER_INITIALIZED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00924</expr></argument>)</argument_list></call>
"worker %s shared already initialized"</expr></argument>,
<argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00925</expr></argument>)</argument_list></call>
"initializing worker %s shared"</expr></argument>,
<argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>retry_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>retry</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>PROXY_WORKER_DEFAULT_RETRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>is_address_reusable</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>is_address_reusable</name></name> = 1</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MAX_THREADS</name></expr></argument>, <argument><expr>&amp;<name>mpm_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mpm_threads</name> &gt; 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name> == 0 || <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name> &gt; <name>mpm_threads</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name> = <name>mpm_threads</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>smax</name></name> == -1 || <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>smax</name></name> &gt; <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>smax</name></name> = <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>min</name></name> &gt; <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>smax</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>min</name></name> = <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>smax</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>min</name></name> = <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>smax</name></name> = <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>local_status</name></name> &amp; <name>PROXY_WORKER_INITIALIZED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00926</expr></argument>)</argument_list></call>
"worker %s local already initialized"</expr></argument>,
<argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00927</expr></argument>)</argument_list></call>
"initializing worker %s local"</expr></argument>,
<argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>proxy_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>tmutex</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;(<name><name>worker</name>-&gt;<name>tmutex</name></name>)</expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00928</expr></argument>)</argument_list></call>
"can not create worker thread mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>proxy_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>cp</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>init_conn_pool</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>cp</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00929</expr></argument>)</argument_list></call>
"can not create connection pool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>proxy_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_reslist_create</name><argument_list>(<argument><expr>&amp;(<name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>res</name></name>)</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>min</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>smax</name></name></expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ttl</name></name></expr></argument>,
<argument><expr><name>connection_constructor</name></expr></argument>, <argument><expr><name>connection_destructor</name></expr></argument>,
<argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>void</name> *)<name>worker</name></expr></argument>,
<argument><expr><name>conn_pool_cleanup</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00930</expr></argument>)</argument_list></call>
"initialized pool in child %" <name>APR_PID_T_FMT</name> " for (%s) min=%d max=%d smax=%d"</expr></argument>,
<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>min</name></name></expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>smax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>acquire_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_reslist_timeout_set</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>res</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>acquire</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>conn</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>connection_constructor</name><argument_list>(<argument><expr>&amp;<name>conn</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00931</expr></argument>)</argument_list></call>
"initialized single connection worker in child %" <name>APR_PID_T_FMT</name> " for (%s)"</expr></argument>,
<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>proxy_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> |= (<name>PROXY_WORKER_INITIALIZED</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>local_status</name></name> |= (<name>PROXY_WORKER_INITIALIZED</name>)</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ap_proxy_retry_worker</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_function</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> &amp; <name>PROXY_WORKER_IN_ERROR</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PROXY_WORKER_IS</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>PROXY_WORKER_STOPPED</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>3305</expr></argument>)</argument_list></call>
"%s: Won't retry worker (%s): stopped"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> &amp; <name>PROXY_WORKER_IGNORE_ERRORS</name>)
|| <call><name>apr_time_now</name><argument_list>()</argument_list></call> &gt; <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>error_time</name></name> + <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>retry</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>retries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> &amp;= ~<name>PROXY_WORKER_IN_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00932</expr></argument>)</argument_list></call>
"%s: worker for (%s) has been marked for retry"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00933</expr></argument>)</argument_list></call>
"%s: too soon to retry worker for (%s)"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fix_uds_filename</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> **</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>, *<decl><type ref="prev"/><name>ptr2</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>r</name> || !<name><name>r</name>-&gt;<name>filename</name></name></expr>)</condition><then> <return>return;</return></then></if>
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> &amp;&amp;
(<name>ptr2</name> = <call><name>ap_strcasestr</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"unix:"</expr></argument>)</argument_list></call>) &amp;&amp;
(<name>ptr</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr>'|'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>urisock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>ptr</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>, <argument><expr>&amp;<name>urisock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>rurl</name> <init>= <expr><name>ptr</name>+1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>sockpath</name> <init>= <expr><call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>urisock</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"uds_path"</expr></argument>, <argument><expr><name>sockpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>url</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>rurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name>+6</expr></argument>, <argument><expr><name>rurl</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>rurl</name></expr></argument>)</argument_list></call>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"*: rewrite of url due to UDS(%s): %s (%s)"</expr></argument>,
<argument><expr><name>sockpath</name></expr></argument>, <argument><expr>*<name>url</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>ptr</name> = '|'</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_pre_request</name><argument_list>(<argument>proxy_worker **worker</argument>,
<argument>proxy_balancer **balancer</argument>,
<argument>request_rec *r</argument>,
<argument>proxy_server_conf *conf</argument>, <argument>char **url</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>access_status</name> = <call><name>proxy_run_pre_request</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> == <name>DECLINED</name> &amp;&amp; *<name>balancer</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>worker</name> = <call><name>ap_proxy_get_worker</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr>*<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>worker</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"%s: found worker %s for %s"</expr></argument>,
<argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>scheme</name></name></name></expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>, <argument><expr>*<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>balancer</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fix_uds_filename</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>access_status</name> = <name>OK</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> == <name>PROXYREQ_PROXY</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>forward</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"*: found forward proxy worker for %s"</expr></argument>, <argument><expr>*<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>balancer</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>worker</name> = <name><name>conf</name>-&gt;<name>forward</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>access_status</name> = <name>OK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-nokeepalive"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> == <name>PROXYREQ_REVERSE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>reverse</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"*: using default reverse proxy worker for %s (no keepalive)"</expr></argument>, <argument><expr>*<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>balancer</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>worker</name> = <name><name>conf</name>-&gt;<name>reverse</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>access_status</name> = <name>OK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-nokeepalive"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fix_uds_filename</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>access_status</name> == <name>DECLINED</name> &amp;&amp; *<name>balancer</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00934</expr></argument>)</argument_list></call>
"all workers are busy. Unable to serve %s"</expr></argument>, <argument><expr>*<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>access_status</name> = <name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>access_status</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_post_request</name><argument_list>(<argument>proxy_worker *worker</argument>,
<argument>proxy_balancer *balancer</argument>,
<argument>request_rec *r</argument>,
<argument>proxy_server_conf *conf</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>balancer</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>access_status</name> = <call><name>proxy_run_post_request</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> == <name>DECLINED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>access_status</name> = <name>OK</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>access_status</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_connect_to_backend</name><argument_list>(<argument>apr_socket_t **newsock</argument>,
<argument>const char *proxy_function</argument>,
<argument>apr_sockaddr_t *backend_addr</argument>,
<argument>const char *backend_name</argument>,
<argument>proxy_server_conf *conf</argument>,
<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>connected</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loglevel</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>backend_addr</name> &amp;&amp; !<name>connected</name></expr>)</condition> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name><name>backend_addr</name>-&gt;<name>family</name></name></expr></argument>,
<argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>loglevel</name> = <name><name>backend_addr</name>-&gt;<name>next</name></name> ? <name>APLOG_DEBUG</name> : <name>APLOG_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00935</expr></argument>)</argument_list></call>
"%s: error creating fam %d socket for target %s"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name><name>backend_addr</name>-&gt;<name>family</name></name></expr></argument>, <argument><expr><name>backend_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>backend_addr</name> = <name><name>backend_addr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>recv_buffer_size</name></name> &gt; 0 &amp;&amp;
(<name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>, <argument><expr><name>APR_SO_RCVBUF</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>recv_buffer_size</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00936</expr></argument>)</argument_list></call>
"apr_socket_opt_set(SO_RCVBUF): Failed to set "
"ProxyReceiveBufferSize, using default"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>, <argument><expr><name>APR_TCP_NODELAY</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00937</expr></argument>)</argument_list></call>
"apr_socket_opt_set(APR_TCP_NODELAY): "
"Failed to set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>timeout_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"%s: fam %d socket created to connect to %s"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name><name>backend_addr</name>-&gt;<name>family</name></name></expr></argument>, <argument><expr><name>backend_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>source_address</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>local_addr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>local_addr</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>source_address</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_sockaddr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_addr</name>-&gt;<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_bind</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>, <argument><expr><name>local_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00938</expr></argument>)</argument_list></call>
"%s: failed to bind socket to local address"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_connect</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loglevel</name> = <name><name>backend_addr</name>-&gt;<name>next</name></name> ? <name>APLOG_DEBUG</name> : <name>APLOG_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00939</expr></argument>)</argument_list></call>
"%s: attempt to connect to %pI (%s) failed"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>, <argument><expr><name>backend_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>backend_addr</name> = <name><name>backend_addr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>connected</name> = 1</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>connected</name> ? 0 : 1</expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_acquire_connection</name><argument_list>(<argument>const char *proxy_function</argument>,
<argument>proxy_conn_rec **conn</argument>,
<argument>proxy_worker *worker</argument>,
<argument>server_rec *s</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_retry_worker</name><argument_list>(<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00940</expr></argument>)</argument_list></call>
"%s: disabled connection for (%s)"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name> &amp;&amp; <name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>res</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_reslist_acquire</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>res</name></name></expr></argument>, <argument><expr>(<name>void</name> **)<name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>conn</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>connection_constructor</name><argument_list>(<argument><expr>(<name>void</name> **)<name>conn</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>conn</name> = <name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>conn</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>conn</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00941</expr></argument>)</argument_list></call>
"%s: failed to acquire connection for (%s)"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00942</expr></argument>)</argument_list></call>
"%s: has acquired connection for (%s)"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>conn</name>)-&gt;<name>worker</name></name> = <name>worker</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>conn</name>)-&gt;<name>close</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>conn</name>)-&gt;<name>inreslist</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_release_connection</name><argument_list>(<argument>const char *proxy_function</argument>,
<argument>proxy_conn_rec *conn</argument>,
<argument>server_rec *s</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00943</expr></argument>)</argument_list></call>
"%s: has released connection for (%s)"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connection_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>ap_proxy_determine_connection</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>request_rec *r</argument>,
<argument>proxy_server_conf *conf</argument>,
<argument>proxy_worker *worker</argument>,
<argument>proxy_conn_rec *conn</argument>,
<argument>apr_uri_t *uri</argument>,
<argument>char **url</argument>,
<argument>const char *proxyname</argument>,
<argument>apr_port_t proxyport</argument>,
<argument>char *server_portstr</argument>,
<argument>int server_portstr_size</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>server_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>err</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>uerr</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uds_path</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>*<name>url</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr>"URI cannot be parsed: "</expr></argument>, <argument><expr>*<name>url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>uri</name>-&gt;<name>port</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>uri</name>-&gt;<name>port</name></name> = <call><name>ap_proxy_port_of_scheme</name><argument_list>(<argument><expr><name><name>uri</name>-&gt;<name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00944</expr></argument>)</argument_list></call>
"connecting %s to %s:%d"</expr></argument>, <argument><expr>*<name>url</name></expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>proxyname</name> || <name><name>conn</name>-&gt;<name>is_ssl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>url</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>query</name></name> ? "?" : ""</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>query</name></name> ? <name><name>uri</name>-&gt;<name>query</name></name> : ""</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>fragment</name></name> ? "#" : ""</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>fragment</name></name> ? <name><name>uri</name>-&gt;<name>fragment</name></name> : ""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>uds_path</name> = (*<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>uds_path</name></name> ? <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>uds_path</name></name> : <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"uds_path"</expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>uds_path</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>uds_path</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>uds_path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>uds_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>uds_path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02545</expr></argument>)</argument_list></call>
"%s: has determined UDS as %s"</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>uds_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02546</expr></argument>)</argument_list></call>
"%s: cannot determine UDS (%s)"</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr><name>uds_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<name><name>conn</name>-&gt;<name>addr</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>sa</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>addr</name></name> = <name>sa</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>hostname</name></name> = "httpd-UDS"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>port</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>will_reuse</name> <init>= <expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>is_address_reusable</name></name> &amp;&amp; !<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>conn</name>-&gt;<name>hostname</name></name> || !<name>will_reuse</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>proxyname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>hostname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>proxyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>port</name></name> = <name>proxyport</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>is_ssl</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_auth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>forward_info</name> *</type><name>forward</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>forward_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>forward</name></name> = <name>forward</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>forward</name>-&gt;<name>use_http_connect</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>forward</name>-&gt;<name>target_host</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>forward</name>-&gt;<name>target_port</name></name> = <name><name>uri</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>proxy_auth</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Proxy-Authorization"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>proxy_auth</name> != <name>NULL</name> &amp;&amp;
<name><name>proxy_auth</name><index>[<expr>0</expr>]</index></name> != '\0' &amp;&amp;
<name><name>r</name>-&gt;<name>user</name></name> == <name>NULL</name> &amp;&amp;
<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"Proxy-Chain-Auth"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>forward</name>-&gt;<name>proxy_auth</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>proxy_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>hostname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>port</name></name> = <name><name>uri</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<name>will_reuse</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;(<name><name>conn</name>-&gt;<name>addr</name></name>)</expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>port</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>socket_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>will_reuse</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>PROXY_THREAD_LOCK</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00945</expr></argument>)</argument_list></call> "lock"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;(<name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name>)</expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>port</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>addr</name></name> = <name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>uerr</name> = <call><name>PROXY_THREAD_UNLOCK</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>uerr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00946</expr></argument>)</argument_list></call> "unlock"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>addr</name></name> = <name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>close</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>socket_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>err</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"DNS lookup failure for: "</expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>server_port</name> = <call><name>ap_get_server_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>server_portstr_size</name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_is_default_port</name><argument_list>(<argument><expr><name>server_port</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>server_portstr</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>server_portstr</name></expr></argument>, <argument><expr><name>server_portstr_size</name></expr></argument>, <argument><expr>":%d"</expr></argument>,
<argument><expr><name>server_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>OK</name> != <call><name>ap_proxy_checkproxyblock2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>hostname</name></name></expr></argument>,
<argument><expr><name>proxyname</name> ? <name>NULL</name> : <name><name>conn</name>-&gt;<name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>,
<argument><expr>"Connect to remote machine blocked"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>is_ssl</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>dconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_hostname</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>preserve_host</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ssl_hostname</name> = <name><name>r</name>-&gt;<name>hostname</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conn</name>-&gt;<name>forward</name></name>
&amp;&amp; (<call>(<name>forward_info</name> *)<argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>forward</name></name></expr></argument>)</argument_list></call>)-&gt;<name>use_http_connect</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ssl_hostname</name> = ((<name>forward_info</name> *)<name><name>conn</name>-&gt;<name>forward</name></name>)-&gt;<name>target_host</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ssl_hostname</name> = <name><name>conn</name>-&gt;<name>hostname</name></name></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr>(<name><name>conn</name>-&gt;<name>ssl_hostname</name></name> &amp;&amp; (!<name>ssl_hostname</name> ||
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>ssl_hostname</name></name></expr></argument>,
<argument><expr><name>ssl_hostname</name></expr></argument>)</argument_list></call> != 0)) ||
(!<name><name>conn</name>-&gt;<name>ssl_hostname</name></name> &amp;&amp; <name>ssl_hostname</name> &amp;&amp; <name><name>conn</name>-&gt;<name>sock</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>socket_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>ssl_hostname</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>ssl_hostname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>scpool</name></name></expr></argument>, <argument><expr><name>ssl_hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00947</expr></argument>)</argument_list></call>
"connected %s to %s:%d"</expr></argument>, <argument><expr>*<name>url</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ALTERNATE_IS_CONNECTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APR_MSG_PEEK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>MSG_PEEK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_MSG_PEEK</name></cpp:macro> <cpp:value>MSG_PEEK</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_ALTERNATE_IS_CONNECTED</name> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>APR_MSG_PEEK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_is_socket_connected</name><argument_list>(<argument>apr_socket_t *socket</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_pollfd_t</name></type> <name><name>pfds</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>nfds</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pfds</name><index>[<expr>0</expr>]</index></name>.<name>reqevents</name> = <name>APR_POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfds</name><index>[<expr>0</expr>]</index></name>.<name>desc_type</name> = <name>APR_POLL_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfds</name><index>[<expr>0</expr>]</index></name>.<name><name>desc</name>.<name>s</name></name> = <name>socket</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_poll</name><argument_list>(<argument><expr>&amp;<name><name>pfds</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>nfds</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>nfds</name> == 1 &amp;&amp;
<name><name>pfds</name><index>[<expr>0</expr>]</index></name>.<name>rtnevents</name> == <name>APR_POLLIN</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name></type> <name>unused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_socket_recvfrom</name><argument_list>(<argument><expr>&amp;<name>unused</name></expr></argument>, <argument><expr><name>socket</name></expr></argument>, <argument><expr><name>APR_MSG_PEEK</name></expr></argument>,
<argument><expr>&amp;<name><name>buf</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>len</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then>
<else>else
<return>return <expr>0</expr>;</return></else></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> || <call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if></else></if>
<return>return <expr>0</expr>;</return>
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_is_socket_connected</name><argument_list>(<argument>apr_socket_t *sock</argument>)</argument_list></macro>
<block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>buffer_len</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>test_buffer</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>socket_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>current_timeout</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_socket_timeout_get</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr>&amp;<name>current_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>socket_status</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>test_buffer</name></expr></argument>, <argument><expr>&amp;<name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>current_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>socket_status</name></expr></argument>)</argument_list></call>
|| <call><name>APR_STATUS_IS_ECONNRESET</name><argument_list>(<argument><expr><name>socket_status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr>1</expr>;</return>
}</block></else></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>send_http_connect</name><parameter_list>(<param><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>complete</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>drain_buffer</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>forward_info</name> *</type><name>forward</name> <init>= <expr>(<name>forward_info</name> *)<name><name>backend</name>-&gt;<name>forward</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00948</expr></argument>)</argument_list></call>
"CONNECT: sending the CONNECT request for %s:%d "
"to the remote proxy %pI (%s)"</expr></argument>,
<argument><expr><name><name>forward</name>-&gt;<name>target_host</name></name></expr></argument>, <argument><expr><name><name>forward</name>-&gt;<name>target_port</name></name></expr></argument>,
<argument><expr><name><name>backend</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name><name>backend</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nbytes</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"CONNECT %s:%d HTTP/1.0" <name>CRLF</name></expr></argument>,
<argument><expr><name><name>forward</name>-&gt;<name>target_host</name></name></expr></argument>, <argument><expr><name><name>forward</name>-&gt;<name>target_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>forward</name>-&gt;<name>proxy_auth</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>nbytes</name> += <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buffer</name> + <name>nbytes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> - <name>nbytes</name></expr></argument>,
<argument><expr>"Proxy-Authorization: %s" <name>CRLF</name></expr></argument>,
<argument><expr><name><name>forward</name>-&gt;<name>proxy_auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>nbytes</name> += <macro><name>apr_snprintf</name><argument_list>(<argument>buffer + nbytes</argument>, <argument>sizeof(buffer) - nbytes</argument>,
<argument>"Proxy-agent: %s" CRLF CRLF</argument>,
<argument>ap_get_server_banner()</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_send</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>nbytes</name> = <name>left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>buffer</name> + <name>len</name></expr></argument>, <argument><expr>&amp;<name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <name>nbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> -= <name>nbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<macro><name>strstr</name><argument_list>(<argument>buffer + len - nbytes</argument>, <argument>CRLF_ASCII CRLF_ASCII</argument>)</argument_list></macro> <expr>!= <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_xlate_proto_from_ascii</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>complete</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block> while <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>left</name> &gt; 0</expr>)</condition>;</do>
<if>if <condition>(<expr>!<name>complete</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>nbytes</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>drain_buffer</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<while>while <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>nbytes</name></expr>)</condition> <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>drain_buffer</name></expr></argument>, <argument><expr>&amp;<name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drain_buffer</name><index>[<expr><name>nbytes</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>nbytes</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>drain_buffer</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<if>if <condition>(<macro><name>strstr</name><argument_list>(<argument>drain_buffer</argument>, <argument>CRLF_ASCII CRLF_ASCII</argument>)</argument_list></macro> <expr>!= <name>NULL</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></while>
}</block></then></if>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>code_str</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00949</expr></argument>)</argument_list></call>
"send_http_connect: response from the forward proxy: %s"</expr></argument>,
<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"HTTP/%u.%u %3s"</expr></argument>, <argument><expr>&amp;<name>major</name></expr></argument>, <argument><expr>&amp;<name>minor</name></expr></argument>, <argument><expr><name>code_str</name></expr></argument>)</argument_list></call> == 3</expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>code_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>HTTP_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00950</expr></argument>)</argument_list></call>
"send_http_connect: the forward proxy returned code is '%s'"</expr></argument>,
<argument><expr><name>code_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>APR_INCOMPLETE</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></then></if>
<return>return<expr>(<name>status</name>)</expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_connect_uds</name><argument_list>(<argument>apr_socket_t *sock</argument>,
<argument>const char *uds_path</argument>,
<argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_UN_H</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_os_sock_t</name></type> <name>rawsock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>sockaddr_un</name> *</type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socklen_t</name></type> <name>addrlen</name></decl>, <decl><type ref="prev"/><name>pathlen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_os_sock_get</name><argument_list>(<argument><expr>&amp;<name>rawsock</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_timeout_get</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pathlen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>uds_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addrlen</name> = <call><name>APR_OFFSETOF</name><argument_list>(<argument>struct <expr><name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call> + <name>pathlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sa</name> = (struct <name>sockaddr_un</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>addrlen</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sa</name>-&gt;<name>sun_path</name></name></expr></argument>, <argument><expr><name>uds_path</name></expr></argument>, <argument><expr><name>pathlen</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name>-&gt;<name>sun_family</name></name> = <name>AF_UNIX</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>rv</name> = <call><name>connect</name><argument_list>(<argument><expr><name>rawsock</name></expr></argument>, <argument><expr>(struct <name>sockaddr</name>*)<name>sa</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>rv</name> == -1 &amp;&amp; (<name>rv</name> = <name>errno</name>) == <name>EINTR</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>rv</name> &amp;&amp; <name>rv</name> != <name>EISCONN</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> == <name>EINPROGRESS</name> || <name>rv</name> == <name>EALREADY</name>) &amp;&amp; (<name>t</name> &gt; 0)</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_MAJOR_VERSION</name> &lt; 2</expr></cpp:if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_wait_for_io_or_timeout</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_wait</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>APR_WAIT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>APR_ENOTIMPL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_check_connection</name><argument_list>(<argument>const char *scheme</argument>,
<argument>proxy_conn_rec *conn</argument>,
<argument>server_rec *server</argument>,
<argument>unsigned max_blank_lines</argument>,
<argument>int flags</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr><name><name>conn</name>-&gt;<name>worker</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conn</name>-&gt;<name>connection</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_check_pipeline</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>tmp_bb</name></name></expr></argument>,
<argument><expr><name>max_blank_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>tmp_bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>flags</name> &amp; <name>PROXY_CHECK_CONN_EMPTY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_ENOTEMPTY</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ap_proxy_is_socket_connected</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_EPIPE</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conn</name>-&gt;<name>sock</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_proxy_is_socket_connected</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_EPIPE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_ENOSOCKET</name></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APLOGtrace2</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>local_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_socket_addr_get</name><argument_list>(<argument><expr>&amp;<name>local_addr</name></expr></argument>, <argument><expr><name>APR_LOCAL</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>server</name></expr></argument>,
<argument><expr>"%s: reusing backend connection %pI&lt;&gt;%pI"</expr></argument>,
<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>local_addr</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conn</name>-&gt;<name>sock</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>ssl_hostname</name><index>[<expr><name>PROXY_WORKER_RFC1035_NAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_EINVAL</name>
|| !<name><name>conn</name>-&gt;<name>ssl_hostname</name></name>
|| <call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name>ssl_hostname</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>ssl_hostname</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ssl_hostname</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>socket_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_ENOTEMPTY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00951</expr></argument>)</argument_list></call>
"%s: backend socket is disconnected."</expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03408</expr></argument>)</argument_list></call>
"%s: reusable backend connection is not empty: "
"forcibly closed"</expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>ssl_hostname</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>ssl_hostname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>scpool</name></name></expr></argument>, <argument><expr><name>ssl_hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_connect_backend</name><argument_list>(<argument>const char *proxy_function</argument>,
<argument>proxy_conn_rec *conn</argument>,
<argument>proxy_worker *worker</argument>,
<argument>server_rec *s</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loglevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>backend_addr</name> <init>= <expr><name><name>conn</name>-&gt;<name>addr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>local_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>newsock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name> <init>= <expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name> <init>=
<expr>(<name>proxy_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_proxy_check_connection</name><argument_list>(<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_EINVAL</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; (<name>backend_addr</name> || <name><name>conn</name>-&gt;<name>uds_path</name></name>)</expr>)</condition> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_UN_H</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>uds_path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr>&amp;<name>newsock</name></expr></argument>, <argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>scpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>loglevel</name> = <name>APLOG_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02453</expr></argument>)</argument_list></call>
"%s: error creating Unix domain socket for "
"target %s"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>connection</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_proxy_connect_uds</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>uds_path</name></name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>scpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02454</expr></argument>)</argument_list></call>
"%s: attempt to connect to Unix domain socket "
"%s (%s) failed"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>uds_path</name></name></expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02823</expr></argument>)</argument_list></call>
"%s: connection established with Unix domain socket "
"%s (%s)"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>uds_path</name></name></expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr>&amp;<name>newsock</name></expr></argument>, <argument><expr><name><name>backend_addr</name>-&gt;<name>family</name></name></expr></argument>,
<argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>APR_PROTO_TCP</name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>scpool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>loglevel</name> = <name><name>backend_addr</name>-&gt;<name>next</name></name> ? <name>APLOG_DEBUG</name> : <name>APLOG_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00952</expr></argument>)</argument_list></call>
"%s: error creating fam %d socket for "
"target %s"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>,
<argument><expr><name><name>backend_addr</name>-&gt;<name>family</name></name></expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>backend_addr</name> = <name><name>backend_addr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>connection</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>recv_buffer_size</name></name> &gt; 0 &amp;&amp;
(<name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name>APR_SO_RCVBUF</name></expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>recv_buffer_size</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00953</expr></argument>)</argument_list></call>
"apr_socket_opt_set(SO_RCVBUF): Failed to set "
"ProxyReceiveBufferSize, using default"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name>APR_TCP_NODELAY</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00954</expr></argument>)</argument_list></call>
"apr_socket_opt_set(APR_TCP_NODELAY): "
"Failed to set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>conn_timeout_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>conn_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>timeout_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>timeout_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>keepalive</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>,
<argument><expr><name>APR_SO_KEEPALIVE</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00955</expr></argument>)</argument_list></call>
"apr_socket_opt_set(SO_KEEPALIVE): Failed to set"
" Keepalive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"%s: fam %d socket created to connect to %s"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name><name>backend_addr</name>-&gt;<name>family</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>source_address_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>local_addr</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>scpool</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>source_address</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_sockaddr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_addr</name>-&gt;<name>pool</name></name> = <name><name>conn</name>-&gt;<name>scpool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_bind</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name>local_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00956</expr></argument>)</argument_list></call>
"%s: failed to bind socket to local address"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_connect</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loglevel</name> = <name><name>backend_addr</name>-&gt;<name>next</name></name> ? <name>APLOG_DEBUG</name> : <name>APLOG_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00957</expr></argument>)</argument_list></call>
"%s: attempt to connect to %pI (%s) failed"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>,
<argument><expr><name>backend_addr</name></expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>backend_addr</name> = <name><name>backend_addr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02824</expr></argument>)</argument_list></call>
"%s: connection established with %pI (%s)"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>,
<argument><expr><name>backend_addr</name></expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>timeout_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>timeout_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>sock</name></name> = <name>newsock</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>conn</name>-&gt;<name>uds_path</name></name> &amp;&amp; <name><name>conn</name>-&gt;<name>forward</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>forward_info</name> *</type><name>forward</name> <init>= <expr>(<name>forward_info</name> *)<name><name>conn</name>-&gt;<name>forward</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>forward</name>-&gt;<name>use_http_connect</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>send_http_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>sock</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loglevel</name> = <name><name>backend_addr</name>-&gt;<name>next</name></name> ? <name>APLOG_DEBUG</name> : <name>APLOG_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00958</expr></argument>)</argument_list></call>
"%s: attempt to connect to %s:%d "
"via http CONNECT through %pI (%s) failed"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>,
<argument><expr><name><name>forward</name>-&gt;<name>target_host</name></name></expr></argument>, <argument><expr><name><name>forward</name>-&gt;<name>target_port</name></name></expr></argument>,
<argument><expr><name>backend_addr</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>backend_addr</name> = <name><name>backend_addr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> &amp; <name>PROXY_WORKER_IGNORE_ERRORS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>error_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> |= <name>PROXY_WORKER_IN_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00959</expr></argument>)</argument_list></call>
"ap_proxy_connect_backend disabling worker for (%s) for %"
<name>APR_TIME_T_FMT</name> "s"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>retry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>retries</name></name></expr>)</condition><then> <block>{
}</block></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>error_time</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>retries</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>socket_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>rv</name> == <name>APR_SUCCESS</name> ? <name>OK</name> : <name>DECLINED</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>connection_shutdown</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>theconn</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name> <init>= <expr>(<name>proxy_conn_rec</name> *)<name>theconn</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>conn</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>c</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>saved_timeout</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_socket_timeout_get</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr>&amp;<name>saved_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>saved_timeout</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>(<name>void</name>)<call><name>ap_shutdown_conn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>saved_timeout</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>saved_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02642</expr></argument>)</argument_list></call>
"proxy: connection shutdown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_connection_create</name><argument_list>(<argument>const char *proxy_function</argument>,
<argument>proxy_conn_rec *conn</argument>,
<argument>conn_rec *c</argument>,
<argument>server_rec *s</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>backend_addr</name> <init>= <expr><name><name>conn</name>-&gt;<name>addr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>current_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>connection</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bucket_alloc</name> = <call><name>apr_bucket_alloc_create</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>scpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>tmp_bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>scpool</name></name></expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>connection</name></name> = <call><name>ap_run_create_connection</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>scpool</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>conn</name>-&gt;<name>connection</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00960</expr></argument>)</argument_list></call> "%s: an error occurred creating a "
"new connection to %pI (%s)"</expr></argument>, <argument><expr><name>proxy_function</name></expr></argument>,
<argument><expr><name>backend_addr</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>socket_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>is_ssl</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_proxy_ssl_enable</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00961</expr></argument>)</argument_list></call> "%s: failed to enable ssl support "
"for %pI (%s)"</expr></argument>, <argument><expr><name>proxy_function</name></expr></argument>,
<argument><expr><name>backend_addr</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_proxy_ssl_disable</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00962</expr></argument>)</argument_list></call>
"%s: connection complete to %pI (%s)"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name>backend_addr</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_timeout_get</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr>&amp;<name>current_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ap_run_pre_connection</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>OK</name> &amp;&amp; <name>rc</name> != <name>DONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00963</expr></argument>)</argument_list></call>
"%s: pre_connection setup failed (%d)"</expr></argument>,
<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>current_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_pre_cleanup_register</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>scpool</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connection_shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<function><type><name>int</name></type> <name>ap_proxy_lb_workers</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>lb_workers_limit</name></expr>)</condition><then>
<expr_stmt><expr><name>lb_workers_limit</name> = <name>proxy_lb_workers</name> + <name>PROXY_DYNAMIC_BALANCER_LIMIT</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>lb_workers_limit</name></expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_proxy_backend_broke</name><argument_list>(<argument>request_rec *r</argument>,
<argument>apr_bucket_brigade *brigade</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>no_cache</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then>
<expr_stmt><expr><name><name>r</name>-&gt;<name/></name>main-&gt;<name>no_cache</name> = 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>e</name> = <call><name>ap_bucket_error_create</name><argument_list>(<argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>unsigned int</argument>)</argument_list></macro>
<macro><name>ap_proxy_hashfunc</name><argument_list>(<argument>const char *str</argument>, <argument>proxy_hash_t method</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>method</name> == <name>PROXY_HASHFUNC_APR</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>apr_hashfunc_default</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>&amp;<name>slen</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>method</name> == <name>PROXY_HASHFUNC_FNV</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>fnv_prime</name> <init>= <expr>0x811C9DC5</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>hash</name> = 0</expr>;</init> <condition><expr>*<name>str</name></expr>;</condition> <incr><expr><name>str</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>hash</name> *= <name>fnv_prime</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> ^= (*<name>str</name>)</expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>hash</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hash</name> = 0</expr>;</init> <condition><expr>*<name>str</name></expr>;</condition> <incr><expr><name>str</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>hash</name> = (*<name>str</name>) + (<name>hash</name> &lt;&lt; 6) + (<name>hash</name> &lt;&lt; 16) - <name>hash</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>hash</name></expr>;</return>
}</block></else></if></else></if>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_set_wstatus</name><argument_list>(<argument>char c</argument>, <argument>int set</argument>, <argument>proxy_worker *w</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> *</type><name>status</name> <init>= <expr>&amp;<name><name>w</name>-&gt;<name>s</name>-&gt;<name>status</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>flag</name> <init>= <expr><call><name>toupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_wstat_t</name> *</type><name>pwt</name> <init>= <expr><name>proxy_wstat_tbl</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>pwt</name>-&gt;<name>bit</name></name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>flag</name> == <name><name>pwt</name>-&gt;<name>flag</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>set</name></expr>)</condition><then>
<expr_stmt><expr>*<name>status</name> |= <name><name>pwt</name>-&gt;<name>bit</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>status</name> &amp;= ~(<name><name>pwt</name>-&gt;<name>bit</name></name>)</expr>;</expr_stmt></else></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pwt</name>++</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_proxy_parse_wstatus</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>proxy_worker *w</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ret</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>status</name> <init>= <expr><name><name>w</name>-&gt;<name>s</name>-&gt;<name>status</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_wstat_t</name> *</type><name>pwt</name> <init>= <expr><name>proxy_wstat_tbl</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>pwt</name>-&gt;<name>bit</name></name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>status</name> &amp; <name><name>pwt</name>-&gt;<name>bit</name></name></expr>)</condition><then>
<expr_stmt><expr><name>ret</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>pwt</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>pwt</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!*<name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = "??? "</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>ret</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr>"Ok "</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_sync_balancer</name><argument_list>(<argument>proxy_balancer *b</argument>, <argument>server_rec *s</argument>,
<argument>proxy_server_conf *conf</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>workers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker_shared</name> *</type><name>shm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer_method</name> *</type><name>lbmethod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_provider_t</name> *</type><name>storage</name> <init>= <expr><name><name>b</name>-&gt;<name>storage</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>s</name>-&gt;<name>wupdated</name></name> &lt;= <name><name>b</name>-&gt;<name>wupdated</name></name></expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
<expr_stmt><expr><name>lbmethod</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>PROXY_LBMETHOD</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>s</name>-&gt;<name>lbpname</name></name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lbmethod</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>b</name>-&gt;<name>lbmethod</name></name> = <name>lbmethod</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02433</expr></argument>)</argument_list></call>
"Cannot find LB Method: %s"</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>s</name>-&gt;<name>lbpname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></else></if>
<for>for (<init><expr><name>index</name> = 0</expr>;</init> <condition><expr><name>index</name> &lt; <name><name>b</name>-&gt;<name>max_workers</name></name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name><name>storage</name>-&gt;<name>dptr</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>wslot</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>int</name>)<name>index</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>shm</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00965</expr></argument>)</argument_list></call> "worker slotmem_dptr failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>shm</name>-&gt;<name>hash</name>.<name>def</name></name> || !<name><name>shm</name>-&gt;<name>hash</name>.<name>fnv</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>found</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>workers</name> = (<name>proxy_worker</name> **)<name><name>b</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>b</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>workers</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr>*<name>workers</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>hash</name>.<name>def</name></name> == <name><name>shm</name>-&gt;<name>hash</name>.<name>def</name></name> &amp;&amp; <name><name>worker</name>-&gt;<name>hash</name>.<name>fnv</name></name> == <name><name>shm</name>-&gt;<name>hash</name>.<name>fnv</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02402</expr></argument>)</argument_list></call>
"re-grabbing shm[%d] (0x%pp) for worker: %s"</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>shm</name></expr></argument>,
<argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name>found</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>runtime</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>proxy_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>runtime</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>runtime</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_worker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>proxy_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>runtime</name>)-&gt;<name>hash</name></name> = <name><name>shm</name>-&gt;<name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>runtime</name>)-&gt;<name>context</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>runtime</name>)-&gt;<name>cp</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>runtime</name>)-&gt;<name>balancer</name></name> = <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>runtime</name>)-&gt;<name>s</name></name> = <name>shm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>runtime</name>)-&gt;<name>tmutex</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_proxy_initialize_worker</name><argument_list>(<argument><expr>*<name>runtime</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00966</expr></argument>)</argument_list></call> "Cannot init worker"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02403</expr></argument>)</argument_list></call>
"grabbing shm[%d] (0x%pp) for worker: %s"</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>shm</name></expr></argument>,
<argument><expr><name>(*<name>runtime</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>s</name>-&gt;<name>need_reset</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>lbmethod</name></name> &amp;&amp; <name><name>b</name>-&gt;<name>lbmethod</name>-&gt;<name>reset</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name><name>b</name>-&gt;<name>lbmethod</name>-&gt;<name>reset</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>b</name>-&gt;<name>s</name>-&gt;<name>need_reset</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>b</name>-&gt;<name>wupdated</name></name> = <name><name>b</name>-&gt;<name>s</name>-&gt;<name>wupdated</name></name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>proxy_worker_shared *</argument>)</argument_list></macro> <macro><name>ap_proxy_find_workershm</name><argument_list>(<argument>ap_slotmem_provider_t *storage</argument>,
<argument>ap_slotmem_instance_t *slot</argument>,
<argument>proxy_worker *worker</argument>,
<argument>unsigned int *index</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>proxy_worker_shared</name> *</type><name>shm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>;</decl_stmt>
<expr_stmt><expr><name>limit</name> = <call><name><name>storage</name>-&gt;<name>num_slots</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>limit</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name><name>storage</name>-&gt;<name>dptr</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>shm</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>def</name></name> == <name><name>shm</name>-&gt;<name>hash</name>.<name>def</name></name>) &amp;&amp;
(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>fnv</name></name> == <name><name>shm</name>-&gt;<name>hash</name>.<name>fnv</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>index</name> = <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>shm</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>proxy_balancer_shared *</argument>)</argument_list></macro> <macro><name>ap_proxy_find_balancershm</name><argument_list>(<argument>ap_slotmem_provider_t *storage</argument>,
<argument>ap_slotmem_instance_t *slot</argument>,
<argument>proxy_balancer *balancer</argument>,
<argument>unsigned int *index</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>proxy_balancer_shared</name> *</type><name>shm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>;</decl_stmt>
<expr_stmt><expr><name>limit</name> = <call><name><name>storage</name>-&gt;<name>num_slots</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>limit</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name><name>storage</name>-&gt;<name>dptr</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>shm</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>def</name></name> == <name><name>shm</name>-&gt;<name>hash</name>.<name>def</name></name>) &amp;&amp;
(<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>fnv</name></name> == <name><name>shm</name>-&gt;<name>hash</name>.<name>fnv</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>index</name> = <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>shm</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<typedef>typedef <type><struct>struct <name>header_connection</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>first</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>closed</name>:1</expr>;</expr_stmt>
}</block></struct></type> <name>header_connection</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>find_conn_headers</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>header_connection</name> *</type><name>x</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<do>do <block>{
<while>while <condition>(<expr>*<name>val</name> == ',' || *<name>val</name> == ';'</expr>)</condition> <block>{
<expr_stmt><expr><name>val</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>name</name> = <call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"close"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>x</name>-&gt;<name>closed</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>x</name>-&gt;<name>first</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>x</name>-&gt;<name>first</name></name> = <name>name</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>elt</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>x</name>-&gt;<name>array</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>x</name>-&gt;<name>array</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>elt</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>elt</name> = <name>name</name></expr>;</expr_stmt>
}</block></else></if>
}</block> while <condition>(<expr>*<name>val</name></expr>)</condition>;</do>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ap_proxy_clear_connection</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>headers</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>header_connection</name></type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>x</name>.<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name>.<name>array</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name>.<name>first</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name>.<name>closed</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"Proxy-Connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>find_conn_headers</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr>"Connection"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>x</name>.<name>first</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"Connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>x</name>.<name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>x</name>.<name>array</name></name></expr>)</condition><then> <block>{
<while>while <condition>(<expr>(<name>name</name> = <call><name>apr_array_pop</name><argument_list>(<argument><expr><name><name>x</name>.<name>array</name></name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>*<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<return>return <expr><name><name>x</name>.<name>closed</name></name></expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_create_hdrbrgd</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>apr_bucket_brigade *header_brigade</argument>,
<argument>request_rec *r</argument>,
<argument>proxy_conn_rec *p_conn</argument>,
<argument>proxy_worker *worker</argument>,
<argument>proxy_server_conf *conf</argument>,
<argument>apr_uri_t *uri</argument>,
<argument>char *url</argument>, <argument>char *server_portstr</argument>,
<argument>char **old_cl_val</argument>,
<argument>char **old_te_val</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>headers_in_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>headers_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>saved_headers_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_100_continue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>origin</name> <init>= <expr><name><name>p_conn</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>do_100_continue</name> = (<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout_set</name></name>
&amp;&amp; <call><name>ap_request_has_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>
&amp;&amp; (<name>PROXYREQ_REVERSE</name> == <name><name>r</name>-&gt;<name>proxyreq</name></name>)
&amp;&amp; !(<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"force-proxy-request-1.0"</expr></argument>)</argument_list></call>))</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"force-proxy-request-1.0"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>expecting_100</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_EXPECTATION_FAILED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>" HTTP/1.0" <name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>" HTTP/1.1" <name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-nokeepalive"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>origin</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>preserve_host</name></name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name><name>uri</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>uri</name>-&gt;<name>port_str</name></name> &amp;&amp; <name><name>uri</name>-&gt;<name>port</name></name> != <name>DEFAULT_HTTP_PORT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Host: ["</expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr>"]:"</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>port_str</name></name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Host: ["</expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr>"]"</expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>uri</name>-&gt;<name>port_str</name></name> &amp;&amp; <name><name>uri</name>-&gt;<name>port</name></name> != <name>DEFAULT_HTTP_PORT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Host: "</expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>port_str</name></name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Host: "</expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>hostname</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>,<argument><expr>"Host"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>hostname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hostname</name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01092</expr></argument>)</argument_list></call>
"no HTTP 0.9 request (with no host line) "
"on incoming request and preserve host set "
"forcing hostname to be %s for uri %s"</expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Host: "</expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_headers_in</name> = <name><name>r</name>-&gt;<name>headers_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <call><name>apr_table_copy</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>saved_headers_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>viaopt</name></name> == <name>via_block</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Via"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>viaopt</name></name> != <name>via_off</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>server_name</name> <init>= <expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>server_name</name> == <name><name>r</name>-&gt;<name>hostname</name></name></expr>)</condition><then>
<expr_stmt><expr><name>server_name</name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Via"</expr></argument>,
<argument><expr>(<name><name>conf</name>-&gt;<name>viaopt</name></name> == <name>via_full</name>)
? <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%d.%d %s%s (%s)"</expr></argument>,
<argument><expr><call><name>HTTP_VERSION_MAJOR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>HTTP_VERSION_MINOR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>server_name</name></expr></argument>, <argument><expr><name>server_portstr</name></expr></argument>,
<argument><expr><name>AP_SERVER_BASEVERSION</name></expr></argument>)</argument_list></call>
: <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%d.%d %s%s"</expr></argument>,
<argument><expr><call><name>HTTP_VERSION_MAJOR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>HTTP_VERSION_MINOR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>server_name</name></expr></argument>, <argument><expr><name>server_portstr</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>do_100_continue</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>expecting_100</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-interim-response"</expr></argument>,
<argument><expr>"Suppress"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>((<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Expect"</expr></argument>)</argument_list></call>) == <name>NULL</name>)
|| (<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"100-Continue"</expr></argument>)</argument_list></call> != 0
&amp;&amp; !<call><name>ap_find_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>"100-Continue"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Expect"</expr></argument>, <argument><expr>"100-Continue"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>add_forwarded_headers</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>PROXYREQ_REVERSE</name> == <name><name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"X-Forwarded-For"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>useragent_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>buf</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Host"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"X-Forwarded-Host"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"X-Forwarded-Server"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>proxy_run_fixups</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_proxy_clear_connection</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>headers_in_array</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>headers_in</name> = (const <name>apr_table_entry_t</name> *) <name><name>headers_in_array</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>counter</name> = 0</expr>;</init> <condition><expr><name>counter</name> &lt; <name><name>headers_in_array</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>counter</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name> == <name>NULL</name>
|| <name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>val</name> == <name>NULL</name>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"Host"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"Keep-Alive"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"TE"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"Trailer"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"Upgrade"</expr></argument>)</argument_list></call></expr>
)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>,<argument><expr>"Proxy-Authorization"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>user</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"Proxy-Chain-Auth"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>old_te_val</name> = <name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>val</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>old_cl_val</name> = <name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>val</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<if>if <condition>( <expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"If-Match"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"If-Modified-Since"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"If-Range"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"If-Unmodified-Since"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"If-None-Match"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>": "</expr></argument>,
<argument><expr><name><name>headers_in</name><index>[<expr><name>counter</name></expr>]</index></name>.<name>val</name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <name>saved_headers_in</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_pass_brigade</name><argument_list>(<argument>apr_bucket_alloc_t *bucket_alloc</argument>,
<argument>request_rec *r</argument>, <argument>proxy_conn_rec *p_conn</argument>,
<argument>conn_rec *origin</argument>, <argument>apr_bucket_brigade *bb</argument>,
<argument>int flush</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>transferred</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>flush</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name> <init>= <expr><call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>transferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>transferred</name> != -1</expr>)</condition><then>
<expr_stmt><expr><name><name>p_conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>transferred</name></name> += <name>transferred</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>origin</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01084</expr></argument>)</argument_list></call>
"pass request body failed to %pI (%s)"</expr></argument>,
<argument><expr><name><name>p_conn</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name><name>p_conn</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>origin</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_note</name></decl>;</decl_stmt>
<if>if <condition>(<expr>((<name>ssl_note</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>origin</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"SSL_connect_rv"</expr></argument>)</argument_list></call>)
!= <name>NULL</name>) &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>ssl_note</name></expr></argument>, <argument><expr>"err"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr>"Error during SSL Handshake with"
" remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> ? <name>HTTP_GATEWAY_TIME_OUT</name> : <name>HTTP_BAD_GATEWAY</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<typedef>typedef <type><struct>struct <name>proxy_schemes_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>default_port</name></decl>;</decl_stmt>
}</block></struct></type> <name>proxy_schemes_t</name> ;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>proxy_schemes_t</name></type> <name><name>pschemes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"fcgi"</expr>, <expr>8000</expr>}</block></expr>,
<expr><block>{<expr>"ajp"</expr>, <expr><name>AJP13_DEF_PORT</name></expr>}</block></expr>,
<expr><block>{<expr>"scgi"</expr>, <expr><name>SCGI_DEF_PORT</name></expr>}</block></expr>,
<expr><block>{<expr>"h2c"</expr>, <expr><name>DEFAULT_HTTP_PORT</name></expr>}</block></expr>,
<expr><block>{<expr>"h2"</expr>, <expr><name>DEFAULT_HTTPS_PORT</name></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr>0xFFFF</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_port_t</argument>)</argument_list></macro> <macro><name>ap_proxy_port_of_scheme</name><argument_list>(<argument>const char *scheme</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>scheme</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>port</name> = <call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
<return>return <expr><name>port</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>proxy_schemes_t</name> *</type><name>pscheme</name></decl>;</decl_stmt>
<for>for (<init><expr><name>pscheme</name> = <name>pschemes</name></expr>;</init> <condition><expr><name><name>pscheme</name>-&gt;<name>name</name></name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>pscheme</name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name><name>pscheme</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name><name>pscheme</name>-&gt;<name>default_port</name></name></expr>;</return>
}</block></then></if>
}</block></for>
}</block></else></if>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_buckets_lifetime_transform</name><argument_list>(<argument>request_rec *r</argument>,
<argument>apr_bucket_brigade *from</argument>,
<argument>apr_bucket_brigade *to</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name> <init>= <expr><name><name>to</name>-&gt;<name>bucket_alloc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03304</expr></argument>)</argument_list></call>
"Unhandled bucket type of type %s in"
" ap_proxy_buckets_lifetime_transform"</expr></argument>, <argument><expr><name><name>e</name>-&gt;<name>type</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_transfer_between_connections</name><argument_list>(
<argument>request_rec *r</argument>,
<argument>conn_rec *c_i</argument>,
<argument>conn_rec *c_o</argument>,
<argument>apr_bucket_brigade *bb_i</argument>,
<argument>apr_bucket_brigade *bb_o</argument>,
<argument>const char *name</argument>,
<argument>int *sent</argument>,
<argument>apr_off_t bsize</argument>,
<argument>int after</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<do>do <block>{
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>c_i</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>bb_i</name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
<argument><expr><name>APR_NONBLOCK_READ</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>c_o</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EPIPE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb_i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>len</name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb_i</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03306</expr></argument>)</argument_list></call>
"ap_proxy_transfer_between_connections: "
"read %" <name>APR_OFF_T_FMT</name>
" bytes from %s"</expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>sent</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>sent</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_proxy_buckets_lifetime_transform</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bb_i</name></expr></argument>, <argument><expr><name>bb_o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>after</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>bb_o</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb_o</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>c_o</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb_o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03307</expr></argument>)</argument_list></call>
"ap_proxy_transfer_between_connections: "
"error on %s - ap_pass_brigade"</expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03308</expr></argument>)</argument_list></call>
"ap_proxy_transfer_between_connections: "
"error on %s - ap_get_brigade"</expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block> while <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>after</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_fflush</name><argument_list>(<argument><expr><name><name>c_o</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb_o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ap_proxy_transfer_between_connections complete"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name> <argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_proxy_show_hcmethod</name><argument_list>(<argument>hcmethod_t method</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>proxy_hcmethods_t</name> *</type><name>m</name> <init>= <expr><name>proxy_hcmethods</name></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name><name>m</name>-&gt;<name>name</name></name></expr>;</condition> <incr><expr><name>m</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>method</name></name> == <name>method</name></expr>)</condition><then> <block>{
<return>return <expr><name><name>m</name>-&gt;<name>name</name></name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr>"???"</expr>;</return>
}</block>
<function><type><name>void</name></type> <name>proxy_util_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_proxy_retry_worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_proxy_clear_connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
