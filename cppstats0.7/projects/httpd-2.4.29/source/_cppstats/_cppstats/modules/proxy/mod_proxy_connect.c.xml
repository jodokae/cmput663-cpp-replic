<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/proxy/mod_proxy_connect.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_poll.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_BLKSZ</name></cpp:macro> <cpp:value>AP_IOBUFSIZE</cpp:value></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>proxy_connect_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>allowed_connect_ports</name></decl>;</decl_stmt>
}</block></struct></type> <name>connect_conf</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>
}</block></struct></type> <name>port_range</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>connect_conf</name> *</type><name>c</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>connect_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>allowed_connect_ports</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>port_range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>connect_conf</name> *</type><name>c</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>connect_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>connect_conf</name> *</type><name>base</name> <init>= <expr>(<name>connect_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>connect_conf</name> *</type><name>overrides</name> <init>= <expr>(<name>connect_conf</name> *) <name>overridesv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>allowed_connect_ports</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>base</name>-&gt;<name>allowed_connect_ports</name></name></expr></argument>,
<argument><expr><name><name>overrides</name>-&gt;<name>allowed_connect_ports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>set_allowed_ports</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>parms</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>connect_conf</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_connect_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>port_range</name> *</type><name>New</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>"AllowCONNECT: port numbers must be numeric"</expr>;</return></then></if>
<expr_stmt><expr><name>first</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>endptr</name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name> = <name>endptr</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>last</name> = <name>first</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>endptr</name> == <name>p</name> || *<name>endptr</name> != '\0'</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"Cannot parse '%s' as port number"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>New</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>allowed_connect_ports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>New</name>-&gt;<name>first</name></name> = <name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>New</name>-&gt;<name>last</name></name> = <name>last</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>allowed_port</name><parameter_list>(<param><decl><type><name>connect_conf</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>port_range</name> *</type><name>list</name> <init>= <expr>(<name>port_range</name> *) <name><name>conf</name>-&gt;<name>allowed_connect_ports</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>allowed_connect_ports</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>port</name> == <name>APR_URI_HTTPS_DEFAULT_PORT</name>
|| <name>port</name> == <name>APR_URI_SNEWS_DEFAULT_PORT</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>allowed_connect_ports</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name>port</name> &gt;= <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name>.<name>first</name> &amp;&amp; <name>port</name> &lt;= <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name>.<name>last</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
}</block></for>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_connect_canon</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>url</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_CONNECT</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"canonicalising URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_connect_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxyname</name></decl></param>,
<param><decl><type><name>apr_port_t</name></type> <name>proxyport</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>connect_conf</name> *</type><name>c_conf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_connect_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>r</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>backconn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb_front</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb_back</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>client_socket</name> <init>= <expr><call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failed</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pollset_t</name> *</type><name>pollset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pollfd_t</name></type> <name>pollfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_pollfd_t</name> *</type><name>signalled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>pollcnt</name></decl>, <decl><type ref="prev"/><name>pi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int16_t</name></type> <name>pollevent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>nexthop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>connectname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>connectport</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_CONNECT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"declining URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"serving URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>apr_uri_parse_hostinfo</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"URI cannot be parsed: "</expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01019</expr></argument>)</argument_list></call>
"connecting %s to %s:%d"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>uri</name>.<name>hostname</name></name></expr></argument>, <argument><expr><name><name>uri</name>.<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>connectname</name> = <name>proxyname</name> ? <name>proxyname</name> : <name><name>uri</name>.<name>hostname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>connectport</name> = <name>proxyname</name> ? <name>proxyport</name> : <name><name>uri</name>.<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>nexthop</name></expr></argument>, <argument><expr><name>connectname</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>,
<argument><expr><name>connectport</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02327</expr></argument>)</argument_list></call>
"failed to resolve hostname '%s'"</expr></argument>, <argument><expr><name>connectname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"DNS lookup failure for: "</expr></argument>,
<argument><expr><name>connectname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_proxy_checkproxyblock2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>uri</name>.<name>hostname</name></name></expr></argument>,
<argument><expr><name>proxyname</name> ? <name>NULL</name> : <name>nexthop</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>,
<argument><expr>"Connect to remote machine blocked"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"connecting to remote proxy %s on port %d"</expr></argument>,
<argument><expr><name>connectname</name></expr></argument>, <argument><expr><name>connectport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>allowed_port</name><argument_list>(<argument><expr><name>c_conf</name></expr></argument>, <argument><expr><name><name>uri</name>.<name>port</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>,
<argument><expr>"Connect to remote machine blocked"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>failed</name> = <call><name>ap_proxy_connect_to_backend</name><argument_list>(<argument><expr>&amp;<name>sock</name></expr></argument>, <argument><expr>"CONNECT"</expr></argument>, <argument><expr><name>nexthop</name></expr></argument>,
<argument><expr><name>connectname</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>failed</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>proxyname</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"setting up poll()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_pollset_create</name><argument_list>(<argument><expr>&amp;<name>pollset</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01020</expr></argument>)</argument_list></call>
"error apr_pollset_create()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>pollfd</name>.<name>p</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>desc_type</name></name> = <name>APR_POLL_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>reqevents</name></name> = <name>APR_POLLIN</name> | <name>APR_POLLHUP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>desc</name>.<name>s</name></name> = <name>client_socket</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>client_data</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pollset_add</name><argument_list>(<argument><expr><name>pollset</name></expr></argument>, <argument><expr>&amp;<name>pollfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>desc</name>.<name>s</name></name> = <name>sock</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pollset_add</name><argument_list>(<argument><expr><name>pollset</name></expr></argument>, <argument><expr>&amp;<name>pollfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>backconn</name> = <call><name>ap_run_create_connection</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>backconn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01021</expr></argument>)</argument_list></call>
"an error occurred creating a new connection "
"to %pI (%s)"</expr></argument>, <argument><expr><name>nexthop</name></expr></argument>, <argument><expr><name>connectname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_proxy_ssl_disable</name><argument_list>(<argument><expr><name>backconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ap_run_pre_connection</name><argument_list>(<argument><expr><name>backconn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>OK</name> &amp;&amp; <name>rc</name> != <name>DONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backconn</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01022</expr></argument>)</argument_list></call>
"pre_connection setup failed (%d)"</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"connection complete to %pI (%s)"</expr></argument>,
<argument><expr><name>nexthop</name></expr></argument>, <argument><expr><name>connectname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-source-port"</expr></argument>, <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%hu"</expr></argument>,
<argument><expr><name><name>backconn</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb_front</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb_back</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>backconn</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>proxyport</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"sending the CONNECT request to the remote proxy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fprintf</name><argument_list>(<argument><expr><name><name>backconn</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb_back</name></expr></argument>,
<argument><expr>"CONNECT %s HTTP/1.0" <name>CRLF</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ap_fprintf</name><argument_list>(<argument>backconn-&gt;output_filters</argument>, <argument>bb_back</argument>,
<argument>"Proxy-agent: %s" CRLF CRLF</argument>, <argument>ap_get_server_banner()</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>ap_fflush</name><argument_list>(<argument><expr><name><name>backconn</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb_back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"Returning 200 OK"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nbytes</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"HTTP/1.0 200 Connection Established" <name>CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fwrite</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb_front</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nbytes</name> = <macro><name>apr_snprintf</name><argument_list>(<argument>buffer</argument>, <argument>sizeof(buffer)</argument>,
<argument>"Proxy-agent: %s" CRLF CRLF</argument>,
<argument>ap_get_server_banner()</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fwrite</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb_front</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fflush</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb_front</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
r-&gt;status = HTTP_OK;
r-&gt;header_only = 1;
apr_table_set(r-&gt;headers_out, "Proxy-agent: %s", ap_get_server_banner());
ap_rflush(r);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"setting up poll()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>output_filters</name></name> = <name><name>c</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proto_output_filters</name></name> = <name><name>c</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>input_filters</name></name> = <name><name>c</name>-&gt;<name>input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proto_input_filters</name></name> = <name><name>c</name>-&gt;<name>input_filters</name></name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_pollset_poll</name><argument_list>(<argument><expr><name>pollset</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>pollcnt</name></expr></argument>, <argument><expr>&amp;<name>signalled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01023</expr></argument>)</argument_list></call> "error apr_poll()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01024</expr></argument>)</argument_list></call>
"woke from poll(), i=%d"</expr></argument>, <argument><expr><name>pollcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for (<init><expr><name>pi</name> = 0</expr>;</init> <condition><expr><name>pi</name> &lt; <name>pollcnt</name></expr>;</condition> <incr><expr><name>pi</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_pollfd_t</name> *</type><name>cur</name> <init>= <expr>&amp;<name><name>signalled</name><index>[<expr><name>pi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cur</name>-&gt;<name>desc</name>.<name>s</name></name> == <name>sock</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pollevent</name> = <name><name>cur</name>-&gt;<name>rtnevents</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pollevent</name> &amp; (<name>APR_POLLIN</name> | <name>APR_POLLHUP</name>)</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01025</expr></argument>)</argument_list></call>
"sock was readable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>done</name> |= <call><name>ap_proxy_transfer_between_connections</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backconn</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bb_back</name></expr></argument>,
<argument><expr><name>bb_front</name></expr></argument>,
<argument><expr>"sock"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>CONN_BLKSZ</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>
!= <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>pollevent</name> &amp; <name>APR_POLLERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01026</expr></argument>)</argument_list></call>
"err on backconn"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backconn</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cur</name>-&gt;<name>desc</name>.<name>s</name></name> == <name>client_socket</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pollevent</name> = <name><name>cur</name>-&gt;<name>rtnevents</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pollevent</name> &amp; (<name>APR_POLLIN</name> | <name>APR_POLLHUP</name>)</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGGING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01027</expr></argument>)</argument_list></call>
"client was readable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>done</name> |= <call><name>ap_proxy_transfer_between_connections</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><name>backconn</name></expr></argument>,
<argument><expr><name>bb_front</name></expr></argument>,
<argument><expr><name>bb_back</name></expr></argument>,
<argument><expr>"client"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>CONN_BLKSZ</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>
!= <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>pollevent</name> &amp; <name>APR_POLLERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02827</expr></argument>)</argument_list></call>
"err on client"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01028</expr></argument>)</argument_list></call>
"unknown socket in pollset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></for>
}</block> while <condition>(<expr>!<name>done</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"finished with poll() - cleaning up"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>backconn</name>-&gt;<name>aborted</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_lingering_close</name><argument_list>(<argument><expr><name>backconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_proxy_connect_register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>proxy_hook_scheme_handler</name><argument_list>(<argument><expr><name>proxy_connect_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_hook_canon_handler</name><argument_list>(<argument><expr><name>proxy_connect_canon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"AllowCONNECT"</expr></argument>, <argument><expr><name>set_allowed_ports</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"A list of ports or port ranges which CONNECT may connect to"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>proxy_connect</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>create_config</name></expr>,
<expr><name>merge_config</name></expr>,
<expr><name>cmds</name></expr>,
<expr><name>ap_proxy_connect_register_hook</name></expr>
}</block></expr>;</expr_stmt>
</unit>
