<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/proxy/balancers/mod_lbmethod_bytraffic.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_hooks.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>lbmethod_bytraffic_module</name></decl>;</decl_stmt>
<expr_stmt><expr>static <call><call><name>int</name> <argument_list>(<argument><expr>*<name>ap_proxy_retry_worker_fn</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr>const <name>char</name> *<name>proxy_function</name></expr></argument>,
<argument><expr><name>proxy_worker</name> *<name>worker</name></expr></argument>, <argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>proxy_worker</name> *</type><name>find_best_bytraffic</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>mytraffic</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>curmin</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>worker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>mycandidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_lbset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_lbset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>checking_standby</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>checked_standby</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>ap_proxy_retry_worker_fn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_proxy_retry_worker_fn</name> =
<call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_proxy_retry_worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ap_proxy_retry_worker_fn</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01209</expr></argument>)</argument_list></call>
"proxy: Entering bytraffic for BALANCER (%s)"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>checking_standby</name> = <name>checked_standby</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>!<name>mycandidate</name> &amp;&amp; !<name>checked_standby</name></expr>)</condition> <block>{
<expr_stmt><expr><name>worker</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>worker</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<name>checking_standby</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbset</name></name></name> &gt; <name>max_lbset</name></expr>)</condition><then>
<expr_stmt><expr><name>max_lbset</name> = <name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbset</name></name></name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(
<expr>(<name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbset</name></name></name> != <name>cur_lbset</name>) ||
(<name>checking_standby</name> ? !<call><name>PROXY_WORKER_IS_STANDBY</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>)</argument_list></call> : <call><name>PROXY_WORKER_IS_STANDBY</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>)</argument_list></call>) ||
(<call><name>PROXY_WORKER_IS_DRAINING</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>)</argument_list></call>)</expr>
)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_proxy_retry_worker_fn</name><argument_list>(<argument><expr>"BALANCER"</expr></argument>, <argument><expr>*<name>worker</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mytraffic</name> = (<name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>transferred</name></name></name>/<name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbfactor</name></name></name>) +
(<name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>read</name></name></name>/<name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbfactor</name></name></name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>mycandidate</name> || <name>mytraffic</name> &lt; <name>curmin</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mycandidate</name> = *<name>worker</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curmin</name> = <name>mytraffic</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>checked_standby</name> = <name>checking_standby</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>cur_lbset</name>++</expr>;</expr_stmt>
}</block> while <condition>(<expr><name>cur_lbset</name> &lt;= <name>max_lbset</name> &amp;&amp; !<name>mycandidate</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>mycandidate</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01210</expr></argument>)</argument_list></call>
"proxy: bytraffic selected worker \"%s\" : busy %" <name>APR_SIZE_T_FMT</name></expr></argument>,
<argument><expr><name><name>mycandidate</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>mycandidate</name>-&gt;<name>s</name>-&gt;<name>busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>mycandidate</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>reset</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>worker</name></decl>;</decl_stmt>
<expr_stmt><expr><name>worker</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>worker</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbstatus</name></name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>busy</name></name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>transferred</name></name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>read</name></name></name> = 0</expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>age</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>proxy_balancer_method</name></type> <name>bytraffic</name> <init>= <expr><block>{
<expr>"bytraffic"</expr>,
<expr>&amp;<name>find_best_bytraffic</name></expr>,
<expr><name>NULL</name></expr>,
<expr>&amp;<name>reset</name></expr>,
<expr>&amp;<name>age</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PROXY_LBMETHOD</name></expr></argument>, <argument><expr>"bytraffic"</expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr>&amp;<name>bytraffic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>lbmethod_bytraffic</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>register_hook</name></expr>
}</block></expr>;</expr_stmt>
</unit>
