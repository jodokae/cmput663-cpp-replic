<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/filters/mod_reqtimeout.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_version.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>reqtimeout_module</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNSET</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MRT_DEFAULT_HEADER_TIMEOUT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MRT_DEFAULT_HEADER_MAX_TIMEOUT</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MRT_DEFAULT_HEADER_MIN_RATE</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MRT_DEFAULT_BODY_TIMEOUT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MRT_DEFAULT_BODY_MAX_TIMEOUT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MRT_DEFAULT_BODY_MIN_RATE</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>header_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_max_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_min_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>header_rate_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>body_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>body_max_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>body_min_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>body_rate_factor</name></decl>;</decl_stmt>
}</block></struct></type> <name>reqtimeout_srv_cfg</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>timeout_at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>max_timeout_at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_max_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_keep_alive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>socket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>rate_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>tmpbb</name></decl>;</decl_stmt>
}</block></struct></type> <name>reqtimeout_con_cfg</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name>reqtimeout_filter_name</name> <init>= <expr>"reqtimeout"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>default_header_rate_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>default_body_rate_factor</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>extend_timeout</name><parameter_list>(<param><decl><type><name>reqtimeout_con_cfg</name> *</type><name>ccfg</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>new_timeout_at</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name> || <name>len</name> &lt;= 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>new_timeout_at</name> = <name><name>ccfg</name>-&gt;<name>timeout_at</name></name> + <name>len</name> * <name><name>ccfg</name>-&gt;<name>rate_factor</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ccfg</name>-&gt;<name>max_timeout_at</name></name> &gt; 0 &amp;&amp; <name>new_timeout_at</name> &gt; <name><name>ccfg</name>-&gt;<name>max_timeout_at</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>timeout_at</name></name> = <name><name>ccfg</name>-&gt;<name>max_timeout_at</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>timeout_at</name></name> = <name>new_timeout_at</name></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>check_time_left</name><parameter_list>(<param><decl><type><name>reqtimeout_con_cfg</name> *</type><name>ccfg</name></decl></param>,
<param><decl><type><name>apr_time_t</name> *</type><name>time_left_p</name></decl></param>,
<param><decl><type><name>apr_time_t</name></type> <name>now</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>now</name></expr>)</condition><then>
<expr_stmt><expr><name>now</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>time_left_p</name> = <name><name>ccfg</name>-&gt;<name>timeout_at</name></name> - <name>now</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>time_left_p</name> &lt;= 0</expr>)</condition><then>
<return>return <expr><name>APR_TIMEUP</name></expr>;</return></then></if>
<if>if <condition>(<expr>*<name>time_left_p</name> &lt; <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>time_left_p</name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>have_lf_or_eos</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for ( <init>;</init> <condition><expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name>b</name> = <call><name>APR_BUCKET_PREV</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></incr> ) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>str</name><index>[<expr><name>len</name>-1</expr>]</index></name> == <name>APR_ASCII_LF</name></expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>APR_INCOMPLETE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>brigade_append</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bbOut</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bbIn</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bbIn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bbIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> || <name>len</name> &gt; <name>APR_BUCKET_BUFF_SIZE</name>/4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bbOut</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>len</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_write</name><argument_list>(<argument><expr><name>bbOut</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_destroy</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_bucket_destroy</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; (y) ? (x) : (y))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>reqtimeout_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>time_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>saved_sock_timeout</name> <init>= <expr><name>UNSET</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>reqtimeout_con_cfg</name> *</type><name>ccfg</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ccfg</name>-&gt;<name>in_keep_alive</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>in_keep_alive</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>AP_MODE_SPECULATIVE</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ccfg</name>-&gt;<name>new_timeout</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>now</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>timeout_at</name></name> = <name>now</name> + <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name><name>ccfg</name>-&gt;<name>new_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>new_timeout</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ccfg</name>-&gt;<name>new_max_timeout</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>max_timeout_at</name></name> = <name>now</name> + <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name><name>ccfg</name>-&gt;<name>new_max_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>new_max_timeout</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ccfg</name>-&gt;<name>timeout_at</name></name> == 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<if>if <condition>(<expr>!<name><name>ccfg</name>-&gt;<name>socket</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>socket</name></name> = <call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>check_time_left</name><argument_list>(<argument><expr><name>ccfg</name></expr></argument>, <argument><expr>&amp;<name>time_left</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<goto>goto <name>out</name>;</goto></then></if>
<if>if <condition>(<expr><name>block</name> == <name>APR_NONBLOCK_READ</name> || <name>mode</name> == <name>AP_MODE_INIT</name>
|| <name>mode</name> == <name>AP_MODE_EATCRLF</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ccfg</name>-&gt;<name>min_rate</name></name> &gt; 0 &amp;&amp; <name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>extend_timeout</name><argument_list>(<argument><expr><name>ccfg</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_timeout_get</name><argument_list>(<argument><expr><name><name>ccfg</name>-&gt;<name>socket</name></name></expr></argument>, <argument><expr>&amp;<name>saved_sock_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name><name>ccfg</name>-&gt;<name>socket</name></name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>time_left</name></expr></argument>, <argument><expr><name>saved_sock_timeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mode</name> == <name>AP_MODE_GETLINE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>remaining</name> <init>= <expr><name>HUGE_STRING_LEN</name></expr></init></decl>;</decl_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bblen</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_MAJOR_VERSION</name> &lt; 2</expr></cpp:if>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>nsds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>poll_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pollfd_t</name></type> <name>pollset</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>AP_MODE_GETLINE</name></expr></argument>, <argument><expr><name>APR_NONBLOCK_READ</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; !<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ccfg</name>-&gt;<name>min_rate</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>extend_timeout</name><argument_list>(<argument><expr><name>ccfg</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>have_lf_or_eos</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_INCOMPLETE</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>bblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>remaining</name> -= <name>bblen</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>remaining</name> &lt;= 0</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>ccfg</name>-&gt;<name>tmpbb</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>tmpbb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>brigade_append</name><argument_list>(<argument><expr><name><name>ccfg</name>-&gt;<name>tmpbb</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_MAJOR_VERSION</name> &lt; 2</expr></cpp:if>
<expr_stmt><expr><name><name>pollset</name>.<name>p</name></name> = <name><name>f</name>-&gt;<name>c</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollset</name>.<name>desc_type</name></name> = <name>APR_POLL_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollset</name>.<name>reqevents</name></name> = <name>APR_POLLIN</name>|<name>APR_POLLHUP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollset</name>.<name>desc</name>.<name>s</name></name> = <name><name>ccfg</name>-&gt;<name>socket</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_timeout_get</name><argument_list>(<argument><expr><name><name>ccfg</name>-&gt;<name>socket</name></name></expr></argument>, <argument><expr>&amp;<name>poll_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_poll</name><argument_list>(<argument><expr>&amp;<name>pollset</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>nsds</name></expr></argument>, <argument><expr><name>poll_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_wait</name><argument_list>(<argument><expr><name><name>ccfg</name>-&gt;<name>socket</name></name></expr></argument>, <argument><expr><name>APR_WAIT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>check_time_left</name><argument_list>(<argument><expr><name>ccfg</name></expr></argument>, <argument><expr>&amp;<name>time_left</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name><name>ccfg</name>-&gt;<name>socket</name></name></expr></argument>,
<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>time_left</name></expr></argument>, <argument><expr><name>saved_sock_timeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr>1</expr>)</condition>;</do>
<if>if <condition>(<expr><name><name>ccfg</name>-&gt;<name>tmpbb</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>APR_BRIGADE_PREPEND</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>ccfg</name>-&gt;<name>tmpbb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ccfg</name>-&gt;<name>min_rate</name></name> &gt; 0 &amp;&amp; <name>rv</name> == <name>APR_SUCCESS</name>
&amp;&amp; <name>mode</name> != <name>AP_MODE_SPECULATIVE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>extend_timeout</name><argument_list>(<argument><expr><name>ccfg</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name><name>ccfg</name>-&gt;<name>socket</name></name></expr></argument>, <argument><expr><name>saved_sock_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01382</expr></argument>)</argument_list></call>
"Request %s read timeout"</expr></argument>, <argument><expr><name><name>ccfg</name>-&gt;<name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"short-lingering-close"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>reqtimeout_eor</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>AP_BUCKET_IS_EOR</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>reqtimeout_con_cfg</name> *</type><name>ccfg</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>timeout_at</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>reqtimeout_init</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>reqtimeout_con_cfg</name> *</type><name>ccfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>reqtimeout_srv_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>base_server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>reqtimeout_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>cfg</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>header_timeout</name></name> == 0 &amp;&amp; <name><name>cfg</name>-&gt;<name>body_timeout</name></name> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ccfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>reqtimeout_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ccfg</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ccfg</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reqtimeout_con_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>reqtimeout_module</name></expr></argument>, <argument><expr><name>ccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr><name>reqtimeout_filter_name</name></expr></argument>, <argument><expr><name>ccfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_input_filter</name><argument_list>(<argument><expr><name>reqtimeout_filter_name</name></expr></argument>, <argument><expr><name>ccfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>reqtimeout_before_header</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>reqtimeout_srv_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>reqtimeout_con_cfg</name> *</type><name>ccfg</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>reqtimeout_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ccfg</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>cfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>base_server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>reqtimeout_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>cfg</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>timeout_at</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>max_timeout_at</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>in_keep_alive</name></name> = (<name><name>c</name>-&gt;<name>keepalives</name></name> &gt; 0)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>type</name></name> = "header"</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>header_timeout</name></name> != <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>new_timeout</name></name> = <name><name>cfg</name>-&gt;<name>header_timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>new_max_timeout</name></name> = <name><name>cfg</name>-&gt;<name>header_max_timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>min_rate</name></name> = <name><name>cfg</name>-&gt;<name>header_min_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>rate_factor</name></name> = <name><name>cfg</name>-&gt;<name>header_rate_factor</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>new_timeout</name></name> = <name>MRT_DEFAULT_HEADER_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>new_max_timeout</name></name> = <name>MRT_DEFAULT_HEADER_MAX_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>min_rate</name></name> = <name>MRT_DEFAULT_HEADER_MIN_RATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>rate_factor</name></name> = <name>default_header_rate_factor</name></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>reqtimeout_before_body</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>reqtimeout_srv_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>reqtimeout_con_cfg</name> *</type><name>ccfg</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>reqtimeout_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ccfg</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>base_server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>reqtimeout_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>cfg</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>timeout_at</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>max_timeout_at</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>type</name></name> = "body"</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_CONNECT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>new_timeout</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>body_timeout</name></name> != <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>new_timeout</name></name> = <name><name>cfg</name>-&gt;<name>body_timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>new_max_timeout</name></name> = <name><name>cfg</name>-&gt;<name>body_max_timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>min_rate</name></name> = <name><name>cfg</name>-&gt;<name>body_min_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>rate_factor</name></name> = <name><name>cfg</name>-&gt;<name>body_rate_factor</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>new_timeout</name></name> = <name>MRT_DEFAULT_BODY_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>new_max_timeout</name></name> = <name>MRT_DEFAULT_BODY_MAX_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>min_rate</name></name> = <name>MRT_DEFAULT_BODY_MIN_RATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccfg</name>-&gt;<name>rate_factor</name></name> = <name>default_body_rate_factor</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>reqtimeout_create_srv_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>reqtimeout_srv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reqtimeout_srv_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>header_timeout</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>header_max_timeout</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>header_min_rate</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>body_timeout</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>body_max_timeout</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>body_min_rate</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE_INT</name><parameter_list>(<param><type><name>cfg</name></type></param>, <param><type><name>b</name></type></param>, <param><type><name>a</name></type></param>, <param><type><name>val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>cfg-&gt;val = (a-&gt;val == UNSET) ? b-&gt;val : a-&gt;val;</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>reqtimeout_merge_srv_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>base_</name></decl></param>, <param><decl><type><name>void</name> *</type><name>add_</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>reqtimeout_srv_cfg</name> *</type><name>base</name> <init>= <expr><name>base_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>reqtimeout_srv_cfg</name> *</type><name>add</name> <init>= <expr><name>add_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>reqtimeout_srv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reqtimeout_srv_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MERGE_INT</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>header_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE_INT</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>header_max_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE_INT</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>header_min_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE_INT</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>body_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE_INT</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>body_max_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MERGE_INT</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>body_min_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>header_rate_factor</name></name> = (<name><name>cfg</name>-&gt;<name>header_min_rate</name></name> == <name>UNSET</name>) ?
<name><name>base</name>-&gt;<name>header_rate_factor</name></name> : <name><name>add</name>-&gt;<name>header_rate_factor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>body_rate_factor</name></name> = (<name><name>cfg</name>-&gt;<name>body_min_rate</name></name> == <name>UNSET</name>) ?
<name><name>base</name>-&gt;<name>body_rate_factor</name></name> : <name><name>add</name>-&gt;<name>body_rate_factor</name></name></expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>parse_int</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>, <param><decl><type><name>int</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>val</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>arg</name> == <name>endptr</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Value '%s' not numerical"</expr></argument>, <argument><expr><name>endptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>endptr</name> != '\0'</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Cannot parse '%s'"</expr></argument>, <argument><expr><name>endptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>val</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"Value must be non-negative"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_reqtimeout_param</name><parameter_list>(<param><decl><type><name>reqtimeout_srv_cfg</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>rate_str</name> <init>= <expr><name>NULL</name></expr></init>, *<name>initial_str</name></decl>, *<decl><type ref="prev"/><name>max_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rate</name> <init>= <expr>0</expr></init>, <name>initial</name> <init>= <expr>0</expr></init>, <name>max</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>PARAM_HEADER</name></decl>, <decl><name>PARAM_BODY</name></decl> }</block> <decl><name>type</name></decl>;</enum>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"header"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>type</name> = <name>PARAM_HEADER</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"body"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>type</name> = <name>PARAM_BODY</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"Unknown RequestReadTimeout parameter"</expr>;</return>
}</block></else></if></else></if>
<if>if <condition>(<expr>(<name>rate_str</name> = <call><name>ap_strcasestr</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>",minrate="</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>initial_str</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>rate_str</name> - <name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rate_str</name> += <call><name>strlen</name><argument_list>(<argument><expr>",minrate="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>parse_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>rate_str</name></expr></argument>, <argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then>
<return>return <expr><name>ret</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>rate</name> == 0</expr>)</condition><then>
<return>return <expr>"Minimum data rate must be larger than 0"</expr>;</return></then></if>
<if>if <condition>(<expr>(<name>max_str</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>initial_str</name></expr></argument>, <argument><expr>'-'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>max_str</name>++ = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>parse_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>max_str</name></expr></argument>, <argument><expr>&amp;<name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then>
<return>return <expr><name>ret</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>parse_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>initial_str</name></expr></argument>, <argument><expr>&amp;<name>initial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>'-'</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>"Must set MinRate option if using timeout range"</expr>;</return></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>parse_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>initial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then>
<return>return <expr><name>ret</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>max</name> &amp;&amp; <name>initial</name> &gt;= <name>max</name></expr>)</condition><then> <block>{
<return>return <expr>"Maximum timeout must be larger than initial timeout"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>type</name> == <name>PARAM_HEADER</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>header_timeout</name></name> = <name>initial</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>header_max_timeout</name></name> = <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>header_min_rate</name></name> = <name>rate</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rate</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>header_rate_factor</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call> / <name>rate</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>body_timeout</name></name> = <name>initial</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>body_max_timeout</name></name> = <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>body_min_rate</name></name> = <name>rate</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rate</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>body_rate_factor</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call> / <name>rate</name></expr>;</expr_stmt></then></if>
}</block></else></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_reqtimeouts</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>reqtimeout_srv_cfg</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>reqtimeout_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>arg</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>word</name></decl>, *<decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>val</name></expr>)</condition><then> <block>{
<return>return <expr>"Invalid RequestReadTimeout parameter. Parameter must be "
"in the form 'key=value'"</expr>;</return>
}</block></then> <else>else
<expr_stmt><expr>*<name>val</name>++ = '\0'</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>err</name> = <call><name>set_reqtimeout_param</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"RequestReadTimeout: %s=%s: %s"</expr></argument>,
<argument><expr><name>word</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>reqtimeout_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_input_filter</name><argument_list>(<argument><expr><name>reqtimeout_filter_name</name></expr></argument>, <argument><expr><name>reqtimeout_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_CONNECTION</name> + 8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr><name>reqtimeout_filter_name</name></expr></argument>, <argument><expr><name>reqtimeout_eor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_CONNECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_process_connection</name><argument_list>(<argument><expr><name>reqtimeout_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_read_request</name><argument_list>(<argument><expr><name>reqtimeout_before_header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>reqtimeout_before_body</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MRT_DEFAULT_HEADER_MIN_RATE</name> &gt; 0</expr></cpp:if>
<expr_stmt><expr><name>default_header_rate_factor</name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call> / <name>MRT_DEFAULT_HEADER_MIN_RATE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MRT_DEFAULT_BODY_MIN_RATE</name> &gt; 0</expr></cpp:if>
<expr_stmt><expr><name>default_body_rate_factor</name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call> / <name>MRT_DEFAULT_BODY_MIN_RATE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>reqtimeout_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"RequestReadTimeout"</expr></argument>, <argument><expr><name>set_reqtimeouts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set various timeout parameters for reading request "
"headers and body"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>reqtimeout</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>reqtimeout_create_srv_config</name></expr>,
<expr><name>reqtimeout_merge_srv_config</name></expr>,
<expr><name>reqtimeout_cmds</name></expr>,
<expr><name>reqtimeout_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
