<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/filters/mod_deflate.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCII_FLAG</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAD_CRC</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA_FIELD</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIG_NAME</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMENT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESERVED</name></cpp:macro> <cpp:value>0xE0</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zlib.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>deflateFilterName</name><index>[]</index></name> <init>= <expr>"DEFLATE"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>deflate_module</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_INFLATE_RATIO_LIMIT</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_INFLATE_RATIO_BURST</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>deflate_filter_config_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>windowSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>memlevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compressionlevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bufferSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note_ratio_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note_input_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note_output_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>deflate_filter_config</name>;</typedef>
<typedef>typedef <type><struct>struct <name>deflate_dirconf_t</name> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>inflate_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ratio_limit</name></decl>,
<name>ratio_burst</name>;</decl_stmt>
}</block></struct></type> <name>deflate_dirconf_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>gzip_header</name><index>[<expr>10</expr>]</index></name> <init>= <expr><block>{
<expr>'\037'</expr>, <expr>'\213'</expr>, <expr><name>Z_DEFLATED</name></expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0x03</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>deflate_magic</name><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{ <expr>'\037'</expr>, <expr>'\213'</expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_COMPRESSION</name></cpp:macro> <cpp:value>Z_DEFAULT_COMPRESSION</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_WINDOWSIZE</name></cpp:macro> <cpp:value>-15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MEMLEVEL</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_BUFFERSIZE</name></cpp:macro> <cpp:value>8096</cpp:value></cpp:define>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ssl_var_lookup</name></expr></argument>)</argument_list></call> *<name>mod_deflate_ssl_var</name> = <name>NULL</name></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_gzip</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>hdrs1</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>hdrs2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>hdrs</name> <init>= <expr><name>hdrs1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>encoding</name> &amp;&amp; (<name>hdrs2</name> != <name>NULL</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>encoding</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>hdrs2</name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdrs</name> = <name>hdrs2</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>encoding</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>encoding</name> = <name><name>r</name>-&gt;<name>content_encoding</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdrs</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>encoding</name> &amp;&amp; *<name>encoding</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr>"gzip"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr>"x-gzip"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>hdrs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>new_encoding</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<for>for(<init>;</init><condition>;</condition><incr/>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>token</name> <init>= <expr><call><name>ap_strrchr</name><argument_list>(<argument><expr><name>new_encoding</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>token</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>new_encoding</name></expr></argument>, <argument><expr>"gzip"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>new_encoding</name></expr></argument>, <argument><expr>"x-gzip"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>hdrs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<break>break;</break>
}</block></then></if>
<for>for (<init><expr><name>ptr</name>=<name>token</name>+1</expr>;</init> <condition><expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>ptr</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>ptr</name></expr></incr>)<empty_stmt>;</empty_stmt></for>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr>"gzip"</expr></argument>)</argument_list></call>
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr>"x-gzip"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>token</name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name>hdrs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>, <argument><expr><name>new_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <name>new_encoding</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>ptr</name><index>[<expr>0</expr>]</index></name> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr>"identity"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>token</name> = '\0'</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if></else></if>
<break>break;</break>
}</block></for>
}</block></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>hdrs</name> &amp;&amp; <name><name>r</name>-&gt;<name>content_encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>found</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>putLong</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>string</name></decl></param>, <param><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>string</name><index>[<expr>0</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>)<argument_list>(<argument><expr><name>x</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr>1</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>)<argument_list>(<argument><expr>(<name>x</name> &amp; 0xff00) &gt;&gt; 8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr>2</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>)<argument_list>(<argument><expr>(<name>x</name> &amp; 0xff0000) &gt;&gt; 16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr>3</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>)<argument_list>(<argument><expr>(<name>x</name> &amp; 0xff000000) &gt;&gt; 24</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>getLong</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>string</name></decl></param>)</parameter_list> <block>{
<return>return <expr>((<name>unsigned</name> <name>long</name>)<name><name>string</name><index>[<expr>0</expr>]</index></name>)
| (((<name>unsigned</name> <name>long</name>)<name><name>string</name><index>[<expr>1</expr>]</index></name>) &lt;&lt; 8)
| (((<name>unsigned</name> <name>long</name>)<name><name>string</name><index>[<expr>2</expr>]</index></name>) &lt;&lt; 16)
| (((<name>unsigned</name> <name>long</name>)<name><name>string</name><index>[<expr>3</expr>]</index></name>) &lt;&lt; 24)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_deflate_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>deflate_filter_config</name> *</type><name>c</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>memlevel</name></name> = <name>DEFAULT_MEMLEVEL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>windowSize</name></name> = <name>DEFAULT_WINDOWSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>bufferSize</name></name> = <name>DEFAULT_BUFFERSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>compressionlevel</name></name> = <name>DEFAULT_COMPRESSION</name></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_deflate_dirconf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>deflate_dirconf_t</name> *</type><name>dc</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>ratio_limit</name></name> = <name>AP_INFLATE_RATIO_LIMIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>ratio_burst</name></name> = <name>AP_INFLATE_RATIO_BURST</name></expr>;</expr_stmt>
<return>return <expr><name>dc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>deflate_set_window_size</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>deflate_filter_config</name> *</type><name>c</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>deflate_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 1 || <name>i</name> &gt; 15</expr>)</condition><then>
<return>return <expr>"DeflateWindowSize must be between 1 and 15"</expr>;</return></then></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>windowSize</name></name> = <name>i</name> * -1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>deflate_set_buffer_size</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>deflate_filter_config</name> *</type><name>c</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>deflate_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>n</name> &lt;= 0</expr>)</condition><then> <block>{
<return>return <expr>"DeflateBufferSize should be positive"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>bufferSize</name></name> = (<name>apr_size_t</name>)<name>n</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>deflate_set_note</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>deflate_filter_config</name> *</type><name>c</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>deflate_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>arg2</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>note_ratio_name</name></name> = <name>arg1</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"ratio"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>note_ratio_name</name></name> = <name>arg2</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"input"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>note_input_name</name></name> = <name>arg2</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"output"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>note_output_name</name></name> = <name>arg2</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unknown note type %s"</expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>deflate_set_memlevel</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>deflate_filter_config</name> *</type><name>c</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>deflate_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 1 || <name>i</name> &gt; 9</expr>)</condition><then>
<return>return <expr>"DeflateMemLevel must be between 1 and 9"</expr>;</return></then></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>memlevel</name></name> = <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>deflate_set_compressionlevel</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>deflate_filter_config</name> *</type><name>c</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>deflate_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 1 || <name>i</name> &gt; 9</expr>)</condition><then>
<return>return <expr>"Compression Level must be between 1 and 9"</expr>;</return></then></if>
<expr_stmt><expr><name><name>c</name>-&gt;<name>compressionlevel</name></name> = <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>deflate_set_inflate_limit</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dirconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>deflate_dirconf_t</name> *</type><name>dc</name> <init>= <expr>(<name>deflate_dirconf_t</name>*) <name>dirconf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>errp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name><name>dc</name>-&gt;<name>inflate_limit</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>errp</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"DeflateInflateLimitRequestBody is not parsable."</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>errp</name> || <name><name>dc</name>-&gt;<name>inflate_limit</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"DeflateInflateLimitRequestBody requires a non-negative integer."</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>deflate_set_inflate_ratio_limit</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dirconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>deflate_dirconf_t</name> *</type><name>dc</name> <init>= <expr>(<name>deflate_dirconf_t</name>*) <name>dirconf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt;= 0</expr>)</condition><then>
<return>return <expr>"DeflateInflateRatioLimit must be positive"</expr>;</return></then></if>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>ratio_limit</name></name> = <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>deflate_set_inflate_ratio_burst</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dirconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>deflate_dirconf_t</name> *</type><name>dc</name> <init>= <expr>(<name>deflate_dirconf_t</name>*) <name>dirconf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt;= 0</expr>)</condition><then>
<return>return <expr>"DeflateInflateRatioBurst must be positive"</expr>;</return></then></if>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>ratio_burst</name></name> = <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>deflate_ctx_t</name> <block>{
<decl_stmt><decl><type><name>z_stream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>, *<name>proc_bb</name>;</decl_stmt>
<function_decl><type><name>int</name></type> (*<name>libz_end_func</name>)<parameter_list>(<param><decl><type><name>z_streamp</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>validation_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>validation_buffer_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>header</name><index>[<expr>10</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>header_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zlib_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ratio_hits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>inflate_total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>consume_pos</name></decl>,
<name>consume_len</name>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>filter_init</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>done</name>:1</expr>;</expr_stmt>
}</block></struct></type> <name>deflate_ctx</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALIDATION_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_UPDATE_CRC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_CRC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>flush_libz_buffer</name><parameter_list>(<param><decl><type><name>deflate_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>deflate_filter_config</name> *</type><name>c</name></decl></param>,
<param><decl><type>struct <name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name></decl></param>,
<param><function_decl><type><name>int</name></type> (*<name>libz_func</name>)<parameter_list>(<param><decl><type><name>z_streamp</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>int</name></type> <name>flush</name></decl></param>,
<param><decl><type><name>int</name></type> <name>crc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>zRC</name> <init>= <expr><name>Z_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>deflate_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>deflate_len</name> = <name><name>c</name>-&gt;<name>bufferSize</name></name> - <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>deflate_len</name> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>crc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>crc</name></name> = <call><name>crc32</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>crc</name></name></expr></argument>, <argument><expr>(const <name>Bytef</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>,
<argument><expr><name>deflate_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>,
<argument><expr><name>deflate_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_out</name></name> = <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> = <name><name>c</name>-&gt;<name>bufferSize</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>done</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>zRC</name> = <call><name>libz_func</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zRC</name> == <name>Z_BUF_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>zRC</name> = <name>Z_OK</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>done</name> = (<name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> != 0 || <name>zRC</name> == <name>Z_STREAM_END</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>zRC</name> != <name>Z_OK</name> &amp;&amp; <name>zRC</name> != <name>Z_STREAM_END</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<return>return <expr><name>zRC</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>deflate_ctx_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>deflate_ctx</name> *</type><name>ctx</name> <init>= <expr>(<name>deflate_ctx</name> *)<name>data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ctx</name></expr>)</condition><then>
<expr_stmt><expr><call><name><name>ctx</name>-&gt;<name>libz_end_func</name></name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>deflate_check_etag</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>transform</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>etag</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"ETag"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>etaglen</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>etag</name> &amp;&amp; ((<name>etaglen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>etag</name></expr></argument>)</argument_list></call>) &gt; 2))</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>etag</name><index>[<expr><name>etaglen</name> - 1</expr>]</index></name> == '"'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>transformlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>newtag</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>etaglen</name> + <name>transformlen</name> + 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>d</name> <init>= <expr><name>newtag</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>e</name> <init>= <expr><name>d</name> + <name>etaglen</name> - 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name> <init>= <expr><name>etag</name></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name>d</name> &lt; <name>e</name></expr>;</condition> <incr><expr>++<name>d</name></expr>, <expr>++<name>s</name></expr></incr>) <block>{
<expr_stmt><expr>*<name>d</name> = *<name>s</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>d</name>++ = '-'</expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = <name>transform</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <name>d</name> + <name>transformlen</name></expr>;</expr_stmt>
<for>for (<init>;</init> <condition><expr><name>d</name> &lt; <name>e</name></expr>;</condition> <incr><expr>++<name>d</name></expr>, <expr>++<name>s</name></expr></incr>) <block>{
<expr_stmt><expr>*<name>d</name> = *<name>s</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>d</name>++ = '"'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>d</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"ETag"</expr></argument>, <argument><expr><name>newtag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_ratio</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>deflate_ctx</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>deflate_dirconf_t</name> *</type><name>dc</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_in</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ratio</name> <init>= <expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_out</name></name> / <name><name>ctx</name>-&gt;<name>stream</name>.<name>total_in</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ratio</name> &lt; <name><name>dc</name>-&gt;<name>ratio_limit</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ratio_hits</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>++<name><name>ctx</name>-&gt;<name>ratio_hits</name></name> &gt; <name><name>dc</name>-&gt;<name>ratio_burst</name></name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if></else></if>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>have_ssl_compression</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>mod_deflate_ssl_var</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>comp</name> = <call><name>mod_deflate_ssl_var</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"SSL_COMPRESS_METHOD"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>comp</name> == <name>NULL</name> || *<name>comp</name> == '\0' || <call><name>strcmp</name><argument_list>(<argument><expr><name>comp</name></expr></argument>, <argument><expr>"NULL"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>deflate_out_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>deflate_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zRC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr>0</expr></init>, <name>blen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>deflate_filter_config</name> *</type><name>c</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>c</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>deflate_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>have_ssl_compression</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Compression enabled at SSL level; not compressing "
"at HTTP level."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Not compressing very small response of %"
<name>APR_SIZE_T_FMT</name> " bytes"</expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>blen</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rc</name></expr>;</return></then></if>
<expr_stmt><expr><name>len</name> += <name>blen</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>gzip_header</name></expr></argument>)</argument_list></sizeof> + <name>VALIDATION_SIZE</name> + 50</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<expr_stmt><expr><name>ctx</name> = <name><name>f</name>-&gt;<name>ctx</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name/></name>main != <name>NULL</name>) || (<name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NO_CONTENT</name>) ||
<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"no-gzip"</expr></argument>)</argument_list></call> ||
<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Range"</expr></argument>)</argument_list></call></expr>
)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APLOG_R_IS_LEVEL</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name> <init>=
<expr>(<name><name>r</name>-&gt;<name/></name>main != <name>NULL</name>) ? "subrequest" :
(<name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NO_CONTENT</name>) ? "no content" :
<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"no-gzip"</expr></argument>)</argument_list></call> ? "no-gzip" :
"content-range"</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Not compressing (%s)"</expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>content_type</name></name> == <name>NULL</name>
|| <call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>, <argument><expr>"text/html"</expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>env_value</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>"gzip-only-text/html"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>( <expr><name>env_value</name> &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>env_value</name></expr></argument>,<argument><expr>"1"</expr></argument>)</argument_list></call> == 0)</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Not compressing, (gzip-only-text/html)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>encoding</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>encoding</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err_enc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err_enc</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err_enc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>encoding</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr>","</expr></argument>, <argument><expr><name>err_enc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>encoding</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>encoding</name> = <name>encoding</name> ? <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr>","</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
: <name><name>r</name>-&gt;<name>content_encoding</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>encoding</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp</name> <init>= <expr><name>encoding</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> = <call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>token</name> &amp;&amp; *<name>token</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"identity"</expr></argument>)</argument_list></call> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"7bit"</expr></argument>)</argument_list></call> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"8bit"</expr></argument>)</argument_list></call> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"binary"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Not compressing (content-encoding already "
" set: %s)"</expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>tmp</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>tmp</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>token</name> = (*<name>tmp</name>) ? <call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Vary"</expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"force-gzip"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>accepts</name></decl>;</decl_stmt>
<expr_stmt><expr><name>accepts</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>accepts</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>token</name> = <call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>accepts</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>token</name> &amp;&amp; <name><name>token</name><index>[<expr>0</expr>]</index></name> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"gzip"</expr></argument>)</argument_list></call></expr>)</condition> <block>{
<while>while <condition>(<expr>*<name>accepts</name> == ';'</expr>)</condition> <block>{
<expr_stmt><expr>++<name>accepts</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>accepts</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>accepts</name> == ','</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>accepts</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>token</name> = (*<name>accepts</name>) ? <call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>accepts</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>token</name> == <name>NULL</name> || <name><name>token</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Not compressing (no Accept-Encoding: gzip)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Forcing compression (force-gzip set)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_NOT_MODIFIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bufferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>libz_end_func</name></name> = <name>deflateEnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>zRC</name> = <call><name>deflateInit2</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>compressionlevel</name></name></expr></argument>, <argument><expr><name>Z_DEFLATED</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>windowSize</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>memlevel</name></name></expr></argument>,
<argument><expr><name>Z_DEFAULT_STRATEGY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zRC</name> != <name>Z_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>deflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01383</expr></argument>)</argument_list></call>
"unable to init Zlib: "
"deflateInit2 returned %d: URL %s"</expr></argument>,
<argument><expr><name>zRC</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>deflate_ctx_cleanup</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>filter_init</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>encoding</name> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr>"identity"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>, <argument><expr>"gzip"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>, <argument><expr>"gzip"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-MD5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>deflate_check_etag</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"gzip"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NOT_MODIFIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_immortal_create</name><argument_list>(<argument><expr><name>gzip_header</name></expr></argument>, <argument><expr>sizeof <name>gzip_header</name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_out</name></name> = <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> = <name><name>c</name>-&gt;<name>bufferSize</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>filter_init</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>bytes_sent</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush_libz_buffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>, <argument><expr><name>deflate</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>,
<argument><expr><name>NO_UPDATE_CRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>VALIDATION_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putLong</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name> *)&amp;<name><name>buf</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putLong</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name> *)&amp;<name><name>buf</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>VALIDATION_SIZE</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01384</expr></argument>)</argument_list></call>
"Zlib: Compressed %ld to %ld : URL %s"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_in</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_out</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>note_input_name</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>note_input_name</name></name></expr></argument>,
<argument><expr>(<name><name>ctx</name>-&gt;<name>stream</name>.<name>total_in</name></name> &gt; 0)
? <call><name>apr_off_t_toa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_in</name></name></expr></argument>)</argument_list></call>
: "-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>note_output_name</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>note_output_name</name></name></expr></argument>,
<argument><expr>(<name><name>ctx</name>-&gt;<name>stream</name>.<name>total_in</name></name> &gt; 0)
? <call><name>apr_off_t_toa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_out</name></name></expr></argument>)</argument_list></call>
: "-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>note_ratio_name</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>note_ratio_name</name></name></expr></argument>,
<argument><expr>(<name><name>ctx</name>-&gt;<name>stream</name>.<name>total_in</name></name> &gt; 0)
? <call><name>apr_itoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_out</name></name>
* 100
/ <name><name>ctx</name>-&gt;<name>stream</name>.<name>total_in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
: "-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>deflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>deflate_ctx_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>zRC</name> = <call><name>flush_libz_buffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>, <argument><expr><name>deflate</name></expr></argument>,
<argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>, <argument><expr><name>NO_UPDATE_CRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zRC</name> != <name>Z_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01385</expr></argument>)</argument_list></call>
"Zlib error %d flushing zlib output buffer (%s)"</expr></argument>,
<argument><expr><name>zRC</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt; <name>APR_INT32_MAX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_split</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>APR_INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>crc</name></name> = <call><name>crc32</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>crc</name></name></expr></argument>, <argument><expr>(const <name>Bytef</name> *)<name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_in</name></name> = (<name>unsigned</name> <name>char</name> *)<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> = <name>len</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> != 0</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_out</name></name> = <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name><name>c</name>-&gt;<name>bufferSize</name></name> - <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> = <name><name>c</name>-&gt;<name>bufferSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>zRC</name> = <call><name>deflate</name><argument_list>(<argument><expr>&amp;(<name><name>ctx</name>-&gt;<name>stream</name></name>)</expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zRC</name> != <name>Z_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01386</expr></argument>)</argument_list></call>
"Zlib error %d deflating data (%s)"</expr></argument>, <argument><expr><name>zRC</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>consume_zlib_flags</name><parameter_list>(<param><decl><type><name>deflate_ctx</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>zlib_flags</name></name> &amp; <name>EXTRA_FIELD</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>consume_pos</name></name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!*<name>len</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_INCOMPLETE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>consume_len</name></name> = (<name>unsigned</name> <name>int</name>)**<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>consume_pos</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr>++*<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr>--*<name>len</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>consume_pos</name></name> == 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!*<name>len</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_INCOMPLETE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>consume_len</name></name> += ((<name>unsigned</name> <name>int</name>)**<name>data</name>) &lt;&lt; 8</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>consume_pos</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr>++*<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr>--*<name>len</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name>len</name> &lt; <name><name>ctx</name>-&gt;<name>consume_len</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>consume_len</name></name> -= *<name>len</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>APR_INCOMPLETE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>data</name> += <name><name>ctx</name>-&gt;<name>consume_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> -= <name><name>ctx</name>-&gt;<name>consume_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>consume_len</name></name> = <name><name>ctx</name>-&gt;<name>consume_pos</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>zlib_flags</name></name> &amp;= ~<name>EXTRA_FIELD</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>zlib_flags</name></name> &amp; <name>ORIG_NAME</name>)</expr>)</condition><then> <block>{
<while>while <condition>(<expr>*<name>len</name> &amp;&amp; **<name>data</name></expr>)</condition> <block>{
<expr_stmt><expr>++*<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr>--*<name>len</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!*<name>len</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_INCOMPLETE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>++*<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr>--*<name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>zlib_flags</name></name> &amp;= ~<name>ORIG_NAME</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>zlib_flags</name></name> &amp; <name>COMMENT</name>)</expr>)</condition><then> <block>{
<while>while <condition>(<expr>*<name>len</name> &amp;&amp; **<name>data</name></expr>)</condition> <block>{
<expr_stmt><expr>++*<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr>--*<name>len</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!*<name>len</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_INCOMPLETE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>++*<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr>--*<name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>zlib_flags</name></name> &amp;= ~<name>COMMENT</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>zlib_flags</name></name> &amp; <name>HEAD_CRC</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>consume_pos</name></name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!*<name>len</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_INCOMPLETE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>consume_pos</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr>++*<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr>--*<name>len</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!*<name>len</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_INCOMPLETE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>++*<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr>--*<name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>consume_pos</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>zlib_flags</name></name> &amp;= ~<name>HEAD_CRC</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>deflate_in_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>bkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>deflate_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zRC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>deflate_filter_config</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>deflate_dirconf_t</name> *</type><name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>inflate_limit</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>mode</name> != <name>AP_MODE_READBYTES</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>c</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>deflate_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>deflate_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ctx</name> || <name><name>ctx</name>-&gt;<name>header_len</name></name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>header</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_is_initial_req</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Range"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>check_gzip</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bufferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<do>do <block>{
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>header</name></name></expr></argument>)</argument_list></sizeof> - <name><name>ctx</name>-&gt;<name>header_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>block</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bkt</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>header_len</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02619</expr></argument>)</argument_list></call>
"Encountered premature end-of-stream while "
"reading inflate header"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>header</name></name> + <name><name>ctx</name>-&gt;<name>header_len</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &amp;&amp; !<name><name>ctx</name>-&gt;<name>header_len</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-MD5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>header_len</name></name> += <name>len</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name><name>ctx</name>-&gt;<name>header_len</name></name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>header</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition>;</do>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>header</name><index>[<expr>0</expr>]</index></name> != <name><name>deflate_magic</name><index>[<expr>0</expr>]</index></name> ||
<name><name>ctx</name>-&gt;<name>header</name><index>[<expr>1</expr>]</index></name> != <name><name>deflate_magic</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01387</expr></argument>)</argument_list></call>
"Zlib: Invalid header"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>zlib_flags</name></name> = <name><name>ctx</name>-&gt;<name>header</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>zlib_flags</name></name> &amp; <name>RESERVED</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01388</expr></argument>)</argument_list></call>
"Zlib: Invalid flags %02x"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>zlib_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>zRC</name> = <call><name>inflateInit2</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>windowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zRC</name> != <name>Z_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01389</expr></argument>)</argument_list></call>
"unable to init Zlib: "
"inflateInit2 returned %d: URL %s"</expr></argument>,
<argument><expr><name>zRC</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_out</name></name> = <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> = <name><name>c</name>-&gt;<name>bufferSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>inflate_limit</name> = <name><name>dc</name>-&gt;<name>inflate_limit</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>inflate_limit</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>inflate_limit</name> = <call><name>ap_get_limit_req_body</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>block</name> == <name>APR_NONBLOCK_READ</name>
&amp;&amp; (<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>
|| (<name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>bkt</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>bkt</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>bkt</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>done</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02481</expr></argument>)</argument_list></call>
"Encountered premature end-of-stream while inflating"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>, <argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>tmp_b</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>inflate_total</name></name> += <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>zRC</name> = <call><name>inflate</name><argument_list>(<argument><expr>&amp;(<name><name>ctx</name>-&gt;<name>stream</name></name>)</expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>inflate_total</name></name> -= <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zRC</name> != <name>Z_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01391</expr></argument>)</argument_list></call>
"Zlib error %d inflating data (%s)"</expr></argument>, <argument><expr><name>zRC</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>inflate_limit</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>inflate_total</name></name> &gt; <name>inflate_limit</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02647</expr></argument>)</argument_list></call>
"Inflated content length of %" <name>APR_OFF_T_FMT</name>
" is larger than the configured limit"
" of %" <name>APR_OFF_T_FMT</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>inflate_total</name></name></expr></argument>, <argument><expr><name>inflate_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>check_ratio</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02805</expr></argument>)</argument_list></call>
"Inflated content ratio is larger than the "
"configured limit %i by %i time(s)"</expr></argument>,
<argument><expr><name><name>dc</name>-&gt;<name>ratio_limit</name></name></expr></argument>, <argument><expr><name><name>dc</name>-&gt;<name>ratio_burst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>len</name> = <name><name>c</name>-&gt;<name>bufferSize</name></name> - <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>crc</name></name> = <call><name>crc32</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>crc</name></name></expr></argument>, <argument><expr>(const <name>Bytef</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_b</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>, <argument><expr><name>tmp_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_out</name></name> = <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> = <name><name>c</name>-&gt;<name>bufferSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_b</name> = <call><name>APR_BUCKET_PREV</name><argument_list>(<argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>, <argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bkt</name> = <name>tmp_b</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>done</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02482</expr></argument>)</argument_list></call>
"Encountered extra data after compressed data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>bkt</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>len</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt; <name>APR_INT32_MAX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_split</name><argument_list>(<argument><expr><name>bkt</name></expr></argument>, <argument><expr><name>APR_INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>bkt</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>zlib_flags</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>consume_zlib_flags</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>zlib_flags</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>len</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_in</name></name> = (<name>unsigned</name> <name>char</name> *)<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> = (<name>int</name>)<name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>zRC</name> = <name>Z_OK</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>validation_buffer</name></name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> != 0</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>tmp_heap</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_out</name></name> = <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name><name>c</name>-&gt;<name>bufferSize</name></name> - <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>crc</name></name> = <call><name>crc32</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>crc</name></name></expr></argument>, <argument><expr>(const <name>Bytef</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_heap</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>, <argument><expr><name>tmp_heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> = <name><name>c</name>-&gt;<name>bufferSize</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>inflate_total</name></name> += <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>zRC</name> = <call><name>inflate</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>inflate_total</name></name> -= <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zRC</name> != <name>Z_OK</name> &amp;&amp; <name>zRC</name> != <name>Z_STREAM_END</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01392</expr></argument>)</argument_list></call>
"Zlib error %d inflating data (%s)"</expr></argument>, <argument><expr><name>zRC</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>inflate_limit</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>inflate_total</name></name> &gt; <name>inflate_limit</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02648</expr></argument>)</argument_list></call>
"Inflated content length of %" <name>APR_OFF_T_FMT</name>
" is larger than the configured limit"
" of %" <name>APR_OFF_T_FMT</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>inflate_total</name></name></expr></argument>, <argument><expr><name>inflate_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>check_ratio</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02649</expr></argument>)</argument_list></call>
"Inflated content ratio is larger than the "
"configured limit %i by %i time(s)"</expr></argument>,
<argument><expr><name><name>dc</name>-&gt;<name>ratio_limit</name></name></expr></argument>, <argument><expr><name><name>dc</name>-&gt;<name>ratio_burst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>zRC</name> == <name>Z_STREAM_END</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>VALIDATION_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></while>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>tmp_heap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>avail</name></decl>, <decl><type ref="prev"/><name>valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>buf</name> <init>= <expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>avail</name> = <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> = (<name>apr_size_t</name>)<name>VALIDATION_SIZE</name> -
<name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>avail</name> &lt; <name>valid</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> + <name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_in</name></name></expr></argument>, <argument><expr><name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name> += <name>avail</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> + <name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_in</name></name></expr></argument>, <argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name> += <name>valid</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01393</expr></argument>)</argument_list></call>
"Zlib: Inflated %ld to %ld : URL %s"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_in</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_out</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name><name>c</name>-&gt;<name>bufferSize</name></name> - <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>crc</name></name> = <call><name>crc32</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>crc</name></name></expr></argument>, <argument><expr>(const <name>Bytef</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_heap</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>, <argument><expr><name>tmp_heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> = <name><name>c</name>-&gt;<name>bufferSize</name></name></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>compCRC</name></decl>, <decl><type ref="prev"/><name>compLen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>compCRC</name> = <call><name>getLong</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>crc</name></name> != <name>compCRC</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01394</expr></argument>)</argument_list></call>
"Zlib: CRC error inflating data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>compLen</name> = <call><name>getLong</name><argument_list>(<argument><expr><name>buf</name> + <name>VALIDATION_SIZE</name> / 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>stream</name>.<name>total_out</name></name> &amp; 0xFFFFFFFF) != <name>compLen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01395</expr></argument>)</argument_list></call>
"Zlib: Length %ld of inflated data does "
"not match expected value %ld"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_out</name></name></expr></argument>, <argument><expr><name>compLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block>
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>done</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>avail</name> &gt; <name>valid</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02485</expr></argument>)</argument_list></call>
"Encountered extra data after compressed data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>block</name> == <name>APR_BLOCK_READ</name> &amp;&amp;
<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>)</argument_list></call> &amp;&amp;
<name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> &lt; <name><name>c</name>-&gt;<name>bufferSize</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>tmp_heap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_out</name></name> = <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name><name>c</name>-&gt;<name>bufferSize</name></name> - <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>crc</name></name> = <call><name>crc32</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>crc</name></name></expr></argument>, <argument><expr>(const <name>Bytef</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_heap</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>, <argument><expr><name>tmp_heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> = <name><name>c</name>-&gt;<name>bufferSize</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_brigade_partition</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>, <argument><expr>&amp;<name>bkt</name></expr></argument>)</argument_list></call> == <name>APR_INCOMPLETE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_split_ex</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bkt</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>proc_bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>inflate_out_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>deflate_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zRC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>deflate_filter_config</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>deflate_dirconf_t</name> *</type><name>dc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>c</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>deflate_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>deflate_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_is_initial_req</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> || (<name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NO_CONTENT</name>) ||
(<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Range"</expr></argument>)</argument_list></call> != <name>NULL</name>) ||
(<call><name>check_gzip</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>)</argument_list></call> == 0)</expr>
)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-MD5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>deflate_check_etag</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"gunzip"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NOT_MODIFIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bufferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>libz_end_func</name></name> = <name>inflateEnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>zRC</name> = <call><name>inflateInit2</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>windowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zRC</name> != <name>Z_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01397</expr></argument>)</argument_list></call>
"unable to init Zlib: "
"inflateInit2 returned %d: URL %s"</expr></argument>,
<argument><expr><name>zRC</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>deflate_ctx_cleanup</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_out</name></name> = <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> = <name><name>c</name>-&gt;<name>bufferSize</name></name></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush_libz_buffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>, <argument><expr><name>inflate</name></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>,
<argument><expr><name>UPDATE_CRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01398</expr></argument>)</argument_list></call>
"Zlib: Inflated %ld to %ld : URL %s"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_in</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>total_out</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name> == <name>VALIDATION_SIZE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>compCRC</name></decl>, <decl><type ref="prev"/><name>compLen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>compCRC</name> = <call><name>getLong</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>crc</name></name> != <name>compCRC</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01399</expr></argument>)</argument_list></call>
"Zlib: Checksum of inflated stream invalid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name> += <name>VALIDATION_SIZE</name> / 2</expr>;</expr_stmt>
<expr_stmt><expr><name>compLen</name> = <call><name>getLong</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>stream</name>.<name>total_out</name></name> &amp; 0xFFFFFFFF) != <name>compLen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01400</expr></argument>)</argument_list></call>
"Zlib: Length of inflated stream invalid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01401</expr></argument>)</argument_list></call>
"Zlib: Validation bytes not present"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></else></if>
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>deflate_ctx_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>zRC</name> = <call><name>flush_libz_buffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>, <argument><expr><name>inflate</name></expr></argument>,
<argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>, <argument><expr><name>UPDATE_CRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zRC</name> == <name>Z_STREAM_END</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>VALIDATION_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>zRC</name> != <name>Z_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01402</expr></argument>)</argument_list></call>
"Zlib error %d flushing inflate buffer (%s)"</expr></argument>,
<argument><expr><name>zRC</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt; <name>APR_INT32_MAX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_split</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>APR_INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>header_len</name></name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>header</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>rem</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rem</name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>header</name></name></expr></argument>)</argument_list></sizeof> - <name><name>ctx</name>-&gt;<name>header_len</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &lt; <name>rem</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>header</name></name> + <name><name>ctx</name>-&gt;<name>header_len</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>header_len</name></name> += <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>header</name></name> + <name><name>ctx</name>-&gt;<name>header_len</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>header_len</name></name> += <name>rem</name></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>zlib_method</name></decl>;</decl_stmt>
<expr_stmt><expr><name>zlib_method</name> = <name><name>ctx</name>-&gt;<name>header</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zlib_method</name> != <name>Z_DEFLATED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01404</expr></argument>)</argument_list></call>
"inflate: data not deflated!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>header</name><index>[<expr>0</expr>]</index></name> != <name><name>deflate_magic</name><index>[<expr>0</expr>]</index></name> ||
<name><name>ctx</name>-&gt;<name>header</name><index>[<expr>1</expr>]</index></name> != <name><name>deflate_magic</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01405</expr></argument>)</argument_list></call>
"inflate: bad header"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr> ;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>zlib_flags</name></name> = <name><name>ctx</name>-&gt;<name>header</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>zlib_flags</name></name> &amp; <name>RESERVED</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02620</expr></argument>)</argument_list></call>
"inflate: bad flags %02x"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>zlib_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block>
<if>if <condition>(<expr><name>len</name> == <name>rem</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>data</name> += <name>rem</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= <name>rem</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>zlib_flags</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>consume_zlib_flags</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>zlib_flags</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_in</name></name> = (<name>unsigned</name> <name>char</name> *)<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> = <name>len</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name> &lt; <name>VALIDATION_SIZE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>copy_size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>copy_size</name> = <name>VALIDATION_SIZE</name> - <name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copy_size</name> &gt; <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name></expr>)</condition><then>
<expr_stmt><expr><name>copy_size</name> = <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name> + <name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_in</name></name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> -= <name>copy_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name> += <name>copy_size</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01407</expr></argument>)</argument_list></call>
"Zlib: %d bytes of garbage at the end of "
"compressed stream."</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<while>while <condition>(<expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> != 0</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_out</name></name> = <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name><name>c</name>-&gt;<name>bufferSize</name></name> - <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>crc</name></name> = <call><name>crc32</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>crc</name></name></expr></argument>, <argument><expr>(const <name>Bytef</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_out</name></name> = <name><name>c</name>-&gt;<name>bufferSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>zRC</name> = <call><name>inflate</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zRC</name> != <name>Z_OK</name> &amp;&amp; <name>zRC</name> != <name>Z_STREAM_END</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01409</expr></argument>)</argument_list></call>
"Zlib error %d inflating data (%s)"</expr></argument>, <argument><expr><name>zRC</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>check_ratio</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02650</expr></argument>)</argument_list></call>
"Inflated content ratio is larger than the "
"configured limit %i by %i time(s)"</expr></argument>,
<argument><expr><name><name>dc</name>-&gt;<name>ratio_limit</name></name></expr></argument>, <argument><expr><name><name>dc</name>-&gt;<name>ratio_burst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>zRC</name> == <name>Z_STREAM_END</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>VALIDATION_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> &gt; <name>VALIDATION_SIZE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name> = <name>VALIDATION_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01408</expr></argument>)</argument_list></call>
"Zlib: %d bytes of garbage at the end of "
"compressed stream."</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> - <name>VALIDATION_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name> = <name><name>ctx</name>-&gt;<name>stream</name>.<name>avail_in</name></name></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>validation_buffer</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>stream</name>.<name>next_in</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>validation_buffer_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mod_deflate_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>mod_deflate_ssl_var</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_var_lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_FLAGS</name></cpp:macro> <cpp:value>AP_FILTER_PROTO_CHANGE|AP_FILTER_PROTO_CHANGE_LENGTH</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr><name>deflateFilterName</name></expr></argument>, <argument><expr><name>deflate_out_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_CONTENT_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"INFLATE"</expr></argument>, <argument><expr><name>inflate_out_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_RESOURCE</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_input_filter</name><argument_list>(<argument><expr><name>deflateFilterName</name></expr></argument>, <argument><expr><name>deflate_in_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_CONTENT_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>mod_deflate_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>deflate_filter_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"DeflateFilterNote"</expr></argument>, <argument><expr><name>deflate_set_note</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set a note to report on compression ratio"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DeflateWindowSize"</expr></argument>, <argument><expr><name>deflate_set_window_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"Set the Deflate window size (1-15)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DeflateBufferSize"</expr></argument>, <argument><expr><name>deflate_set_buffer_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set the Deflate Buffer Size"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DeflateMemLevel"</expr></argument>, <argument><expr><name>deflate_set_memlevel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set the Deflate Memory Level (1-9)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DeflateCompressionLevel"</expr></argument>, <argument><expr><name>deflate_set_compressionlevel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set the Deflate Compression Level (1-9)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DeflateInflateLimitRequestBody"</expr></argument>, <argument><expr><name>deflate_set_inflate_limit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Set a limit on size of inflated input"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DeflateInflateRatioLimit"</expr></argument>, <argument><expr><name>deflate_set_inflate_ratio_limit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Set the inflate ratio limit above which inflation is "
"aborted (default: " <call><name>APR_STRINGIFY</name><argument_list>(<argument><expr><name>AP_INFLATE_RATIO_LIMIT</name></expr></argument>)</argument_list></call> ")"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DeflateInflateRatioBurst"</expr></argument>, <argument><expr><name>deflate_set_inflate_ratio_burst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Set the maximum number of following inflate ratios above limit "
"(default: " <call><name>APR_STRINGIFY</name><argument_list>(<argument><expr><name>AP_INFLATE_RATIO_BURST</name></expr></argument>)</argument_list></call> ")"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>deflate</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_deflate_dirconf</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>create_deflate_server_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>deflate_filter_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
