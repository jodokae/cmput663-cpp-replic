<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/database/mod_dbd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_reslist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_dbd.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_MEMFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_dbd.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>extern</specifier> <name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>dbd_module</name></decl>;</decl_stmt>
<macro><name>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><argument_list>(<argument>dbd</argument>, <argument>DBD</argument>, <argument>apr_status_t</argument>, <argument>post_connect</argument>,
<argument>(apr_pool_t *pool, dbd_cfg_t *cfg,
ap_dbd_t *dbd)</argument>,
<argument>(pool, cfg, dbd)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NMIN_SET</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NKEEP_SET</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NMAX_SET</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPTIME_SET</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<typedef>typedef <type>struct <name>dbd_group_t</name></type> <name>dbd_group_t</name>;</typedef>
<struct>struct <name>dbd_group_t</name> <block>{
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbd_group_t</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_reslist_t</name> *</type><name>reslist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>destroyed</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>rec</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbd_group_t</name> *</type><name>group</name></decl>;</decl_stmt>
}</block></struct></type> <name>svr_cfg</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{ <decl><name>cmd_name</name></decl>, <decl><name>cmd_params</name></decl>, <decl><name>cmd_persist</name></decl>,
<decl><name>cmd_min</name></decl>, <decl><name>cmd_keep</name></decl>, <decl><name>cmd_max</name></decl>, <decl><name>cmd_exp</name></decl>
}</block></enum></type> <name>cmd_parts</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>config_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>dbd_group_t</name> *</type><name>group_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name>no_dbdriver</name> <init>= <expr>"[DBDriver unset]"</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NMIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NKEEP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NMAX</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_EXPTIME</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SQL_INIT_ARRAY_SIZE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_dbd_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svr_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>cfg</name> <init>= <expr><name><name>svr</name>-&gt;<name>cfg</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbd_cfg_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>server</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>name</name></name> = <name>no_dbdriver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>params</name></name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>persist</name></name> = -1</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>nmin</name></name> = <name>DEFAULT_NMIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>nkeep</name></name> = <name>DEFAULT_NKEEP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>nmax</name></name> = <name>DEFAULT_NMAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>exptime</name></name> = <name>DEFAULT_EXPTIME</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>queries</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>init_queries</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_INIT_ARRAY_SIZE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>svr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_dbd_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>base</name> <init>= <expr>((<name>svr_cfg</name>*) <name>basev</name>)-&gt;<name>cfg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>add</name> <init>= <expr>((<name>svr_cfg</name>*) <name>addv</name>)-&gt;<name>cfg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svr_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>new</name> <init>= <expr><name><name>svr</name>-&gt;<name>cfg</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbd_cfg_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>server</name></name> = <name><name>add</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>name</name></name> = (<name><name>add</name>-&gt;<name>name</name></name> != <name>no_dbdriver</name>) ? <name><name>add</name>-&gt;<name>name</name></name> : <name><name>base</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>params</name></name> = <call><name>strcmp</name><argument_list>(<argument><expr><name><name>add</name>-&gt;<name>params</name></name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call> ? <name><name>add</name>-&gt;<name>params</name></name> : <name><name>base</name>-&gt;<name>params</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>persist</name></name> = (<name><name>add</name>-&gt;<name>persist</name></name> != -1) ? <name><name>add</name>-&gt;<name>persist</name></name> : <name><name>base</name>-&gt;<name>persist</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>nmin</name></name> = (<name><name>add</name>-&gt;<name>set</name></name>&amp;<name>NMIN_SET</name>) ? <name><name>add</name>-&gt;<name>nmin</name></name> : <name><name>base</name>-&gt;<name>nmin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>nkeep</name></name> = (<name><name>add</name>-&gt;<name>set</name></name>&amp;<name>NKEEP_SET</name>) ? <name><name>add</name>-&gt;<name>nkeep</name></name> : <name><name>base</name>-&gt;<name>nkeep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>nmax</name></name> = (<name><name>add</name>-&gt;<name>set</name></name>&amp;<name>NMAX_SET</name>) ? <name><name>add</name>-&gt;<name>nmax</name></name> : <name><name>base</name>-&gt;<name>nmax</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>exptime</name></name> = (<name><name>add</name>-&gt;<name>set</name></name>&amp;<name>EXPTIME_SET</name>) ? <name><name>add</name>-&gt;<name>exptime</name></name> : <name><name>base</name>-&gt;<name>exptime</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>new</name>-&gt;<name>queries</name></name> = <call><name>apr_hash_overlay</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>queries</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>init_queries</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>init_queries</name></name></expr></argument>,
<argument><expr><name><name>base</name>-&gt;<name>init_queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>svr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_dbd_sql_init</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>query</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>arr_item</name></decl>;</decl_stmt>
<expr_stmt><expr><name>svr</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>svr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>svr</name> = <call><name>create_dbd_config</name><argument_list>(<argument><expr><name>config_pool</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>, <argument><expr><name>svr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>query</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>arr_item</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>svr</name>-&gt;<name>cfg</name>-&gt;<name>init_queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>arr_item</name> = <name>query</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dbd_param</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_dbd_driver_t</name> *</type><name>driver</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>cfg</name> <init>= <expr><name><name>svr</name>-&gt;<name>cfg</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr>(<name>long</name>) <name><name>cmd</name>-&gt;<name>info</name></name></expr>)</condition> <block>{
<case>case <expr><name>cmd_name</name></expr>:
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>name</name></name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbd_get_driver</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>&amp;<name>driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOTIMPL</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"No driver for %s"</expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EDSOOPEN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr>"Can't load driver file dbd%s.nlm"</expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr>"Can't load driver file apr_dbd_%s.so"</expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name><name>cfg</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_ESYMNOTFOUND</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Failed to load driver apr_dbd_%s_driver"</expr></argument>,
<argument><expr><name><name>cfg</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if></else></if>
<break>break;</break>
</case><case>case <expr><name>cmd_params</name></expr>:
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>params</name></name> = <name>val</name></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dbd_param_int</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>cfg</name> <init>= <expr><name><name>svr</name>-&gt;<name>cfg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<for>for (<init><expr><name>p</name> = <name>val</name></expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr>++<name>p</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"Argument must be numeric!"</expr>;</return>
}</block></then></if>
}</block></for>
<switch>switch <condition>(<expr>(<name>long</name>) <name><name>cmd</name>-&gt;<name>info</name></name></expr>)</condition> <block>{
<case>case <expr><name>cmd_min</name></expr>:
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>nmin</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>set</name></name> |= <name>NMIN_SET</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>cmd_keep</name></expr>:
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>nkeep</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>set</name></name> |= <name>NKEEP_SET</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>cmd_max</name></expr>:
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>nmax</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>set</name></name> |= <name>NMAX_SET</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>cmd_exp</name></expr>:
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>exptime</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>set</name></name> |= <name>EXPTIME_SET</name></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dbd_param_flag</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr>(<name>long</name>) <name><name>cmd</name>-&gt;<name>info</name></name></expr>)</condition> <block>{
<case>case <expr><name>cmd_persist</name></expr>:
<expr_stmt><expr><name><name>svr</name>-&gt;<name>cfg</name>-&gt;<name>persist</name></name> = <name>flag</name></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dbd_prepare</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>query</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>label</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>label</name> = <name>query</name></expr>;</expr_stmt>
<expr_stmt><expr><name>query</name> = ""</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_dbd_prepare</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dbd_init_sql</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>query</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>query</name> || *<name>query</name> == '\n'</expr>)</condition><then> <block>{
<return>return <expr>"You should specify SQL statement"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_dbd_sql_init</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>dbd_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DBDriver"</expr></argument>, <argument><expr><name>dbd_param</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>cmd_name</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"SQL Driver"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DBDParams"</expr></argument>, <argument><expr><name>dbd_param</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>cmd_params</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"SQL Driver Params"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"DBDPersist"</expr></argument>, <argument><expr><name>dbd_param_flag</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>cmd_persist</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Use persistent connection/pool"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"DBDPrepareSQL"</expr></argument>, <argument><expr><name>dbd_prepare</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"SQL statement to prepare (or nothing, to override "
"statement inherited from main server) and label"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DBDInitSQL"</expr></argument>, <argument><expr><name>dbd_init_sql</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"SQL statement to be executed after connection is created"</expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DBDMin"</expr></argument>, <argument><expr><name>dbd_param_int</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>cmd_min</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Minimum number of connections"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DBDKeep"</expr></argument>, <argument><expr><name>dbd_param_int</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>cmd_keep</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Maximum number of sustained connections"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DBDMax"</expr></argument>, <argument><expr><name>dbd_param_int</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>cmd_max</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Maximum number of connections"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DBDExptime"</expr></argument>, <argument><expr><name>dbd_param_int</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>cmd_exp</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Keepalive time for idle connections"</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbd_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>config_pool</name> = <name>pconf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>group_list</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<macro><name>DBD_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_dbd_prepare</name><argument_list>(<argument>server_rec *s</argument>, <argument>const char *query</argument>,
<argument>const char *label</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>svr</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>svr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>svr</name> = <call><name>create_dbd_config</name><argument_list>(<argument><expr><name>config_pool</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>, <argument><expr><name>svr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>svr</name>-&gt;<name>cfg</name>-&gt;<name>queries</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02653</expr></argument>)</argument_list></call>
"conflicting SQL statements with label %s"</expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>svr</name>-&gt;<name>cfg</name>-&gt;<name>queries</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl>, *<name>query</name>;</decl_stmt>
}</block></struct></type> <name>dbd_query_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbd_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>add_queries</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>10</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbd_query_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>sp</name> = <name>s</name></expr>;</init> <condition><expr><name>sp</name></expr>;</condition> <incr><expr><name>sp</name> = <name><name>sp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>sp</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>cfg</name> <init>= <expr><name><name>svr</name>-&gt;<name>cfg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi_first</name> <init>= <expr><call><name>apr_hash_first</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>queries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbd_group_t</name> *</type><name>group</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>name</name></name> == <name>no_dbdriver</name> || !<name><name>cfg</name>-&gt;<name>persist</name></name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<for>for (<init><expr><name>group</name> = <name>group_list</name></expr>;</init> <condition><expr><name>group</name></expr>;</condition> <incr><expr><name>group</name> = <name><name>group</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>group_cfg</name> <init>= <expr><name><name>group</name>-&gt;<name>cfg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>group_ok</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>group_cfg</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call>
|| <call><name>strcmp</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>params</name></name></expr></argument>, <argument><expr><name><name>group_cfg</name>-&gt;<name>params</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>nmin</name></name> != <name><name>group_cfg</name>-&gt;<name>nmin</name></name>
|| <name><name>cfg</name>-&gt;<name>nkeep</name></name> != <name><name>group_cfg</name>-&gt;<name>nkeep</name></name>
|| <name><name>cfg</name>-&gt;<name>nmax</name></name> != <name><name>group_cfg</name>-&gt;<name>nmax</name></name>
|| <name><name>cfg</name>-&gt;<name>exptime</name></name> != <name><name>group_cfg</name>-&gt;<name>exptime</name></name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>add_queries</name>-&gt;<name>nelts</name></name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <name>hi_first</name></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl>, *<decl><type ref="prev"/><name>query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>group_query</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name>*) &amp;<name>label</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name>*) &amp;<name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>group_query</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>group_cfg</name>-&gt;<name>queries</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>group_query</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>dbd_query_t</name> *</type><name>add_query</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name>add_queries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>add_query</name>-&gt;<name>label</name></name> = <name>label</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add_query</name>-&gt;<name>query</name></name> = <name>query</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>group_query</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>group_ok</name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>group_ok</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>add_queries</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>dbd_query_t</name> *</type><name>add_query</name> <init>= <expr>((<name>dbd_query_t</name>*) <name><name>add_queries</name>-&gt;<name>elts</name></name>)
+ <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>group_cfg</name>-&gt;<name>queries</name></name></expr></argument>, <argument><expr><name><name>add_query</name>-&gt;<name>label</name></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name><name>add_query</name>-&gt;<name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>svr</name>-&gt;<name>group</name></name> = <name>group</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name><name>svr</name>-&gt;<name>group</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>svr</name>-&gt;<name>group</name></name> = <name>group</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbd_group_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>group</name>-&gt;<name>cfg</name></name> = <name>cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>group</name>-&gt;<name>next</name></name> = <name>group_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>group_list</name> = <name>group</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_prepared_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>dbd_cfg_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><name>ap_dbd_t</name> *</type><name>rec</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rec</name>-&gt;<name>prepared</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>queries</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl>, *<decl><type ref="prev"/><name>query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_prepared_t</name> *</type><name>stmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name>*) &amp;<name>label</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name>*) &amp;<name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>stmt</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_dbd_prepare</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>rec</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>,
<argument><expr><name>label</name></expr></argument>, <argument><expr>&amp;<name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>prepared</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_init_sql_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>dbd_cfg_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><name>ap_dbd_t</name> *</type><name>rec</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>cfg</name>-&gt;<name>init_queries</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nrows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>query_p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>query_p</name> = (<name>char</name> **)<name><name>cfg</name>-&gt;<name>init_queries</name>-&gt;<name>elts</name></name> + <name>i</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_dbd_query</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>rec</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>&amp;<name>nrows</name></expr></argument>, <argument><expr>*<name>query_p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_close</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>rec</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>apr_dbd_close</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>rec</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_destruct</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>void</name> *</type><name>params</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dbd_group_t</name> *</type><name>group</name> <init>= <expr><name>params</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>group</name>-&gt;<name>destroyed</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>rec</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_construct</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>data_ptr</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>params</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dbd_group_t</name> *</type><name>group</name> <init>= <expr><name>params</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>cfg</name> <init>= <expr><name><name>group</name>-&gt;<name>cfg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>rec_pool</name></decl>, *<decl><type ref="prev"/><name>prepared_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>rec_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00624</expr></argument>)</argument_list></call>
"Failed to create memory pool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rec</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>rec_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_dbd_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rec</name>-&gt;<name>pool</name></name> = <name>rec_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbd_get_driver</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>&amp;<name><name>rec</name>-&gt;<name>driver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOTIMPL</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00625</expr></argument>)</argument_list></call>
"driver for %s not available"</expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EDSOOPEN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00626</expr></argument>)</argument_list></call>
"can't find driver for %s"</expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_ESYMNOTFOUND</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00627</expr></argument>)</argument_list></call>
"driver for %s is invalid or corrupted"</expr></argument>,
<argument><expr><name><name>cfg</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00628</expr></argument>)</argument_list></call>
"mod_dbd not compatible with APR in get_driver"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbd_open_ex</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>rec</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>params</name></name></expr></argument>, <argument><expr>&amp;<name><name>rec</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><name>rv</name></expr>)</condition> <block>{
<case>case <expr><name>APR_EGENERAL</name></expr>:
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00629</expr></argument>)</argument_list></call>
"Can't connect to %s: %s"</expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00630</expr></argument>)</argument_list></call>
"mod_dbd not compatible with APR in open"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><name>dbd_close</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>prepared_pool</name></expr></argument>, <argument><expr><name><name>rec</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00631</expr></argument>)</argument_list></call>
"Failed to create memory pool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>dbd_prepared_init</name><argument_list>(<argument><expr><name>prepared_pool</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name> <init>= <expr><call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>rec</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00632</expr></argument>)</argument_list></call>
"failed to prepare SQL statements: %s"</expr></argument>,
<argument><expr>(<name>errmsg</name> ? <name>errmsg</name> : "[???]")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>dbd_run_post_connect</name><argument_list>(<argument><expr><name>prepared_pool</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>data_ptr</name> = <name>rec</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_destroy</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dbd_group_t</name> *</type><name>group</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>group</name>-&gt;<name>destroyed</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_setup</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>dbd_group_t</name> *</type><name>group</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>cfg</name> <init>= <expr><name><name>group</name>-&gt;<name>cfg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_reslist_create</name><argument_list>(<argument><expr>&amp;<name><name>group</name>-&gt;<name>reslist</name></name></expr></argument>,
<argument><expr><name><name>cfg</name>-&gt;<name>nmin</name></name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>nkeep</name></name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>nmax</name></name></expr></argument>,
<argument><expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>exptime</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dbd_construct</name></expr></argument>, <argument><expr><name>dbd_destruct</name></expr></argument>, <argument><expr><name>group</name></expr></argument>,
<argument><expr><name><name>group</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00633</expr></argument>)</argument_list></call>
"failed to initialise"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>group</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>dbd_destroy</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_setup_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dbd_group_t</name> *</type><name>group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>group</name> = <name>group_list</name></expr>;</init> <condition><expr><name>group</name></expr>;</condition> <incr><expr><name>group</name> = <name><name>group</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv2</name> = <call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>group</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv2</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00634</expr></argument>)</argument_list></call>
"Failed to create reslist cleanup memory pool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv2</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><name>rv2</name> = <call><name>dbd_setup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv2</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>rv2</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name>rv2</name> = <call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>group</name>-&gt;<name>mutex</name></name></expr></argument>,
<argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv2</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00635</expr></argument>)</argument_list></call>
"Failed to create thread mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv2</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dbd_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>dbd_setup_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00636</expr></argument>)</argument_list></call>
"child init failed!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_setup_lock</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>dbd_group_t</name> *</type><name>group</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init>, <name>rv2</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>group</name>-&gt;<name>mutex</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv2</name> = <call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>group</name>-&gt;<name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv2</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00637</expr></argument>)</argument_list></call>
"Failed to acquire thread mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv2</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>group</name>-&gt;<name>reslist</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>dbd_setup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv2</name> = <call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>group</name>-&gt;<name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv2</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00638</expr></argument>)</argument_list></call>
"Failed to release thread mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>rv2</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>DBD_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_dbd_close</name><argument_list>(<argument>server_rec *s</argument>, <argument>ap_dbd_t *rec</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>svr</name>-&gt;<name>cfg</name>-&gt;<name>persist</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<else>else <block>{
<expr_stmt><expr><call><name>apr_reslist_release</name><argument_list>(<argument><expr><name><name>svr</name>-&gt;<name>group</name>-&gt;<name>reslist</name></name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_check</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>ap_dbd_t</name> *</type><name>rec</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_dbd_check_conn</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>rec</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> == <name>APR_SUCCESS</name>) || (<name>rv</name> == <name>APR_ENOTIMPL</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>errmsg</name> = <call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>rec</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>errmsg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>errmsg</name> = "(unknown)"</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>svr</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00639</expr></argument>)</argument_list></call>
"DBD [%s] Error: %s"</expr></argument>, <argument><expr><name><name>svr</name>-&gt;<name>cfg</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<macro><name>DBD_DECLARE_NONSTD</name><argument_list>(<argument>ap_dbd_t*</argument>)</argument_list></macro> <macro><name>ap_dbd_open</name><argument_list>(<argument>apr_pool_t *pool</argument>, <argument>server_rec *s</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbd_group_t</name> *</type><name>group</name> <init>= <expr><name><name>svr</name>-&gt;<name>group</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dbd_cfg_t</name> *</type><name>cfg</name> <init>= <expr><name><name>svr</name>-&gt;<name>cfg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>rec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>name</name></name> == <name>no_dbdriver</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02654</expr></argument>)</argument_list></call>
"not configured"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>cfg</name>-&gt;<name>persist</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>group</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbd_group_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>group</name>-&gt;<name>cfg</name></name> = <name>cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbd_construct</name><argument_list>(<argument><expr>(<name>void</name>*) &amp;<name>rec</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rec</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr>!<name><name>group</name>-&gt;<name>reslist</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>dbd_setup_lock</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_reslist_acquire</name><argument_list>(<argument><expr><name><name>group</name>-&gt;<name>reslist</name></name></expr></argument>, <argument><expr>(<name>void</name>*) &amp;<name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02655</expr></argument>)</argument_list></call>
"Failed to acquire DBD connection from pool!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>dbd_check</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_reslist_invalidate</name><argument_list>(<argument><expr><name><name>group</name>-&gt;<name>reslist</name></name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rec</name> = <name><name>group</name>-&gt;<name>rec</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rec</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>dbd_check</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rec</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>rec</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dbd_construct</name><argument_list>(<argument><expr>(<name>void</name>*) &amp;<name>rec</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>group</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>group</name>-&gt;<name>rec</name></name> = <name>rec</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>rec</name></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_reslist_t</name> *</type><name>reslist</name></decl>;</decl_stmt>
}</block></struct></type> <name>dbd_acquire_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_release</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dbd_acquire_t</name> *</type><name>acq</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_reslist_release</name><argument_list>(<argument><expr><name><name>acq</name>-&gt;<name>reslist</name></name></expr></argument>, <argument><expr><name><name>acq</name>-&gt;<name>rec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>DBD_DECLARE_NONSTD</name><argument_list>(<argument>ap_dbd_t *</argument>)</argument_list></macro> <macro><name>ap_dbd_acquire</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>dbd_acquire_t</name> *</type><name>acq</name></decl>;</decl_stmt>
<while>while <condition>(<expr>!<call><name>ap_is_initial_req</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>r</name> = <name><name>r</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<expr_stmt><expr><name>r</name> = <name><name>r</name>-&gt;<name/></name>main</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></while>
<expr_stmt><expr><name>acq</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>acq</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>acq</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbd_acquire_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acq</name>-&gt;<name>rec</name></name> = <call><name>ap_dbd_open</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>acq</name>-&gt;<name>rec</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>, <argument><expr><name>acq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>svr</name>-&gt;<name>cfg</name>-&gt;<name>persist</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>acq</name>-&gt;<name>reslist</name></name> = <name><name>svr</name>-&gt;<name>group</name>-&gt;<name>reslist</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>acq</name></expr></argument>, <argument><expr><name>dbd_release</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<return>return <expr><name><name>acq</name>-&gt;<name>rec</name></name></expr>;</return>
}</block>
<macro><name>DBD_DECLARE_NONSTD</name><argument_list>(<argument>ap_dbd_t *</argument>)</argument_list></macro> <macro><name>ap_dbd_cacquire</name><argument_list>(<argument>conn_rec *c</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>dbd_acquire_t</name> *</type><name>acq</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>acq</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>acq</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbd_acquire_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>acq</name>-&gt;<name>rec</name></name> = <call><name>ap_dbd_open</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>acq</name>-&gt;<name>rec</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svr_cfg</name> *</type><name>svr</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>base_server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>, <argument><expr><name>acq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>svr</name>-&gt;<name>cfg</name>-&gt;<name>persist</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>acq</name>-&gt;<name>reslist</name></name> = <name><name>svr</name>-&gt;<name>group</name>-&gt;<name>reslist</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>acq</name></expr></argument>, <argument><expr><name>dbd_release</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<return>return <expr><name><name>acq</name>-&gt;<name>rec</name></name></expr>;</return>
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>DBD_DECLARE_NONSTD</name><argument_list>(<argument>ap_dbd_t *</argument>)</argument_list></macro> <macro><name>ap_dbd_acquire</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>rec</name></decl>;</decl_stmt>
<while>while <condition>(<expr>!<call><name>ap_is_initial_req</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>r</name> = <name><name>r</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<expr_stmt><expr><name>r</name> = <name><name>r</name>-&gt;<name/></name>main</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></while>
<expr_stmt><expr><name>rec</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>rec</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rec</name> = <call><name>ap_dbd_open</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rec</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>rec</name></expr>;</return>
}</block>
<macro><name>DBD_DECLARE_NONSTD</name><argument_list>(<argument>ap_dbd_t *</argument>)</argument_list></macro> <macro><name>ap_dbd_cacquire</name><argument_list>(<argument>conn_rec *c</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>rec</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>rec</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rec</name> = <call><name>ap_dbd_open</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rec</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>dbd_module</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>rec</name></expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dbd_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>dbd_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>dbd_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>dbd_child_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_acquire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_cacquire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_OPTIONAL_HOOK</name><argument_list>(<argument><expr><name>dbd</name></expr></argument>, <argument><expr><name>post_connect</name></expr></argument>, <argument><expr><name>dbd_init_sql_init</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_dbd_init</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>dbd</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>create_dbd_config</name></expr>,
<expr><name>merge_dbd_config</name></expr>,
<expr><name>dbd_cmds</name></expr>,
<expr><name>dbd_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
