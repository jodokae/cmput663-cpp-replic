<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/test/mod_dialup.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>dialup_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <name>dialup_dcfg_t</name> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes_per_second</name></decl>;</decl_stmt>
}</block></struct></type> <name>dialup_dcfg_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dialup_baton_t</name> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes_per_second</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>tmpbb</name></decl>;</decl_stmt>
}</block></struct></type> <name>dialup_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dialup_send_pulse</name><parameter_list>(<param><decl><type><name>dialup_baton_t</name> *</type><name>db</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes_sent</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call> &amp;&amp; <name>bytes_sent</name> &lt; <name><name>db</name>-&gt;<name>bytes_per_second</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_brigade_partition</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>bytes_per_second</name></name></expr></argument>, <argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>status</name> != <name>APR_INCOMPLETE</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><call><name>APR_BUCKET_PREV</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>f</name> = <call><name>APR_RING_FIRST</name><argument_list>(<argument><expr>&amp;<name><name>db</name>-&gt;<name>bb</name>-&gt;<name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_RING_UNSPLICE</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_RING_SPLICE_HEAD</name><argument_list>(<argument><expr>&amp;<name><name>db</name>-&gt;<name>tmpbb</name>-&gt;<name>list</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>apr_bucket</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>tmpbb</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>tmpbb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>tmpbb</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_sent</name> += <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>tmpbb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>tmpbb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01867</expr></argument>)</argument_list></call>
"dialup: pulse: ap_pass_brigade failed:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>SUSPENDED</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dialup_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dialup_baton_t</name> *</type><name>db</name> <init>= <expr>(<name>dialup_baton_t</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>r</name>-&gt;<name>invoke_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>dialup_send_pulse</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>SUSPENDED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_mpm_register_timed_callback</name><argument_list>(<argument><expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dialup_callback</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> == <name>DONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>r</name>-&gt;<name>invoke_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_finalize_request_protocol</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_process_request_after_handler</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01868</expr></argument>)</argument_list></call>
"dialup: pulse returned: %d"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_die</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>r</name>-&gt;<name>invoke_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dialup_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dialup_dcfg_t</name> *</type><name>dcfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>ccfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dialup_baton_t</name> *</type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name> ||
<name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name> ||
<name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dcfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>dialup_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dcfg</name>-&gt;<name>bytes_per_second</name></name> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ccfg</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>APR_READ</name> | <name>APR_BINARY</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SENDFILE</name></expr></cpp:if>
| <call><name>AP_SENDFILE_ENABLED</name><argument_list>(<argument><expr><name><name>ccfg</name>-&gt;<name>enable_sendfile</name></name></expr></argument>)</argument_list></call></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_update_mtime</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_last_modified</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_etag</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_accept_ranges</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_meets_conditions</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01869</expr></argument>)</argument_list></call>
"dialup: declined, meets conditions, good luck core handler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>db</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dialup_baton_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>tmpbb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_brigade_insert_file</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>ccfg</name>-&gt;<name>enable_mmap</name></name> == <name>ENABLE_MMAP_OFF</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_file_enable_mmap</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>db</name>-&gt;<name>bytes_per_second</name></name> = <name><name>dcfg</name>-&gt;<name>bytes_per_second</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>fd</name></name> = <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>dialup_send_pulse</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>SUSPENDED</name> &amp;&amp; <name>status</name> != <name>DONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01870</expr></argument>)</argument_list></call>
"dialup: failed, send pulse"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_mpm_register_timed_callback</name><argument_list>(<argument><expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dialup_callback</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SUSPENDED</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APR_HOOK_ALMOST_LAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HOOK_ALMOST_LAST</name></cpp:macro> <cpp:value>(APR_HOOK_REALLY_LAST - 1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dialup_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>dialup_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_ALMOST_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<typedef>typedef <type><struct>struct <name>modem_speed_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes_per_second</name></decl>;</decl_stmt>
}</block></struct></type> <name>modem_speed_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>BITRATE_TO_BYTES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITRATE_TO_BYTES</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((1000 * x)/8)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>modem_speed_t</name></type> <name><name>modem_bitrates</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"V.21"</expr>, <macro><name>BITRATE_TO_BYTES</name><argument_list>(<argument>0.1</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr>"V.26bis"</expr>, <macro><name>BITRATE_TO_BYTES</name><argument_list>(<argument>2.4</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr>"V.32"</expr>, <macro><name>BITRATE_TO_BYTES</name><argument_list>(<argument>9.6</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr>"V.34"</expr>, <macro><name>BITRATE_TO_BYTES</name><argument_list>(<argument>28.8</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr>"V.92"</expr>, <macro><name>BITRATE_TO_BYTES</name><argument_list>(<argument>56.0</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr>"i-was-rich-and-got-a-leased-line"</expr>, <macro><name>BITRATE_TO_BYTES</name><argument_list>(<argument>1500</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>cmd_modem_standard</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>modem_speed_t</name> *</type><name>standard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dialup_dcfg_t</name> *</type><name>dcfg</name> <init>= <expr>(<name>dialup_dcfg_t</name>*)<name>dconf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>bytes_per_second</name></name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>modem_bitrates</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>standard</name> = &amp;<name><name>modem_bitrates</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>standard</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dcfg</name>-&gt;<name>bytes_per_second</name></name> = <name><name>standard</name>-&gt;<name>bytes_per_second</name></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>dcfg</name>-&gt;<name>bytes_per_second</name></name> == 0</expr>)</condition><then> <block>{
<return>return <expr>"mod_diaulup: Unkonwn Modem Standard specified."</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>dialup_dcfg_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dialup_dcfg_t</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dialup_dcfg_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>bytes_per_second</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>dialup_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ModemStandard"</expr></argument>, <argument><expr><name>cmd_modem_standard</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Modem Standard to.. simulate. "
"Must be one of: 'V.21', 'V.26bis', 'V.32', 'V.34', or 'V.92'"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>dialup</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>dialup_dcfg_create</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dialup_cmds</name></expr>,
<expr><name>dialup_register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
