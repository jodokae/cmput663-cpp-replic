<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/http2/h2_conn.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ap_mpm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_connection.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_protocol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_request.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mpm_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_mplx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_workers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_version.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>h2_workers</name> *</type><name>workers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>h2_mpm_type_t</name></type> <name>mpm_type</name> <init>= <expr><name>H2_MPM_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>module</name> *</type><name>mpm_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>async_mpm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mpm_supported</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_socket_t</name> *</type><name>dummy_socket</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>check_modules</name><parameter_list>(<param><decl><type><name>int</name></type> <name>force</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>checked</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>force</name> || !<name>checked</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>ap_loaded_modules</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>module</name> *</type><name>m</name> <init>= <expr><name><name>ap_loaded_modules</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>"event.c"</expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mpm_type</name> = <name>H2_MPM_EVENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mpm_module</name> = <name>m</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>"motorz.c"</expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mpm_type</name> = <name>H2_MPM_MOTORZ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mpm_module</name> = <name>m</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>"mpm_netware.c"</expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mpm_type</name> = <name>H2_MPM_NETWARE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mpm_module</name> = <name>m</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>"prefork.c"</expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mpm_type</name> = <name>H2_MPM_PREFORK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mpm_module</name> = <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mpm_supported</name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>"simple_api.c"</expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mpm_type</name> = <name>H2_MPM_SIMPLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mpm_module</name> = <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mpm_supported</name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>"mpm_winnt.c"</expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mpm_type</name> = <name>H2_MPM_WINNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mpm_module</name> = <name>m</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>"worker.c"</expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mpm_type</name> = <name>H2_MPM_WORKER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mpm_module</name> = <name>m</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></for>
<expr_stmt><expr><name>checked</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_conn_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>config</name> <init>= <expr><call><name>h2_config_sget</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minw</name></decl>, <decl><type ref="prev"/><name>maxw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_threads_per_child</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idle_secs</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_modules</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MAX_THREADS</name></expr></argument>, <argument><expr>&amp;<name>max_threads_per_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_IS_ASYNC</name></expr></argument>, <argument><expr>&amp;<name>async_mpm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>async_mpm</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>h2_config_init</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>minw</name> = <call><name>h2_config_geti</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>H2_CONF_MIN_WORKERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxw</name> = <call><name>h2_config_geti</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>H2_CONF_MAX_WORKERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>minw</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>minw</name> = <name>max_threads_per_child</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>maxw</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>maxw</name> = <call><name>H2MAX</name><argument_list>(<argument><expr>3 * <name>minw</name> / 2</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>idle_secs</name> = <call><name>h2_config_geti</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>H2_CONF_MAX_WORKER_IDLE_SECS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"h2_workers: min=%d max=%d, mthrpchild=%d, idle_secs=%d"</expr></argument>,
<argument><expr><name>minw</name></expr></argument>, <argument><expr><name>maxw</name></expr></argument>, <argument><expr><name>max_threads_per_child</name></expr></argument>, <argument><expr><name>idle_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>workers</name> = <call><name>h2_workers_create</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>minw</name></expr></argument>, <argument><expr><name>maxw</name></expr></argument>, <argument><expr><name>idle_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_input_filter</name><argument_list>(<argument><expr>"H2_IN"</expr></argument>, <argument><expr><name>h2_filter_core_input</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_CONNECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>h2_mplx_child_init</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr>&amp;<name>dummy_socket</name></expr></argument>, <argument><expr><name>APR_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>,
<argument><expr><name>APR_PROTO_TCP</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>h2_mpm_type_t</name></type> <name>h2_conn_mpm_type</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>check_modules</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mpm_type</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>h2_conn_mpm_name</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>check_modules</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mpm_module</name>? <name><name>mpm_module</name>-&gt;<name>name</name></name> : "unknown"</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>h2_mpm_supported</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>check_modules</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mpm_supported</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>module</name> *</type><name>h2_conn_mpm_module</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>check_modules</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mpm_module</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_conn_setup</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>workers</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02911</expr></argument>)</argument_list></call>
"workers not initialized"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>h2_session_rcreate</name><argument_list>(<argument><expr>&amp;<name>session</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <call><name>h2_session_create</name><argument_list>(<argument><expr>&amp;<name>session</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_ctx_session_set</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_conn_run</name><parameter_list>(<param><decl><type>struct <name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mpm_state</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><call><name>h2_ctx_session_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>cs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>cs</name>-&gt;<name>sense</name></name> = <name>CONN_SENSE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>cs</name>-&gt;<name>state</name></name> = <name>CONN_STATE_HANDLER</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>h2_session_process</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>async_mpm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03045</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>,
<argument><expr>"process, closing conn"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_KEEPALIVE</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MPM_STATE</name></expr></argument>, <argument><expr>&amp;<name>mpm_state</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block> while <condition>(<expr>!<name>async_mpm</name>
&amp;&amp; <name><name>c</name>-&gt;<name>keepalive</name></name> == <name>AP_CONN_KEEPALIVE</name>
&amp;&amp; <name>mpm_state</name> != <name>AP_MPMQ_STOPPING</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>cs</name></name></expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_SESSION_ST_INIT</name></expr>:
</case><case>case <expr><name>H2_SESSION_ST_CLEANUP</name></expr>:
</case><case>case <expr><name>H2_SESSION_ST_DONE</name></expr>:
</case><case>case <expr><name>H2_SESSION_ST_IDLE</name></expr>:
<expr_stmt><expr><name><name>c</name>-&gt;<name>cs</name>-&gt;<name>state</name></name> = <name>CONN_STATE_WRITE_COMPLETION</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_SESSION_ST_BUSY</name></expr>:
</case><case>case <expr><name>H2_SESSION_ST_WAIT</name></expr>:
</case><default>default:
<expr_stmt><expr><name><name>c</name>-&gt;<name>cs</name>-&gt;<name>state</name></name> = <name>CONN_STATE_HANDLER</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></then></if>
<return>return <expr><name>DONE</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_conn_pre_close</name><parameter_list>(<param><decl><type>struct <name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><call><name>h2_ctx_session_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>session</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>h2_session_pre_close</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>async_mpm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr>(<name>status</name> == <name>APR_SUCCESS</name>)? <name>DONE</name> : <name>status</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>DONE</name></expr>;</return>
}</block></function>
<function><type><name>conn_rec</name> *</type><name>h2_slave_create</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>master</name></decl></param>, <param><decl><type><name>int</name></type> <name>slave_id</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>parent</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> *</type><name>mpm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>master</name></expr></argument>,
<argument><expr>"h2_stream(%ld-%d): create slave"</expr></argument>, <argument><expr><name><name>master</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>slave_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_allocator_create</name><argument_list>(<argument><expr>&amp;<name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_allocator_max_free_set</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>ap_max_mem_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_pool_create_ex</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>master</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10004</expr></argument>)</argument_list></call> "h2_session(%ld-%d): create slave pool"</expr></argument>,
<argument><expr><name><name>master</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>slave_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_allocator_owner_set</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"h2_slave_conn"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = (<name>conn_rec</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conn_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_ENOMEM</name></expr></argument>, <argument><expr><name>master</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02913</expr></argument>)</argument_list></call> "h2_session(%ld-%d): create slave"</expr></argument>,
<argument><expr><name><name>master</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>slave_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>master</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conn_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>master</name></name> = <name>master</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>conn_config</name></name> = <call><name>ap_create_conn_config</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>notes</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>input_filters</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>output_filters</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name> = <call><name>apr_bucket_alloc_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>data_in_input_filters</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>data_in_output_filters</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>clogging_input_filters</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>log</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>log_id</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld-%d"</expr></argument>,
<argument><expr><name><name>master</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>slave_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalives</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>aborted</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>core_module</name></expr></argument>, <argument><expr><name>dummy_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>sbh</name></name> = <name><name>master</name>-&gt;<name>sbh</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>mpm</name> = <call><name>h2_conn_mpm_module</name><argument_list>()</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>master</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr><name>mpm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr><name>mpm</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_stream(%ld-%d): created slave"</expr></argument>, <argument><expr><name><name>master</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>slave_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_slave_destroy</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>slave</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>slave</name></expr></argument>,
<argument><expr>"h2_stream(%s): destroy slave"</expr></argument>,
<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>slave</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>H2_TASK_ID_NOTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slave</name>-&gt;<name>sbh</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>slave</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_slave_run_pre_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>slave</name></decl></param>, <param><decl><type><name>apr_socket_t</name> *</type><name>csd</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_run_pre_connection</name><argument_list>(<argument><expr><name>slave</name></expr></argument>, <argument><expr><name>csd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
