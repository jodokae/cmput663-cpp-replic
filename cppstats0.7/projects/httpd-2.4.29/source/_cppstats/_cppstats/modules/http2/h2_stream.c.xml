<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/http2/h2_stream.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_connection.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nghttp2/nghttp2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_bucket_beam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_mplx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_push.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_headers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_util.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>h2_ss_str</name><parameter_list>(<param><decl><type><name>h2_stream_state_t</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
<case>case <expr><name>H2_SS_IDLE</name></expr>:
<return>return <expr>"IDLE"</expr>;</return>
</case><case>case <expr><name>H2_SS_RSVD_L</name></expr>:
<return>return <expr>"RESERVED_LOCAL"</expr>;</return>
</case><case>case <expr><name>H2_SS_RSVD_R</name></expr>:
<return>return <expr>"RESERVED_REMOTE"</expr>;</return>
</case><case>case <expr><name>H2_SS_OPEN</name></expr>:
<return>return <expr>"OPEN"</expr>;</return>
</case><case>case <expr><name>H2_SS_CLOSED_L</name></expr>:
<return>return <expr>"HALF_CLOSED_LOCAL"</expr>;</return>
</case><case>case <expr><name>H2_SS_CLOSED_R</name></expr>:
<return>return <expr>"HALF_CLOSED_REMOTE"</expr>;</return>
</case><case>case <expr><name>H2_SS_CLOSED</name></expr>:
<return>return <expr>"CLOSED"</expr>;</return>
</case><case>case <expr><name>H2_SS_CLEANUP</name></expr>:
<return>return <expr>"CLEANUP"</expr>;</return>
</case><default>default:
<return>return <expr>"UNKNOWN"</expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>h2_stream_state_str</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_ss_str</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_XXX</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ERR</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_NOP</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IDL</name></cpp:macro> <cpp:value>(H2_SS_IDL + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_RS_L</name></cpp:macro> <cpp:value>(H2_SS_RSVD_L + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_RS_R</name></cpp:macro> <cpp:value>(H2_SS_RSVD_R + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_OPEN</name></cpp:macro> <cpp:value>(H2_SS_OPEN + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_CL_L</name></cpp:macro> <cpp:value>(H2_SS_CLOSED_L + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_CL_R</name></cpp:macro> <cpp:value>(H2_SS_CLOSED_R + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_CLS</name></cpp:macro> <cpp:value>(H2_SS_CLOSED + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_CLN</name></cpp:macro> <cpp:value>(H2_SS_CLEANUP + 1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>trans_on_send</name><index>[]</index><index>[<expr><name>H2_SS_MAX</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_CL_R</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_RS_L</name></expr>,<expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>trans_on_recv</name><index>[]</index><index>[<expr><name>H2_SS_MAX</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_OPEN</name></expr>,<expr><name>S_CL_L</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_ERR</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_RS_R</name></expr>,<expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>trans_on_event</name><index>[]</index><index>[<expr><name>H2_SS_MAX</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>S_XXX</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_CL_L</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_XXX</name></expr>, <expr><name>S_XXX</name></expr>, <expr><name>S_XXX</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_CL_R</name></expr>, <expr><name>S_ERR</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_NOP</name></expr>, <expr><name>S_NOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>S_NOP</name></expr>, <expr><name>S_XXX</name></expr>, <expr><name>S_XXX</name></expr>, <expr><name>S_XXX</name></expr>, <expr><name>S_XXX</name></expr>, <expr><name>S_CLS</name></expr>, <expr><name>S_CLN</name></expr>, <expr><name>S_XXX</name></expr>, }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>on_map</name><parameter_list>(<param><decl><type><name>h2_stream_state_t</name></type> <name>state</name></decl></param>, <param><decl><type><name>int</name></type> <name><name>map</name><index>[<expr><name>H2_SS_MAX</name></expr>]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><name><name>map</name><index>[<expr><name>state</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{
<case>case <expr><name>S_XXX</name></expr>:
</case><case>case <expr><name>S_ERR</name></expr>:
<return>return <expr><name>op</name></expr>;</return>
</case><case>case <expr><name>S_NOP</name></expr>:
<return>return <expr><name>state</name></expr>;</return>
</case><default>default:
<return>return <expr><name>op</name>-1</expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>on_frame</name><parameter_list>(<param><decl><type><name>h2_stream_state_t</name></type> <name>state</name></decl></param>, <param><decl><type><name>int</name></type> <name>frame_type</name></decl></param>,
<param><decl><type><name>int</name></type> <name><name>frame_map</name><index>[]</index><index>[<expr><name>H2_SS_MAX</name></expr>]</index></name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>maxlen</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>frame_type</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>state</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>frame_type</name> &gt;= <name>maxlen</name></expr>)</condition><then> <block>{
<return>return <expr><name>state</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>on_map</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>frame_map</name><index>[<expr><name>frame_type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>on_frame_send</name><parameter_list>(<param><decl><type><name>h2_stream_state_t</name></type> <name>state</name></decl></param>, <param><decl><type><name>int</name></type> <name>frame_type</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>on_frame</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>frame_type</name></expr></argument>, <argument><expr><name>trans_on_send</name></expr></argument>, <argument><expr><call><name>H2_ALEN</name><argument_list>(<argument><expr><name>trans_on_send</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>on_frame_recv</name><parameter_list>(<param><decl><type><name>h2_stream_state_t</name></type> <name>state</name></decl></param>, <param><decl><type><name>int</name></type> <name>frame_type</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>on_frame</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>frame_type</name></expr></argument>, <argument><expr><name>trans_on_recv</name></expr></argument>, <argument><expr><call><name>H2_ALEN</name><argument_list>(<argument><expr><name>trans_on_recv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>on_event</name><parameter_list>(<param><decl><type><name>h2_stream</name>*</type> <name>stream</name></decl></param>, <param><decl><type><name>h2_stream_event_t</name></type> <name>ev</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>monitor</name></name> &amp;&amp; <name><name>stream</name>-&gt;<name>monitor</name>-&gt;<name>on_event</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>stream</name>-&gt;<name>monitor</name>-&gt;<name>on_event</name></name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>monitor</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>ev</name> &lt; <call><name>H2_ALEN</name><argument_list>(<argument><expr><name>trans_on_event</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>on_map</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name><name>trans_on_event</name><index>[<expr><name>ev</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name><name>stream</name>-&gt;<name>state</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>H2_STREAM_OUT_LOG</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lvl</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>APLOG_C_IS_LEVEL</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>s</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>4 * 1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>bmax</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>buffer</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <call><name>h2_util_bb_print</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bmax</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>out_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>"out-buffer(%s)"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name>? <name>buffer</name> : "empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>setup_input</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>input</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>empty</name> <init>= <expr>(<name><name>stream</name>-&gt;<name>input_eof</name></name>
&amp;&amp; (!<name><name>stream</name>-&gt;<name>in_buffer</name></name>
|| <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>in_buffer</name></name></expr></argument>)</argument_list></call>))</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>empty</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_beam_create</name><argument_list>(<argument><expr>&amp;<name><name>stream</name>-&gt;<name>input</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>,
<argument><expr>"input"</expr></argument>, <argument><expr><name>H2_BEAM_OWNER_SEND</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_beam_send_from</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>close_input</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>input_eof</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>input</name></name> &amp;&amp; <call><name>h2_beam_is_closed</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"closing input"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>rst_error</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ECONNRESET</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>trailers</name></name> &amp;&amp; !<call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>trailers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_headers</name> *</type><name>r</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>stream</name>-&gt;<name>in_buffer</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>in_buffer</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>r</name> = <call><name>h2_headers_create</name><argument_list>(<argument><expr><name>HTTP_OK</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>trailers</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>trailers</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>h2_bucket_headers_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>in_buffer</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>in_buffer</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"added trailers"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_stream_dispatch</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_SEV_IN_DATA_PENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>input</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_stream_flush_input</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>h2_beam_close</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>close_output</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>stream</name>-&gt;<name>output</name></name> || <call><name>h2_beam_is_closed</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>output</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"closing output"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>h2_beam_leave</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>output</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>on_state_enter</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>monitor</name></name> &amp;&amp; <name><name>stream</name>-&gt;<name>monitor</name>-&gt;<name>on_state_enter</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>stream</name>-&gt;<name>monitor</name>-&gt;<name>on_state_enter</name></name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>monitor</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>on_state_event</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>h2_stream_event_t</name></type> <name>ev</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>monitor</name></name> &amp;&amp; <name><name>stream</name>-&gt;<name>monitor</name>-&gt;<name>on_state_event</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>stream</name>-&gt;<name>monitor</name>-&gt;<name>on_state_event</name></name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>monitor</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>on_state_invalid</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>monitor</name></name> &amp;&amp; <name><name>stream</name>-&gt;<name>monitor</name>-&gt;<name>on_state_invalid</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>stream</name>-&gt;<name>monitor</name>-&gt;<name>on_state_invalid</name></name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>monitor</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"invalid state event"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>stream</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_SS_OPEN</name></expr>:
</case><case>case <expr><name>H2_SS_RSVD_L</name></expr>:
</case><case>case <expr><name>H2_SS_RSVD_R</name></expr>:
</case><case>case <expr><name>H2_SS_CLOSED_L</name></expr>:
</case><case>case <expr><name>H2_SS_CLOSED_R</name></expr>:
<expr_stmt><expr><call><name>h2_stream_rst</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_ERR_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>transit</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>int</name></type> <name>new_state</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>new_state</name> == <name><name>stream</name>-&gt;<name>state</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>new_state</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03081</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"invalid transition"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>on_state_invalid</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"transit to [%s]"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>h2_ss_str</name><argument_list>(<argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>state</name></name> = <name>new_state</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>new_state</name></expr>)</condition> <block>{
<case>case <expr><name>H2_SS_IDLE</name></expr>:
<break>break;</break>
</case><case>case <expr><name>H2_SS_RSVD_L</name></expr>:
<expr_stmt><expr><call><name>close_input</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_SS_RSVD_R</name></expr>:
<break>break;</break>
</case><case>case <expr><name>H2_SS_OPEN</name></expr>:
<break>break;</break>
</case><case>case <expr><name>H2_SS_CLOSED_L</name></expr>:
<expr_stmt><expr><call><name>close_output</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_SS_CLOSED_R</name></expr>:
<expr_stmt><expr><call><name>close_input</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_SS_CLOSED</name></expr>:
<expr_stmt><expr><call><name>close_input</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_output</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>out_buffer</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>out_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>H2_SS_CLEANUP</name></expr>:
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><call><name>on_state_enter</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_stream_set_monitor</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>h2_stream_monitor</name> *</type><name>monitor</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>monitor</name></name> = <name>monitor</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>h2_stream_dispatch</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>h2_stream_event_t</name></type> <name>ev</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>new_state</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"dispatch event %d"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_state</name> = <call><name>on_event</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>new_state</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10002</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"invalid event %d"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>on_state_invalid</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>new_state</name> &gt; <name>S_XXX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>new_state</name> == <name><name>stream</name>-&gt;<name>state</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"non-state event %d"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>on_state_event</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_policy_for</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>h2_request</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>enabled</name> <init>= <expr><call><name>h2_session_push_enabled</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>session</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>push_policy</name></name> = <call><name>h2_push_policy_determine</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>serialize</name></name> = <call><name>h2_config_geti</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>H2_CONF_SER_HEADERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_stream_send_frame</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>int</name></type> <name>ftype</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_state</name></decl>, <decl><type ref="prev"/><name>eos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>new_state</name> = <call><name>on_frame_send</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>new_state</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"invalid frame %d send"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>new_state</name> &gt; <name>S_XXX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>transit</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name>ftype</name></expr>)</condition> <block>{
<case>case <expr><name>NGHTTP2_DATA</name></expr>:
<expr_stmt><expr><name>eos</name> = (<name>flags</name> &amp; <name>NGHTTP2_FLAG_END_STREAM</name>)</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>NGHTTP2_HEADERS</name></expr>:
<expr_stmt><expr><name>eos</name> = (<name>flags</name> &amp; <name>NGHTTP2_FLAG_END_STREAM</name>)</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>NGHTTP2_PUSH_PROMISE</name></expr>:
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>request</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>rtmp</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>h2_request_end_headers</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>rtmp</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>set_policy_for</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>rtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>request</name></name> = <name><name>stream</name>-&gt;<name>rtmp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>rtmp</name></name> = <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"send frame %d, eos=%d"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><name>eos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>transit</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>eos</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>transit</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>on_event</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_SEV_CLOSED_L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_stream_recv_frame</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>int</name></type> <name>ftype</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_state</name></decl>, <decl><type ref="prev"/><name>eos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>new_state</name> = <call><name>on_frame_recv</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>new_state</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"invalid frame %d recv"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ftype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>new_state</name> &gt; <name>S_XXX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>transit</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name>ftype</name></expr>)</condition> <block>{
<case>case <expr><name>NGHTTP2_DATA</name></expr>:
<expr_stmt><expr><name>eos</name> = (<name>flags</name> &amp; <name>NGHTTP2_FLAG_END_STREAM</name>)</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>NGHTTP2_HEADERS</name></expr>:
<expr_stmt><expr><name>eos</name> = (<name>flags</name> &amp; <name>NGHTTP2_FLAG_END_STREAM</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>state</name></name> == <name>H2_SS_OPEN</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>eos</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_stream_rst</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_ERR_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>request</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>rtmp</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>h2_request_end_headers</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>rtmp</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>eos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>set_policy_for</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>rtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>request</name></name> = <name><name>stream</name>-&gt;<name>rtmp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>rtmp</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name>status</name> = <call><name>transit</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>eos</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>transit</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>on_event</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_SEV_CLOSED_R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_stream_flush_input</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>in_buffer</name></name> &amp;&amp; !<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>in_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>setup_input</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>h2_beam_send</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>in_buffer</name></name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>in_last_write</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>input_eof</name></name>
&amp;&amp; <name><name>stream</name>-&gt;<name>input</name></name> &amp;&amp; !<call><name>h2_beam_is_closed</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>h2_beam_close</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_stream_recv_DATA</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>uint8_t</name></type> <name>flags</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>data</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><name><name>stream</name>-&gt;<name>session</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>in_data_frames</name></name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APLOGctrace3</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>load</name> <init>= <expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(const <name>char</name> *)<name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"recv DATA, len=%d: --&gt;%s&lt;--"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>int</name>)<name>len</name></expr></argument>, <argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"recv DATA, len=%d"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>int</name>)<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>in_data_octets</name></name> += <name>len</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>stream</name>-&gt;<name>in_buffer</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>in_buffer</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_write</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>in_buffer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(const <name>char</name> *)<name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_stream_dispatch</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_SEV_IN_DATA_PENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>prep_output</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>stream</name>-&gt;<name>out_buffer</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>out_buffer</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>h2_stream</name> *</type><name>h2_stream_create</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>h2_stream_monitor</name> *</type><name>monitor</name></decl></param>, <param><decl><type><name>int</name></type> <name>initiated_on</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h2_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>id</name></name> = <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>initiated_on</name></name> = <name>initiated_on</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>created</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>state</name></name> = <name>H2_SS_IDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>monitor</name></name> = <name>monitor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>max_mem</name></name> = <name><name>session</name>-&gt;<name>max_stream_mem</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>H2_NG2_LOCAL_WIN_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>in_window_size</name></name> =
<call><name>nghttp2_session_get_stream_local_window_size</name><argument_list>(
<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03082</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>on_state_enter</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>stream</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_stream_cleanup</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>out_buffer</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>out_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>input</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_beam_abort</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>h2_beam_wait_empty</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>, <argument><expr><name>APR_NONBLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_EAGAIN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"wait on input drain"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>h2_beam_wait_empty</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"input drain returned"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>h2_stream_destroy</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"destroy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>pool</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>apr_pool_t</name> *</type><name>h2_stream_detach_pool</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>pool</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_stream_prep_processing</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>request</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>h2_request</name> *</type><name>r</name> <init>= <expr><name><name>stream</name>-&gt;<name>request</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"schedule %s %s://%s%s chunked=%d"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>authority</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>chunked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_input</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>scheduled</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_stream_rst</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>int</name></type> <name>error_code</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>rst_error</name></name> = <name>error_code</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>input</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_beam_abort</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>output</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_beam_leave</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"reset, error=%d"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_stream_dispatch</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_SEV_CANCELLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_stream_set_request_rec</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>eos</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_request</name> *</type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>request</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>rtmp</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>rst_error</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ECONNRESET</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>h2_request_rcreate</name><argument_list>(<argument><expr>&amp;<name>req</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03058</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
<argument><expr>"set_request_rec %s host=%s://%s%s"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>req</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>authority</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>rtmp</name></name> = <name>req</name></expr>;</expr_stmt>
<return>return <expr><call><name>h2_stream_recv_frame</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NGHTTP2_HEADERS</name></expr></argument>,
<argument><expr><name>NGHTTP2_FLAG_END_STREAM</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_stream_set_request</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>h2_request</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>request</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>rtmp</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>rtmp</name></name> = <call><name>h2_request_clone</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_error_response</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>int</name></type> <name>http_status</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>h2_stream_is_ready</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_headers</name> *</type><name>response</name></decl>;</decl_stmt>
<expr_stmt><expr><name>response</name> = <call><name>h2_headers_die</name><argument_list>(<argument><expr><name>http_status</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>request</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prep_output</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_HEAD</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>out_buffer</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>h2_bucket_headers_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_HEAD</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>out_buffer</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>add_trailer</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>nlen</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>vlen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>hname</name></decl>, *<decl><type ref="prev"/><name>hvalue</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>nlen</name> == 0 || <name><name>name</name><index>[<expr>0</expr>]</index></name> == ':'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03060</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
<argument><expr>"pseudo header in trailer"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>h2_req_ignore_trailer</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>stream</name>-&gt;<name>trailers</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>trailers</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>hname</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hvalue</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_util_camel_case_header</name><argument_list>(<argument><expr><name>hname</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>trailers</name></name></expr></argument>, <argument><expr><name>hname</name></expr></argument>, <argument><expr><name>hvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_stream_add_header</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>nlen</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>vlen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><name><name>stream</name>-&gt;<name>session</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>has_response</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>++<name><name>stream</name>-&gt;<name>request_headers_added</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name> == ':'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>vlen</name>) &gt; <name><name>session</name>-&gt;<name>s</name>-&gt;<name>limit_req_line</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"pseudo %s too long"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> = <name>HTTP_REQUEST_URI_TOO_LARGE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>(<name>nlen</name> + 2 + <name>vlen</name>) &gt; <name><name>session</name>-&gt;<name>s</name>-&gt;<name>limit_req_fieldsize</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"header %s too long"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> = <name>HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>request_headers_added</name></name> &gt; <name><name>session</name>-&gt;<name>s</name>-&gt;<name>limit_req_fields</name></name> + 4</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>request_headers_added</name></name>
&gt; <name><name>session</name>-&gt;<name>s</name>-&gt;<name>limit_req_fields</name></name> + 4 + 100</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_stream_rst</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_ERR_ENHANCE_YOUR_CALM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ECONNRESET</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"too many header lines"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> = <name>HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>set_error_response</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>H2_SS_IDLE</name> == <name><name>stream</name>-&gt;<name>state</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>stream</name>-&gt;<name>rtmp</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>rtmp</name></name> = <call><name>h2_req_create</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>h2_request_add_header</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>rtmp</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>H2_SS_OPEN</name> == <name><name>stream</name>-&gt;<name>state</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>add_trailer</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"header %s not accepted"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_stream_dispatch</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_SEV_CANCELLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_bucket</name> *</type><name>get_first_headers_bucket</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>bb</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>H2_BUCKET_IS_HEADERS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>b</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>add_buffered_data</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>requested</name></decl></param>,
<param><decl><type><name>apr_off_t</name> *</type><name>plen</name></decl></param>, <param><decl><type><name>int</name> *</type><name>peos</name></decl></param>, <param><decl><type><name>int</name> *</type><name>is_all</name></decl></param>,
<param><decl><type><name>h2_headers</name> **</type><name>pheaders</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>, *<decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>peos</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>plen</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>is_all</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>pheaders</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>pheaders</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>H2_STREAM_OUT_LOG</name><argument_list>(<argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"add_buffered_data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>out_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>out_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_destroy</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>peos</name> = 1</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>H2_BUCKET_IS_HEADERS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>plen</name> &gt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>pheaders</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>pheaders</name> = <call><name>h2_bucket_headers_get</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_destroy</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"prep, -&gt; response %d"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>(*<name>pheaders</name>)-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>APR_EAGAIN</name></expr>;</return>
}</block></else></if></else></if>
}</block></then></if></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>b</name>-&gt;<name>length</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_destroy</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>length</name></name> != (<name>apr_size_t</name>)-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>plen</name> += <name><name>b</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>plen</name> &gt;= <name>requested</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>plen</name> = <name>requested</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
}</block></else></if></else></if>
<expr_stmt><expr><name>b</name> = <name>e</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>is_all</name> = 1</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_stream_out_prepare</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>apr_off_t</name> *</type><name>plen</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>peos</name></decl></param>, <param><decl><type><name>h2_headers</name> **</type><name>pheaders</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>requested</name></decl>, <decl><type ref="prev"/><name>missing</name></decl>, <decl><type ref="prev"/><name>max_chunk</name> <init>= <expr><name>H2_DATA_CHUNK_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>complete</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>rst_error</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>plen</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>peos</name> = 1</expr>;</expr_stmt>
<return>return <expr><name>APR_ECONNRESET</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>c</name> = <name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prep_output</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>io</name>.<name>write_size</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>max_chunk</name> = <name><name>stream</name>-&gt;<name>session</name>-&gt;<name>io</name>.<name>write_size</name></name> - 9</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>requested</name> = (*<name>plen</name> &gt; 0)? <call><name>H2MIN</name><argument_list>(<argument><expr>*<name>plen</name></expr></argument>, <argument><expr><name>max_chunk</name></expr></argument>)</argument_list></call> : <name>max_chunk</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>add_buffered_data</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>requested</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>peos</name></expr></argument>, <argument><expr>&amp;<name>complete</name></expr></argument>, <argument><expr><name>pheaders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_EAGAIN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_mplx_keep_active</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"prep, response eagain"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>pheaders</name> &amp;&amp; *<name>pheaders</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>missing</name> = <call><name>H2MIN</name><argument_list>(<argument><expr><name>requested</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>max_mem</name></name></expr></argument>)</argument_list></call> - *<name>plen</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>complete</name> &amp;&amp; !*<name>peos</name> &amp;&amp; <name>missing</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_EOF</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>output</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>H2_STREAM_OUT_LOG</name><argument_list>(<argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"pre"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>h2_beam_receive</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>out_buffer</name></name></expr></argument>,
<argument><expr><name>APR_NONBLOCK_READ</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>max_mem</name></name> - *<name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H2_STREAM_OUT_LOG</name><argument_list>(<argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"post"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>add_buffered_data</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>requested</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>peos</name></expr></argument>, <argument><expr>&amp;<name>complete</name></expr></argument>, <argument><expr><name>pheaders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>eos</name> <init>= <expr><call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>out_buffer</name></name></expr></argument>, <argument><expr><name>eos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>peos</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <name>rv</name></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>peos</name> || *<name>plen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"prepare, len=%ld eos=%d"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>long</name>)*<name>plen</name></expr></argument>, <argument><expr>*<name>peos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <name>APR_EAGAIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"prepare, no data"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_not_headers</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<return>return <expr>!<call><name>H2_BUCKET_IS_HEADERS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_stream_read_to</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>apr_off_t</name> *</type><name>plen</name></decl></param>, <param><decl><type><name>int</name> *</type><name>peos</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>rst_error</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ECONNRESET</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>h2_append_brigade</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>out_buffer</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>peos</name></expr></argument>, <argument><expr><name>is_not_headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; !*<name>peos</name> &amp;&amp; !*<name>plen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <name>APR_EAGAIN</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"read_to, len=%ld eos=%d"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>long</name>)*<name>plen</name></expr></argument>, <argument><expr>*<name>peos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_stream_submit_pushes</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>h2_headers</name> *</type><name>response</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>pushes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pushes</name> = <call><name>h2_push_collect_update</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>request</name></name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pushes</name> &amp;&amp; !<call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name>pushes</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"found %d push candidates"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>pushes</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>pushes</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>h2_push</name> *</type><name>push</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>pushes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>h2_push</name>*</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_stream</name> *</type><name>s</name> <init>= <expr><call><name>h2_session_push</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>session</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>push</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>s</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <name>APR_ECONNRESET</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>apr_table_t</name> *</type><name>h2_stream_get_trailers</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>h2_priority</name> *</type><name>h2_stream_get_priority</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>h2_headers</name> *</type><name>response</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>response</name> &amp;&amp; <name><name>stream</name>-&gt;<name>initiated_on</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ctype</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>response</name>-&gt;<name>headers</name></name></expr></argument>, <argument><expr>"content-type"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ctype</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>h2_config_get_priority</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>h2_stream_is_ready</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>has_response</name></name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>stream</name>-&gt;<name>out_buffer</name></name> &amp;&amp; <call><name>get_first_headers_bucket</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>out_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>h2_stream_was_closed</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>stream</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_SS_CLOSED</name></expr>:
</case><case>case <expr><name>H2_SS_CLEANUP</name></expr>:
<return>return <expr>1</expr>;</return>
</case><default>default:
<return>return <expr>0</expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_stream_in_consumed</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>amount</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><name><name>stream</name>-&gt;<name>session</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>amount</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>consumed</name> <init>= <expr><name>amount</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>consumed</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr>(<name>consumed</name> &gt; <name>INT_MAX</name>)? <name>INT_MAX</name> : (<name>int</name>)<name>consumed</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>nghttp2_session_consume</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> -= <name>len</name></expr>;</expr_stmt>
}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>H2_NG2_LOCAL_WIN_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cur_size</name> <init>= <expr><call><name>nghttp2_session_get_stream_local_window_size</name><argument_list>(
<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>win</name> <init>= <expr><name><name>stream</name>-&gt;<name>in_window_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thigh</name> <init>= <expr><name>win</name> * 8/10</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tlow</name> <init>= <expr><name>win</name> * 2/10</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>win_max</name> <init>= <expr>2*1024*1024</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>win_min</name> <init>= <expr>32*1024</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cur_size</name> &gt; <name>thigh</name> &amp;&amp; <name>amount</name> &gt; <name>thigh</name> &amp;&amp; <name>win</name> &lt; <name>win_max</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>ms</name> <init>= <expr><call><name>apr_time_msec</name><argument_list>(<argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call> - <name><name>stream</name>-&gt;<name>in_last_write</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ms</name> &lt; 40</expr>)</condition><then> <block>{
<expr_stmt><expr><name>win</name> = <call><name>H2MIN</name><argument_list>(<argument><expr><name>win_max</name></expr></argument>, <argument><expr><name>win</name> + (64*1024)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>cur_size</name> &lt; <name>tlow</name> &amp;&amp; <name>amount</name> &lt; <name>tlow</name> &amp;&amp; <name>win</name> &gt; <name>win_min</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>ms</name> <init>= <expr><call><name>apr_time_msec</name><argument_list>(<argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call> - <name><name>stream</name>-&gt;<name>in_last_write</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ms</name> &gt; 700</expr>)</condition><then> <block>{
<expr_stmt><expr><name>win</name> = <call><name>H2MAX</name><argument_list>(<argument><expr><name>win_min</name></expr></argument>, <argument><expr><name>win</name> - (32*1024)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>win</name> != <name><name>stream</name>-&gt;<name>in_window_size</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>in_window_size</name></name> = <name>win</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_set_local_window_size</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>,
<argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_stream(%ld-%d): consumed %ld bytes, window now %d/%d"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name>amount</name></expr></argument>,
<argument><expr><name>cur_size</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>in_window_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
</unit>
