<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/http2/h2_filter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_protocol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_connection.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;scoreboard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_conn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_mplx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_push.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_headers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_filter.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNSET</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2MIN</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; (y) ? (x) : (y))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>recv_RAW_DATA</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>h2_filter_cin</name> *</type><name>cin</name></decl></param>,
<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>, <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><name><name>cin</name>-&gt;<name>session</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>len</name> &gt; 0</expr>)</condition> <block>{
<expr_stmt><expr><name>n</name> = <call><name>nghttp2_session_mem_recv</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr>(const <name>uint8_t</name> *)<name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"fed %ld bytes to nghttp2, %ld read"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>long</name>)<name>len</name></expr></argument>, <argument><expr>(<name>long</name>)<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &lt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>nghttp2_is_fatal</name><argument_list>(<argument><expr>(<name>int</name>)<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_session_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_PROTO_ERROR</name></expr></argument>,
<argument><expr>(<name>int</name>)<name>n</name></expr></argument>, <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr>(<name>int</name>)<name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>session</name>-&gt;<name>io</name>.<name>bytes_read</name></name> += <name>n</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &lt;= <name>n</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>len</name> -= <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> += <name>n</name></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>recv_RAW_brigade</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>h2_filter_cin</name> *</type><name>cin</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>consumed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>h2_util_bb_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>"RAW_in"</expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; !<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <call><name>recv_RAW_DATA</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cin</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>consumed</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<name>consumed</name> &amp;&amp; <name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>block</name> == <name>APR_NONBLOCK_READ</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EAGAIN</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>h2_filter_cin</name> *</type><name>h2_filter_cin_create</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_filter_cin</name> *</type><name>cin</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cin</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>cin</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cin</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<return>return <expr><name>cin</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_filter_cin_timeout_set</name><parameter_list>(<param><decl><type><name>h2_filter_cin</name> *</type><name>cin</name></decl></param>, <param><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>cin</name>-&gt;<name>timeout</name></name> = <name>timeout</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_filter_core_input</name><parameter_list>(<param><decl><type><name>ap_filter_t</name>*</type> <name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name>*</type> <name>brigade</name></decl></param>,
<param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_filter_cin</name> *</type><name>cin</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>saved_timeout</name> <init>= <expr><name>UNSET</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>trace1</name> <init>= <expr><call><name>APLOGctrace1</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>trace1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_session(%ld): read, %s, mode=%d, readbytes=%ld"</expr></argument>,
<argument><expr>(<name>long</name>)<name><name>f</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>block</name> == <name>APR_BLOCK_READ</name>)?
"BLOCK_READ" : "NONBLOCK_READ"</expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr>(<name>long</name>)<name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>mode</name> == <name>AP_MODE_INIT</name> || <name>mode</name> == <name>AP_MODE_SPECULATIVE</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>brigade</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>mode</name> != <name>AP_MODE_READBYTES</name></expr>)</condition><then> <block>{
<return>return <expr>(<name>block</name> == <name>APR_BLOCK_READ</name>)? <name>APR_SUCCESS</name> : <name>APR_EAGAIN</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>cin</name>-&gt;<name>bb</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cin</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>cin</name>-&gt;<name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>cin</name>-&gt;<name>socket</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cin</name>-&gt;<name>socket</name></name> = <call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>cin</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>block</name> == <name>APR_BLOCK_READ</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cin</name>-&gt;<name>timeout</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_get</name><argument_list>(<argument><expr><name><name>cin</name>-&gt;<name>socket</name></name></expr></argument>, <argument><expr>&amp;<name>saved_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name><name>cin</name>-&gt;<name>socket</name></name></expr></argument>, <argument><expr><name><name>cin</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>cin</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
<argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>saved_timeout</name> != <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name><name>cin</name>-&gt;<name>socket</name></name></expr></argument>, <argument><expr><name>saved_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{
<case>case <expr><name>APR_SUCCESS</name></expr>:
<expr_stmt><expr><name>status</name> = <call><name>recv_RAW_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name>cin</name></expr></argument>, <argument><expr><name><name>cin</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>APR_EOF</name></expr>:
</case><case>case <expr><name>APR_EAGAIN</name></expr>:
</case><case>case <expr><name>APR_TIMEUP</name></expr>:
<if>if <condition>(<expr><name>trace1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_session(%ld): read"</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03046</expr></argument>)</argument_list></call>
"h2_session(%ld): error reading"</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_bucket_refcount</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_bucket_event_cb</name> *</type><name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>h2_bucket_observer</name>;</typedef>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>bucket_read</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>str</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>, <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>(<name>void</name>)<name>b</name></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>block</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>str</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bucket_destroy</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_bucket_observer</name> *</type><name>h</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_bucket_shared_destroy</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>h</name>-&gt;<name>cb</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>h</name>-&gt;<name>cb</name></name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>H2_BUCKET_EV_BEFORE_DESTROY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_bucket_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>apr_bucket</name> *</type> <name>h2_bucket_observer_make</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>, <param><decl><type><name>h2_bucket_event_cb</name> *</type><name>cb</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_bucket_observer</name> *</type><name>br</name></decl>;</decl_stmt>
<expr_stmt><expr><name>br</name> = <call><name>apr_bucket_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>br</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name>-&gt;<name>cb</name></name> = <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name>-&gt;<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_shared_make</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>type</name></name> = &amp;<name>h2_bucket_type_observer</name></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><name>apr_bucket</name> *</type> <name>h2_bucket_observer_create</name><parameter_list>(<param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>list</name></decl></param>,
<param><decl><type><name>h2_bucket_event_cb</name> *</type><name>cb</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><call><name>apr_bucket_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_INIT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>free</name></name> = <name>apr_bucket_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>list</name></name> = <name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>h2_bucket_observer_make</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_bucket_observer_fire</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>, <param><decl><type><name>h2_bucket_event</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>H2_BUCKET_IS_OBSERVER</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_bucket_observer</name> *</type><name>l</name> <init>= <expr>(<name>h2_bucket_observer</name> *)<name><name>b</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>l</name>-&gt;<name>cb</name></name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_bucket_type_t</name></type> <name>h2_bucket_type_observer</name> <init>= <expr><block>{
<expr>"H2OBS"</expr>, <expr>5</expr>, <expr><name>APR_BUCKET_METADATA</name></expr>,
<expr><name>bucket_destroy</name></expr>,
<expr><name>bucket_read</name></expr>,
<expr><name>apr_bucket_setaside_noop</name></expr>,
<expr><name>apr_bucket_split_notimpl</name></expr>,
<expr><name>apr_bucket_shared_copy</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>apr_bucket</name> *</type><name>h2_bucket_observer_beam</name><parameter_list>(<param><decl><type>struct <name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_bucket</name> *</type><name>src</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>H2_BUCKET_IS_OBSERVER</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_bucket_observer</name> *</type><name>l</name> <init>= <expr>(<name>h2_bucket_observer</name> *)<name><name>src</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><call><name>h2_bucket_observer_create</name><argument_list>(<argument><expr><name><name>dest</name>-&gt;<name>bucket_alloc</name></name></expr></argument>,
<argument><expr><name><name>l</name>-&gt;<name>cb</name></name></expr></argument>, <argument><expr><name><name>l</name>-&gt;<name>ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>cb</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>ctx</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_bucket_observer_fire</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>H2_BUCKET_EV_BEFORE_MASTER_SEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>bbout</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_vprintf</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_settings</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>h2_session</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>last</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_mplx</name> *</type><name>m</name> <init>= <expr><name><name>s</name>-&gt;<name>mplx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"settings\": {\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"SETTINGS_MAX_CONCURRENT_STREAMS\": %d,\n"</expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>max_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"SETTINGS_MAX_FRAME_SIZE\": %d,\n"</expr></argument>, <argument><expr>16*1024</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"SETTINGS_INITIAL_WINDOW_SIZE\": %d,\n"</expr></argument>,
<argument><expr><call><name>h2_config_geti</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>H2_CONF_WIN_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"SETTINGS_ENABLE_PUSH\": %d\n"</expr></argument>, <argument><expr><call><name>h2_session_push_enabled</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" }%s\n"</expr></argument>, <argument><expr><name>last</name>? "" : ","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_peer_settings</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>h2_session</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>last</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"peerSettings\": {\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"SETTINGS_MAX_CONCURRENT_STREAMS\": %d,\n"</expr></argument>,
<argument><expr><call><name>nghttp2_session_get_remote_settings</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"SETTINGS_MAX_FRAME_SIZE\": %d,\n"</expr></argument>,
<argument><expr><call><name>nghttp2_session_get_remote_settings</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_SETTINGS_MAX_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"SETTINGS_INITIAL_WINDOW_SIZE\": %d,\n"</expr></argument>,
<argument><expr><call><name>nghttp2_session_get_remote_settings</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"SETTINGS_ENABLE_PUSH\": %d,\n"</expr></argument>,
<argument><expr><call><name>nghttp2_session_get_remote_settings</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_SETTINGS_ENABLE_PUSH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"SETTINGS_HEADER_TABLE_SIZE\": %d,\n"</expr></argument>,
<argument><expr><call><name>nghttp2_session_get_remote_settings</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_SETTINGS_HEADER_TABLE_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"SETTINGS_MAX_HEADER_LIST_SIZE\": %d\n"</expr></argument>,
<argument><expr><call><name>nghttp2_session_get_remote_settings</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" }%s\n"</expr></argument>, <argument><expr><name>last</name>? "" : ","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_session</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
}</block></struct></type> <name>stream_ctx_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>add_stream</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>stream_ctx_t</name> *</type><name>x</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>flowIn</name></decl>, <decl><type ref="prev"/><name>flowOut</name></decl>;</decl_stmt>
<expr_stmt><expr><name>flowIn</name> = <call><name>nghttp2_session_get_stream_effective_local_window_size</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>s</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flowOut</name> = <call><name>nghttp2_session_get_stream_remote_window_size</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>s</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>"%s\n \"%d\": {\n"</expr></argument>, <argument><expr>(<name><name>x</name>-&gt;<name>idx</name></name>? "," : "")</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>" \"state\": \"%s\",\n"</expr></argument>, <argument><expr><call><name>h2_stream_state_str</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>" \"created\": %f,\n"</expr></argument>, <argument><expr>((<name>double</name>)<name><name>stream</name>-&gt;<name>created</name></name>)/<name>APR_USEC_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>" \"flowIn\": %d,\n"</expr></argument>, <argument><expr><name>flowIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>" \"flowOut\": %d,\n"</expr></argument>, <argument><expr><name>flowOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>" \"dataIn\": %"<name>APR_UINT64_T_FMT</name>",\n"</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>in_data_octets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>" \"dataOut\": %"<name>APR_UINT64_T_FMT</name>"\n"</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>out_data_octets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name><name>x</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>" }"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name><name>x</name>-&gt;<name>idx</name></name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_streams</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>h2_session</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>last</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>stream_ctx_t</name></type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>x</name>.<name>bb</name></name> = <name>bb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name>.<name>s</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name>.<name>idx</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"streams\": {"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_mplx_stream_do</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name>add_stream</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>"\n }%s\n"</expr></argument>, <argument><expr><name>last</name>? "" : ","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_push</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>h2_session</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>int</name></type> <name>last</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_push_diary</name> *</type><name>diary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"push\": {\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diary</name> = <name><name>s</name>-&gt;<name>push_diary</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>diary</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base64_digest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>h2_push_diary_digest_get</name><argument_list>(<argument><expr><name>diary</name></expr></argument>, <argument><expr><name><name>bb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>256</expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>request</name>-&gt;<name>authority</name></name></expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>base64_digest</name> = <call><name>h2_util_base64url_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>bb</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"cacheDigest\": \"%s\",\n"</expr></argument>, <argument><expr><name>base64_digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"promises\": %d,\n"</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>pushes_promised</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"submits\": %d,\n"</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>pushes_submitted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"resets\": %d\n"</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>pushes_reset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" }%s\n"</expr></argument>, <argument><expr><name>last</name>? "" : ","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_in</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>h2_session</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>last</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"in\": {\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"requests\": %d,\n"</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>remote</name>.<name>emitted_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"resets\": %d, \n"</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>streams_reset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"frames\": %ld,\n"</expr></argument>, <argument><expr>(<name>long</name>)<name><name>s</name>-&gt;<name>frames_received</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"octets\": %"<name>APR_UINT64_T_FMT</name>"\n"</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>io</name>.<name>bytes_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" }%s\n"</expr></argument>, <argument><expr><name>last</name>? "" : ","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_out</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>h2_session</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>last</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"out\": {\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"responses\": %d,\n"</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>responses_submitted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"frames\": %ld,\n"</expr></argument>, <argument><expr>(<name>long</name>)<name><name>s</name>-&gt;<name>frames_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"octets\": %"<name>APR_UINT64_T_FMT</name>"\n"</expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>io</name>.<name>bytes_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" }%s\n"</expr></argument>, <argument><expr><name>last</name>? "" : ","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_stats</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>h2_session</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>int</name></type> <name>last</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"stats\": {\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_in</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_out</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_push</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" }%s\n"</expr></argument>, <argument><expr><name>last</name>? "" : ","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_status_insert</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>task</name>-&gt;<name>c</name>-&gt;<name>master</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_ctx</name> *</type><name>h2ctx</name> <init>= <expr><call><name>h2_ctx_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>connFlowIn</name></decl>, <decl><type ref="prev"/><name>connFlowOut</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>h2ctx</name> || (<name>session</name> = <call><name>h2_ctx_session_get</name><argument_list>(<argument><expr><name>h2ctx</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>stream</name> = <call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>stream</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>connFlowIn</name> = <call><name>nghttp2_session_get_effective_local_window_size</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>connFlowOut</name> = <call><name>nghttp2_session_get_remote_window_size</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>"{\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"version\": \"draft-01\",\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_settings</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_peer_settings</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"connFlowIn\": %d,\n"</expr></argument>, <argument><expr><name>connFlowIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"connFlowOut\": %d,\n"</expr></argument>, <argument><expr><name>connFlowOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>" \"sentGoAway\": %d,\n"</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>local</name>.<name>shutdown</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_streams</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_stats</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bbout</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>"}\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call>) != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_INSERT_AFTER</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <name>e</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>status_event</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_bucket_event</name></type> <name>event</name></decl></param>,
<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name>-&gt;<name>master</name></name></expr></argument>,
<argument><expr>"status_event(%s): %d"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>event</name></expr>)</condition> <block>{
<case>case <expr><name>H2_BUCKET_EV_BEFORE_MASTER_SEND</name></expr>:
<expr_stmt><expr><call><name>h2_status_insert</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>h2_filter_h2_status_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name> <init>= <expr><call><name>h2_ctx_rget</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"http2-status"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name> &amp;&amp; <name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_POST</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>task</name> = <name>ctx</name>? <call><name>h2_ctx_get_task</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>task</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>status</name> = <call><name>ap_discard_request_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = 200</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>clength</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>chunked</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"application/json"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>H2_FILTER_DEBUG_NOTE</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>h2_bucket_observer_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>, <argument><expr><name>status_event</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"status_handler(%s): checking for incoming trailers"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>trailers_in</name></name> &amp;&amp; !<call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>trailers_in</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"status_handler(%s): seeing incoming trailers"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>trailers_out</name></name></expr></argument>, <argument><expr>"h2-trailers-in"</expr></argument>,
<argument><expr><call><name>apr_itoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name>
|| <name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name>
|| <name><name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"status_handler(%s): ap_pass_brigade failed"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
</unit>
