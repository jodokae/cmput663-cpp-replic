<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/dav/main/props.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_BYTEFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DISABLE_WRITABLE_PROPS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_EMPTY_VALUE</name></cpp:macro> <cpp:value>"\0"</cpp:value></cpp:define>
<struct>struct <name>dav_propdb</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deferred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_db</name> *</type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ns_xlate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_namespace_map</name> *</type><name>mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_buffer</name></type> <name>wb_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>subreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_db</name> *</type><name>db_hooks</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>dav_core_props</name><index>[]</index></name> <init>= <expr><block>{
<expr>"getcontenttype"</expr>,
<expr>"getcontentlanguage"</expr>,
<expr>"lockdiscovery"</expr>,
<expr>"supportedlock"</expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>DAV_PROPID_CORE_getcontenttype</name> <init>= <expr><name>DAV_PROPID_CORE</name></expr></init></decl>,
<decl><name>DAV_PROPID_CORE_getcontentlanguage</name></decl>,
<decl><name>DAV_PROPID_CORE_lockdiscovery</name></decl>,
<decl><name>DAV_PROPID_CORE_supportedlock</name></decl>,
<decl><name>DAV_PROPID_CORE_UNKNOWN</name></decl>
}</block>;</enum>
<typedef>typedef <type><struct>struct <name>dav_rollback_item</name> <block>{
<decl_stmt><decl><type><name>dav_deadprop_rollback</name> *</type><name>deadprop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_liveprop_rollback</name> *</type><name>liveprop</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_rollback_item</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_find_liveprop_provider</name><parameter_list>(<param><decl><type><name>dav_propdb</name> *</type><name>propdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns_uri</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_hooks_liveprop</name> **</type><name>provider</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>propid</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>provider</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ns_uri</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>DAV_PROPID_CORE_UNKNOWN</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>propid</name> = <call><name>dav_run_find_liveprop</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>resource</name></name></expr></argument>, <argument><expr><name>ns_uri</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>,
<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propid</name> != 0</expr>)</condition><then> <block>{
<return>return <expr><name>propid</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns_uri</name></expr></argument>, <argument><expr>"DAV:"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type><name>p</name> <init>= <expr><name>dav_core_props</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>propid</name> = <name>DAV_PROPID_CORE</name></expr>;</init> <condition><expr>*<name>p</name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>p</name></expr>, <expr>++<name>propid</name></expr></incr>)
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>propname</name></expr></argument>, <argument><expr>*<name>p</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>propid</name></expr>;</return>
}</block></then></if></for>
}</block></then></if>
<return>return <expr><name>DAV_PROPID_CORE_UNKNOWN</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dav_find_liveprop</name><parameter_list>(<param><decl><type><name>dav_propdb</name> *</type><name>propdb</name></decl></param>, <param><decl><type><name>apr_xml_elem</name> *</type><name>elem</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_elem_private</name> *</type><name>priv</name> <init>= <expr><name><name>elem</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_liveprop</name> *</type><name>hooks</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>elem</name>-&gt;<name>ns</name></name> == <name>APR_XML_NS_NONE</name></expr>)</condition><then>
<expr_stmt><expr><name>ns_uri</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>elem</name>-&gt;<name>ns</name></name> == <name>APR_XML_NS_DAV_ID</name></expr>)</condition><then>
<expr_stmt><expr><name>ns_uri</name> = "DAV:"</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>ns_uri</name> = <call><name>APR_XML_GET_URI_ITEM</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>ns_xlate</name></name></expr></argument>, <argument><expr><name><name>elem</name>-&gt;<name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><name><name>priv</name>-&gt;<name>propid</name></name> = <call><name>dav_find_liveprop_provider</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr><name>ns_uri</name></expr></argument>, <argument><expr><name><name>elem</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>&amp;<name>hooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>priv</name>-&gt;<name>propid</name></name> != <name>DAV_PROPID_CORE_UNKNOWN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>priv</name>-&gt;<name>provider</name></name> = <name>hooks</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_rw_liveprop</name><parameter_list>(<param><decl><type><name>dav_propdb</name> *</type><name>propdb</name></decl></param>, <param><decl><type><name>dav_elem_private</name> *</type><name>priv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>propid</name> <init>= <expr><name><name>priv</name>-&gt;<name>propid</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>priv</name>-&gt;<name>provider</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call>(*<name><name>priv</name>-&gt;<name>provider</name>-&gt;<name>is_writable</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>resource</name></name></expr></argument>, <argument><expr><name>propid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>propid</name> == <name>DAV_PROPID_CORE_lockdiscovery</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DAV_DISABLE_WRITABLE_PROPS</name></expr></cpp:if>
|| <name>propid</name> == <name>DAV_PROPID_CORE_getcontenttype</name>
|| <name>propid</name> == <name>DAV_PROPID_CORE_getcontentlanguage</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
|| <name>propid</name> == <name>DAV_PROPID_CORE_supportedlock</name></expr>
)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>propid</name> == <name>DAV_PROPID_CORE_getcontenttype</name>
|| <name>propid</name> == <name>DAV_PROPID_CORE_getcontentlanguage</name>
|| <name>propid</name> == <name>DAV_PROPID_CORE_UNKNOWN</name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dav_do_prop_subreq</name><parameter_list>(<param><decl><type><name>dav_propdb</name> *</type><name>propdb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>e_uri</name> <init>= <expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>resource</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>propdb</name>-&gt;<name>resource</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>propdb</name>-&gt;<name>subreq</name></name> = <call><name>ap_sub_req_lookup_uri</name><argument_list>(<argument><expr><name>e_uri</name></expr></argument>, <argument><expr><name><name>propdb</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_insert_coreprop</name><parameter_list>(<param><decl><type><name>dav_propdb</name> *</type><name>propdb</name></decl></param>,
<param><decl><type><name>int</name></type> <name>propid</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>dav_prop_insert</name></type> <name>what</name></decl></param>,
<param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>,
<param><decl><type><name>dav_prop_insert</name> *</type><name>inserted</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>inserted</name> = <name>DAV_PROP_INSERT_NOTDEF</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propid</name> == <name>DAV_PROPID_CORE_UNKNOWN</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<switch>switch <condition>(<expr><name>propid</name></expr>)</condition> <block>{
<case>case <expr><name>DAV_PROPID_CORE_lockdiscovery</name></expr>:
<if>if <condition>(<expr><name><name>propdb</name>-&gt;<name>lockdb</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>dav_lock</name> *</type><name>locks</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_lock_query</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>lockdb</name></name></expr></argument>, <argument><expr><name><name>propdb</name>-&gt;<name>resource</name></name></expr></argument>,
<argument><expr>&amp;<name>locks</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"DAV:lockdiscovery could not be "
"determined due to a problem fetching "
"the locks for this resource."</expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>locks</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = ""</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>value</name> = <call><name>dav_lock_get_activelock</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>locks</name></expr></argument>,
<argument><expr>&amp;<name><name>propdb</name>-&gt;<name>wb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name><name>propdb</name>-&gt;<name>wb_lock</name>.<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_CORE_supportedlock</name></expr>:
<if>if <condition>(<expr><name><name>propdb</name>-&gt;<name>lockdb</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = <call>(*<name><name>propdb</name>-&gt;<name>lockdb</name>-&gt;<name>hooks</name>-&gt;<name>get_supportedlock</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>resource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_CORE_getcontenttype</name></expr>:
<if>if <condition>(<expr><name><name>propdb</name>-&gt;<name>subreq</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dav_do_prop_subreq</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>propdb</name>-&gt;<name>subreq</name>-&gt;<name>content_type</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = <name><name>propdb</name>-&gt;<name>subreq</name>-&gt;<name>content_type</name></name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_CORE_getcontentlanguage</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lang</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>propdb</name>-&gt;<name>subreq</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dav_do_prop_subreq</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>lang</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>subreq</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr>"Content-Language"</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = <name>lang</name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
}</block>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name>value</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>what</name> == <name>DAV_PROP_INSERT_SUPPORTED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>,
<argument><expr>"&lt;D:supported-live-property D:name=\"%s\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>what</name> == <name>DAV_PROP_INSERT_VALUE</name> &amp;&amp; *<name>value</name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>"&lt;D:%s&gt;%s&lt;/D:%s&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>"&lt;D:%s/&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>inserted</name> = <name>what</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_insert_liveprop</name><parameter_list>(<param><decl><type><name>dav_propdb</name> *</type><name>propdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
<param><decl><type><name>dav_prop_insert</name></type> <name>what</name></decl></param>,
<param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>,
<param><decl><type><name>dav_prop_insert</name> *</type><name>inserted</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_elem_private</name> *</type><name>priv</name> <init>= <expr><name><name>elem</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>inserted</name> = <name>DAV_PROP_INSERT_NOTDEF</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>priv</name>-&gt;<name>provider</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_insert_coreprop</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr><name><name>priv</name>-&gt;<name>propid</name></name></expr></argument>, <argument><expr><name><name>elem</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>, <argument><expr><name>inserted</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>inserted</name> = <call>(*<name><name>priv</name>-&gt;<name>provider</name>-&gt;<name>insert_prop</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>resource</name></name></expr></argument>, <argument><expr><name><name>priv</name>-&gt;<name>propid</name></name></expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dav_output_prop_name</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_prop_name</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>dav_xmlns_info</name> *</type><name>xi</name></decl></param>,
<param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name><name>name</name>-&gt;<name>ns</name></name> == '\0'</expr>)</condition><then>
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;%s/&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name><name>name</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name> <init>= <expr><call><name>dav_xmlns_add_uri</name><argument_list>(<argument><expr><name>xi</name></expr></argument>, <argument><expr><name><name>name</name>-&gt;<name>ns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;%s:%s/&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>name</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dav_insert_xmlns</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pre_prefix</name></decl></param>, <param><decl><type><name>long</name></type> <name>ns</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns_uri</name></decl></param>, <param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>" xmlns:%s%ld=\"%s\""</expr></argument>, <argument><expr><name>pre_prefix</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ns_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type><name>dav_really_open_db</name><parameter_list>(<param><decl><type><name>dav_propdb</name> *</type><name>propdb</name></decl></param>, <param><decl><type><name>int</name></type> <name>ro</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>propdb</name>-&gt;<name>deferred</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call>(*<name><name>propdb</name>-&gt;<name>db_hooks</name>-&gt;<name>open</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name><name>propdb</name>-&gt;<name>resource</name></name></expr></argument>, <argument><expr><name>ro</name></expr></argument>,
<argument><expr>&amp;<name><name>propdb</name>-&gt;<name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr><name>DAV_ERR_PROP_OPENING</name></expr></argument>,
<argument><expr>"Could not open the property database."</expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error *</argument>)</argument_list></macro><macro><name>dav_open_propdb</name><argument_list>(<argument>request_rec *r</argument>, <argument>dav_lockdb *lockdb</argument>,
<argument>const dav_resource *resource</argument>,
<argument>int ro</argument>,
<argument>apr_array_header_t * ns_xlate</argument>,
<argument>dav_propdb **p_propdb</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>dav_propdb</name> *</type><name>propdb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>propdb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>p_propdb</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DAV_DEBUG</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>uri</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"INTERNAL DESIGN ERROR: resource must define "
"its URI."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>propdb</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>propdb</name>-&gt;<name>resource</name></name> = <name>resource</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>propdb</name>-&gt;<name>ns_xlate</name></name> = <name>ns_xlate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>propdb</name>-&gt;<name>db_hooks</name></name> = <call><name>DAV_GET_HOOKS_PROPDB</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>propdb</name>-&gt;<name>lockdb</name></name> = <name>lockdb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>propdb</name>-&gt;<name>deferred</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p_propdb</name> = <name>propdb</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_close_propdb</name><argument_list>(<argument>dav_propdb *propdb</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name><name>propdb</name>-&gt;<name>db</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call>(*<name><name>propdb</name>-&gt;<name>db_hooks</name>-&gt;<name>close</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
apr_pool_destroy(propdb-&gt;p);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_get_props_result</argument>)</argument_list></macro> <macro><name>dav_get_allprops</name><argument_list>(<argument>dav_propdb *propdb</argument>,
<argument>dav_prop_insert what</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_db</name> *</type><name>db_hooks</name> <init>= <expr><name><name>propdb</name>-&gt;<name>db_hooks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_text_header</name></type> <name>hdr</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_text_header</name></type> <name>hdr_ns</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_get_props_result</name></type> <name>result</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_contenttype</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_contentlang</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_prop_insert</name></type> <name>unused_inserted</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>what</name> != <name>DAV_PROP_INSERT_SUPPORTED</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>propdb</name>-&gt;<name>deferred</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>dav_really_open_db</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr>1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>,
<argument><expr>"&lt;D:propstat&gt;" <name>DEBUG_CR</name>
"&lt;D:prop&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>propdb</name>-&gt;<name>db</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>dav_xmlns_info</name> *</type><name>xi</name> <init>= <expr><call><name>dav_xmlns_create</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_prop_name</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><call>(<name>void</name>) <argument_list>(<argument><expr>*<name><name>db_hooks</name>-&gt;<name>define_namespaces</name></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>xi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call>(*<name><name>db_hooks</name>-&gt;<name>first_name</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>!<name>err</name> &amp;&amp; <name><name>name</name>.<name>ns</name></name></expr>)</condition> <block>{
<if>if <condition>(<expr>*<name><name>name</name>.<name>ns</name></name> == 'D' &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>ns</name></name></expr></argument>, <argument><expr>"DAV:"</expr></argument>)</argument_list></call> == 0
&amp;&amp; *<name><name>name</name>.<name>name</name></name> == 'g'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"getcontenttype"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>found_contenttype</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"getcontentlanguage"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>found_contentlang</name> = 1</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>what</name> == <name>DAV_PROP_INSERT_VALUE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>db_hooks</name>-&gt;<name>output_value</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>,
<argument><expr><name>xi</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>,
<argument><expr>&amp;<name>found</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<goto>goto <name>next_key</name>;</goto>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>dav_output_prop_name</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr><name>xi</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<label><name>next_key</name>:</label>
<expr_stmt><expr><name>err</name> = <call>(*<name><name>db_hooks</name>-&gt;<name>next_name</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>dav_xmlns_generate</name><argument_list>(<argument><expr><name>xi</name></expr></argument>, <argument><expr>&amp;<name>hdr_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>dav_add_all_liveprop_xmlns</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>&amp;<name>hdr_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>dav_run_insert_all_liveprops</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name><name>propdb</name>-&gt;<name>resource</name></name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<call><name>dav_insert_coreprop</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>,
<argument><expr><name>DAV_PROPID_CORE_supportedlock</name></expr></argument>, <argument><expr>"supportedlock"</expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>, <argument><expr>&amp;<name>unused_inserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<call><name>dav_insert_coreprop</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>,
<argument><expr><name>DAV_PROPID_CORE_lockdiscovery</name></expr></argument>, <argument><expr>"lockdiscovery"</expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>, <argument><expr>&amp;<name>unused_inserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>found_contenttype</name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>)<call><name>dav_insert_coreprop</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>,
<argument><expr><name>DAV_PROPID_CORE_getcontenttype</name></expr></argument>,
<argument><expr>"getcontenttype"</expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>, <argument><expr>&amp;<name>unused_inserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>found_contentlang</name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>)<call><name>dav_insert_coreprop</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>,
<argument><expr><name>DAV_PROPID_CORE_getcontentlanguage</name></expr></argument>,
<argument><expr>"getcontentlanguage"</expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>, <argument><expr>&amp;<name>unused_inserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>what</name> != <name>DAV_PROP_INSERT_SUPPORTED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>&amp;<name>hdr</name></expr></argument>,
<argument><expr>"&lt;/D:prop&gt;" <name>DEBUG_CR</name>
"&lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;" <name>DEBUG_CR</name>
"&lt;/D:propstat&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>result</name>.<name>propstats</name></name> = <name><name>hdr</name>.<name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name>.<name>xmlns</name></name> = <name><name>hdr_ns</name>.<name>first</name></name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_get_props_result</argument>)</argument_list></macro> <macro><name>dav_get_props</name><argument_list>(<argument>dav_propdb *propdb</argument>,
<argument>apr_xml_doc *doc</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_db</name> *</type><name>db_hooks</name> <init>= <expr><name><name>propdb</name>-&gt;<name>db_hooks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>elem</name> <init>= <expr><call><name>dav_find_child</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>root</name></name></expr></argument>, <argument><expr>"prop"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_text_header</name></type> <name>hdr_good</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_text_header</name></type> <name>hdr_bad</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_text_header</name></type> <name>hdr_ns</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_good</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_get_props_result</name></type> <name>result</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>marks_liveprop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_xmlns_info</name> *</type><name>xi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xi_filled</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>&amp;<name>hdr_good</name></expr></argument>,
<argument><expr>"&lt;D:propstat&gt;" <name>DEBUG_CR</name>
"&lt;D:prop&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>marks_liveprop</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><call><name>dav_get_liveprop_ns_count</name><argument_list>()</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xi</name> = <call><name>dav_xmlns_create</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>elem</name> = <name><name>elem</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>elem</name></expr>;</condition> <incr><expr><name>elem</name> = <name><name>elem</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>dav_elem_private</name> *</type><name>priv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_prop_insert</name></type> <name>inserted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_prop_name</name></type> <name>name</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>elem</name>-&gt;<name>priv</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>elem</name>-&gt;<name>priv</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>priv</name> = <name><name>elem</name>-&gt;<name>priv</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>priv</name>-&gt;<name>propid</name></name> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>dav_find_liveprop</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>priv</name>-&gt;<name>propid</name></name> != <name>DAV_PROPID_CORE_UNKNOWN</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_insert_liveprop</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr><name>DAV_PROP_INSERT_VALUE</name></expr></argument>,
<argument><expr>&amp;<name>hdr_good</name></expr></argument>, <argument><expr>&amp;<name>inserted</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
}</block></then></if>
<if>if <condition>(<expr><name>inserted</name> == <name>DAV_PROP_INSERT_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>have_good</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>priv</name>-&gt;<name>provider</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type> <name>scan_ns_uri</name></decl>;</decl_stmt>
<for>for (<init><expr><name>scan_ns_uri</name> = <name><name>priv</name>-&gt;<name>provider</name>-&gt;<name>namespace_uris</name></name></expr>;</init>
<condition><expr>*<name>scan_ns_uri</name> != <name>NULL</name></expr>;</condition>
<incr><expr>++<name>scan_ns_uri</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>long</name></type> <name>ns</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ns</name> = <call><name>dav_get_liveprop_ns_index</name><argument_list>(<argument><expr>*<name>scan_ns_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>marks_liveprop</name><index>[<expr><name>ns</name></expr>]</index></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name><name>marks_liveprop</name><index>[<expr><name>ns</name></expr>]</index></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_insert_xmlns</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>"lp"</expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr>*<name>scan_ns_uri</name></expr></argument>,
<argument><expr>&amp;<name>hdr_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>inserted</name> == <name>DAV_PROP_INSERT_NOTDEF</name></expr>)</condition><then> <block>{
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DAV_DEBUG</name></expr></cpp:if>
<else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
return dav_new_error(propdb-&gt;p, HTTP_INTERNAL_SERVER_ERROR, 0,
0,
"INTERNAL DESIGN ERROR: insert_liveprop "
"did not insert what was asked for.");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<if>if <condition>(<expr><name><name>propdb</name>-&gt;<name>deferred</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>dav_really_open_db</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr>1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>elem</name>-&gt;<name>ns</name></name> == <name>APR_XML_NS_NONE</name></expr>)</condition><then>
<expr_stmt><expr><name><name>name</name>.<name>ns</name></name> = ""</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>name</name>.<name>ns</name></name> = <call><name>APR_XML_GET_URI_ITEM</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>ns_xlate</name></name></expr></argument>, <argument><expr><name><name>elem</name>-&gt;<name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>name</name>.<name>name</name></name> = <name><name>elem</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>propdb</name>-&gt;<name>db</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>db_hooks</name>-&gt;<name>output_value</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>,
<argument><expr><name>xi</name></expr></argument>, <argument><expr>&amp;<name>hdr_good</name></expr></argument>,
<argument><expr>&amp;<name>found</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>have_good</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>xi_filled</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><call>(<name>void</name>) <argument_list>(<argument><expr>*<name><name>db_hooks</name>-&gt;<name>define_namespaces</name></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>xi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xi_filled</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>hdr_bad</name>.<name>first</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>&amp;<name>hdr_bad</name></expr></argument>,
<argument><expr>"&lt;D:propstat&gt;" <name>DEBUG_CR</name>
"&lt;D:prop&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>dav_output_prop_name</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr><name>xi</name></expr></argument>, <argument><expr>&amp;<name>hdr_bad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>&amp;<name>hdr_good</name></expr></argument>,
<argument><expr>"&lt;/D:prop&gt;" <name>DEBUG_CR</name>
"&lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;" <name>DEBUG_CR</name>
"&lt;/D:propstat&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name>.<name>propstats</name></name> = <name><name>hdr_good</name>.<name>first</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>hdr_bad</name>.<name>first</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>&amp;<name>hdr_bad</name></expr></argument>,
<argument><expr>"&lt;/D:prop&gt;" <name>DEBUG_CR</name>
"&lt;D:status&gt;HTTP/1.1 404 Not Found&lt;/D:status&gt;" <name>DEBUG_CR</name>
"&lt;/D:propstat&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>have_good</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>result</name>.<name>propstats</name></name> = <name><name>hdr_bad</name>.<name>first</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>hdr_good</name>.<name>last</name>-&gt;<name>next</name></name> = <name><name>hdr_bad</name>.<name>first</name></name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>dav_xmlns_generate</name><argument_list>(<argument><expr><name>xi</name></expr></argument>, <argument><expr>&amp;<name>hdr_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name>.<name>xmlns</name></name> = <name><name>hdr_ns</name>.<name>first</name></name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_get_liveprop_supported</name><argument_list>(<argument>dav_propdb *propdb</argument>,
<argument>const char *ns_uri</argument>,
<argument>const char *propname</argument>,
<argument>apr_text_header *body</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>propid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_liveprop</name> *</type><name>hooks</name></decl>;</decl_stmt>
<expr_stmt><expr><name>propid</name> = <call><name>dav_find_liveprop_provider</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr><name>ns_uri</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr>&amp;<name>hooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propid</name> != <name>DAV_PROPID_CORE_UNKNOWN</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>hooks</name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>dav_prop_insert</name></type> <name>unused_inserted</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dav_insert_coreprop</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr><name>propid</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>,
<argument><expr><name>DAV_PROP_INSERT_SUPPORTED</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr>&amp;<name>unused_inserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call>(*<name><name>hooks</name>-&gt;<name>insert_prop</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>resource</name></name></expr></argument>, <argument><expr><name>propid</name></expr></argument>,
<argument><expr><name>DAV_PROP_INSERT_SUPPORTED</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_prop_validate</name><argument_list>(<argument>dav_prop_ctx *ctx</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>dav_propdb</name> *</type><name>propdb</name> <init>= <expr><name><name>ctx</name>-&gt;<name>propdb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>prop</name> <init>= <expr><name><name>ctx</name>-&gt;<name>prop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_elem_private</name> *</type><name>priv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>priv</name> = <name><name>ctx</name>-&gt;<name>prop</name>-&gt;<name>priv</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>priv</name>-&gt;<name>propid</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dav_find_liveprop</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>is_liveprop</name></name> = <name><name>priv</name>-&gt;<name>provider</name></name> != <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>dav_rw_liveprop</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>err</name></name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>,
<argument><expr><name>DAV_ERR_PROP_READONLY</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"Property is read-only."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>is_liveprop</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>defer_to_dead</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>err</name></name> = <call>(*<name><name>priv</name>-&gt;<name>provider</name>-&gt;<name>patch_validate</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>resource</name></name></expr></argument>,
<argument><expr><name>prop</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>operation</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>liveprop_ctx</name></name></expr></argument>,
<argument><expr>&amp;<name>defer_to_dead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>err</name></name> != <name>NULL</name> || !<name>defer_to_dead</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>is_liveprop</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>propdb</name>-&gt;<name>deferred</name></name>
&amp;&amp; (<name><name>ctx</name>-&gt;<name>err</name></name> = <call><name>dav_really_open_db</name><argument_list>(<argument><expr><name>propdb</name></expr></argument>, <argument><expr>0</expr></argument> )</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>propdb</name>-&gt;<name>db</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>err</name></name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr><name>DAV_ERR_PROP_NO_DATABASE</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"Attempted to set/remove a property "
"without a valid, open, read/write "
"property database."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>operation</name></name> == <name>DAV_PROP_OP_SET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><call>(<name>void</name>) <argument_list>(<argument><expr>*<name><name>propdb</name>-&gt;<name>db_hooks</name>-&gt;<name>map_namespaces</name></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>db</name></name></expr></argument>,
<argument><expr><name><name>propdb</name>-&gt;<name>ns_xlate</name></name></expr></argument>,
<argument><expr>&amp;<name><name>propdb</name>-&gt;<name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>operation</name></name> == <name>DAV_PROP_OP_DELETE</name></expr>)</condition><then> <block>{
}</block></then></if></else></if>
}</block>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_prop_exec</name><argument_list>(<argument>dav_prop_ctx *ctx</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>dav_propdb</name> *</type><name>propdb</name> <init>= <expr><name><name>ctx</name>-&gt;<name>propdb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_elem_private</name> *</type><name>priv</name> <init>= <expr><name><name>ctx</name>-&gt;<name>prop</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>rollback</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>ctx</name>-&gt;<name>rollback</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>is_liveprop</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call>(*<name><name>priv</name>-&gt;<name>provider</name>-&gt;<name>patch_exec</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>resource</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>prop</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>operation</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>liveprop_ctx</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>rollback</name>-&gt;<name>liveprop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>dav_prop_name</name></type> <name>name</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>prop</name>-&gt;<name>ns</name></name> == <name>APR_XML_NS_NONE</name></expr>)</condition><then>
<expr_stmt><expr><name><name>name</name>.<name>ns</name></name> = ""</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>name</name>.<name>ns</name></name> = <call><name>APR_XML_GET_URI_ITEM</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>ns_xlate</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>prop</name>-&gt;<name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>name</name>.<name>name</name></name> = <name><name>ctx</name>-&gt;<name>prop</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>propdb</name>-&gt;<name>db_hooks</name>
-&gt;<name>get_rollback</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>,
<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>rollback</name>-&gt;<name>deadprop</name></name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>operation</name></name> == <name>DAV_PROP_OP_SET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call>(*<name><name>propdb</name>-&gt;<name>db_hooks</name>-&gt;<name>store</name></name>)<argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>prop</name></name></expr></argument>,
<argument><expr><name><name>propdb</name>-&gt;<name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>operation</name></name> == <name>DAV_PROP_OP_DELETE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><call>(<name>void</name>) <argument_list>(<argument><expr>*<name><name>propdb</name>-&gt;<name>db_hooks</name>-&gt;<name>remove</name></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></else></if>
<label><name>error</name>:</label>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>err</name></name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>propdb</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr><name>DAV_ERR_PROP_EXEC</name></expr></argument>,
<argument><expr>"Could not execute PROPPATCH."</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_prop_commit</name><argument_list>(<argument>dav_prop_ctx *ctx</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>dav_elem_private</name> *</type><name>priv</name> <init>= <expr><name><name>ctx</name>-&gt;<name>prop</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>is_liveprop</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call>(*<name><name>priv</name>-&gt;<name>provider</name>-&gt;<name>patch_commit</name></name>)<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>propdb</name>-&gt;<name>resource</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>operation</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>liveprop_ctx</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>rollback</name>-&gt;<name>liveprop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_prop_rollback</name><argument_list>(<argument>dav_prop_ctx *ctx</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_elem_private</name> *</type><name>priv</name> <init>= <expr><name><name>ctx</name>-&gt;<name>prop</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>rollback</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>is_liveprop</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call>(*<name><name>priv</name>-&gt;<name>provider</name>-&gt;<name>patch_rollback</name></name>)<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>propdb</name>-&gt;<name>resource</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>operation</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>liveprop_ctx</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>rollback</name>-&gt;<name>liveprop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call>(*<name><name>ctx</name>-&gt;<name>propdb</name>-&gt;<name>db_hooks</name>
-&gt;<name>apply_rollback</name></name>)<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>propdb</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>rollback</name>-&gt;<name>deadprop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>err</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>err</name></name> = <name>err</name></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>scan</name> <init>= <expr><name>err</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>scan</name>-&gt;<name>prev</name></name> != <name>NULL</name></expr>)</condition>
<expr_stmt><expr><name>scan</name> = <name><name>scan</name>-&gt;<name>prev</name></name></expr>;</expr_stmt></while>
<expr_stmt><expr><name><name>scan</name>-&gt;<name>prev</name></name> = <name><name>ctx</name>-&gt;<name>err</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>err</name></name> = <name>err</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block>
</unit>
