<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/lua/lua_dbd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua_dbd.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_dbd_close</name></expr></argument>)</argument_list></call> *<name>lua_ap_dbd_close</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_dbd_open</name></expr></argument>)</argument_list></call> *<name>lua_ap_dbd_open</name> = <name>NULL</name></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>request_rec</name> *</type><name>ap_lua_check_request_rec</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>luaL_checkudata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>"Apache2.Request"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>lua_unboxpointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>lua_db_handle</name> *</type><name>lua_get_db_handle</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>lua_db_handle</name> *) <call><name>lua_topointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>lua_db_result_set</name> *</type><name>lua_get_result_set</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>lua_db_result_set</name> *) <call><name>lua_topointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>lua_db_close</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lua_db_handle</name> *</type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>db</name> = <call><name>lua_get_db_handle</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>db</name> &amp;&amp; <name><name>db</name>-&gt;<name>alive</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>type</name></name> == <name>LUA_DBTYPE_APR_DBD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>apr_dbd_close</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>pool</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>lua_ap_dbd_close</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lua_ap_dbd_close</name> != <name>NULL</name></expr>)</condition><then>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>dbdhandle</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>lua_ap_dbd_close</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>dbdhandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>db</name>-&gt;<name>driver</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>alive</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>lua_db_gc</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lua_db_handle</name> *</type><name>db</name></decl>;</decl_stmt>
<expr_stmt><expr><name>db</name> = <call><name>lua_touserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>db</name> &amp;&amp; <name><name>db</name>-&gt;<name>alive</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>type</name></name> == <name>LUA_DBTYPE_APR_DBD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_dbd_close</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>pool</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>lua_ap_dbd_close</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lua_ap_dbd_close</name> != <name>NULL</name></expr>)</condition><then>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>dbdhandle</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>lua_ap_dbd_close</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>dbdhandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>db</name>-&gt;<name>driver</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>alive</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>lua_db_active</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lua_db_handle</name> *</type><name>db</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>db</name> = <call><name>lua_get_db_handle</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>db</name> &amp;&amp; <name><name>db</name>-&gt;<name>alive</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>apr_dbd_check_conn</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>lua_db_query</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lua_db_handle</name> *</type><name>db</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>statement</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>statement</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>db</name> = <call><name>lua_get_db_handle</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>db</name> &amp;&amp; <name><name>db</name>-&gt;<name>alive</name></name></expr>)</condition><then>
<expr_stmt><expr><name>rc</name> = <call><name>apr_dbd_query</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>rc</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = -1</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>2</expr>;</return>
}</block></then></if>
}</block></else></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>lua_db_escape</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lua_db_handle</name> *</type><name>db</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>statement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>escaped</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>statement</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>db</name> = <call><name>lua_get_db_handle</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>db</name> &amp;&amp; <name><name>db</name>-&gt;<name>alive</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_dbd_init</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>escaped</name> = <call><name>apr_dbd_escape</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>statement</name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>escaped</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr>(1)</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>lua_db_get_row</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>row_no</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>alpha</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry</name></decl>, *<decl><type ref="prev"/><name>rowname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_row_t</name> *</type><name>row</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_db_result_set</name> *</type><name>res</name> <init>= <expr><call><name>lua_get_result_set</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>row_no</name> = <call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>lua_isboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>alpha</name> = <call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>row_no</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>row_no</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_dbd_get_row</name><argument_list>(<argument><expr><name><name>res</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>res</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>res</name>-&gt;<name>results</name></name></expr></argument>,
<argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call> != -1</expr>)</condition> <block>{
<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>row_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>x</name> = 0</expr>;</init> <condition><expr><name>x</name> &lt; <name><name>res</name>-&gt;<name>cols</name></name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>entry</name> = <call><name>apr_dbd_get_entry</name><argument_list>(<argument><expr><name><name>res</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>alpha</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rowname</name> = <call><name>apr_dbd_get_name</name><argument_list>(<argument><expr><name><name>res</name>-&gt;<name>driver</name></name></expr></argument>,
<argument><expr><name><name>res</name>-&gt;<name>results</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rowname</name> ? <name>rowname</name> : "(oob)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>x</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row_no</name>++</expr>;</expr_stmt>
}</block></while>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_dbd_get_row</name><argument_list>(<argument><expr><name><name>res</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>res</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>res</name>-&gt;<name>results</name></name></expr></argument>,
<argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr><name>row_no</name></expr></argument>)</argument_list></call> != -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>x</name> = 0</expr>;</init> <condition><expr><name>x</name> &lt; <name><name>res</name>-&gt;<name>cols</name></name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>entry</name> = <call><name>apr_dbd_get_entry</name><argument_list>(<argument><expr><name><name>res</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>alpha</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rowname</name> = <call><name>apr_dbd_get_name</name><argument_list>(<argument><expr><name><name>res</name>-&gt;<name>driver</name></name></expr></argument>,
<argument><expr><name><name>res</name>-&gt;<name>results</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rowname</name> ? <name>rowname</name> : "(oob)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>x</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>lua_db_select</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lua_db_handle</name> *</type><name>db</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>statement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>statement</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>db</name> = <call><name>lua_get_db_handle</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>db</name> &amp;&amp; <name><name>db</name>-&gt;<name>alive</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_results_t</name> *</type><name>results</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_db_result_set</name>*</type> <name>resultset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_dbd_select</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>handle</name></name></expr></argument>,
<argument><expr>&amp;<name>results</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cols</name> = <call><name>apr_dbd_num_cols</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cols</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resultset</name> = <call><name>lua_newuserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lua_db_result_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resultset</name>-&gt;<name>cols</name></name> = <name>cols</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resultset</name>-&gt;<name>driver</name></name> = <name><name>db</name>-&gt;<name>driver</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resultset</name>-&gt;<name>pool</name></name> = <name><name>db</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resultset</name>-&gt;<name>rows</name></name> = <call><name>apr_dbd_num_tuples</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resultset</name>-&gt;<name>results</name></name> = <name>results</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_newmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"lua_apr.dbselect"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"__call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_get_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>2</expr>;</return>
}</block></then></if>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>lua_db_prepared_select</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lua_db_prepared_statement</name> *</type><name>st</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>have</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> = (<name>lua_db_prepared_statement</name>*) <call><name>lua_topointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>have</name> = <call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> - 2</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>variables</name></name> != -1 &amp;&amp; <name>have</name> &lt; <name><name>st</name>-&gt;<name>variables</name></name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
<argument><expr>"Error in executing prepared statement: Expected %d arguments, got %d."</expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>variables</name></name></expr></argument>, <argument><expr><name>have</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>2</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>vars</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>have</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>x</name> = 0</expr>;</init> <condition><expr><name>x</name> &lt; <name>have</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>vars</name><index>[<expr><name>x</name></expr>]</index></name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>x</name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>db</name></name> &amp;&amp; <name><name>st</name>-&gt;<name>db</name>-&gt;<name>alive</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_results_t</name> *</type><name>results</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_dbd_pselect</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>handle</name></name></expr></argument>,
<argument><expr>&amp;<name>results</name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>statement</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>have</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>lua_db_result_set</name> *</type><name>resultset</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cols</name> = <call><name>apr_dbd_num_cols</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resultset</name> = <call><name>lua_newuserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lua_db_result_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resultset</name>-&gt;<name>cols</name></name> = <name>cols</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resultset</name>-&gt;<name>driver</name></name> = <name><name>st</name>-&gt;<name>db</name>-&gt;<name>driver</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resultset</name>-&gt;<name>pool</name></name> = <name><name>st</name>-&gt;<name>db</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resultset</name>-&gt;<name>rows</name></name> = <call><name>apr_dbd_num_tuples</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resultset</name>-&gt;<name>results</name></name> = <name>results</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_newmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"lua_apr.dbselect"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"__call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_get_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>2</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
<argument><expr>"Database connection seems to be closed, please reacquire it."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(2)</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>lua_db_prepared_query</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lua_db_prepared_statement</name> *</type><name>st</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>have</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>LUA_TTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>LUA_TUSERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> = (<name>lua_db_prepared_statement</name>*) <call><name>lua_topointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>have</name> = <call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> - 2</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>variables</name></name> != -1 &amp;&amp; <name>have</name> &lt; <name><name>st</name>-&gt;<name>variables</name></name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
<argument><expr>"Error in executing prepared statement: Expected %d arguments, got %d."</expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>variables</name></name></expr></argument>, <argument><expr><name>have</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>2</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>vars</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>have</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>x</name> = 0</expr>;</init> <condition><expr><name>x</name> &lt; <name>have</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>vars</name><index>[<expr><name>x</name></expr>]</index></name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>x</name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>db</name></name> &amp;&amp; <name><name>st</name>-&gt;<name>db</name>-&gt;<name>alive</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>affected</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_dbd_pquery</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>handle</name></name></expr></argument>,
<argument><expr>&amp;<name>affected</name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>statement</name></name></expr></argument>, <argument><expr><name>have</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>db</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>2</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
<argument><expr>"Database connection seems to be closed, please reacquire it."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(2)</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>lua_db_prepare</name><parameter_list>(<param><decl><type><name>lua_State</name>*</type> <name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lua_db_handle</name> *</type><name>db</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>statement</name></decl>, *<decl><type ref="prev"/><name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_db_prepared_statement</name>*</type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_dbd_prepared_t</name> *</type><name>pstatement</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>statement</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>statement</name></expr></argument>,<argument><expr>'%'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>at</name> != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>at</name><index>[<expr>1</expr>]</index></name> == '%'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>at</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>need</name>++</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>at</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>at</name>+1</expr></argument>,<argument><expr>'%'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>db</name> = <call><name>lua_get_db_handle</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_dbd_prepare</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>statement</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>pstatement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>2</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> = <call><name>lua_newuserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lua_db_prepared_statement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>statement</name></name> = <name>pstatement</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>variables</name></name> = <name>need</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>db</name></name> = <name>db</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"select"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_prepared_select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"query"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_prepared_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>lua_db_prepared</name><parameter_list>(<param><decl><type><name>lua_State</name>*</type> <name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lua_db_handle</name> *</type><name>db</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_db_prepared_statement</name>*</type> <name>st</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_dbd_prepared_t</name> *</type><name>pstatement</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>db</name> = <call><name>lua_get_db_handle</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pstatement</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>dbdhandle</name>-&gt;<name>prepared</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pstatement</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
<argument><expr>"Could not find any prepared statement called %s!"</expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>2</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> = <call><name>lua_newuserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lua_db_prepared_statement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>statement</name></name> = <name>pstatement</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>variables</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>db</name></name> = <name>db</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"select"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_prepared_select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"query"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_prepared_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>lua_db_handle</name>*</type> <name>lua_push_db_handle</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>,
<param><decl><type><name>apr_pool_t</name>*</type> <name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lua_db_handle</name>*</type> <name>db</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>db</name> = <call><name>lua_newuserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lua_db_handle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>alive</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>dbdhandle</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>server</name></name> = <name><name>r</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_newmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"lua_apr.dbacquire"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"__gc"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"escape"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_escape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"close"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"select"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"query"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"active"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"prepare"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"prepared"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_db_prepared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>db</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>lua_db_acquire</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arguments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lua_db_handle</name> *</type><name>db</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>dbdhandle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> = <call><name>ap_lua_check_request_rec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>type</name> = <call><name>luaL_optstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"mod_dbd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>"mod_dbd"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lua_ap_dbd_open</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lua_ap_dbd_open</name></expr>)</condition><then>
<expr_stmt><expr><name>dbdhandle</name> = (<name>ap_dbd_t</name> *) <call><name>lua_ap_dbd_open</name><argument_list>(
<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>dbdhandle</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>db</name> = <call><name>lua_push_db_handle</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>LUA_DBTYPE_MOD_DBD</name></expr></argument>, <argument><expr><name><name>dbdhandle</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>driver</name></name> = <name><name>dbdhandle</name>-&gt;<name>driver</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>handle</name></name> = <name><name>dbdhandle</name>-&gt;<name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>dbdhandle</name></name> = <name>dbdhandle</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>lua_ap_dbd_open</name> == <name>NULL</name></expr> )</condition><then>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
<argument><expr>"mod_dbd doesn't seem to have been loaded."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(
<argument><expr><name>L</name></expr></argument>,
<argument><expr>"Could not acquire connection from mod_dbd. If your database is running, this may indicate a permission problem."</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr>2</expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rc</name> = <call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Could not allocate memory for database!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>2</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"lua_dbd_pool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_dbd_init</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dbdhandle</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_dbd_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_dbd_get_driver</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr>&amp;<name><name>dbdhandle</name>-&gt;<name>driver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>LUA_TSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arguments</name> = <call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>arguments</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>apr_dbd_open_ex</name><argument_list>(<argument><expr><name><name>dbdhandle</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>arguments</name></expr></argument>, <argument><expr>&amp;<name><name>dbdhandle</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>&amp;<name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>db</name> = <call><name>lua_push_db_handle</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>LUA_DBTYPE_APR_DBD</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>driver</name></name> = <name><name>dbdhandle</name>-&gt;<name>driver</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>handle</name></name> = <name><name>dbdhandle</name>-&gt;<name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>dbdhandle</name></name> = <name>dbdhandle</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>2</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
<argument><expr>"No database connection string was specified."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(2)</expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOTIMPL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
<argument><expr>"driver for %s not available"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EDSOOPEN</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
<argument><expr>"can't find driver for %s"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_ESYMNOTFOUND</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
<argument><expr>"driver for %s is invalid or corrupted"</expr></argument>,
<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>,
<argument><expr>"mod_lua not compatible with APR in get_driver"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>3</expr>;</return>
}</block></else></if>
}</block></else></if>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
