<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/metadata/mod_version.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>version_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_version_t</name></type> <name>httpd_version</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_version</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>version_string</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>error</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name> <init>= <expr><name>version_string</name></expr></init>, *<name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>version</name><index>[<expr>3</expr>]</index></name> <init>= <expr><block>{<expr>0</expr>, <expr>0</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>error</name> = "Version appears to be invalid. It must have the format "
"major[.minor[.patch]] where major, minor and patch are "
"numbers."</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ep</name> = <name>version_string</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>version_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> &lt;= <name>ep</name> &amp;&amp; <name>c</name> &lt; 3</expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>p</name> == '.'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!*<name>p</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>version</name><index>[<expr><name>c</name>++</expr>]</index></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>version_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>version_string</name> = ++<name>p</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr>++<name>p</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>p</name> &lt; <name>ep</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>error</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>httpd_version</name>.<name>major</name></name> &gt; <name><name>version</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>httpd_version</name>.<name>major</name></name> &lt; <name><name>version</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>httpd_version</name>.<name>minor</name></name> &gt; <name><name>version</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>httpd_version</name>.<name>minor</name></name> &lt; <name><name>version</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>httpd_version</name>.<name>patch</name></name> &gt; <name><name>version</name><index>[<expr>2</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>httpd_version</name>.<name>patch</name></name> &lt; <name><name>version</name><index>[<expr>2</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if></else></if></else></if></else></if></else></if></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>match_version</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> *</type><name>version_string</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>error</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>compiled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>compiled</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>version_string</name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>compiled</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>error</name> = "Unable to compile regular expression"</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>error</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>to_match</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%d.%d.%d%s"</expr></argument>,
<argument><expr><name><name>httpd_version</name>.<name>major</name></name></expr></argument>,
<argument><expr><name><name>httpd_version</name>.<name>minor</name></name></expr></argument>,
<argument><expr><name><name>httpd_version</name>.<name>patch</name></name></expr></argument>,
<argument><expr><name><name>httpd_version</name>.<name>add_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = !<call><name>ap_regexec</name><argument_list>(<argument><expr><name>compiled</name></expr></argument>, <argument><expr><name>to_match</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_pregfree</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>compiled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>start_ifversion</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg3</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reverse</name> <init>= <expr>0</expr></init>, <name>done</name> <init>= <expr>0</expr></init>, <name>match</name> <init>= <expr>0</expr></init>, <name>compare</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>arg2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>arg2</name> = <name>arg1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg1</name> = "="</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>arg3</name> &amp;&amp; *<name>arg2</name> == '&gt;' &amp;&amp; !<name><name>arg2</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>arg3</name> = "&gt;"</expr>;</expr_stmt>
<expr_stmt><expr><name>arg2</name> = <name>arg1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg1</name> = "="</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>endp</name> = <name>arg2</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>endp</name> == <name>arg2</name>
|| (!(<name>arg3</name> &amp;&amp; *<name>arg3</name> == '&gt;' &amp;&amp; !<name><name>arg3</name><index>[<expr>1</expr>]</index></name>) &amp;&amp; *--<name>endp</name> != '&gt;')</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive missing closing '&gt;'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>p</name> = <name>arg1</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>p</name> == '!'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>reverse</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>p</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>p</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>c</name> = *<name>p</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>p</name> || (*<name>p</name> == '=' &amp;&amp; !<name><name>p</name><index>[<expr>1</expr>]</index></name> &amp;&amp; <name>c</name> != '~')</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>httpd_version</name>.<name>major</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_get_server_revision</name><argument_list>(<argument><expr>&amp;<name>httpd_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
<case>case <expr>'='</expr>:
<if>if <condition>(<expr>*<name>arg2</name> != '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>compare</name> = <call><name>compare_version</name><argument_list>(<argument><expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>,
<argument><expr><name>endp</name>-<name>arg2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<return>return <expr><name>error</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>match</name> = !<name>compare</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>endp</name> == ++<name>arg2</name> || *--<name>endp</name> != '/'</expr>)</condition><then> <block>{
<return>return <expr>"Missing delimiting / of regular expression."</expr>;</return>
}</block></then></if>
</case><case>case <expr>'~'</expr>:
<expr_stmt><expr><name>match</name> = <call><name>match_version</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>,
<argument><expr><name>endp</name>-<name>arg2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<return>return <expr><name>error</name></expr>;</return>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'&lt;'</expr>:
<expr_stmt><expr><name>compare</name> = <call><name>compare_version</name><argument_list>(<argument><expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>,
<argument><expr><name>endp</name>-<name>arg2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<return>return <expr><name>error</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>match</name> = ((-1 == <name>compare</name>) || (*<name>p</name> &amp;&amp; !<name>compare</name>))</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'&gt;'</expr>:
<expr_stmt><expr><name>compare</name> = <call><name>compare_version</name><argument_list>(<argument><expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>,
<argument><expr><name>endp</name>-<name>arg2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<return>return <expr><name>error</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>match</name> = ((1 == <name>compare</name>) || (*<name>p</name> &amp;&amp; !<name>compare</name>))</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>done</name> = 0</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></then></if>
<if>if <condition>(<expr>!<name>done</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"unrecognized operator '"</expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr>"'"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(!<name>reverse</name> &amp;&amp; <name>match</name>) || (<name>reverse</name> &amp;&amp; !<name>match</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>parent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>ap_build_cont_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>,
<argument><expr>&amp;<name>current</name></expr></argument>, <argument><expr>&amp;<name>parent</name></expr></argument>, <argument><expr>"&lt;IfVersion"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>ap_directive_t</name> **)<name>mconfig</name> = <name>current</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*(<name>ap_directive_t</name> **)<name>mconfig</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>ap_soak_end_container</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"&lt;IfVersion"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>version_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE123</name><argument_list>(<argument><expr>"&lt;IfVersion"</expr></argument>, <argument><expr><name>start_ifversion</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"a comparison operator, a version (and a delimiter)"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>version_cmds</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr>;</expr_stmt>
</unit>
