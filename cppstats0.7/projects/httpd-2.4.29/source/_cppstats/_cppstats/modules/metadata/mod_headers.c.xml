<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/metadata/mod_headers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>format_tag_hash</name></decl>;</decl_stmt>
<typedef>typedef <type><enum>enum <block>{
<decl><name>hdr_add</name> <init>= <expr>'a'</expr></init></decl>,
<decl><name>hdr_set</name> <init>= <expr>'s'</expr></init></decl>,
<decl><name>hdr_append</name> <init>= <expr>'m'</expr></init></decl>,
<decl><name>hdr_merge</name> <init>= <expr>'g'</expr></init></decl>,
<decl><name>hdr_unset</name> <init>= <expr>'u'</expr></init></decl>,
<decl><name>hdr_echo</name> <init>= <expr>'e'</expr></init></decl>,
<decl><name>hdr_edit</name> <init>= <expr>'r'</expr></init></decl>,
<decl><name>hdr_edit_r</name> <init>= <expr>'R'</expr></init></decl>,
<decl><name>hdr_setifempty</name> <init>= <expr>'i'</expr></init></decl>,
<decl><name>hdr_note</name> <init>= <expr>'n'</expr></init></decl>
}</block></enum></type> <name>hdr_actions</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>hdr_in</name> <init>= <expr>'0'</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>hdr_out_onsuccess</name> <init>= <expr>'1'</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>hdr_out_always</name> <init>= <expr>'2'</expr></init></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>format_tag_fn</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>format_tag_fn</name> *</type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>arg</name></decl>;</decl_stmt>
}</block></struct></type> <name>format_tag</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>condition_early</name> <init>= <expr>"early"</expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>hdr_actions</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>regex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>condition_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>subs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>expr_out</name></decl>;</decl_stmt>
}</block></struct></type> <name>header_entry</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>header_entry</name> *</type><name>hdr</name></decl>;</decl_stmt>
}</block></struct></type> <name>echo_do</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>header_entry</name> *</type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>t</name></decl>;</decl_stmt>
}</block></struct></type> <name>edit_do</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>fixup_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>fixup_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>fixup_err</name></decl>;</decl_stmt>
}</block></struct></type> <name>headers_conf</name>;</typedef>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>headers_module</name></decl>;</decl_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ssl_var_lookup</name></expr></argument>)</argument_list></call> *<name>header_ssl_lookup</name> = <name>NULL</name></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>constant_item</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>stuff</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>stuff</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>header_request_duration</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"D=%" <name>APR_TIME_T_FMT</name></expr></argument>,
<argument><expr>(<call><name>apr_time_now</name><argument_list>()</argument_list></call> - <name><name>r</name>-&gt;<name>request_time</name></name>)</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>header_request_time</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"t=%" <name>APR_TIME_T_FMT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>unwrap_header</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hdr</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>APR_ASCII_LF</name></expr></argument>)</argument_list></call> || <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>APR_ASCII_CR</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hdr</name> = <name>ptr</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<if>if <condition>(<expr>*<name>ptr</name> == <name>APR_ASCII_LF</name> || *<name>ptr</name> == <name>APR_ASCII_CR</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ptr</name> = <name>APR_ASCII_BLANK</name></expr>;</expr_stmt></then></if>
}</block> while <condition>(<expr>*<name>ptr</name>++</expr>)</condition>;</do>
}</block></then></if>
<return>return <expr><name>hdr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>header_request_env_var</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>s</name></expr>)</condition><then>
<return>return <expr><call><name>unwrap_header</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr>"(null)"</expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>header_request_ssl_var</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>header_ssl_lookup</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name> <init>= <expr><call><name>header_ssl_lookup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>val</name> &amp;&amp; <name><name>val</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
<return>return <expr><call><name>unwrap_header</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr>"(null)"</expr>;</return></else></if>
}</block></then> <else>else <block>{
<return>return <expr>"(null)"</expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>header_request_loadavg</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_loadavg_t</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_get_loadavg</name><argument_list>(<argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"l=%.2f/%.2f/%.2f"</expr></argument>, <argument><expr><name><name>t</name>.<name>loadavg</name></name></expr></argument>,
<argument><expr><name><name>t</name>.<name>loadavg5</name></name></expr></argument>, <argument><expr><name><name>t</name>.<name>loadavg15</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>header_request_idle</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_sload_t</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_get_sload</name><argument_list>(<argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"i=%d"</expr></argument>, <argument><expr><name><name>t</name>.<name>idle</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>header_request_busy</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_sload_t</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_get_sload</name><argument_list>(<argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"b=%d"</expr></argument>, <argument><expr><name><name>t</name>.<name>busy</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_headers_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>headers_conf</name> *</type><name>conf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fixup_in</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fixup_out</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fixup_err</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_headers_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>headers_conf</name> *</type><name>newconf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newconf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>headers_conf</name> *</type><name>base</name> <init>= <expr><name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>headers_conf</name> *</type><name>overrides</name> <init>= <expr><name>overridesv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>fixup_in</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>fixup_in</name></name></expr></argument>,
<argument><expr><name><name>overrides</name>-&gt;<name>fixup_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>fixup_out</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>fixup_out</name></name></expr></argument>,
<argument><expr><name><name>overrides</name>-&gt;<name>fixup_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>fixup_err</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>fixup_err</name></name></expr></argument>,
<argument><expr><name><name>overrides</name>-&gt;<name>fixup_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>newconf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>parse_misc_string</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>format_tag</name> *</type><name>tag</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>sa</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tag</name>-&gt;<name>func</name></name> = <name>constant_item</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = *<name>sa</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>s</name> &amp;&amp; *<name>s</name> != '%'</expr>)</condition> <block>{
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>tag</name>-&gt;<name>arg</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name> - *<name>sa</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <name><name>tag</name>-&gt;<name>arg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = *<name>sa</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>s</name> &amp;&amp; *<name>s</name> != '%'</expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>s</name> != '\\'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>d</name>++ = *<name>s</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<switch>switch <condition>(<expr>*<name>s</name></expr>)</condition> <block>{
<case>case <expr>'\\'</expr>:
<expr_stmt><expr>*<name>d</name>++ = '\\'</expr>;</expr_stmt>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'r'</expr>:
<expr_stmt><expr>*<name>d</name>++ = '\r'</expr>;</expr_stmt>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'n'</expr>:
<expr_stmt><expr>*<name>d</name>++ = '\n'</expr>;</expr_stmt>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'t'</expr>:
<expr_stmt><expr>*<name>d</name>++ = '\t'</expr>;</expr_stmt>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr>*<name>d</name>++ = '\\'</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></else></if>
}</block></while>
<expr_stmt><expr>*<name>d</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>sa</name> = <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>parse_format_tag</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>format_tag</name> *</type><name>tag</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>sa</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name> <init>= <expr>*<name>sa</name></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type> (*<name>tag_handler</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type></decl></param>,<param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<if>if <condition>(<expr>*<name>s</name> != '%'</expr>)</condition><then> <block>{
<return>return <expr><call><name>parse_misc_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>(*<name>s</name> == '%') || (*<name>s</name> == '\0')</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>tag</name>-&gt;<name>func</name></name> = <name>constant_item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name>-&gt;<name>arg</name></name> = "%"</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>s</name></expr>)</condition><then>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>sa</name> = <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>tag</name>-&gt;<name>arg</name></name> = "\0"</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>s</name> == '{'</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name>-&gt;<name>arg</name></name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr>&amp;<name>s</name></expr></argument>,<argument><expr>'}'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>tag_handler</name> = (const <call><call><name>char</name> * <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>request_rec</name> *</expr></argument>,<argument><expr><name>char</name> *</expr></argument>)</argument_list></call>)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>format_tag_hash</name></expr></argument>, <argument><expr><name>s</name>++</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tag_handler</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>dummy</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dummy</name><index>[<expr>0</expr>]</index></name> = <name><name>s</name><index>[<expr>-1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy</name><index>[<expr>1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Unrecognized header format %"</expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>tag</name>-&gt;<name>func</name></name> = <name>tag_handler</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>sa</name> = <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>parse_format_string</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>header_entry</name> *</type><name>hdr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>res</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>hdr</name>-&gt;<name>action</name></name> == <name>hdr_unset</name> || <name><name>hdr</name>-&gt;<name>action</name></name> == <name>hdr_echo</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then>
<else>else <if>if <condition>(<expr><name><name>hdr</name>-&gt;<name>action</name></name> == <name>hdr_edit</name> || <name><name>hdr</name>-&gt;<name>action</name></name> == <name>hdr_edit_r</name></expr> )</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <name><name>hdr</name>-&gt;<name>subs</name></name></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>"expr="</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>hdr</name>-&gt;<name>expr_out</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>s</name>+5</expr></argument>,
<argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
<argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Can't parse value expression : "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>hdr</name>-&gt;<name>ta</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>format_tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>s</name></expr>)</condition> <block>{
<if>if <condition>(<expr>(<name>res</name> = <call><name>parse_format_tag</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>(<name>format_tag</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>hdr</name>-&gt;<name>ta</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <specifier>const</specifier> <name>char</name> *</type><name>header_inout_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>indirconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hdr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>subs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>envclause</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>headers_conf</name> *</type><name>dirconf</name> <init>= <expr><name>indirconf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>condition_var</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>colon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>header_entry</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>fixup</name> <init>= <expr>(<name><name>cmd</name>-&gt;<name>info</name></name> == &amp;<name>hdr_in</name>)
? <name><name>dirconf</name>-&gt;<name>fixup_in</name></name> : (<name><name>cmd</name>-&gt;<name>info</name></name> == &amp;<name>hdr_out_always</name>)
? <name><name>dirconf</name>-&gt;<name>fixup_err</name></name>
: <name><name>dirconf</name>-&gt;<name>fixup_out</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>new</name> = (<name>header_entry</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>fixup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"set"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>new</name>-&gt;<name>action</name></name> = <name>hdr_set</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"setifempty"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>new</name>-&gt;<name>action</name></name> = <name>hdr_setifempty</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"add"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>new</name>-&gt;<name>action</name></name> = <name>hdr_add</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"append"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>new</name>-&gt;<name>action</name></name> = <name>hdr_append</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"merge"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>new</name>-&gt;<name>action</name></name> = <name>hdr_merge</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"unset"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>new</name>-&gt;<name>action</name></name> = <name>hdr_unset</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"echo"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>new</name>-&gt;<name>action</name></name> = <name>hdr_echo</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"edit"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>new</name>-&gt;<name>action</name></name> = <name>hdr_edit</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"edit*"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>new</name>-&gt;<name>action</name></name> = <name>hdr_edit_r</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"note"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>new</name>-&gt;<name>action</name></name> = <name>hdr_note</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr>"first argument must be 'add', 'set', 'setifempty', 'append', 'merge', "
"'unset', 'echo', 'note', 'edit', or 'edit*'."</expr>;</return></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>action</name></name> == <name>hdr_edit</name> || <name><name>new</name>-&gt;<name>action</name></name> == <name>hdr_edit_r</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>subs</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"Header edit requires a match and a substitution"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>regex</name></name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>regex</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"Header edit regex could not be compiled"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>subs</name></name> = <name>subs</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>envclause</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"Too many arguments to directive"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>envclause</name> = <name>subs</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>action</name></name> == <name>hdr_unset</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>envclause</name></expr>)</condition><then> <block>{
<return>return <expr>"header unset takes two arguments"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>envclause</name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>new</name>-&gt;<name>action</name></name> == <name>hdr_echo</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>regex</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>envclause</name></expr>)</condition><then> <block>{
<return>return <expr>"Header echo takes two arguments"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>envclause</name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>info</name></name> != &amp;<name>hdr_out_onsuccess</name> &amp;&amp; <name><name>cmd</name>-&gt;<name>info</name></name> != &amp;<name>hdr_out_always</name></expr>)</condition><then>
<return>return <expr>"Header echo only valid on Header "
"directives"</expr>;</return></then>
<else>else <block>{
<expr_stmt><expr><name>regex</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name> | <name>AP_REG_NOSUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>regex</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"Header echo regex could not be compiled"</expr>;</return>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>regex</name></name> = <name>regex</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then>
<return>return <expr>"Header requires three arguments"</expr>;</return></then></if></else></if></else></if>
<if>if <condition>(<expr><name>envclause</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>envclause</name></expr></argument>, <argument><expr>"early"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>condition_var</name> = <name>condition_early</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>envclause</name></expr></argument>, <argument><expr>"env="</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>envclause</name><index>[<expr>4</expr>]</index></name> == '\0')
|| ((<name><name>envclause</name><index>[<expr>4</expr>]</index></name> == '!') &amp;&amp; (<name><name>envclause</name><index>[<expr>5</expr>]</index></name> == '\0'))</expr>)</condition><then> <block>{
<return>return <expr>"error: missing environment variable name. "
"envclause should be in the form env=envar "</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>condition_var</name> = <name>envclause</name> + 4</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>envclause</name></expr></argument>, <argument><expr>"expr="</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>expr</name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>envclause</name> + 5</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Can't parse envclause/expression: "</expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unknown parameter: "</expr></argument>, <argument><expr><name>envclause</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>colon</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>hdr</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>colon</name>-<name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>header</name></name> = <name>hdr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>condition_var</name></name> = <name>condition_var</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>expr</name></name> = <name>expr</name></expr>;</expr_stmt>
<return>return <expr><call><name>parse_format_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>header_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>indirconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>envclause</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>subs</name></decl>;</decl_stmt>
<expr_stmt><expr><name>action</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>info</name></name> == &amp;<name>hdr_out_onsuccess</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"always"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>info</name></name> = &amp;<name>hdr_out_always</name></expr>;</expr_stmt>
<expr_stmt><expr><name>action</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"onsuccess"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>action</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then></if>
<expr_stmt><expr><name>hdr</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = *<name>args</name> ? <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>subs</name> = *<name>args</name> ? <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>envclause</name> = *<name>args</name> ? <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>args</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" has too many arguments"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>header_inout_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>indirconf</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>envclause</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name>*</type> <name>process_tags</name><parameter_list>(<param><decl><type><name>header_entry</name> *</type><name>hdr</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>format_tag</name> *</type><name>tag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>hdr</name>-&gt;<name>expr_out</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>expr_out</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02557</expr></argument>)</argument_list></call>
"Can't evaluate value expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>""</expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>tag</name> = (<name>format_tag</name>*) <name><name>hdr</name>-&gt;<name>ta</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>hdr</name>-&gt;<name>ta</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>s</name> = <name><name>tag</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>func</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>tag</name><index>[<expr><name>i</name></expr>]</index></name>.<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>str</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>str</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></for>
<return>return <expr><name>str</name> ? <name>str</name> : ""</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>process_regexp</name><parameter_list>(<param><decl><type><name>header_entry</name> *</type><name>hdr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>pmatch</name><index>[<expr><name>AP_MAX_REG_MATCH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>subs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>remainder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diffsz</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>hdr</name>-&gt;<name>regex</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>value</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>subs</name> = <call><name>ap_pregsub</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>process_tags</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>subs</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>diffsz</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>subs</name></expr></argument>)</argument_list></call> - (<name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name> - <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>hdr</name>-&gt;<name>action</name></name> == <name>hdr_edit</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>remainder</name> = <name>value</name> + <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>remainder</name> = <call><name>process_regexp</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>value</name> + <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>remainder</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>diffsz</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>)</argument_list></call> - <call><name>strlen</name><argument_list>(<argument><expr><name>value</name> + <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>ret</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> + 1 + <name>diffsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ret</name> + <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr></argument>, <argument><expr><name>subs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>echo_header</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>v</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>edit_do</name> *</type><name>ed</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>ed</name>-&gt;<name>hdr</name>-&gt;<name>regex</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name><name>ed</name>-&gt;<name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>edit_header</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>v</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>edit_do</name> *</type><name>ed</name> <init>= <expr>(<name>edit_do</name> *)<name>v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repl</name> <init>= <expr><call><name>process_regexp</name><argument_list>(<argument><expr><name><name>ed</name>-&gt;<name>hdr</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>ed</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>repl</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>ed</name>-&gt;<name>t</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>add_them_all</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>v</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>headers</name> <init>= <expr>(<name>apr_table_t</name> *)<name>v</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>do_headers_fixup</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>headers</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>fixup</name></decl></param>, <param><decl><type><name>int</name></type> <name>early</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>echo_do</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>fixup</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>header_entry</name> *</type><name>hdr</name> <init>= <expr>&amp;(<call>(<name>header_entry</name> *) <argument_list>(<argument><expr><name><name>fixup</name>-&gt;<name>elts</name></name></expr></argument>)</argument_list></call>)<index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>envar</name> <init>= <expr><name><name>hdr</name>-&gt;<name>condition_var</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>early</name> &amp;&amp; (<name>envar</name> == <name>condition_early</name>)</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then>
<else>else <if>if <condition>(<expr><name>early</name> &amp;&amp; (<name>envar</name> != <name>condition_early</name>)</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then>
<else>else <if>if <condition>(<expr><name><name>hdr</name>-&gt;<name>expr</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eval</name> <init>= <expr><call><name>ap_expr_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>expr</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01501</expr></argument>)</argument_list></call>
"Failed to evaluate expression (%s) - ignoring"</expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name>eval</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if></else></if>
}</block></then>
<else>else <if>if <condition>(<expr><name>envar</name> &amp;&amp; !<name>early</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>envar</name> != '!'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>envar</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>&amp;<name><name>envar</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
}</block></else></if>
}</block></then></if></else></if></else></if></else></if>
<switch>switch <condition>(<expr><name><name>hdr</name>-&gt;<name>action</name></name></expr>)</condition> <block>{
<case>case <expr><name>hdr_add</name></expr>:
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>, <argument><expr><call><name>process_tags</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>hdr_append</name></expr>:
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>, <argument><expr><call><name>process_tags</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>hdr_merge</name></expr>:
<expr_stmt><expr><name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>, <argument><expr><call><name>process_tags</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>new_val</name> <init>= <expr><call><name>process_tags</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>new_val_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>new_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tok_found</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>val</name></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tok_start</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>val</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr>++<name>val</name></expr>;</expr_stmt></while>
<expr_stmt><expr><name>tok_start</name> = <name>val</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>val</name> &amp;&amp; *<name>val</name> != ','</expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>val</name>++ == '"'</expr>)</condition><then>
<while>while <condition>(<expr>*<name>val</name></expr>)</condition>
<if>if <condition>(<expr>*<name>val</name>++ == '"'</expr>)</condition><then>
<break>break;</break></then></if></while></then></if>
}</block></while>
<if>if <condition>(<expr><name>new_val_len</name> == <call>(<name>apr_size_t</name>)<argument_list>(<argument><expr><name>val</name> - <name>tok_start</name></expr></argument>)</argument_list></call>
&amp;&amp; !<call><name>strncmp</name><argument_list>(<argument><expr><name>tok_start</name></expr></argument>, <argument><expr><name>new_val</name></expr></argument>, <argument><expr><name>new_val_len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>tok_found</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>*<name>val</name></expr>)</condition><then>
<expr_stmt><expr>++<name>val</name></expr>;</expr_stmt></then></if>
}</block></while>
<if>if <condition>(<expr>!<name>tok_found</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>, <argument><expr><name>new_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>hdr_set</name></expr>:
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>process_tags</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>, <argument><expr><call><name>process_tags</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>hdr_setifempty</name></expr>:
<if>if <condition>(<expr><name>NULL</name> == <call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>process_tags</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>, <argument><expr><call><name>process_tags</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>hdr_unset</name></expr>:
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>hdr_echo</name></expr>:
<expr_stmt><expr><name><name>v</name>.<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>.<name>hdr</name></name> = <name>hdr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>echo_header</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>hdr_edit</name></expr>:
</case><case>case <expr><name>hdr_edit_r</name></expr>:
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call> &amp;&amp; <name><name>r</name>-&gt;<name>content_type</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repl</name> <init>= <expr><call><name>process_regexp</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>repl</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>edit_do</name></type> <name>ed</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ed</name>.<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ed</name>.<name>hdr</name></name> = <name>hdr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ed</name>.<name>t</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_table_do</name><argument_list>(<argument><expr><name>edit_header</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>ed</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>,
<argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>add_them_all</name></expr></argument>, <argument><expr>(<name>void</name> *) <name>headers</name></expr></argument>, <argument><expr><name><name>ed</name>.<name>t</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>hdr_note</name></expr>:
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><call><name>process_tags</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>header</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_headers_insert_output_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>headers_conf</name> *</type><name>dirconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>headers_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dirconf</name>-&gt;<name>fixup_out</name>-&gt;<name>nelts</name></name> || <name><name>dirconf</name>-&gt;<name>fixup_err</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"FIXUP_HEADERS_OUT"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_headers_insert_error_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>headers_conf</name> *</type><name>dirconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>headers_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dirconf</name>-&gt;<name>fixup_err</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"FIXUP_HEADERS_ERR"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_headers_output_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>headers_conf</name> *</type><name>dirconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>headers_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01502</expr></argument>)</argument_list></call>
"headers: ap_headers_output_filter()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_headers_fixup</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name><name>dirconf</name>-&gt;<name>fixup_err</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_headers_fixup</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>dirconf</name>-&gt;<name>fixup_out</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>,<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_headers_error_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>headers_conf</name> *</type><name>dirconf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dirconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>headers_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01503</expr></argument>)</argument_list></call>
"headers: ap_headers_error_filter()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_headers_fixup</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name><name>dirconf</name>-&gt;<name>fixup_err</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_headers_fixup</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>headers_conf</name> *</type><name>dirconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>headers_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dirconf</name>-&gt;<name>fixup_in</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>do_headers_fixup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name><name>dirconf</name>-&gt;<name>fixup_in</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_headers_early</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>headers_conf</name> *</type><name>dirconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>headers_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dirconf</name>-&gt;<name>fixup_in</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>do_headers_fixup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name><name>dirconf</name>-&gt;<name>fixup_in</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>dirconf</name>-&gt;<name>fixup_err</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>do_headers_fixup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name><name>dirconf</name>-&gt;<name>fixup_err</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>dirconf</name>-&gt;<name>fixup_out</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>do_headers_fixup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>dirconf</name>-&gt;<name>fixup_out</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01504</expr></argument>)</argument_list></call>
"Regular expression replacement failed (replacement too long?)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>headers_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"Header"</expr></argument>, <argument><expr><name>header_cmd</name></expr></argument>, <argument><expr>&amp;<name>hdr_out_onsuccess</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"an optional condition, an action, header and value "
"followed by optional env clause"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"RequestHeader"</expr></argument>, <argument><expr><name>header_cmd</name></expr></argument>, <argument><expr>&amp;<name>hdr_in</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"an action, header and value followed by optional env "
"clause"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_format_tag_handler</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>,
<param><decl><type><name>format_tag_fn</name> *</type><name>tag_handler</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>format_tag_hash</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>tag_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>header_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>format_tag_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_format_tag_handler</name><argument_list>(<argument><expr>"D"</expr></argument>, <argument><expr><name>header_request_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_format_tag_handler</name><argument_list>(<argument><expr>"t"</expr></argument>, <argument><expr><name>header_request_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_format_tag_handler</name><argument_list>(<argument><expr>"e"</expr></argument>, <argument><expr><name>header_request_env_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_format_tag_handler</name><argument_list>(<argument><expr>"s"</expr></argument>, <argument><expr><name>header_request_ssl_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_format_tag_handler</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><name>header_request_loadavg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_format_tag_handler</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>header_request_idle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_format_tag_handler</name><argument_list>(<argument><expr>"b"</expr></argument>, <argument><expr><name>header_request_busy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>header_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>header_ssl_lookup</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_var_lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"FIXUP_HEADERS_OUT"</expr></argument>, <argument><expr><name>ap_headers_output_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_CONTENT_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"FIXUP_HEADERS_ERR"</expr></argument>, <argument><expr><name>ap_headers_error_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_CONTENT_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>header_pre_config</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>header_post_config</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>ap_headers_insert_output_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_error_filter</name><argument_list>(<argument><expr><name>ap_headers_insert_error_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>ap_headers_fixup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>ap_headers_early</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_headers_dir_config</name></expr>,
<expr><name>merge_headers_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>headers_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
