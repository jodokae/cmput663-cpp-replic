<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/mappers/mod_imagemap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAP_MAGIC_TYPE</name></cpp:macro> <cpp:value>"application/x-httpd-imap"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXVERTS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAP_MENU_DEFAULT</name></cpp:macro> <cpp:value>"formatted"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAP_DEFAULT_DEFAULT</name></cpp:macro> <cpp:value>"nocontent"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAP_BASE_DEFAULT</name></cpp:macro> <cpp:value>"map"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>imagemap_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>imap_menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>imap_default</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>imap_base</name></decl>;</decl_stmt>
}</block></struct></type> <name>imap_conf_rec</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_imap_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>imap_conf_rec</name> *</type><name>icr</name> <init>=
<expr>(<name>imap_conf_rec</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imap_conf_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>icr</name>-&gt;<name>imap_menu</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>icr</name>-&gt;<name>imap_default</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>icr</name>-&gt;<name>imap_base</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>icr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_imap_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>imap_conf_rec</name> *</type><name>new</name> <init>= <expr>(<name>imap_conf_rec</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imap_conf_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>imap_conf_rec</name> *</type><name>base</name> <init>= <expr>(<name>imap_conf_rec</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>imap_conf_rec</name> *</type><name>add</name> <init>= <expr>(<name>imap_conf_rec</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>imap_menu</name></name> = <name><name>add</name>-&gt;<name>imap_menu</name></name> ? <name><name>add</name>-&gt;<name>imap_menu</name></name> : <name><name>base</name>-&gt;<name>imap_menu</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>imap_default</name></name> = <name><name>add</name>-&gt;<name>imap_default</name></name> ? <name><name>add</name>-&gt;<name>imap_default</name></name>
: <name><name>base</name>-&gt;<name>imap_default</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>imap_base</name></name> = <name><name>add</name>-&gt;<name>imap_base</name></name> ? <name><name>add</name>-&gt;<name>imap_base</name></name> : <name><name>base</name>-&gt;<name>imap_base</name></name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>imap_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ImapMenu"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>imap_conf_rec</name></expr></argument>, <argument><expr><name>imap_menu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_INDEXES</name></expr></argument>,
<argument><expr>"the type of menu generated: none, formatted, semiformatted, "
"unformatted"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ImapDefault"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>imap_conf_rec</name></expr></argument>, <argument><expr><name>imap_default</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_INDEXES</name></expr></argument>,
<argument><expr>"the action taken if no match: error, nocontent, referer, "
"menu, URL"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ImapBase"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>imap_conf_rec</name></expr></argument>, <argument><expr><name>imap_base</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_INDEXES</name></expr></argument>,
<argument><expr>"the base for all URL's: map, referer, URL (or start of)"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pointinrect</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>point</name><index>[<expr>2</expr>]</index></name></decl></param>, <param><decl><type><name>double</name></type> <name><name>coords</name><index>[<expr><name>MAXVERTS</name></expr>]</index><index>[<expr>2</expr>]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name><name>max</name><index>[<expr>2</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>min</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name> &gt; <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>max</name><index>[<expr>0</expr>]</index></name> = <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>min</name><index>[<expr>0</expr>]</index></name> = <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>max</name><index>[<expr>0</expr>]</index></name> = <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>min</name><index>[<expr>0</expr>]</index></name> = <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name> &gt; <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>max</name><index>[<expr>1</expr>]</index></name> = <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>min</name><index>[<expr>1</expr>]</index></name> = <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>max</name><index>[<expr>1</expr>]</index></name> = <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>min</name><index>[<expr>1</expr>]</index></name> = <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr>((<name><name>point</name><index>[<expr><name>X</name></expr>]</index></name> &gt;= <name><name>min</name><index>[<expr>0</expr>]</index></name> &amp;&amp; <name><name>point</name><index>[<expr><name>X</name></expr>]</index></name> &lt;= <name><name>max</name><index>[<expr>0</expr>]</index></name>) &amp;&amp;
(<name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name> &gt;= <name><name>min</name><index>[<expr>1</expr>]</index></name> &amp;&amp; <name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name> &lt;= <name><name>max</name><index>[<expr>1</expr>]</index></name>))</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pointincircle</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>point</name><index>[<expr>2</expr>]</index></name></decl></param>, <param><decl><type><name>double</name></type> <name><name>coords</name><index>[<expr><name>MAXVERTS</name></expr>]</index><index>[<expr>2</expr>]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>radius1</name></decl>, <decl><type ref="prev"/><name>radius2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>radius1</name> = ((<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name>) * (<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name>))
+ ((<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>X</name></expr>]</index></name>) * (<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>X</name></expr>]</index></name>))</expr>;</expr_stmt>
<expr_stmt><expr><name>radius2</name> = ((<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name> - <name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name>) * (<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name> - <name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name>))
+ ((<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name> - <name><name>point</name><index>[<expr><name>X</name></expr>]</index></name>) * (<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name> - <name><name>point</name><index>[<expr><name>X</name></expr>]</index></name>))</expr>;</expr_stmt>
<return>return <expr>(<name>radius2</name> &lt;= <name>radius1</name>)</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fmin</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;(b))?(b):(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fmax</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;(b))?(a):(b))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pointinpoly</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>point</name><index>[<expr>2</expr>]</index></name></decl></param>, <param><decl><type><name>double</name></type> <name><name>pgon</name><index>[<expr><name>MAXVERTS</name></expr>]</index><index>[<expr>2</expr>]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>numverts</name></decl>, <decl><type ref="prev"/><name>crossings</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><name><name>point</name><index>[<expr><name>X</name></expr>]</index></name></expr></init>, <name>y</name> <init>= <expr><name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>numverts</name> = 0</expr>;</init> <condition><expr><name>numverts</name> &lt; <name>MAXVERTS</name> &amp;&amp; <name><name>pgon</name><index>[<expr><name>numverts</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name> != -1</expr>;</condition>
<incr><expr><name>numverts</name>++</expr></incr>) <block>{
}</block></for>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>numverts</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>double</name></type> <name>x1</name><init>=<expr><name><name>pgon</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>y1</name><init>=<expr><name><name>pgon</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x2</name><init>=<expr><name><name>pgon</name><index>[<expr>(<name>i</name> + 1) % <name>numverts</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>y2</name><init>=<expr><name><name>pgon</name><index>[<expr>(<name>i</name> + 1) % <name>numverts</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name><init>=<expr>(<name>y</name> - <name>y1</name>) * (<name>x2</name> - <name>x1</name>) - (<name>x</name> - <name>x1</name>) * (<name>y2</name> - <name>y1</name>)</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>y1</name> &gt;= <name>y</name>) != (<name>y2</name> &gt;= <name>y</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>crossings</name> +=<name>y2</name> - <name>y1</name> &gt;= 0 ? <name>d</name> &gt;= 0 : <name>d</name> &lt;= 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>d</name> &amp;&amp; <call><name>fmin</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>)</argument_list></call> &lt;= <name>x</name> &amp;&amp; <name>x</name> &lt;= <call><name>fmax</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>fmin</name><argument_list>(<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call> &lt;= <name>y</name> &amp;&amp; <name>y</name> &lt;= <call><name>fmax</name><argument_list>(<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>crossings</name> &amp; 0x01</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_closer</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>point</name><index>[<expr>2</expr>]</index></name></decl></param>, <param><decl><type><name>double</name></type> <name><name>coords</name><index>[<expr><name>MAXVERTS</name></expr>]</index><index>[<expr>2</expr>]</index></name></decl></param>,
<param><decl><type><name>double</name> *</type><name>closest</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>dist_squared</name> <init>= <expr>((<name><name>point</name><index>[<expr><name>X</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name>)
* (<name><name>point</name><index>[<expr><name>X</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name>))
+ ((<name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name>)
* (<name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name>))</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>point</name><index>[<expr><name>X</name></expr>]</index></name> &lt; 0 || <name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>(0)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>closest</name> &lt; 0 || <name>dist_squared</name> &lt; *<name>closest</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>closest</name> = <name>dist_squared</name></expr>;</expr_stmt>
<return>return <expr>(1)</expr>;</return>
}</block></then></if>
<return>return <expr>(0)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>get_x_coord</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x_coord</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>(-1)</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>*<name>args</name> &amp;&amp; !<call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>args</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>args</name> != ','</expr>)</condition> <block>{
<expr_stmt><expr><name>args</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>x_coord</name> = <call><name>strtod</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>endptr</name> &gt; <name>args</name></expr>)</condition><then> <block>{
<return>return <expr>(<name>x_coord</name>)</expr>;</return>
}</block></then></if>
<return>return <expr>(-1)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>get_y_coord</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start_of_y</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>y_coord</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>(-1)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>start_of_y</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>start_of_y</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>start_of_y</name>++</expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>start_of_y</name> &amp;&amp; !<call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>start_of_y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>start_of_y</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>y_coord</name> = <call><name>strtod</name><argument_list>(<argument><expr><name>start_of_y</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>endptr</name> &gt; <name>start_of_y</name></expr>)</condition><then> <block>{
<return>return <expr>(<name>y_coord</name>)</expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr>(-1)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>read_quoted</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>string</name></decl></param>, <param><decl><type><name>char</name> **</type><name>quoted_part</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>strp</name> <init>= <expr>*<name>string</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>quoted_part</name> = <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>strp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>strp</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>strp</name> == '"'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>strp</name>++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>quoted_part</name> = <name>strp</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>strp</name> &amp;&amp; *<name>strp</name> != '"'</expr>)</condition> <block>{
<expr_stmt><expr>++<name>strp</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>strp</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>strp</name>++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>string</name> = <name>strp</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>imap_url</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>, <decl><type ref="prev"/><name>clen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>string_pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string_pos_const</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>directory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>referer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>my_base</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"map"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"menu"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"nocontent"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"referer"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>referer</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Referer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>referer</name> &amp;&amp; *<name>referer</name></expr>)</condition><then> <block>{
<return>return <expr><name>referer</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>value</name> = ""</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>string_pos_const</name> = <name>value</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isalpha</name><argument_list>(<argument><expr>*<name>string_pos_const</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>string_pos_const</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>string_pos_const</name> == ':'</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>base</name> || !*<name>base</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>value</name> &amp;&amp; *<name>value</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> == <name>NULL</name> &amp;&amp; (!<call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"../"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>
|| !<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>".."</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00677</expr></argument>)</argument_list></call>
"invalid base directive in map file: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>my_base</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string_pos</name> = <name>my_base</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>string_pos</name></expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>string_pos</name> == '/' &amp;&amp; *(<name>string_pos</name> + 1) == '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>string_pos</name> += 2</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>*<name>string_pos</name> == '/'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>value</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>string_pos</name> = '\0'</expr>;</expr_stmt>
}</block></then>
<else>else <block>{
<expr_stmt><expr><name>directory</name> = <name>string_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>string_pos</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>string_pos</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>string_pos</name> = '\0'</expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"../"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> || !<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>".."</expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><name>directory</name> &amp;&amp; (<name>slen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>clen</name> = <name>slen</name> - 1</expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>slen</name> - <name>clen</name>) == 1</expr>)</condition> <block>{
<if>if <condition>(<expr>(<name>string_pos</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>string_pos</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>clen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>clen</name> == 0</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></while>
<expr_stmt><expr><name>value</name> += 2</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>directory</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00678</expr></argument>)</argument_list></call>
"invalid directory name in map file: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"/../"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> || !<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"/.."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name>++</expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>value</name> &amp;&amp; *<name>value</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>my_base</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>my_base</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>imap_reply</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>redirect</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>redirect</name></expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>redirect</name></expr></argument>, <argument><expr>"nocontent"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_NO_CONTENT</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>redirect</name> &amp;&amp; *<name>redirect</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_MOVED_TEMPORARILY</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_header</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>menu</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/html; charset=ISO-8859-1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DOCTYPE_HTML_3_2</name></expr></argument>, <argument><expr>"&lt;html&gt;&lt;head&gt;\n&lt;title&gt;Menu for "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/title&gt;\n&lt;/head&gt;&lt;body&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"formatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;h1&gt;Menu for "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/h1&gt;\n&lt;hr /&gt;\n\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_blank</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>menu</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"formatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"semiformatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;br /&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"unformatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_comment</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>menu</name></decl></param>, <param><decl><type><name>char</name> *</type><name>comment</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"formatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"semiformatted"</expr></argument>)</argument_list></call> &amp;&amp; *<name>comment</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"unformatted"</expr></argument>)</argument_list></call> &amp;&amp; *<name>comment</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_default</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>menu</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>href</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ehref</name></decl>, *<decl><type ref="prev"/><name>etext</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr>"nocontent"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>ehref</name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>etext</name> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"formatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;pre&gt;(Default) &lt;a href=\""</expr></argument>, <argument><expr><name>ehref</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>etext</name></expr></argument>,
<argument><expr>"&lt;/a&gt;&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"semiformatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;pre&gt;(Default) &lt;a href=\""</expr></argument>, <argument><expr><name>ehref</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>etext</name></expr></argument>,
<argument><expr>"&lt;/a&gt;&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"unformatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;a href=\""</expr></argument>, <argument><expr><name>ehref</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>etext</name></expr></argument>, <argument><expr>"&lt;/a&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_directive</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>menu</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>href</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ehref</name></decl>, *<decl><type ref="prev"/><name>etext</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr>"nocontent"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>ehref</name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>etext</name> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"formatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;pre&gt; &lt;a href=\""</expr></argument>, <argument><expr><name>ehref</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>etext</name></expr></argument>,
<argument><expr>"&lt;/a&gt;&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"semiformatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;pre&gt; &lt;a href=\""</expr></argument>, <argument><expr><name>ehref</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>etext</name></expr></argument>,
<argument><expr>"&lt;/a&gt;&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"unformatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;a href=\""</expr></argument>, <argument><expr><name>ehref</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>etext</name></expr></argument>, <argument><expr>"&lt;/a&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_footer</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n\n&lt;/body&gt;\n&lt;/html&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>imap_handler_internal</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>input</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>directive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>href_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>redirect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mapdflt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>closest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>closest_yet</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>testpoint</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>pointarray</name><index>[<expr><name>MAXVERTS</name> + 1</expr>]</index><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vertex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>string_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>showmenu</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>imap_conf_rec</name> *</type><name>icr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>imap_menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>imap_default</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>imap_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_configfile_t</name> *</type><name>imap</name></decl>;</decl_stmt>
<expr_stmt><expr><name>icr</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>imagemap_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imap_menu</name> = <name><name>icr</name>-&gt;<name>imap_menu</name></name> ? <name><name>icr</name>-&gt;<name>imap_menu</name></name> : <name>IMAP_MENU_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>imap_default</name> = <name><name>icr</name>-&gt;<name>imap_default</name></name>
? <name><name>icr</name>-&gt;<name>imap_default</name></name> : <name>IMAP_DEFAULT_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>imap_base</name> = <name><name>icr</name>-&gt;<name>imap_base</name></name> ? <name><name>icr</name>-&gt;<name>imap_base</name></name> : <name>IMAP_BASE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_pcfg_openfile</name><argument_list>(<argument><expr>&amp;<name>imap</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>base</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>imap_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>base</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>mapdflt</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>imap_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>mapdflt</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>testpoint</name><index>[<expr><name>X</name></expr>]</index></name> = <call><name>get_x_coord</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>testpoint</name><index>[<expr><name>Y</name></expr>]</index></name> = <call><name>get_y_coord</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>testpoint</name><index>[<expr><name>X</name></expr>]</index></name> == -1 || <name><name>testpoint</name><index>[<expr><name>Y</name></expr>]</index></name> == -1) ||
(<name><name>testpoint</name><index>[<expr><name>X</name></expr>]</index></name> == 0 &amp;&amp; <name><name>testpoint</name><index>[<expr><name>Y</name></expr>]</index></name> == 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>testpoint</name><index>[<expr><name>X</name></expr>]</index></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>testpoint</name><index>[<expr><name>Y</name></expr>]</index></name> = -1</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>imap_menu</name></expr></argument>, <argument><expr>"none"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>showmenu</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>menu_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>imap_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr>!<call><name>ap_cfg_getline</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr>!<name><name>input</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>menu_blank</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>imap_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>input</name><index>[<expr>0</expr>]</index></name> == '#'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>menu_comment</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>imap_menu</name></expr></argument>, <argument><expr><name>input</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>string_pos</name> = <name>input</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>string_pos</name></expr>)</condition><then> <block>{
<goto>goto <name>need_2_fields</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>directive</name> = <name>string_pos</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>string_pos</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>string_pos</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!*<name>string_pos</name></expr>)</condition><then> <block>{
<goto>goto <name>need_2_fields</name>;</goto>
}</block></then></if>
<expr_stmt><expr>*<name>string_pos</name>++ = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>string_pos</name></expr>)</condition><then> <block>{
<goto>goto <name>need_2_fields</name>;</goto>
}</block></then></if>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>string_pos</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>value</name> = <name>string_pos</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>string_pos</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>string_pos</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>string_pos</name>++ = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>string_pos</name> = '\0'</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr>"base"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>base</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>base</name></expr>)</condition><then> <block>{
<goto>goto <name>menu_bail</name>;</goto>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>read_quoted</name><argument_list>(<argument><expr>&amp;<name>string_pos</name></expr></argument>, <argument><expr>&amp;<name>href_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr>"default"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mapdflt</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>mapdflt</name></expr>)</condition><then> <block>{
<goto>goto <name>menu_bail</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>mapdflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
<goto>goto <name>menu_bail</name>;</goto>
}</block></then></if>
<expr_stmt><expr><call><name>menu_default</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>imap_menu</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>,
<argument><expr><name>href_text</name> ? <name>href_text</name> : <name>mapdflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>vertex</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>vertex</name> &lt; <name>MAXVERTS</name> &amp;&amp;
<call><name>sscanf</name><argument_list>(<argument><expr><name>string_pos</name></expr></argument>, <argument><expr>"%lf%*[, ]%lf"</expr></argument>,
<argument><expr>&amp;<name><name>pointarray</name><index>[<expr><name>vertex</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>pointarray</name><index>[<expr><name>vertex</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>)</argument_list></call> == 2</expr>)</condition> <block>{
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>vertex</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>pointarray</name><index>[<expr><name>vertex</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name> = -1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>href_text</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>read_quoted</name><argument_list>(<argument><expr>&amp;<name>string_pos</name></expr></argument>, <argument><expr>&amp;<name>href_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
<goto>goto <name>menu_bail</name>;</goto>
}</block></then></if>
<expr_stmt><expr><call><name>menu_directive</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>imap_menu</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>,
<argument><expr><name>href_text</name> ? <name>href_text</name> : <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>testpoint</name><index>[<expr><name>X</name></expr>]</index></name> == -1 || <name><name>pointarray</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name> == -1</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr>"poly"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>pointinpoly</name><argument_list>(<argument><expr><name>testpoint</name></expr></argument>, <argument><expr><name>pointarray</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<call><name>imap_reply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr>"circle"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>pointincircle</name><argument_list>(<argument><expr><name>testpoint</name></expr></argument>, <argument><expr><name>pointarray</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<call><name>imap_reply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr>"rect"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>pointinrect</name><argument_list>(<argument><expr><name>testpoint</name></expr></argument>, <argument><expr><name>pointarray</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<call><name>imap_reply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr>"point"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>is_closer</name><argument_list>(<argument><expr><name>testpoint</name></expr></argument>, <argument><expr><name>pointarray</name></expr></argument>, <argument><expr>&amp;<name>closest_yet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>closest</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>menu_footer</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>closest</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>closest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<call><name>imap_reply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>mapdflt</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>mapdflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<call><name>imap_reply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></then></if>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
<label><name>need_2_fields</name>:</label>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00679</expr></argument>)</argument_list></call>
"map file %s, line %d syntax error: requires at "
"least two fields"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>imap</name>-&gt;<name>line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>menu_bail</name>:</label>
<expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n\n[an internal server error occured]\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>menu_footer</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>imap_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name> || (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>,<argument><expr><name>IMAP_MAGIC_TYPE</name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"imap-file"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>imap_handler_internal</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>imap_handler</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>imagemap</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_imap_dir_config</name></expr>,
<expr><name>merge_imap_dir_configs</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>imap_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
