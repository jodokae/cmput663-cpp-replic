<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/loggers/mod_log_forensic.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_char.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>log_forensic_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <name>fcfg</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>logname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl>;</decl_stmt>
}</block></struct></type> <name>fcfg</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_uint32_t</name></type> <name>next_id</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>make_forensic_log_scfg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>fcfg</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>logname</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>fd</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_forensic_log_scfg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>parent</name></decl></param>, <param><decl><type><name>void</name> *</type><name>new</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>fcfg</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fcfg</name> *</type><name>pc</name> <init>= <expr><name>parent</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fcfg</name> *</type><name>nc</name> <init>= <expr><name>new</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>logname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>nc</name>-&gt;<name>logname</name></name> ? <name><name>nc</name>-&gt;<name>logname</name></name> : <name><name>pc</name>-&gt;<name>logname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>fd</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>open_log</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>fcfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>log_forensic_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>cfg</name>-&gt;<name>logname</name></name> || <name><name>cfg</name>-&gt;<name>fd</name></name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<if>if <condition>(<expr>*<name><name>cfg</name>-&gt;<name>logname</name></name> == '|'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>piped_log</name> *</type><name>pl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pname</name> <init>= <expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>logname</name></name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pl</name> = <call><name>ap_open_piped_log</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pl</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00650</expr></argument>)</argument_list></call>
"couldn't spawn forensic log pipe %s"</expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>logname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>fd</name></name> = <call><name>ap_piped_log_write_fd</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name> <init>= <expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>logname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name><name>cfg</name>-&gt;<name>fd</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>,
<argument><expr><name>APR_WRITE</name> | <name>APR_APPEND</name> | <name>APR_CREATE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00651</expr></argument>)</argument_list></call>
"could not open forensic log file %s."</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
}</block></else></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pc</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pt</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<for>for ( <init>;</init> <condition><expr><name>s</name></expr> ;</condition> <incr><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>open_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>log_escape</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>q</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>e</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<for>for ( <init>;</init> <condition><expr>*<name>p</name></expr> ;</condition> <incr><expr>++<name>p</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>q</name> &lt; <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>test_char_table</name><index>[<expr>*(<name>unsigned</name> <name>char</name> *)<name>p</name></expr>]</index></name>&amp;<name>T_ESCAPE_FORENSIC</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>q</name>+2 &lt; <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>q</name>++ = '%'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_bin2hex</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> += 2</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>q</name>++ = *<name>p</name></expr>;</expr_stmt></else></if>
}</block></for>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>q</name> &lt; <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>q</name> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>q</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>hlog</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>count</name></decl>;</decl_stmt>
}</block></struct></type> <name>hlog</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>count_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<for>for (<init><expr><name>n</name> = 0</expr> ;</init> <condition><expr>*<name>p</name></expr> ;</condition> <incr><expr>++<name>p</name></expr>, <expr>++<name>n</name></expr></incr>)
<if>if <condition>(<expr><name><name>test_char_table</name><index>[<expr>*(<name>unsigned</name> <name>char</name> *)<name>p</name></expr>]</index></name>&amp;<name>T_ESCAPE_FORENSIC</name></expr>)</condition><then>
<expr_stmt><expr><name>n</name> += 2</expr>;</expr_stmt></then></if></for>
<return>return <expr><name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>count_headers</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>h_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>hlog</name> *</type><name>h</name> <init>= <expr><name>h_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>h</name>-&gt;<name>count</name></name> += <call><name>count_string</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call>+<call><name>count_string</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call>+2</expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_headers</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>h_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>hlog</name> *</type><name>h</name> <init>= <expr><name>h_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name><name>h</name>-&gt;<name>pos</name></name>++ = '|'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>-&gt;<name>pos</name></name> = <call><name>log_escape</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>pos</name></name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>end</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>h</name>-&gt;<name>pos</name></name>++ = ':'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>-&gt;<name>pos</name></name> = <call><name>log_escape</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>pos</name></name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>end</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_before</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>fcfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>log_forensic_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hlog</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>cfg</name>-&gt;<name>fd</name></name> || <name><name>r</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!(<name>id</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"UNIQUE_ID"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>id</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%" <name>APR_PID_T_FMT</name> ":%lx:%x"</expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>apr_atomic_inc32</name><argument_list>(<argument><expr>&amp;<name>next_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>log_forensic_module</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>.<name>p</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>.<name>count</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>count_headers</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>.<name>count</name></name> += 1+<call><name>strlen</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call>+1+<call><name>count_string</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>the_request</name></name></expr></argument>)</argument_list></call>+1+1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>.<name>log</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>h</name>.<name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>.<name>pos</name></name> = <name><name>h</name>.<name>log</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>.<name>end</name></name> = <name><name>h</name>.<name>log</name></name>+<name><name>h</name>.<name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>h</name>.<name>pos</name></name>++ = '+'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>h</name>.<name>pos</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>.<name>pos</name></name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>h</name>.<name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>h</name>.<name>pos</name></name>++ = '|'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>.<name>pos</name></name> = <call><name>log_escape</name><argument_list>(<argument><expr><name><name>h</name>.<name>pos</name></name></expr></argument>, <argument><expr><name><name>h</name>.<name>end</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>the_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>log_headers</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>h</name>.<name>pos</name></name> &lt; <name><name>h</name>.<name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>h</name>.<name>pos</name></name>++ = '\n'</expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <name><name>h</name>.<name>count</name></name>-1</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_write</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>fd</name></name></expr></argument>, <argument><expr><name><name>h</name>.<name>log</name></name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>n</name> == <name><name>h</name>.<name>count</name></name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"forensic-id"</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_after</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>fcfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>log_forensic_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>,
<argument><expr>&amp;<name>log_forensic_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>cfg</name>-&gt;<name>fd</name></name> || <name>id</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>s</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"-"</expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> = <name>n</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_write</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>fd</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>n</name> == <name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_forensic_log</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fn</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>fcfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>log_forensic_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>logname</name></name> = <name>fn</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>forensic_log_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ForensicLog"</expr></argument>, <argument><expr><name>set_forensic_log</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"the filename of the forensic log"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>pre</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mod_unique_id.c"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_hook_open_logs</name><argument_list>(<argument><expr><name>log_init</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>log_before</name></expr></argument>,<argument><expr><name>pre</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_log_transaction</name><argument_list>(<argument><expr><name>log_after</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>log_forensic</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>make_forensic_log_scfg</name></expr>,
<expr><name>merge_forensic_log_scfg</name></expr>,
<expr><name>forensic_log_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
