<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/arch/unix/mod_unixd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_unixd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PWD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_RESOURCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GRP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRINGS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SEM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sem.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PRCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/prctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_USER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_USER</name></cpp:macro> <cpp:value>"#-1"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_GROUP</name></cpp:macro> <cpp:value>"#-1"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
typedef struct {
const char *user_name;
uid_t user_id;
gid_t group_id;
const char *chroot_dir;
} unixd_config_t;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unixd.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>set_group_privs</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>geteuid</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ap_unixd_config</name>.<name>user_name</name><index>[<expr>0</expr>]</index></name> == '#'</expr>)</condition><then> <block>{
<decl_stmt><decl><type>struct <name>passwd</name> *</type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name> <init>= <expr><call><name>atol</name><argument_list>(<argument><expr>&amp;<name><name>ap_unixd_config</name>.<name>user_name</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>ent</name> = <call><name>getpwuid</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02155</expr></argument>)</argument_list></call>
"getpwuid: couldn't determine user name from uid %ld, "
"you probably need to modify the User directive"</expr></argument>,
<argument><expr>(<name>long</name>)<name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>name</name> = <name><name>ent</name>-&gt;<name>pw_name</name></name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>name</name> = <name><name>ap_unixd_config</name>.<name>user_name</name></name></expr>;</expr_stmt></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>setgid</name><argument_list>(<argument><expr><name><name>ap_unixd_config</name>.<name>group_id</name></name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02156</expr></argument>)</argument_list></call>
"setgid: unable to set group id to Group %ld"</expr></argument>,
<argument><expr>(<name>long</name>)<name><name>ap_unixd_config</name>.<name>group_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>initgroups</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ap_unixd_config</name>.<name>group_id</name></name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02157</expr></argument>)</argument_list></call>
"initgroups: unable to set groups for User %s "
"and Group %ld"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>(<name>long</name>)<name><name>ap_unixd_config</name>.<name>group_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>unixd_drop_privileges</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>set_group_privs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>NULL</name> != <name><name>ap_unixd_config</name>.<name>chroot_dir</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>geteuid</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02158</expr></argument>)</argument_list></call>
"Cannot chroot when not started as root"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><name><name>ap_unixd_config</name>.<name>chroot_dir</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02159</expr></argument>)</argument_list></call>
"Can't chdir to %s"</expr></argument>, <argument><expr><name><name>ap_unixd_config</name>.<name>chroot_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>chroot</name><argument_list>(<argument><expr><name><name>ap_unixd_config</name>.<name>chroot_dir</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02160</expr></argument>)</argument_list></call>
"Can't chroot to %s"</expr></argument>, <argument><expr><name><name>ap_unixd_config</name>.<name>chroot_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02161</expr></argument>)</argument_list></call>
"Can't chdir to new root"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>geteuid</name><argument_list>()</argument_list></call> &amp;&amp; (
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OSD_POSIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<call><name>os_init_job_environment</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ap_unixd_config</name>.<name>user_name</name></name></expr></argument>, <argument><expr><call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"DEBUG"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != 0 ||
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>setuid</name><argument_list>(<argument><expr><name><name>ap_unixd_config</name>.<name>user_id</name></name></expr></argument>)</argument_list></call> == -1)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02162</expr></argument>)</argument_list></call>
"setuid: unable to change to uid: %ld"</expr></argument>,
<argument><expr>(<name>long</name>) <name><name>ap_unixd_config</name>.<name>user_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PRCTL</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>PR_SET_DUMPABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>ap_coredumpdir_configured</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>prctl</name><argument_list>(<argument><expr><name>PR_SET_DUMPABLE</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02163</expr></argument>)</argument_list></call>
"set dumpable failed - this child will not coredump"
" after software errors"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>unixd_set_user</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>user_name</name></name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>user_id</name></name> = <call><name>ap_uname2id</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name> <argument_list>(<argument><expr><name>BIG_SECURITY_HOLE</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name> <argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>ap_unixd_config</name>.<name>user_id</name></name> == 0</expr>)</condition><then> <block>{
<return>return <expr>"Error:\tApache has not been designed to serve pages while\n"
"\trunning as root. There are known race conditions that\n"
"\twill allow any local user to read any file on the system.\n"
"\tIf you still desire to serve pages as root then\n"
"\tadd -DBIG_SECURITY_HOLE to the CFLAGS env variable\n"
"\tand then rebuild the server.\n"
"\tIt is strongly suggested that you instead modify the User\n"
"\tdirective in your httpd.conf file to list a non-root\n"
"\tuser.\n"</expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type>
<name>unixd_set_group</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>group_name</name></name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>group_id</name></name> = <call><name>ap_gname2id</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type>
<name>unixd_set_chroot_dir</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_is_directory</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"ChrootDir must be a valid directory"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>chroot_dir</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>unixd_set_suexec</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>ap_unixd_config</name>.<name>suexec_enabled</name></name> &amp;&amp; <name>arg</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"suEXEC isn't supported: "</expr></argument>,
<argument><expr><name><name>ap_unixd_config</name>.<name>suexec_disabled_reason</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>arg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>suexec_disabled_reason</name></name> = "Suexec directive is Off"</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>suexec_enabled</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>unixd_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>wrapper</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>user_name</name></name> = <name>DEFAULT_USER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>user_id</name></name> = <call><name>ap_uname2id</name><argument_list>(<argument><expr><name>DEFAULT_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>group_name</name></name> = <name>DEFAULT_GROUP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>group_id</name></name> = <call><name>ap_gname2id</name><argument_list>(<argument><expr><name>DEFAULT_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>chroot_dir</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>suexec_enabled</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>wrapper</name></expr></argument>, <argument><expr><name>SUEXEC_BIN</name></expr></argument>, <argument><expr><name>APR_FINFO_NORM</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call>)
== <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>wrapper</name>.<name>protection</name></name> &amp; <name>APR_USETID</name>) &amp;&amp; <name><name>wrapper</name>.<name>user</name></name> == 0
&amp;&amp; (<call><name>access</name><argument_list>(<argument><expr><name>SUEXEC_BIN</name></expr></argument>, <argument><expr><name>R_OK</name>|<name>X_OK</name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>suexec_enabled</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>suexec_disabled_reason</name></name> = ""</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>suexec_disabled_reason</name></name> =
"Invalid owner or file mode for " <name>SUEXEC_BIN</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ap_unixd_config</name>.<name>suexec_disabled_reason</name></name> =
"Missing suexec binary " <name>SUEXEC_BIN</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_sys_privileges_handlers</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_unixd_setup_child</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><call><name>set_group_privs</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>NULL</name> != <name><name>ap_unixd_config</name>.<name>chroot_dir</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>geteuid</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02164</expr></argument>)</argument_list></call>
"Cannot chroot when not started as root"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><name><name>ap_unixd_config</name>.<name>chroot_dir</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02165</expr></argument>)</argument_list></call>
"Can't chdir to %s"</expr></argument>, <argument><expr><name><name>ap_unixd_config</name>.<name>chroot_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>chroot</name><argument_list>(<argument><expr><name><name>ap_unixd_config</name>.<name>chroot_dir</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02166</expr></argument>)</argument_list></call>
"Can't chroot to %s"</expr></argument>, <argument><expr><name><name>ap_unixd_config</name>.<name>chroot_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02167</expr></argument>)</argument_list></call>
"Can't chdir to new root"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>geteuid</name><argument_list>()</argument_list></call> &amp;&amp; (
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OSD_POSIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<call><name>os_init_job_environment</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ap_unixd_config</name>.<name>user_name</name></name></expr></argument>, <argument><expr><call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"DEBUG"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != 0 ||
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>setuid</name><argument_list>(<argument><expr><name><name>ap_unixd_config</name>.<name>user_id</name></name></expr></argument>)</argument_list></call> == -1)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02168</expr></argument>)</argument_list></call>
"setuid: unable to change to uid: %ld"</expr></argument>,
<argument><expr>(<name>long</name>) <name><name>ap_unixd_config</name>.<name>user_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PRCTL</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>PR_SET_DUMPABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>ap_coredumpdir_configured</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>prctl</name><argument_list>(<argument><expr><name>PR_SET_DUMPABLE</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02169</expr></argument>)</argument_list></call>
"set dumpable failed - this child will not coredump"
" after software errors"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>0</expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type> <name>unixd_dump_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uid_t</name></type> <name>uid</name> <init>= <expr><name><name>ap_unixd_config</name>.<name>user_id</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_gid_t</name></type> <name>gid</name> <init>= <expr><name><name>ap_unixd_config</name>.<name>group_id</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>no_root</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"DUMP_RUN_CFG"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>geteuid</name><argument_list>()</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><name>no_root</name> = " not_used"</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"User: name=\"%s\" id=%lu%s\n"</expr></argument>,
<argument><expr><name><name>ap_unixd_config</name>.<name>user_name</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>long</name>)<name>uid</name></expr></argument>, <argument><expr><name>no_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Group: name=\"%s\" id=%lu%s\n"</expr></argument>,
<argument><expr><name><name>ap_unixd_config</name>.<name>group_name</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>long</name>)<name>gid</name></expr></argument>, <argument><expr><name>no_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ap_unixd_config</name>.<name>chroot_dir</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"ChrootDir: \"%s\"%s\n"</expr></argument>,
<argument><expr><name><name>ap_unixd_config</name>.<name>chroot_dir</name></name></expr></argument>, <argument><expr><name>no_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>unixd_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>unixd_pre_config</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_test_config</name><argument_list>(<argument><expr><name>unixd_dump_config</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_drop_privileges</name><argument_list>(<argument><expr><name>unixd_drop_privileges</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>unixd_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"User"</expr></argument>, <argument><expr><name>unixd_set_user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Effective user id for this server"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"Group"</expr></argument>, <argument><expr><name>unixd_set_group</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Effective group id for this server"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ChrootDir"</expr></argument>, <argument><expr><name>unixd_set_chroot_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The directory to chroot(2) into"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"Suexec"</expr></argument>, <argument><expr><name>unixd_set_suexec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Enable or disable suEXEC support"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>unixd</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>unixd_cmds</name></expr>,
<expr><name>unixd_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
