<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/ssl/ssl_util_stapling.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_mutex.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stapling_cache_mutex_on</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>stapling_cache_mutex_off</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STAPLING_DER</name></cpp:macro> <cpp:value>10240</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>UCHAR</name></type> <name><name>idx</name><index>[<expr><name>SHA_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OCSP_CERTID</name> *</type><name>cid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>uri</name></decl>;</decl_stmt>
}</block></struct></type> <name>certinfo</name>;</typedef>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_stapling_certid_free</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>OCSP_CERTID</name> *</type><name>cid</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cid</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>OCSP_CERTID_free</name><argument_list>(<argument><expr><name>cid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>stapling_certinfo</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>ssl_stapling_certinfo_hash_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>stapling_certinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>X509</name> *</type><name>stapling_get_issuer</name><parameter_list>(<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>X509</name> *</type><name>issuer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_STORE</name> *</type><name>st</name> <init>= <expr><call><name>SSL_CTX_get_cert_store</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_STORE_CTX</name> *</type><name>inctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> *<name>extra_certs</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL_INTERN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_get_extra_chain_certs</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>, <argument><expr>&amp;<name>extra_certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>extra_certs</name> = <name><name>mctx</name>-&gt;<name>ssl_ctx</name>-&gt;<name>extra_certs</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>sk_X509_num</name><argument_list>(<argument><expr><name>extra_certs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>issuer</name> = <call><name>sk_X509_value</name><argument_list>(<argument><expr><name>extra_certs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>X509_check_issued</name><argument_list>(<argument><expr><name>issuer</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> == <name>X509_V_OK</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &lt; 0x10100000L</expr></cpp:if>
<expr_stmt><expr><call><name>CRYPTO_add</name><argument_list>(<argument><expr>&amp;<name><name>issuer</name>-&gt;<name>references</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>CRYPTO_LOCK_X509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>X509_up_ref</name><argument_list>(<argument><expr><name>issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>issuer</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>inctx</name> = <call><name>X509_STORE_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>X509_STORE_CTX_init</name><argument_list>(<argument><expr><name>inctx</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>X509_STORE_CTX_get1_issuer</name><argument_list>(<argument><expr>&amp;<name>issuer</name></expr></argument>, <argument><expr><name>inctx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then>
<expr_stmt><expr><name>issuer</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>X509_STORE_CTX_cleanup</name><argument_list>(<argument><expr><name>inctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>X509_STORE_CTX_free</name><argument_list>(<argument><expr><name>inctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>issuer</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>ssl_stapling_init_cert</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>UCHAR</name></type> <name><name>idx</name><index>[<expr><name>SHA_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>certinfo</name> *</type><name>cinf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509</name> *</type><name>issuer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OCSP_CERTID</name> *</type><name>cid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>OPENSSL_STRING</name></expr></argument>)</argument_list></call> *<name>aia</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>x</name> == <name>NULL</name>) || (<call><name>X509_digest</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>EVP_sha1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != 1)</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>cinf</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>stapling_certinfo</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cinf</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>cinf</name>-&gt;<name>uri</name></name> &amp;&amp; !<name><name>mctx</name>-&gt;<name>stapling_force_url</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_log_xerror</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02814</expr></argument>)</argument_list></call> "ssl_stapling_init_cert: no OCSP URI "
"in certificate and no SSLStaplingForceURL "
"configured for server %s"</expr></argument>, <argument><expr><name><name>mctx</name>-&gt;<name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!(<name>issuer</name> = <call><name>stapling_get_issuer</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_log_xerror</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02217</expr></argument>)</argument_list></call>
"ssl_stapling_init_cert: can't retrieve issuer "
"certificate!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cid</name> = <call><name>OCSP_cert_to_id</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>cid</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_log_xerror</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02815</expr></argument>)</argument_list></call>
"ssl_stapling_init_cert: can't create CertID "
"for OCSP request"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>aia</name> = <call><name>X509_get1_ocsp</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>aia</name> &amp;&amp; !<name><name>mctx</name>-&gt;<name>stapling_force_url</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>OCSP_CERTID_free</name><argument_list>(<argument><expr><name>cid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_xerror</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02218</expr></argument>)</argument_list></call> "ssl_stapling_init_cert: no OCSP URI "
"in certificate and no SSLStaplingForceURL set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cinf</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>certinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>cinf</name>-&gt;<name>idx</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cinf</name>-&gt;<name>cid</name></name> = <name>cid</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cid</name></expr></argument>, <argument><expr><name>ssl_stapling_certid_free</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>aia</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cinf</name>-&gt;<name>uri</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>sk_OPENSSL_STRING_value</name><argument_list>(<argument><expr><name>aia</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>X509_email_free</name><argument_list>(<argument><expr><name>aia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ssl_log_xerror</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,
<argument><expr>"ssl_stapling_init_cert: storing certinfo for server %s"</expr></argument>,
<argument><expr><name><name>mctx</name>-&gt;<name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>stapling_certinfo</name></expr></argument>, <argument><expr><name><name>cinf</name>-&gt;<name>idx</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cinf</name>-&gt;<name>idx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cinf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>certinfo</name> *</type><name>stapling_get_certinfo</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>,
<param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>certinfo</name> *</type><name>cinf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509</name> *</type><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UCHAR</name></type> <name><name>idx</name><index>[<expr><name>SHA_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> = <call><name>SSL_get_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>x</name> == <name>NULL</name>) || (<call><name>X509_digest</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>EVP_sha1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != 1)</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>cinf</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>stapling_certinfo</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cinf</name> &amp;&amp; <name><name>cinf</name>-&gt;<name>cid</name></name></expr>)</condition><then>
<return>return <expr><name>cinf</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01926</expr></argument>)</argument_list></call>
"stapling_get_certinfo: stapling not supported for certificate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>stapling_cache_response</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>,
<param><decl><type><name>OCSP_RESPONSE</name> *</type><name>rsp</name></decl></param>, <param><decl><type><name>certinfo</name> *</type><name>cinf</name></decl></param>,
<param><decl><type><name>BOOL</name></type> <name>ok</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>resp_der</name><index>[<expr><name>MAX_STAPLING_DER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>resp_derlen</name></decl>, <decl><type ref="prev"/><name>stored_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl>;</decl_stmt>
<expr_stmt><expr><name>resp_derlen</name> = <call><name>i2d_OCSP_RESPONSE</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>resp_derlen</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01927</expr></argument>)</argument_list></call>
"OCSP stapling response encode error??"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>stored_len</name> = <name>resp_derlen</name> + 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>stored_len</name> &gt; sizeof <name>resp_der</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01928</expr></argument>)</argument_list></call>
"OCSP stapling response too big (%u bytes)"</expr></argument>, <argument><expr><name>resp_derlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>p</name> = <name>resp_der</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ok</name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p</name>++ = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>expiry</name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>stapling_cache_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>p</name>++ = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>expiry</name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>stapling_errcache_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>expiry</name> += <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>i2d_OCSP_RESPONSE</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>, <argument><expr>&amp;<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>stapling_cache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then>
<expr_stmt><expr><call><name>stapling_cache_mutex_on</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>rv</name> = <call><name><name>mc</name>-&gt;<name>stapling_cache</name>-&gt;<name>store</name></name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>stapling_cache_context</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><name><name>cinf</name>-&gt;<name>idx</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cinf</name>-&gt;<name>idx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>expiry</name></expr></argument>, <argument><expr><name>resp_der</name></expr></argument>, <argument><expr><name>stored_len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>stapling_cache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then>
<expr_stmt><expr><call><name>stapling_cache_mutex_off</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01929</expr></argument>)</argument_list></call>
"stapling_cache_response: OCSP response session store error!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stapling_get_cached_response</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>OCSP_RESPONSE</name> **</type><name>prsp</name></decl></param>,
<param><decl><type><name>BOOL</name> *</type><name>pok</name></decl></param>, <param><decl><type><name>certinfo</name> *</type><name>cinf</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OCSP_RESPONSE</name> *</type><name>rsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>resp_der</name><index>[<expr><name>MAX_STAPLING_DER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>resp_derlen</name> <init>= <expr><name>MAX_STAPLING_DER</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>stapling_cache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then>
<expr_stmt><expr><call><name>stapling_cache_mutex_on</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>rv</name> = <call><name><name>mc</name>-&gt;<name>stapling_cache</name>-&gt;<name>retrieve</name></name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>stapling_cache_context</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><name><name>cinf</name>-&gt;<name>idx</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cinf</name>-&gt;<name>idx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>resp_der</name></expr></argument>, <argument><expr>&amp;<name>resp_derlen</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>stapling_cache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then>
<expr_stmt><expr><call><name>stapling_cache_mutex_off</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01930</expr></argument>)</argument_list></call>
"stapling_get_cached_response: cache miss"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name>resp_derlen</name> &lt;= 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01931</expr></argument>)</argument_list></call>
"stapling_get_cached_response: response length invalid??"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>p</name> = <name>resp_der</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>p</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pok</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>pok</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>resp_derlen</name>--</expr>;</expr_stmt>
<expr_stmt><expr><name>rsp</name> = <call><name>d2i_OCSP_RESPONSE</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>p</name></expr></argument>, <argument><expr><name>resp_derlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>rsp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01932</expr></argument>)</argument_list></call>
"stapling_get_cached_response: response parse error??"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01933</expr></argument>)</argument_list></call>
"stapling_get_cached_response: cache hit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>prsp</name> = <name>rsp</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stapling_set_response</name><parameter_list>(<param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>, <param><decl><type><name>OCSP_RESPONSE</name> *</type><name>rsp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rspderlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>rspder</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rspderlen</name> = <call><name>i2d_OCSP_RESPONSE</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>, <argument><expr>&amp;<name>rspder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rspderlen</name> &lt;= 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>SSL_set_tlsext_status_ocsp_resp</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>rspder</name></expr></argument>, <argument><expr><name>rspderlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stapling_check_response</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>,
<param><decl><type><name>certinfo</name> *</type><name>cinf</name></decl></param>, <param><decl><type><name>OCSP_RESPONSE</name> *</type><name>rsp</name></decl></param>,
<param><decl><type><name>BOOL</name> *</type><name>pok</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name>V_OCSP_CERTSTATUS_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reason</name> <init>= <expr><name>OCSP_REVOKED_STATUS_NOSTATUS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OCSP_BASICRESP</name> *</type><name>bs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASN1_GENERALIZEDTIME</name> *</type><name>rev</name></decl>, *<decl><type ref="prev"/><name>thisupd</name></decl>, *<decl><type ref="prev"/><name>nextupd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>response_status</name> <init>= <expr><call><name>OCSP_response_status</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><name>SSL_TLSEXT_ERR_OK</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>pok</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pok</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>response_status</name> != <name>OCSP_RESPONSE_STATUS_SUCCESSFUL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>stapling_return_errors</name></name></expr>)</condition><then>
<return>return <expr><name>SSL_TLSEXT_ERR_OK</name></expr>;</return></then>
<else>else
<return>return <expr><name>SSL_TLSEXT_ERR_NOACK</name></expr>;</return></else></if>
}</block></then></if>
<expr_stmt><expr><name>bs</name> = <call><name>OCSP_response_get1_basic</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bs</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01934</expr></argument>)</argument_list></call>
"stapling_check_response: Error Parsing Response!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SSL_TLSEXT_ERR_OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>OCSP_resp_find_status</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name><name>cinf</name>-&gt;<name>cid</name></name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr>&amp;<name>reason</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>,
<argument><expr>&amp;<name>thisupd</name></expr></argument>, <argument><expr>&amp;<name>nextupd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01935</expr></argument>)</argument_list></call>
"stapling_check_response: certificate ID not present in response!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>stapling_return_errors</name></name> == <name>FALSE</name></expr>)</condition><then>
<expr_stmt><expr><name>rv</name> = <name>SSL_TLSEXT_ERR_NOACK</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>OCSP_check_validity</name><argument_list>(<argument><expr><name>thisupd</name></expr></argument>, <argument><expr><name>nextupd</name></expr></argument>,
<argument><expr><name><name>mctx</name>-&gt;<name>stapling_resptime_skew</name></name></expr></argument>,
<argument><expr><name><name>mctx</name>-&gt;<name>stapling_resp_maxage</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>pok</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pok</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>pok</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01936</expr></argument>)</argument_list></call>
"stapling_check_response: response times invalid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01937</expr></argument>)</argument_list></call>
"stapling_check_response: cached response expired"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>rv</name> = <name>SSL_TLSEXT_ERR_NOACK</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>status</name> != <name>V_OCSP_CERTSTATUS_GOOD</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>snum</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name> <init>= <expr><block>{ <expr>'\0'</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> *</type><name>bio</name> <init>= <expr><call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>bio</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASN1_INTEGER</name> *</type><name>pserial</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>OCSP_id_get0_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>pserial</name></expr></argument>, <argument><expr><name><name>cinf</name>-&gt;<name>cid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<call><name>i2a_ASN1_INTEGER</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>pserial</name></expr></argument>)</argument_list></call> != -1) &amp;&amp;
((<name>n</name> = <call><name>BIO_read</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>snum</name></expr></argument>, <argument><expr>sizeof <name>snum</name> - 1</expr></argument>)</argument_list></call>) &gt; 0)</expr>)</condition><then>
<expr_stmt><expr><name><name>snum</name><index>[<expr><name>n</name></expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02969</expr></argument>)</argument_list></call>
"stapling_check_response: response has certificate "
"status %s (reason: %s) for serial number %s"</expr></argument>,
<argument><expr><call><name>OCSP_cert_status_str</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>reason</name> != <name>OCSP_REVOKED_STATUS_NOSTATUS</name>) ?
<call><name>OCSP_crl_reason_str</name><argument_list>(<argument><expr><name>reason</name></expr></argument>)</argument_list></call> : "n/a"</expr></argument>,
<argument><expr><name><name>snum</name><index>[<expr>0</expr>]</index></name> ? <name>snum</name> : "[n/a]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>stapling_return_errors</name></name> == <name>FALSE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>pok</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pok</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>rv</name> = <name>SSL_TLSEXT_ERR_NOACK</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>OCSP_BASICRESP_free</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>stapling_renew_response</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>, <param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>,
<param><decl><type><name>certinfo</name> *</type><name>cinf</name></decl></param>, <param><decl><type><name>OCSP_RESPONSE</name> **</type><name>prsp</name></decl></param>,
<param><decl><type><name>BOOL</name> *</type><name>pok</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>conn</name> <init>= <expr>(<name>conn_rec</name> *)<call><name>SSL_get_app_data</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>vpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OCSP_REQUEST</name> *</type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OCSP_CERTID</name> *</type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_EXTENSION</name></expr></argument>)</argument_list></call> *<name>exts</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>rv</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ocspuri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>uri</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>prsp</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01938</expr></argument>)</argument_list></call>
"stapling_renew_response: querying responder"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>req</name> = <call><name>OCSP_REQUEST_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>req</name></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><name>id</name> = <call><name>OCSP_CERTID_dup</name><argument_list>(<argument><expr><name><name>cinf</name>-&gt;<name>cid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>id</name></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<if>if <condition>(<expr>!<call><name>OCSP_request_add0_id</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><name>id</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_get_tlsext_status_exts</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr>&amp;<name>exts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>sk_X509_EXTENSION_num</name><argument_list>(<argument><expr><name>exts</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>X509_EXTENSION</name> *</type><name>ext</name> <init>= <expr><call><name>sk_X509_EXTENSION_value</name><argument_list>(<argument><expr><name>exts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>OCSP_REQUEST_add_ext</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>stapling_force_url</name></name></expr>)</condition><then>
<expr_stmt><expr><name>ocspuri</name> = <name><name>mctx</name>-&gt;<name>stapling_force_url</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>ocspuri</name> = <name><name>cinf</name>-&gt;<name>uri</name></name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>!<name>ocspuri</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02621</expr></argument>)</argument_list></call>
"stapling_renew_response: no uri for responder"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>FALSE</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>vpool</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_uri_parse</name><argument_list>(<argument><expr><name>vpool</name></expr></argument>, <argument><expr><name>ocspuri</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01939</expr></argument>)</argument_list></call>
"stapling_renew_response: Error parsing uri %s"</expr></argument>,
<argument><expr><name>ocspuri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>FALSE</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>uri</name>.<name>scheme</name></name></expr></argument>, <argument><expr>"http"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01940</expr></argument>)</argument_list></call>
"stapling_renew_response: Unsupported uri %s"</expr></argument>, <argument><expr><name>ocspuri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>FALSE</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
}</block></then></if></else></if>
<if>if <condition>(<expr>!<name><name>uri</name>.<name>port</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>uri</name>.<name>port</name></name> = <call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr><name><name>uri</name>.<name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>prsp</name> = <call><name>modssl_dispatch_ocsp_request</name><argument_list>(<argument><expr>&amp;<name>uri</name></expr></argument>, <argument><expr><name><name>mctx</name>-&gt;<name>stapling_responder_timeout</name></name></expr></argument>,
<argument><expr><name>req</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>vpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>vpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>prsp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01941</expr></argument>)</argument_list></call>
"stapling_renew_response: responder error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>stapling_fake_trylater</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>prsp</name> = <call><name>OCSP_response_create</name><argument_list>(<argument><expr><name>OCSP_RESPONSE_STATUS_TRYLATER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<goto>goto <name>done</name>;</goto>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>response_status</name> <init>= <expr><call><name>OCSP_response_status</name><argument_list>(<argument><expr>*<name>prsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>response_status</name> == <name>OCSP_RESPONSE_STATUS_SUCCESSFUL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01942</expr></argument>)</argument_list></call>
"stapling_renew_response: query response received"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stapling_check_response</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>cinf</name></expr></argument>, <argument><expr>*<name>prsp</name></expr></argument>, <argument><expr><name>pok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>pok</name> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01943</expr></argument>)</argument_list></call>
"stapling_renew_response: error in retrieved response!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01944</expr></argument>)</argument_list></call>
"stapling_renew_response: responder error %s"</expr></argument>,
<argument><expr><call><name>OCSP_response_status_str</name><argument_list>(<argument><expr><name>response_status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pok</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<if>if <condition>(<expr><call><name>stapling_cache_response</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr>*<name>prsp</name></expr></argument>, <argument><expr><name>cinf</name></expr></argument>, <argument><expr>*<name>pok</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01945</expr></argument>)</argument_list></call>
"stapling_renew_response: error caching response!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<label><name>done</name>:</label>
<if>if <condition>(<expr><name>id</name></expr>)</condition><then>
<expr_stmt><expr><call><name>OCSP_CERTID_free</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>req</name></expr>)</condition><then>
<expr_stmt><expr><call><name>OCSP_REQUEST_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>rv</name></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><name>rv</name> = <name>FALSE</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_stapling_mutex_init</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>stapling_refresh_mutex</name></name> || <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_enabled</name></name> != <name>TRUE</name></expr>)</condition><then> <block>{
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>stapling_cache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_global_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>mc</name>-&gt;<name>stapling_cache_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SSL_STAPLING_CACHE_MUTEX_TYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_global_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>mc</name>-&gt;<name>stapling_refresh_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SSL_STAPLING_REFRESH_MUTEX_TYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stapling_mutex_reinit_helper</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_global_mutex_t</name> **</type><name>mutex</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lockfile</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lockfile</name> = <call><name>apr_global_mutex_lockfile</name><argument_list>(<argument><expr>*<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_global_mutex_child_init</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>,
<argument><expr><name>lockfile</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>lockfile</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01946</expr></argument>)</argument_list></call>
"Cannot reinit %s mutex with file `%s'"</expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name>lockfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01947</expr></argument>)</argument_list></call>
"Cannot reinit %s mutex"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>ssl_stapling_mutex_reinit</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>stapling_cache_mutex</name></name> != <name>NULL</name>
&amp;&amp; <call><name>stapling_mutex_reinit_helper</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name><name>mc</name>-&gt;<name>stapling_cache_mutex</name></name></expr></argument>,
<argument><expr><name>SSL_STAPLING_CACHE_MUTEX_TYPE</name></expr></argument>)</argument_list></call> == <name>FALSE</name></expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>stapling_refresh_mutex</name></name> != <name>NULL</name>
&amp;&amp; <call><name>stapling_mutex_reinit_helper</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name><name>mc</name>-&gt;<name>stapling_refresh_mutex</name></name></expr></argument>,
<argument><expr><name>SSL_STAPLING_REFRESH_MUTEX_TYPE</name></expr></argument>)</argument_list></call> == <name>FALSE</name></expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stapling_mutex_on</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_global_mutex_t</name> *</type><name>mutex</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01948</expr></argument>)</argument_list></call>
"Failed to acquire OCSP %s lock"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stapling_mutex_off</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_global_mutex_t</name> *</type><name>mutex</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01949</expr></argument>)</argument_list></call>
"Failed to release OCSP %s lock"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stapling_cache_mutex_on</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>stapling_mutex_on</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mc</name>-&gt;<name>stapling_cache_mutex</name></name></expr></argument>,
<argument><expr><name>SSL_STAPLING_CACHE_MUTEX_TYPE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stapling_cache_mutex_off</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>stapling_mutex_off</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mc</name>-&gt;<name>stapling_cache_mutex</name></name></expr></argument>,
<argument><expr><name>SSL_STAPLING_CACHE_MUTEX_TYPE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stapling_refresh_mutex_on</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>stapling_mutex_on</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mc</name>-&gt;<name>stapling_refresh_mutex</name></name></expr></argument>,
<argument><expr><name>SSL_STAPLING_REFRESH_MUTEX_TYPE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stapling_refresh_mutex_off</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>stapling_mutex_off</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mc</name>-&gt;<name>stapling_refresh_mutex</name></name></expr></argument>,
<argument><expr><name>SSL_STAPLING_REFRESH_MUTEX_TYPE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>get_and_check_cached_response</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>,
<param><decl><type><name>OCSP_RESPONSE</name> **</type><name>rsp</name></decl></param>, <param><decl><type><name>BOOL</name> *</type><name>pok</name></decl></param>,
<param><decl><type><name>certinfo</name> *</type><name>cinf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>BOOL</name></type> <name>ok</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr>*<name>rsp</name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stapling_get_cached_response</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>, <argument><expr>&amp;<name>ok</name></expr></argument>, <argument><expr><name>cinf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>rsp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01953</expr></argument>)</argument_list></call>
"stapling_cb: retrieved cached response"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>stapling_check_response</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>cinf</name></expr></argument>, <argument><expr>*<name>rsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>SSL_TLSEXT_ERR_ALERT_FATAL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>OCSP_RESPONSE_free</name><argument_list>(<argument><expr>*<name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>rsp</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SSL_TLSEXT_ERR_ALERT_FATAL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> == <name>SSL_TLSEXT_ERR_NOACK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>OCSP_RESPONSE_free</name><argument_list>(<argument><expr>*<name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>rsp</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>mctx</name>-&gt;<name>stapling_return_errors</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>OCSP_RESPONSE_free</name><argument_list>(<argument><expr>*<name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>rsp</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pok</name> = <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>SSL_TLSEXT_ERR_NOACK</name></expr>;</return>
}</block></then></if></else></if>
}</block></then></if></else></if>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stapling_cb</name><parameter_list>(<param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>conn</name> <init>= <expr>(<name>conn_rec</name> *)<call><name>SSL_get_app_data</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><call><name>mySrvFromConn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>myConnConfig</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name> <init>= <expr><call><name>myCtxConfig</name><argument_list>(<argument><expr><name>sslconn</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>certinfo</name> *</type><name>cinf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OCSP_RESPONSE</name> *</type><name>rsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ok</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_enabled</name></name> != <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01950</expr></argument>)</argument_list></call>
"stapling_cb: OCSP Stapling disabled"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SSL_TLSEXT_ERR_NOACK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01951</expr></argument>)</argument_list></call>
"stapling_cb: OCSP Stapling callback called"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cinf</name> = <call><name>stapling_get_certinfo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cinf</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>SSL_TLSEXT_ERR_NOACK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01952</expr></argument>)</argument_list></call>
"stapling_cb: retrieved cached certificate data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>get_and_check_cached_response</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr>&amp;<name>rsp</name></expr></argument>, <argument><expr>&amp;<name>ok</name></expr></argument>, <argument><expr><name>cinf</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != 0</expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rsp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01954</expr></argument>)</argument_list></call>
"stapling_cb: renewing cached response"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stapling_refresh_mutex_on</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>get_and_check_cached_response</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr>&amp;<name>rsp</name></expr></argument>, <argument><expr>&amp;<name>ok</name></expr></argument>, <argument><expr><name>cinf</name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03236</expr></argument>)</argument_list></call>
"stapling_cb: error checking for cached response "
"after obtaining refresh mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stapling_refresh_mutex_off</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rsp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03237</expr></argument>)</argument_list></call>
"stapling_cb: don't need to refresh cached response "
"after obtaining refresh mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stapling_refresh_mutex_off</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03238</expr></argument>)</argument_list></call>
"stapling_cb: still must refresh cached response "
"after obtaining refresh mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>stapling_renew_response</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>cinf</name></expr></argument>, <argument><expr>&amp;<name>rsp</name></expr></argument>, <argument><expr>&amp;<name>ok</name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stapling_refresh_mutex_off</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03040</expr></argument>)</argument_list></call>
"stapling_cb: success renewing response"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01955</expr></argument>)</argument_list></call>
"stapling_cb: fatal error renewing response"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SSL_TLSEXT_ERR_ALERT_FATAL</name></expr>;</return>
}</block></else></if>
}</block></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>rsp</name> &amp;&amp; ((<name>ok</name> == <name>TRUE</name>) || (<name><name>mctx</name>-&gt;<name>stapling_return_errors</name></name> == <name>TRUE</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01956</expr></argument>)</argument_list></call>
"stapling_cb: setting response"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>stapling_set_response</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SSL_TLSEXT_ERR_ALERT_FATAL</name></expr>;</return></then></if>
<return>return <expr><name>SSL_TLSEXT_ERR_OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01957</expr></argument>)</argument_list></call>
"stapling_cb: no suitable response available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SSL_TLSEXT_ERR_NOACK</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>modssl_init_stapling</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSL_CTX</name> *</type><name>ctx</name> <init>= <expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>stapling_cache</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01958</expr></argument>)</argument_list></call>
"SSLStapling: no stapling cache available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ssl_stapling_mutex_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01959</expr></argument>)</argument_list></call>
"SSLStapling: cannot initialise stapling mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>stapling_resptime_skew</name></name> == <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_resptime_skew</name></name> = 60 * 5</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>stapling_cache_timeout</name></name> == <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_cache_timeout</name></name> = 3600</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>stapling_return_errors</name></name> == <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_return_errors</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>stapling_fake_trylater</name></name> == <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_fake_trylater</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>stapling_errcache_timeout</name></name> == <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_errcache_timeout</name></name> = 600</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>stapling_responder_timeout</name></name> == <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_responder_timeout</name></name> = 10 * <name>APR_USEC_PER_SEC</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SSL_CTX_set_tlsext_status_cb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>stapling_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01960</expr></argument>)</argument_list></call> "OCSP stapling initialized"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
