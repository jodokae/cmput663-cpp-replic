<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/ssl/ssl_engine_log.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_private.h"</cpp:file></cpp:include>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cpPattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cpAnnotation</name></decl>;</decl_stmt>
}</block> <decl><name><name>ssl_log_annotate</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"*envelope*bad*decrypt*"</expr>, <expr>"wrong pass phrase!?"</expr> }</block></expr>,
<expr><block>{ <expr>"*CLIENT_HELLO*unknown*protocol*"</expr>, <expr>"speaking not SSL to HTTPS port!?"</expr> }</block></expr>,
<expr><block>{ <expr>"*CLIENT_HELLO*http*request*"</expr>, <expr>"speaking HTTP to HTTPS port!?"</expr> }</block></expr>,
<expr><block>{ <expr>"*SSL3_READ_BYTES:sslv3*alert*bad*certificate*"</expr>, <expr>"Subject CN in certificate not server name or identical to CA!?"</expr> }</block></expr>,
<expr><block>{ <expr>"*self signed certificate in certificate chain*"</expr>, <expr>"Client certificate signed by CA not known to server?"</expr> }</block></expr>,
<expr><block>{ <expr>"*peer did not return a certificate*"</expr>, <expr>"No CAs known to server for verification?"</expr> }</block></expr>,
<expr><block>{ <expr>"*no shared cipher*"</expr>, <expr>"Too restrictive SSLCipherSuite or using DSA server certificate?"</expr> }</block></expr>,
<expr><block>{ <expr>"*no start line*"</expr>, <expr>"Bad file contents or format - or even just a forgotten SSLCertificateKeyFile?"</expr> }</block></expr>,
<expr><block>{ <expr>"*bad password read*"</expr>, <expr>"You entered an incorrect pass phrase!?"</expr> }</block></expr>,
<expr><block>{ <expr>"*bad mac decode*"</expr>, <expr>"Browser still remembered details of a re-created server certificate?"</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ssl_log_annotation</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>ssl_log_annotate</name><index>[<expr><name>i</name></expr>]</index></name>.<name>cpPattern</name> != <name>NULL</name>
&amp;&amp; <call><name>ap_strcmp_match</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name><name>ssl_log_annotate</name><index>[<expr><name>i</name></expr>]</index></name>.<name>cpPattern</name></expr></argument>)</argument_list></call> != 0</expr>)</condition>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt></while>
<return>return <expr><name><name>ssl_log_annotate</name><index>[<expr><name>i</name></expr>]</index></name>.<name>cpAnnotation</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ssl_die</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>s</name> != <name>NULL</name> &amp;&amp; <name><name>s</name>-&gt;<name>is_virtual</name></name> &amp;&amp; <name><name>s</name>-&gt;<name>error_fname</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02311</expr></argument>)</argument_list></call>
"Fatal error initialising mod_ssl, exiting. "
"See %s for more information"</expr></argument>,
<argument><expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>error_fname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02312</expr></argument>)</argument_list></call>
"Fatal error initialising mod_ssl, exiting."</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>ssl_log_ssl_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<while>while <condition>(<expr>(<name>e</name> = <call><name>ERR_peek_error_line_data</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>annotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>err</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name>flags</name> &amp; <name>ERR_TXT_STRING</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>data</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ERR_error_string_n</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr>sizeof <name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>annotation</name> = <call><name>ssl_log_annotation</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"SSL Library Error: %s%s%s%s%s%s"</expr></argument>,
<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>data</name> ? " (" : ""</expr></argument>, <argument><expr><name>data</name> ? <name>data</name> : ""</expr></argument>, <argument><expr><name>data</name> ? ")" : ""</expr></argument>,
<argument><expr><name>annotation</name> ? " -- " : ""</expr></argument>,
<argument><expr><name>annotation</name> ? <name>annotation</name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_log_cert_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>,
<param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl></param>,
<param><decl><type><name>va_list</name></type> <name>ap</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msglen</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>sizeof <name>buf</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msglen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cert</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>BIO</name> *</type><name>bio</name> <init>= <expr><call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>bio</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>maxdnlen</name> <init>= <expr>(<name>HUGE_STRING_LEN</name> - <name>msglen</name> - 300) / 2</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BIO_puts</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>" [subject: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <call><name>modssl_X509_NAME_to_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>maxdnlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strIsEmpty</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_puts</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>BIO_puts</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>"-empty-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>BIO_puts</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>" / issuer: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <call><name>modssl_X509_NAME_to_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>X509_get_issuer_name</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>maxdnlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strIsEmpty</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_puts</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>BIO_puts</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>"-empty-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>BIO_puts</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>" / serial: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>i2a_ASN1_INTEGER</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><call><name>X509_get_serialNumber</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<expr_stmt><expr><call><name>BIO_puts</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>"(ERROR)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>BIO_puts</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>" / notbefore: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASN1_TIME_print</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><call><name>X509_get_notBefore</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_puts</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>" / notafter: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASN1_TIME_print</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><call><name>X509_get_notAfter</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_puts</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>"]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <call><name>BIO_read</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>buf</name> + <name>msglen</name></expr></argument>, <argument><expr>sizeof <name>buf</name> - <name>msglen</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>msglen</name> + <name>n</name></expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name> + <name>msglen</name></expr></argument>, <argument><expr>sizeof <name>buf</name> - <name>msglen</name></expr></argument>,
<argument><expr>" [certificate: -not available-]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>s</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></function>
<function><type><name>void</name></type> <name>ssl_log_xerror</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>APLOG_IS_LEVEL</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_cert_error</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>,
<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>ssl_log_cxerror</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>APLOG_IS_LEVEL</name><argument_list>(<argument><expr><call><name>mySrvFromConn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_cert_error</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>ssl_log_rxerror</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>APLOG_R_IS_LEVEL</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_cert_error</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
</unit>
