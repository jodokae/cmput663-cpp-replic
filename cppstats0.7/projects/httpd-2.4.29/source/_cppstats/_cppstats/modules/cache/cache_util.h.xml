<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/modules/cache/cache_util.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CACHE_UTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_UTIL_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_vhost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_uri.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_atomic.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSEC_ONE_DAY</name></cpp:macro> <cpp:value>((apr_time_t)(86400*APR_USEC_PER_SEC))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSEC_ONE_HR</name></cpp:macro> <cpp:value>((apr_time_t)(3600*APR_USEC_PER_SEC))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSEC_ONE_MIN</name></cpp:macro> <cpp:value>((apr_time_t)(60*APR_USEC_PER_SEC))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSEC_ONE_SEC</name></cpp:macro> <cpp:value>((apr_time_t)(APR_USEC_PER_SEC))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CACHE_MAXEXPIRE</name></cpp:macro> <cpp:value>MSEC_ONE_DAY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CACHE_MINEXPIRE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CACHE_EXPIRE</name></cpp:macro> <cpp:value>MSEC_ONE_HR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CACHE_LMFACTOR</name></cpp:macro> <cpp:value>(0.1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CACHE_MAXAGE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_X_CACHE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_X_CACHE_DETAIL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CACHE_STALE_ON_ERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CACHE_LOCKPATH</name></cpp:macro> <cpp:value>"/mod_cache-lock"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_LOCKNAME_KEY</name></cpp:macro> <cpp:value>"mod_cache-lockname"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_LOCKFILE_KEY</name></cpp:macro> <cpp:value>"mod_cache-lockfile"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_CTX_KEY</name></cpp:macro> <cpp:value>"mod_cache-ctx"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_SEPARATOR</name></cpp:macro> <cpp:value>", \t"</cpp:value></cpp:define>
<struct>struct <name>cache_enable</name> <block>{
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>pathlen</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>cache_disable</name> <block>{
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>pathlen</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>cacheenable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>cachedisable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignore_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignore_session_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lockpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>lockmaxage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name> *</type><name>base_uri</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>ignorecachecontrol</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>ignorequerystring</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>quick</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>lock</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>x_cache</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>x_cache_detail</name>:1</expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_IGNORE_HEADERS_SET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_IGNORE_HEADERS_UNSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>ignore_headers_set</name>:1</expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_IGNORE_SESSION_ID_SET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_IGNORE_SESSION_ID_UNSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>ignore_session_id_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>base_uri_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>ignorecachecontrol_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>ignorequerystring_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>quick_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>lock_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>lockpath_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>lockmaxage_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>x_cache_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>x_cache_detail_set</name>:1</expr>;</expr_stmt>
}</block></struct></type> <name>cache_server_conf</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>minex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>maxex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>defex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>cacheenable</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>disable</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>x_cache</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>x_cache_detail</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>stale_on_error</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>no_last_mod_ignore</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>store_expired</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>store_private</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>store_nostore</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>minex_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>maxex_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>defex_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>factor_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>x_cache_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>x_cache_detail_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>stale_on_error_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>no_last_mod_ignore_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>store_expired_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>store_private_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>store_nostore_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>enable_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>disable_set</name>:1</expr>;</expr_stmt>
}</block></struct></type> <name>cache_dir_conf</name>;</typedef>
<typedef>typedef <type>struct <name>cache_provider_list</name></type> <name>cache_provider_list</name>;</typedef>
<struct>struct <name>cache_provider_list</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>cache_provider</name> *</type><name>provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_provider_list</name> *</type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>cache_provider_list</name> *</type><name>providers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>cache_provider</name> *</type><name>provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_handle_t</name> *</type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_handle_t</name> *</type><name>stale_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>stale_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_checked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>saved_brigade</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>saved_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>exp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>lastmod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_info</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>save_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>remove_url_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_control_t</name></type> <name>control_in</name></decl>;</decl_stmt>
}</block></struct></type> <name>cache_request_rec</name>;</typedef>
<function_decl><type><name>int</name></type> <name>ap_cache_check_no_cache</name><parameter_list>(<param><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ap_cache_check_no_store</name><parameter_list>(<param><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cache_check_freshness</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>cache_try_lock</name><parameter_list>(<param><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>cache_remove_lock</name><parameter_list>(<param><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>cache_provider_list</name> *</type><name>cache_get_providers</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>cache_table_getm</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>apr_table_t</name> *</type><name>t</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> *</type><name>cache_strqtok</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sep</name></decl></param>, <param><decl><type><name>char</name> **</type><name>last</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_table_t</name> *</type><name>cache_merge_headers_out</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cache_use_early_url</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
