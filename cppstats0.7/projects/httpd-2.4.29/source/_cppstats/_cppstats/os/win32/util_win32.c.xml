<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/os/win32/util_win32.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arch/win32/apr_arch_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arch/win32/apr_arch_misc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_os_proc_filepath</name><argument_list>(<argument>char **binpath</argument>, <argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_wchar_t</name></type> <name><name>wbinpath</name><index>[<expr><name>APR_PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>binlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wbinlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>GetModuleFileNameW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wbinpath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wbinpath</name></expr></argument>)</argument_list></sizeof>
/ <sizeof>sizeof<argument_list>(<argument><expr><name>apr_wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>wbinlen</name> = <call><name>wcslen</name><argument_list>(<argument><expr><name>wbinpath</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>binlen</name> = (<name>wbinlen</name> - 1) * 3 + 1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>binpath</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>binlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_conv_ucs2_to_utf8</name><argument_list>(<argument><expr><name>wbinpath</name></expr></argument>, <argument><expr>&amp;<name>wbinlen</name></expr></argument>, <argument><expr>*<name>binpath</name></expr></argument>, <argument><expr>&amp;<name>binlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>wbinlen</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pathbuf</name> <init>= <expr>(<name>char</name>*) <name>wbinpath</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wbinpath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>binpath</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_os_create_privileged_process</name><argument_list>(
<argument>const request_rec *r</argument>,
<argument>apr_proc_t *newproc</argument>, <argument>const char *progname</argument>,
<argument>const char * const *args</argument>,
<argument>const char * const *env</argument>,
<argument>apr_procattr_t *attr</argument>, <argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>apr_proc_create</name><argument_list>(<argument><expr><name>newproc</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>* <specifier>const</specifier></type> <name><name>lateDllName</name><index>[<expr><name>DLL_defined</name></expr>]</index></name> <init>= <expr><block>{
<expr>"kernel32"</expr>, <expr>"advapi32"</expr>, <expr>"mswsock"</expr>, <expr>"ws2_32"</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HMODULE</name></type> <name><name>lateDllHandle</name><index>[<expr><name>DLL_defined</name></expr>]</index></name> <init>= <expr><block>{
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>FARPROC</name></type> <name>ap_load_dll_func</name><parameter_list>(<param><decl><type><name>ap_dlltoken_e</name></type> <name>fnLib</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>fnName</name></decl></param>, <param><decl><type><name>int</name></type> <name>ordinal</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>lateDllHandle</name><index>[<expr><name>fnLib</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lateDllHandle</name><index>[<expr><name>fnLib</name></expr>]</index></name> = <call><name>LoadLibrary</name><argument_list>(<argument><expr><name><name>lateDllName</name><index>[<expr><name>fnLib</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>lateDllHandle</name><index>[<expr><name>fnLib</name></expr>]</index></name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>ordinal</name></expr>)</condition><then>
<return>return <expr><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>lateDllHandle</name><index>[<expr><name>fnLib</name></expr>]</index></name></expr></argument>, <argument><expr>(<name>char</name> *) <name>ordinal</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>lateDllHandle</name><index>[<expr><name>fnLib</name></expr>]</index></name></expr></argument>, <argument><expr><name>fnName</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><name>PSECURITY_ATTRIBUTES</name></type> <name>GetNullACL</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PSECURITY_DESCRIPTOR</name></type> <name>pSD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PSECURITY_ATTRIBUTES</name></type> <name>sa</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sa</name> = (<name>PSECURITY_ATTRIBUTES</name>) <call><name>LocalAlloc</name><argument_list>(<argument><expr><name>LPTR</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SECURITY_ATTRIBUTES</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name>-&gt;<name>nLength</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>SECURITY_ATTRIBUTES</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>pSD</name> = (<name>PSECURITY_DESCRIPTOR</name>) <call><name>LocalAlloc</name><argument_list>(<argument><expr><name>LPTR</name></expr></argument>, <argument><expr><name>SECURITY_DESCRIPTOR_MIN_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name>-&gt;<name>lpSecurityDescriptor</name></name> = <name>pSD</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pSD</name> == <name>NULL</name> || <name>sa</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>InitializeSecurityDescriptor</name><argument_list>(<argument><expr><name>pSD</name></expr></argument>, <argument><expr><name>SECURITY_DESCRIPTOR_REVISION</name></expr></argument>)</argument_list></call>
|| <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LocalFree</name><argument_list>( <argument><expr><name>pSD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>( <argument><expr><name>sa</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>SetSecurityDescriptorDacl</name><argument_list>(<argument><expr><name>pSD</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>(<name>PACL</name>) <name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call>
|| <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LocalFree</name><argument_list>( <argument><expr><name>pSD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>( <argument><expr><name>sa</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sa</name>-&gt;<name>bInheritHandle</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>sa</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>CleanNullACL</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>sa</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>sa</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr>((<name>PSECURITY_ATTRIBUTES</name>)<name>sa</name>)-&gt;<name>lpSecurityDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
</unit>
