<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/server/config.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_fnmatch.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_vhost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_cfgtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_varbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_UNSET</name></cpp:macro> <cpp:value>(APLOG_NO_MODULE - 1)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APLOG_MODULE_INDEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>AP_CORE_MODULE_INDEX</cpp:value></cpp:define>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>const</specifier> <name>char</name> *</type><name>ap_server_argv0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>const</specifier> <name>char</name> *</type><name>ap_server_root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>const</specifier> <name>char</name> *</type><name>ap_runtime_dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>server_rec</name> *</type><name>ap_server_conf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>apr_pool_t</name> *</type><name>ap_pglobal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>apr_array_header_t</name> *</type><name>ap_server_pre_read_config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>apr_array_header_t</name> *</type><name>ap_server_post_read_config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>apr_array_header_t</name> *</type><name>ap_server_config_defines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>ap_directive_t</name> *</type><name>ap_conftree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<macro><name>APR_HOOK_STRUCT</name><argument_list>(
<argument>APR_HOOK_LINK(header_parser)
APR_HOOK_LINK(pre_config)
APR_HOOK_LINK(check_config)
APR_HOOK_LINK(post_config)
APR_HOOK_LINK(open_logs)
APR_HOOK_LINK(child_init)
APR_HOOK_LINK(handler)
APR_HOOK_LINK(quick_handler)
APR_HOOK_LINK(optional_fn_retrieve)
APR_HOOK_LINK(test_config)
APR_HOOK_LINK(open_htaccess)</argument>
)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>, <argument>header_parser</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>, <argument>pre_config</argument>,
<argument>(apr_pool_t *pconf, apr_pool_t *plog,
apr_pool_t *ptemp)</argument>,
<argument>(pconf, plog, ptemp)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>, <argument>check_config</argument>,
<argument>(apr_pool_t *pconf, apr_pool_t *plog,
apr_pool_t *ptemp, server_rec *s)</argument>,
<argument>(pconf, plog, ptemp, s)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_VOID</name><argument_list>(<argument>test_config</argument>,
<argument>(apr_pool_t *pconf, server_rec *s)</argument>,
<argument>(pconf, s)</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>, <argument>post_config</argument>,
<argument>(apr_pool_t *pconf, apr_pool_t *plog,
apr_pool_t *ptemp, server_rec *s)</argument>,
<argument>(pconf, plog, ptemp, s)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>, <argument>open_logs</argument>,
<argument>(apr_pool_t *pconf, apr_pool_t *plog,
apr_pool_t *ptemp, server_rec *s)</argument>,
<argument>(pconf, plog, ptemp, s)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_VOID</name><argument_list>(<argument>child_init</argument>,
<argument>(apr_pool_t *pchild, server_rec *s)</argument>,
<argument>(pchild, s)</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>int</argument>, <argument>handler</argument>, <argument>(request_rec *r)</argument>,
<argument>(r)</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>int</argument>, <argument>quick_handler</argument>, <argument>(request_rec *r, int lookup)</argument>,
<argument>(r, lookup)</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>apr_status_t</argument>, <argument>open_htaccess</argument>,
<argument>(request_rec *r, const char *dir_name, const char *access_name,
ap_configfile_t **conffile, const char **full_name)</argument>,
<argument>(r, dir_name, access_name, conffile, full_name)</argument>,
<argument>AP_DECLINED</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>APR_HOOK_PROBES_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APR_HOOK_PROBES_ENABLED</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APR_HOOK_PROBE_ENTRY</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HOOK_PROBE_ENTRY</name><parameter_list>(<param><type><name>ud</name></type></param>,<param><type><name>ns</name></type></param>,<param><type><name>name</name></type></param>,<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APR_HOOK_PROBE_RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HOOK_PROBE_RETURN</name><parameter_list>(<param><type><name>ud</name></type></param>,<param><type><name>ns</name></type></param>,<param><type><name>name</name></type></param>,<param><type><name>rv</name></type></param>,<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APR_HOOK_PROBE_INVOKE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HOOK_PROBE_INVOKE</name><parameter_list>(<param><type><name>ud</name></type></param>,<param><type><name>ns</name></type></param>,<param><type><name>name</name></type></param>,<param><type><name>src</name></type></param>,<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APR_HOOK_PROBE_COMPLETE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HOOK_PROBE_COMPLETE</name><parameter_list>(<param><type><name>ud</name></type></param>,<param><type><name>ns</name></type></param>,<param><type><name>name</name></type></param>,<param><type><name>src</name></type></param>,<param><type><name>rv</name></type></param>,<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APR_HOOK_INT_DCL_UD</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HOOK_INT_DCL_UD</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_IMPLEMENT_HOOK_VOID</name><argument_list>(<argument>optional_fn_retrieve</argument>, <argument>(void)</argument>, <argument>()</argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>total_modules</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dynamic_modules</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>max_modules</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>conf_vector_length</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reserved_module_slots</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>module</name> *</type><name>ap_top_module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>module</name> **</type><name>ap_loaded_modules</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>ap_config_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> **</type><name>ap_module_short_names</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>handler_func</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name> *</type>(*<name>dir_maker_func</name>)<parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name> *</type>(*<name>merger_func</name>)<parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>merger_func</name> *</type><name>merger_func_cache</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_MAX_INCLUDE_DIR_DEPTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MAX_INCLUDE_DIR_DEPTH</name></cpp:macro> <cpp:value>(128)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>ap_conf_vector_t</name> *</type><name>create_empty_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>conf_vector</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof> * <name>conf_vector_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>conf_vector</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>ap_conf_vector_t</name> *</type><name>create_default_per_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> **</type><name>conf_vector</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof> * <name>conf_vector_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> *</type><name>modp</name></decl>;</decl_stmt>
<for>for (<init><expr><name>modp</name> = <name>ap_top_module</name></expr>;</init> <condition><expr><name>modp</name></expr>;</condition> <incr><expr><name>modp</name> = <name><name>modp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>dir_maker_func</name></type> <name>df</name> <init>= <expr><name><name>modp</name>-&gt;<name>create_dir_config</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>df</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf_vector</name><index>[<expr><name><name>modp</name>-&gt;<name>module_index</name></name></expr>]</index></name> = <call>(*<name>df</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<return>return <expr>(<name>ap_conf_vector_t</name> *)<name>conf_vector</name></expr>;</return>
}</block></function>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>ap_conf_vector_t *</argument>)</argument_list></macro> <macro><name>ap_merge_per_dir_configs</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>ap_conf_vector_t *base</argument>,
<argument>ap_conf_vector_t *new_conf</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>void</name> **</type><name>conf_vector</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof> * <name>conf_vector_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>base_vector</name> <init>= <expr>(<name>void</name> **)<name>base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>new_vector</name> <init>= <expr>(<name>void</name> **)<name>new_conf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>total_modules</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<name><name>new_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf_vector</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>base_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>merger_func</name></type> <name>df</name> <init>= <expr><name><name>merger_func_cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>df</name> &amp;&amp; <name><name>base_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf_vector</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(*<name>df</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>new_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>conf_vector</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>new_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></else></if>
}</block></else></if>
}</block></for>
<return>return <expr>(<name>ap_conf_vector_t</name> *)<name>conf_vector</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>ap_conf_vector_t</name> *</type><name>create_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> **</type><name>conf_vector</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof> * <name>conf_vector_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> *</type><name>modp</name></decl>;</decl_stmt>
<for>for (<init><expr><name>modp</name> = <name>ap_top_module</name></expr>;</init> <condition><expr><name>modp</name></expr>;</condition> <incr><expr><name>modp</name> = <name><name>modp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>modp</name>-&gt;<name>create_server_config</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf_vector</name><index>[<expr><name><name>modp</name>-&gt;<name>module_index</name></name></expr>]</index></name> = <call>(*<name><name>modp</name>-&gt;<name>create_server_config</name></name>)<argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<return>return <expr>(<name>ap_conf_vector_t</name> *)<name>conf_vector</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_server_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>ap_conf_vector_t</name> *</type><name>base</name></decl></param>,
<param><decl><type><name>ap_conf_vector_t</name> *</type><name>virt</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> **</type><name>base_vector</name> <init>= <expr>(<name>void</name> **)<name>base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>virt_vector</name> <init>= <expr>(<name>void</name> **)<name>virt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> *</type><name>modp</name></decl>;</decl_stmt>
<for>for (<init><expr><name>modp</name> = <name>ap_top_module</name></expr>;</init> <condition><expr><name>modp</name></expr>;</condition> <incr><expr><name>modp</name> = <name><name>modp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>merger_func</name></type> <name>df</name> <init>= <expr><name><name>modp</name>-&gt;<name>merge_server_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>modp</name>-&gt;<name>module_index</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>virt_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name><name>virt_vector</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>base_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>df</name></expr>)</condition><then>
<expr_stmt><expr><name><name>virt_vector</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(*<name>df</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>virt_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
}</block></for>
}</block></function>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>ap_conf_vector_t *</argument>)</argument_list></macro> <macro><name>ap_create_request_config</name><argument_list>(<argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>create_empty_config</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>ap_conf_vector_t *</argument>)</argument_list></macro> <macro><name>ap_create_conn_config</name><argument_list>(<argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>create_empty_config</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>ap_conf_vector_t *</argument>)</argument_list></macro> <macro><name>ap_create_per_dir_config</name><argument_list>(<argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>create_empty_config</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>invoke_filter_init</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>ap_filter_t</name> *</type><name>filters</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr><name>filters</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>filters</name>-&gt;<name>frec</name>-&gt;<name>filter_init_func</name></name> &amp;&amp; <name><name>filters</name>-&gt;<name>r</name></name> == <name>r</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>filters</name>-&gt;<name>frec</name>-&gt;<name>filter_init_func</name></name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>result</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>filters</name> = <name><name>filters</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_invoke_handler</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_handler</name> <init>= <expr><name><name>r</name>-&gt;<name>handler</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ignore</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_run_insert_filter</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_filter_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>invoke_filter_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>handler</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>content_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>handler</name> = <name><name>r</name>-&gt;<name>content_type</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>p</name>=<call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr>';'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>new_handler</name> <init>= <expr>(<name>char</name> *)<call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
<argument><expr><name>p</name> - <name>handler</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p2</name> <init>= <expr><name>new_handler</name> + (<name>p</name> - <name>handler</name>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>handler</name> = <name>new_handler</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p2</name> &gt; <name>handler</name> &amp;&amp; <name><name>p2</name><index>[<expr>-1</expr>]</index></name> == ' '</expr>)</condition>
<expr_stmt><expr>--<name>p2</name></expr>;</expr_stmt></while>
<expr_stmt><expr>*<name>p2</name>='\0'</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>handler</name> = <name>AP_DEFAULT_HANDLER_NAME</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = <name>handler</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>ap_run_handler</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = <name>old_handler</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>DECLINED</name> &amp;&amp; <name><name>r</name>-&gt;<name>handler</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00523</expr></argument>)</argument_list></call>
"handler \"%s\" not found for: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>result</name> != <name>OK</name>) &amp;&amp; (<name>result</name> != <name>DONE</name>) &amp;&amp; (<name>result</name> != <name>DECLINED</name>) &amp;&amp; (<name>result</name> != <name>SUSPENDED</name>)
&amp;&amp; (<name>result</name> != <name>AP_FILTER_ERROR</name>)
&amp;&amp; !<call><name>ap_is_HTTP_VALID_RESPONSE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ignore</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"HTTP_IGNORE_RANGE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ignore</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00524</expr></argument>)</argument_list></call>
"Handler for %s returned invalid result code %d"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>result</name> == <name>DECLINED</name> ? <name>HTTP_INTERNAL_SERVER_ERROR</name> : <name>result</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_method_is_limited</name><argument_list>(<argument>cmd_parms *cmd</argument>, <argument>const char *method</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>methnum</name></decl>;</decl_stmt>
<expr_stmt><expr><name>methnum</name> = <call><name>ap_method_number_of</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>methnum</name> != <name>M_INVALID</name></expr>)</condition><then> <block>{
<return>return <expr>(<name><name>cmd</name>-&gt;<name>limited</name></name> &amp; (<name>AP_METHOD_BIT</name> &lt;&lt; <name>methnum</name>)) ? 1 : 0</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_register_hooks</name><argument_list>(<argument>module *m</argument>, <argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>register_hooks</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr>"SHOW_HOOKS"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Registering hooks for %s\n"</expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_hook_debug_enabled</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>apr_hook_debug_current</name> = <name><name>m</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>m</name>-&gt;<name>register_hooks</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ap_add_module_commands</name><parameter_list>(<param><decl><type><name>module</name> *</type><name>m</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type>struct <name>ap_mod_list_struct</name></type> <name>ap_mod_list</name>;</typedef>
<struct>struct <name>ap_mod_list_struct</name> <block>{
<decl_stmt><decl><type>struct <name>ap_mod_list_struct</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> *</type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>cmd</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rebuild_conf_hash</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>int</name></type> <name>add_prelinked</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>module</name> **</type><name>m</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ap_config_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>ap_config_hash</name></expr></argument>, <argument><expr><name>ap_pool_cleanup_set_null</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>add_prelinked</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>m</name> = <name>ap_prelinked_modules</name></expr>;</init> <condition><expr>*<name>m</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>m</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>ap_add_module_commands</name><argument_list>(<argument><expr>*<name>m</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_add_module_commands</name><parameter_list>(<param><decl><type><name>module</name> *</type><name>m</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_mod_list</name> *</type><name>mln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dir</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cmd</name> = <name><name>m</name>-&gt;<name>cmds</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ap_config_hash</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>rebuild_conf_hash</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>tpool</name> = <call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>ap_config_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cmd</name> &amp;&amp; <name><name>cmd</name>-&gt;<name>name</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>mln</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>tpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_mod_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mln</name>-&gt;<name>cmd</name></name> = <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mln</name>-&gt;<name>m</name></name> = <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>tpool</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mln</name>-&gt;<name>next</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ap_config_hash</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ap_config_hash</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>mln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>cmd</name></expr>;</expr_stmt>
}</block></while>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_add_module</name><argument_list>(<argument>module *m</argument>, <argument>apr_pool_t *p</argument>,
<argument>const char *sym_name</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_module_symbol_t</name> *</type><name>sym</name> <init>= <expr><name>ap_prelinked_module_symbols</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>version</name></name> != <name>MODULE_MAGIC_NUMBER_MAJOR</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Module \"%s\" is not compatible with this "
"version of Apache (found %d, need %d). Please "
"contact the vendor for the correct version."</expr></argument>,
<argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>version</name></name></expr></argument>, <argument><expr><name>MODULE_MAGIC_NUMBER_MAJOR</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>module_index</name></name> == -1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>dynamic_modules</name> &gt;= <name>DYNAMIC_MODULE_LIMIT</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Module \"%s\" could not be loaded, "
"because the dynamic module limit was "
"reached. Please increase "
"DYNAMIC_MODULE_LIMIT and recompile."</expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>total_modules</name> &lt; <name>conf_vector_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name>-&gt;<name>module_index</name></name> = <name>total_modules</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>dynamic_modules</name>++</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name>sym_name</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><name><name>sym</name>-&gt;<name>modp</name></name> != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>sym</name>-&gt;<name>modp</name></name> == <name>m</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sym_name</name> = <name><name>sym</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>sym</name>++</expr>;</expr_stmt>
}</block></while>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>next</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>m</name>-&gt;<name>next</name></name> = <name>ap_top_module</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_top_module</name> = <name>m</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>sym_name</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>sym_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr>"_module"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &gt; <name>slen</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name>sym_name</name> + <name>len</name> - <name>slen</name></expr></argument>, <argument><expr>"_module"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> -= <name>slen</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ap_module_short_names</name><index>[<expr><name><name>m</name>-&gt;<name>module_index</name></name></expr>]</index></name> = <call><name>ap_malloc</name><argument_list>(<argument><expr><name>len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ap_module_short_names</name><index>[<expr><name><name>m</name>-&gt;<name>module_index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>sym_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_module_short_names</name><index>[<expr><name><name>m</name>-&gt;<name>module_index</name></name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>merger_func_cache</name><index>[<expr><name><name>m</name>-&gt;<name>module_index</name></name></expr>]</index></name> = <name><name>m</name>-&gt;<name>merge_dir_config</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>m</name>-&gt;<name>name</name></name> = 1 + <call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>'\\'</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>m</name>-&gt;<name>name</name></name> = 1 + <call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>'\\'</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OSD_POSIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>name</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call>-1</expr>]</index></name> == ')'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr><call><name>ap_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call>-1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name>-&gt;<name>name</name></name> = <name>tmp</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_add_module_commands</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_hooks</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_remove_module</name><argument_list>(<argument>module *m</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>module</name> *</type><name>modp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>modp</name> = <name>ap_top_module</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>modp</name> == <name>m</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_top_module</name> = <name><name>modp</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<while>while <condition>(<expr><name>modp</name> &amp;&amp; <name><name>modp</name>-&gt;<name>next</name></name> != <name>m</name></expr>)</condition> <block>{
<expr_stmt><expr><name>modp</name> = <name><name>modp</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<name>modp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00525</expr></argument>)</argument_list></call>
"Cannot remove module %s: not found in module list"</expr></argument>,
<argument><expr><name><name>m</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name><name>modp</name>-&gt;<name>next</name></name> = <name><name>modp</name>-&gt;<name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ap_module_short_names</name><index>[<expr><name><name>m</name>-&gt;<name>module_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_module_short_names</name><index>[<expr><name><name>m</name>-&gt;<name>module_index</name></name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merger_func_cache</name><index>[<expr><name><name>m</name>-&gt;<name>module_index</name></name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name>-&gt;<name>module_index</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name>dynamic_modules</name>--</expr>;</expr_stmt>
<expr_stmt><expr><name>total_modules</name>--</expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_add_loaded_module</name><argument_list>(<argument>module *mod</argument>, <argument>apr_pool_t *p</argument>,
<argument>const char *short_name</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>module</name> **</type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><name>error</name> = <call><name>ap_add_module</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>short_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<return>return <expr><name>error</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>m</name> = <name>ap_loaded_modules</name></expr>;</init> <condition><expr>*<name>m</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>m</name>++</expr></incr>)
<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr>*<name>m</name>++ = <name>mod</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>m</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_remove_loaded_module</name><argument_list>(<argument>module *mod</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>module</name> **</type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> **</type><name>m2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_remove_module</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>m</name> = <name>m2</name> = <name>ap_loaded_modules</name></expr>, <expr><name>done</name> = 0</expr>;</init> <condition><expr>*<name>m2</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>m2</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>*<name>m2</name> == <name>mod</name> &amp;&amp; <name>done</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>m</name>++ = *<name>m2</name></expr>;</expr_stmt></else></if>
}</block></for>
<expr_stmt><expr>*<name>m</name> = <name>NULL</name></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_setup_prelinked_modules</name><argument_list>(<argument>process_rec *process</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>module</name> **</type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> **</type><name>m2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><name>apr_hook_global_pool</name>=<name><name>process</name>-&gt;<name>pconf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rebuild_conf_hash</name><argument_list>(<argument><expr><name><name>process</name>-&gt;<name>pconf</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total_modules</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>m</name> = <name>ap_preloaded_modules</name></expr>;</init> <condition><expr>*<name>m</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>m</name>++</expr></incr>)
<expr_stmt><expr><name>(*<name>m</name>)-&gt;<name>module_index</name></name> = <name>total_modules</name>++</expr>;</expr_stmt></for>
<expr_stmt><expr><name>max_modules</name> = <name>total_modules</name> + <name>DYNAMIC_MODULE_LIMIT</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>conf_vector_length</name> = <name>max_modules</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_loaded_modules</name> = (<name>module</name> **)<call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>process</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>module</name> *</expr></argument>)</argument_list></sizeof> * <name>conf_vector_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ap_module_short_names</name></expr>)</condition><then>
<expr_stmt><expr><name>ap_module_short_names</name> = <call><name>ap_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conf_vector_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>merger_func_cache</name></expr>)</condition><then>
<expr_stmt><expr><name>merger_func_cache</name> = <call><name>ap_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>merger_func</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conf_vector_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ap_loaded_modules</name> == <name>NULL</name> || <name>ap_module_short_names</name> == <name>NULL</name>
|| <name>merger_func_cache</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>"Ouch! Out of memory in ap_setup_prelinked_modules()!"</expr>;</return></then></if>
<for>for (<init><expr><name>m</name> = <name>ap_preloaded_modules</name></expr>, <expr><name>m2</name> = <name>ap_loaded_modules</name></expr>;</init> <condition><expr>*<name>m</name> != <name>NULL</name></expr>;</condition> <incr/>)
<expr_stmt><expr>*<name>m2</name>++ = *<name>m</name>++</expr>;</expr_stmt></for>
<expr_stmt><expr>*<name>m2</name> = <name>NULL</name></expr>;</expr_stmt>
<for>for (<init><expr><name>m</name> = <name>ap_prelinked_modules</name></expr>;</init> <condition><expr>*<name>m</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>m</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>error</name> = <call><name>ap_add_module</name><argument_list>(<argument><expr>*<name>m</name></expr></argument>, <argument><expr><name><name>process</name>-&gt;<name>pconf</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<return>return <expr><name>error</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>apr_hook_sort_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_find_module_name</name><argument_list>(<argument>module *m</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>m</name>-&gt;<name>name</name></name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_find_module_short_name</name><argument_list>(<argument>int module_index</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>module_index</name> &lt; 0 || <name>module_index</name> &gt;= <name>conf_vector_length</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><name><name>ap_module_short_names</name><index>[<expr><name>module_index</name></expr>]</index></name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>module *</argument>)</argument_list></macro> <macro><name>ap_find_linked_module</name><argument_list>(<argument>const char *name</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>module</name> *</type><name>modp</name></decl>;</decl_stmt>
<for>for (<init><expr><name>modp</name> = <name>ap_top_module</name></expr>;</init> <condition><expr><name>modp</name></expr>;</condition> <incr><expr><name>modp</name> = <name><name>modp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>modp</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>modp</name></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MAX_ARGC</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>invoke_cmd</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>override_list_ok</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>w</name></decl>, *<decl><type ref="prev"/><name>w2</name></decl>, *<decl><type ref="prev"/><name>w3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>parms</name>-&gt;<name>override_list</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>override_list</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>override_list_ok</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>parms</name>-&gt;<name>override</name></name> &amp; <name><name>cmd</name>-&gt;<name>req_override</name></name>) == 0 &amp;&amp; !<name>override_list_ok</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>parms</name>-&gt;<name>override</name></name> &amp; <name>NONFATAL_OVERRIDE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02295</expr></argument>)</argument_list></call>
"%s in .htaccess forbidden by AllowOverride"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" not allowed here"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>parms</name>-&gt;<name>info</name></name> = <name><name>cmd</name>-&gt;<name>cmd_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>-&gt;<name>cmd</name></name> = <name>cmd</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>cmd</name>-&gt;<name>args_how</name></name></expr>)</condition> <block>{
<case>case <expr><name>RAW_ARGS</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RESOLVE_ENV_PER_TOKEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>args</name> = <call><name>ap_resolve_env</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>,<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name><name>cmd</name>-&gt;<name>AP_RAW_ARGS</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>TAKE_ARGV</name></expr>: <block>{
<decl_stmt><decl><type><name>char</name> *</type><name><name>argv</name><index>[<expr><name>AP_MAX_ARGC</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<do>do <block>{
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>w</name> == '\0' &amp;&amp; *<name>args</name> == '\0'</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> = <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name>++</expr>;</expr_stmt>
}</block> while <condition>(<expr><name>argc</name> &lt; <name>AP_MAX_ARGC</name> &amp;&amp; *<name>args</name> != '\0'</expr>)</condition>;</do>
<return>return <expr><call><name><name>cmd</name>-&gt;<name>AP_TAKE_ARGV</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
</case><case>case <expr><name>NO_ARGS</name></expr>:
<if>if <condition>(<expr>*<name>args</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>" takes no arguments"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name><name>cmd</name>-&gt;<name>AP_NO_ARGS</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>TAKE1</name></expr>:
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>w</name> == '\0' || *<name>args</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>" takes one argument"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name> ? ", " : <name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name><name>cmd</name>-&gt;<name>AP_TAKE1</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>TAKE2</name></expr>:
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>w</name> == '\0' || *<name>w2</name> == '\0' || *<name>args</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>" takes two arguments"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name> ? ", " : <name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name><name>cmd</name>-&gt;<name>AP_TAKE2</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>TAKE12</name></expr>:
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>w</name> == '\0' || *<name>args</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>" takes 1-2 arguments"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name> ? ", " : <name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name><name>cmd</name>-&gt;<name>AP_TAKE2</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr>*<name>w2</name> ? <name>w2</name> : <name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>TAKE3</name></expr>:
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w3</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>w</name> == '\0' || *<name>w2</name> == '\0' || *<name>w3</name> == '\0' || *<name>args</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>" takes three arguments"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name> ? ", " : <name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name><name>cmd</name>-&gt;<name>AP_TAKE3</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>TAKE23</name></expr>:
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w3</name> = *<name>args</name> ? <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>w</name> == '\0' || *<name>w2</name> == '\0' || *<name>args</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" takes two or three arguments"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name> ? ", " : <name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name><name>cmd</name>-&gt;<name>AP_TAKE3</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>TAKE123</name></expr>:
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> = *<name>args</name> ? <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w3</name> = *<name>args</name> ? <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>w</name> == '\0' || *<name>args</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" takes one, two or three arguments"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name> ? ", " : <name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name><name>cmd</name>-&gt;<name>AP_TAKE3</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>TAKE13</name></expr>:
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> = *<name>args</name> ? <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w3</name> = *<name>args</name> ? <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>w</name> == '\0' || (<name>w2</name> &amp;&amp; *<name>w2</name> &amp;&amp; !<name>w3</name>) || *<name>args</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" takes one or three arguments"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name> ? ", " : <name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name><name>cmd</name>-&gt;<name>AP_TAKE3</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>ITERATE</name></expr>:
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>w</name> == '\0'</expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" requires at least one argument"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name> ? ", " : <name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<while>while <condition>(<expr>*<name>w</name> != '\0'</expr>)</condition> <block>{
<expr_stmt><expr><name>errmsg</name> = <call><name><name>cmd</name>-&gt;<name>AP_TAKE1</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>, <argument><expr><name>DECLINE_CMD</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>errmsg</name></expr>;</return></then></if>
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>errmsg</name></expr>;</return>
</case><case>case <expr><name>ITERATE2</name></expr>:
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>w</name> == '\0' || *<name>args</name> == 0</expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" requires at least two arguments"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name> ? ", " : <name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<while>while <condition>(<expr>*(<name>w2</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call>) != '\0'</expr>)</condition> <block>{
<expr_stmt><expr><name>errmsg</name> = <call><name><name>cmd</name>-&gt;<name>AP_TAKE2</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>, <argument><expr><name>DECLINE_CMD</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>errmsg</name></expr>;</return></then></if>
}</block></while>
<return>return <expr><name>errmsg</name></expr>;</return>
</case><case>case <expr><name>FLAG</name></expr>:
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>w</name> == '\0' || (<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>" must be On or Off"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name><name>cmd</name>-&gt;<name>AP_FLAG</name></name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>mconfig</name></expr></argument>, <argument><expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> != 0</expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" is improperly configured internally (server bug)"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</default>}</block></switch>
}</block></function>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>const command_rec *</argument>)</argument_list></macro> <macro><name>ap_find_command</name><argument_list>(<argument>const char *name</argument>,
<argument>const command_rec *cmds</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name><name>cmds</name>-&gt;<name>name</name></name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>cmds</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>cmds</name></expr>;</return></then></if>
<expr_stmt><expr>++<name>cmds</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>const command_rec *</argument>)</argument_list></macro> <macro><name>ap_find_command_in_modules</name><argument_list>(
<argument>const char *cmd_name</argument>, <argument>module **mod</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>cmdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> *</type><name>modp</name></decl>;</decl_stmt>
<for>for (<init><expr><name>modp</name> = *<name>mod</name></expr>;</init> <condition><expr><name>modp</name></expr>;</condition> <incr><expr><name>modp</name> = <name><name>modp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>modp</name>-&gt;<name>cmds</name></name> &amp;&amp; (<name>cmdp</name> = <call><name>ap_find_command</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>, <argument><expr><name><name>modp</name>-&gt;<name>cmds</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mod</name> = <name>modp</name></expr>;</expr_stmt>
<return>return <expr><name>cmdp</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <macro><name>ap_set_config_vectors</name><argument_list>(<argument>server_rec *server</argument>,
<argument>ap_conf_vector_t *section_vector</argument>,
<argument>const char *section</argument>,
<argument>module *mod</argument>, <argument>apr_pool_t *pconf</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>section_config</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>section_vector</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>server_config</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>section_config</name> &amp;&amp; <name><name>mod</name>-&gt;<name>create_dir_config</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>section_config</name> = <call>(*<name><name>mod</name>-&gt;<name>create_dir_config</name></name>)<argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name>section_vector</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>section_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>server_config</name> &amp;&amp; <name><name>mod</name>-&gt;<name>create_server_config</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>server_config</name> = <call>(*<name><name>mod</name>-&gt;<name>create_server_config</name></name>)<argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>server_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>section_config</name></expr>;</return>
}</block>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>execute_now</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>cmd_line</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>,
<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>ap_directive_t</name> **</type><name>sub_tree</name></decl></param>,
<param><decl><type><name>ap_directive_t</name> *</type><name>parent</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ap_build_config_sub</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>temp_pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>l</name></decl></param>, <param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>ap_directive_t</name> **</type><name>current</name></decl></param>,
<param><decl><type><name>ap_directive_t</name> **</type><name>curr_parent</name></decl></param>,
<param><decl><type><name>ap_directive_t</name> **</type><name>conftree</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cmd_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>newdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> *</type><name>mod</name> <init>= <expr><name>ap_top_module</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>cmd</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>l</name> == '#' || *<name>l</name> == '\0'</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RESOLVE_ENV_PER_TOKEN</name></expr></cpp:if>
<expr_stmt><expr><name>args</name> = <name>l</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>args</name> = <call><name>ap_resolve_env</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>cmd_name</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>cmd_name</name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd_name</name><index>[<expr>1</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>lastc</name> <init>= <expr><name>cmd_name</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>lastc</name> == '&gt;'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>lastc</name> = '\0'</expr> ;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd_name</name><index>[<expr>0</expr>]</index></name> == '&lt;' &amp;&amp; *<name>args</name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>args</name> = "&gt;"</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>newdir</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_directive_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newdir</name>-&gt;<name>filename</name></name> = <name><name>parms</name>-&gt;<name>config_file</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newdir</name>-&gt;<name>line_num</name></name> = <name><name>parms</name>-&gt;<name>config_file</name>-&gt;<name>line_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newdir</name>-&gt;<name>args</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>cmd</name> = <call><name>ap_find_command_in_modules</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>, <argument><expr>&amp;<name>mod</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>newdir</name>-&gt;<name>directive</name></name> = <name><name>cmd</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>req_override</name></name> &amp; <name>EXEC_ON_READ</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>sub_tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parms</name>-&gt;<name>err_directive</name></name> = <name>newdir</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>execute_now</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>parms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>temp_pool</name></expr></argument>,
<argument><expr>&amp;<name>sub_tree</name></expr></argument>, <argument><expr>*<name>curr_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>current</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>current</name>)-&gt;<name>next</name></name> = <name>sub_tree</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>current</name> = <name>sub_tree</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>curr_parent</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>curr_parent</name>)-&gt;<name>first_child</name></name> = (*<name>current</name>)</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name>current</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>current</name>)-&gt;<name>parent</name></name> = (*<name>curr_parent</name>)</expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr>*<name>current</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!*<name>conftree</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>conftree</name> = *<name>current</name></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr><name>(*<name>current</name>)-&gt;<name>next</name></name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr>(*<name>current</name>) = <name>(*<name>current</name>)-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>current</name>)-&gt;<name>parent</name></name> = (*<name>curr_parent</name>)</expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<return>return <expr><name>retval</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>newdir</name>-&gt;<name>directive</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>cmd_name</name><index>[<expr>0</expr>]</index></name> == '&lt;'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cmd_name</name><index>[<expr>1</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<expr_stmt><expr>(*<name>current</name>) = <call><name>ap_add_node</name><argument_list>(<argument><expr><name>curr_parent</name></expr></argument>, <argument><expr>*<name>current</name></expr></argument>, <argument><expr><name>newdir</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>curr_parent</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>parms</name>-&gt;<name>err_directive</name></name> = <name>newdir</name></expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cmd_name</name></expr></argument>,
<argument><expr>" without matching &lt;"</expr></argument>, <argument><expr><name>cmd_name</name> + 2</expr></argument>,
<argument><expr>" section"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>bracket</name> <init>= <expr><name>cmd_name</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>bracket</name> != '&gt;'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>parms</name>-&gt;<name>err_directive</name></name> = <name>newdir</name></expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cmd_name</name></expr></argument>,
<argument><expr>"&gt; directive missing closing '&gt;'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>bracket</name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd_name</name> + 2</expr></argument>,
<argument><expr><name>(*<name>curr_parent</name>)-&gt;<name>directive</name></name> + 1</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>parms</name>-&gt;<name>err_directive</name></name> = <name>newdir</name></expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Expected &lt;/"</expr></argument>,
<argument><expr><name>(*<name>curr_parent</name>)-&gt;<name>directive</name></name> + 1</expr></argument>, <argument><expr>"&gt; but saw "</expr></argument>,
<argument><expr><name>cmd_name</name></expr></argument>, <argument><expr>"&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>bracket</name> = '&gt;'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>current</name> = *<name>curr_parent</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>curr_parent</name> = <name>(*<name>current</name>)-&gt;<name>parent</name></name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>current</name> = <call><name>ap_add_node</name><argument_list>(<argument><expr><name>curr_parent</name></expr></argument>, <argument><expr>*<name>current</name></expr></argument>, <argument><expr><name>newdir</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>retval</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARBUF_INIT_LEN</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARBUF_MAX_LEN</name></cpp:macro> <cpp:value>(16*1024*1024)</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_build_cont_config</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>apr_pool_t *temp_pool</argument>,
<argument>cmd_parms *parms</argument>,
<argument>ap_directive_t **current</argument>,
<argument>ap_directive_t **curr_parent</argument>,
<argument>char *orig_directive</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>bracket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>sub_tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_varbuf</name></type> <name>vb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>max_len</name> <init>= <expr><name>VARBUF_MAX_LEN</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>p</name> == <name>temp_pool</name></expr>)</condition><then>
<expr_stmt><expr><name>max_len</name> = <name>HUGE_STRING_LEN</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>bracket</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>, <argument><expr><name>orig_directive</name> + 1</expr></argument>, <argument><expr>"&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_varbuf_init</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>, <argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr><name>VARBUF_INIT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>rc</name> = <call><name>ap_varbuf_cfg_getline</name><argument_list>(<argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>config_file</name></name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>)</argument_list></call>)
== <name>APR_SUCCESS</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<call><name>memcmp</name><argument_list>(<argument><expr><name><name>vb</name>.<name>buf</name></name></expr></argument>, <argument><expr>"&lt;/"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call>
&amp;&amp; (<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>vb</name>.<name>buf</name></name> + 2</expr></argument>, <argument><expr><name>bracket</name></expr></argument>)</argument_list></call> == 0)
&amp;&amp; (*<name>curr_parent</name> == <name>NULL</name>)</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>ap_build_config_sub</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>temp_pool</name></expr></argument>, <argument><expr><name><name>vb</name>.<name>buf</name></name></expr></argument>, <argument><expr><name>parms</name></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name>curr_parent</name></expr></argument>, <argument><expr>&amp;<name>sub_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>retval</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>sub_tree</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sub_tree</name> = *<name>curr_parent</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>sub_tree</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sub_tree</name> = *<name>current</name></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>ap_varbuf_free</name><argument_list>(<argument><expr>&amp;<name>vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_EOF</name> &amp;&amp; <name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>ap_pcfg_strerror</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>config_file</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>*<name>current</name> = <name>sub_tree</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ap_walk_config_sub</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_directive_t</name> *</type><name>current</name></decl></param>,
<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>ap_conf_vector_t</name> *</type><name>section_vector</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_mod_list</name> *</type><name>ml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dir</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>current</name>-&gt;<name>directive</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ml</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ap_config_hash</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ml</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>parms</name>-&gt;<name>err_directive</name></name> = <name>current</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>parms</name>-&gt;<name>override</name></name> &amp; <name>NONFATAL_UNKNOWN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02296</expr></argument>)</argument_list></call> "Unknown directive %s "
"perhaps misspelled or defined by a module "
"not included in the server configuration"</expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid command '"</expr></argument>,
<argument><expr><name><name>current</name>-&gt;<name>directive</name></name></expr></argument>,
<argument><expr>"', perhaps misspelled or defined by a module "
"not included in the server configuration"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
<for>for ( <init>;</init> <condition><expr><name>ml</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>ml</name> = <name><name>ml</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>dir_config</name> <init>= <expr><call><name>ap_set_config_vectors</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>,
<argument><expr><name>section_vector</name></expr></argument>,
<argument><expr><name><name>parms</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>ml</name>-&gt;<name>m</name></name></expr></argument>,
<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cmd</name> = <name><name>ml</name>-&gt;<name>cmd</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>req_override</name></name> &amp; <name>EXEC_ON_READ</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>invoke_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>parms</name></expr></argument>, <argument><expr><name>dir_config</name></expr></argument>, <argument><expr><name><name>current</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name> != <name>NULL</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>DECLINE_CMD</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>parms</name>-&gt;<name>err_directive</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>parms</name>-&gt;<name>err_directive</name></name> = <name>current</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>retval</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_walk_config</name><argument_list>(<argument>ap_directive_t *current</argument>,
<argument>cmd_parms *parms</argument>,
<argument>ap_conf_vector_t *section_vector</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>oldconfig</name> <init>= <expr><name><name>parms</name>-&gt;<name>context</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parms</name>-&gt;<name>context</name></name> = <name>section_vector</name></expr>;</expr_stmt>
<for>for (<init>;</init> <condition><expr><name>current</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>current</name> = <name><name>current</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parms</name>-&gt;<name>directive</name></name> = <name>current</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config_sub</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>parms</name></expr></argument>, <argument><expr><name>section_vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>parms</name>-&gt;<name>context</name></name> = <name>oldconfig</name></expr>;</expr_stmt>
<return>return <expr><name>errmsg</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name><name>parms</name>-&gt;<name>context</name></name> = <name>oldconfig</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_build_config</name><argument_list>(<argument>cmd_parms *parms</argument>,
<argument>apr_pool_t *p</argument>, <argument>apr_pool_t *temp_pool</argument>,
<argument>ap_directive_t **conftree</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>current</name> <init>= <expr>*<name>conftree</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>curr_parent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_directive_t</name> **</type><name>last_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_varbuf</name></type> <name>vb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>max_len</name> <init>= <expr><name>VARBUF_MAX_LEN</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>p</name> == <name>temp_pool</name></expr>)</condition><then>
<expr_stmt><expr><name>max_len</name> = <name>HUGE_STRING_LEN</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_varbuf_init</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>, <argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr><name>VARBUF_INIT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>current</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>last_ptr</name> = &amp;(<name><name>current</name>-&gt;<name>last</name></name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>last_ptr</name> &amp;&amp; *<name>last_ptr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>current</name> = *<name>last_ptr</name></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr><name><name>current</name>-&gt;<name>next</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>current</name> = <name><name>current</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>last_ptr</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>last_ptr</name> = <name>current</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<while>while <condition>(<expr>(<name>rc</name> = <call><name>ap_varbuf_cfg_getline</name><argument_list>(<argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>config_file</name></name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>)</argument_list></call>)
== <name>APR_SUCCESS</name></expr>)</condition> <block>{
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_build_config_sub</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>temp_pool</name></expr></argument>, <argument><expr><name><name>vb</name>.<name>buf</name></name></expr></argument>, <argument><expr><name>parms</name></expr></argument>,
<argument><expr>&amp;<name>current</name></expr></argument>, <argument><expr>&amp;<name>curr_parent</name></expr></argument>, <argument><expr><name>conftree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>errmsg</name></expr>;</return></then></if>
<if>if <condition>(<expr>*<name>conftree</name> == <name>NULL</name> &amp;&amp; <name>curr_parent</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>conftree</name> = <name>curr_parent</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name>conftree</name> == <name>NULL</name> &amp;&amp; <name>current</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>conftree</name> = <name>current</name></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>ap_varbuf_free</name><argument_list>(<argument><expr>&amp;<name>vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_EOF</name> &amp;&amp; <name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>ap_pcfg_strerror</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>config_file</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>curr_parent</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>errmsg</name> = ""</expr>;</expr_stmt>
<while>while <condition>(<expr><name>curr_parent</name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>errmsg</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%s%s%s:%u: %s&gt; was not closed."</expr></argument>,
<argument><expr><name>errmsg</name></expr></argument>,
<argument><expr>*<name>errmsg</name> == '\0' ? "" : <name>APR_EOL_STR</name></expr></argument>,
<argument><expr><name><name>curr_parent</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name><name>curr_parent</name>-&gt;<name>line_num</name></name></expr></argument>,
<argument><expr><name><name>curr_parent</name>-&gt;<name>directive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>-&gt;<name>err_directive</name></name> = <name>curr_parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_parent</name> = <name><name>curr_parent</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>errmsg</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_set_string_slot</name><argument_list>(<argument>cmd_parms *cmd</argument>,
<argument>void *struct_ptr</argument>,
<argument>const char *arg</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>(<name>int</name>)(<name>long</name>)<name><name>cmd</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*(const <name>char</name> **)((<name>char</name> *)<name>struct_ptr</name> + <name>offset</name>) = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_set_int_slot</name><argument_list>(<argument>cmd_parms *cmd</argument>,
<argument>void *struct_ptr</argument>,
<argument>const char *arg</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>error_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>(<name>int</name>)(<name>long</name>)<name><name>cmd</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<call>(<name>int</name> *)<argument_list>(<argument><expr>(<name>char</name>*)<name>struct_ptr</name> + <name>offset</name></expr></argument>)</argument_list></call> = <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(*<name>arg</name> == '\0') || (*<name>endptr</name> != '\0')</expr>)</condition><then> <block>{
<expr_stmt><expr><name>error_str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Invalid value for directive %s, expected integer"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>directive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>error_str</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_set_string_slot_lower</name><argument_list>(<argument>cmd_parms *cmd</argument>,
<argument>void *struct_ptr</argument>,
<argument>const char *arg_</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>arg</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,<argument><expr><name>arg_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>(<name>int</name>)(<name>long</name>)<name><name>cmd</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<call>(<name>char</name> **)<argument_list>(<argument><expr>(<name>char</name> *)<name>struct_ptr</name> + <name>offset</name></expr></argument>)</argument_list></call> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_set_flag_slot</name><argument_list>(<argument>cmd_parms *cmd</argument>,
<argument>void *struct_ptr_v</argument>, <argument>int arg</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>(<name>int</name>)(<name>long</name>)<name><name>cmd</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>struct_ptr</name> <init>= <expr>(<name>char</name> *)<name>struct_ptr_v</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<call>(<name>int</name> *)<argument_list>(<argument><expr><name>struct_ptr</name> + <name>offset</name></expr></argument>)</argument_list></call> = <name>arg</name> ? 1 : 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_set_flag_slot_char</name><argument_list>(<argument>cmd_parms *cmd</argument>,
<argument>void *struct_ptr_v</argument>, <argument>int arg</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>(<name>int</name>)(<name>long</name>)<name><name>cmd</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>struct_ptr</name> <init>= <expr>(<name>char</name> *)<name>struct_ptr_v</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*(<name>struct_ptr</name> + <name>offset</name>) = <name>arg</name> ? 1 : 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_set_file_slot</name><argument_list>(<argument>cmd_parms *cmd</argument>, <argument>void *struct_ptr</argument>,
<argument>const char *arg</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>(<name>int</name>)(<name>long</name>)<name><name>cmd</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>path</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>path</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid file path "</expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*(const <name>char</name> **) ((<name>char</name>*)<name>struct_ptr</name> + <name>offset</name>) = <name>path</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_set_deprecated</name><argument_list>(<argument>cmd_parms *cmd</argument>,
<argument>void *struct_ptr</argument>,
<argument>const char *arg</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>errmsg</name></name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_reset_module_loglevels</name><argument_list>(<argument>struct ap_logconf *l</argument>, <argument>int val</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name><name>l</name>-&gt;<name>module_levels</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>module_levels</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>conf_vector_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_set_module_loglevel</name><argument_list>(<argument>apr_pool_t *pool</argument>, <argument>struct ap_logconf *l</argument>,
<argument>int index</argument>, <argument>int level</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>!<name><name>l</name>-&gt;<name>module_levels</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>l</name>-&gt;<name>module_levels</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>conf_vector_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>l</name>-&gt;<name>level</name></name> == <name>APLOG_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_reset_module_loglevels</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>APLOG_UNSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_reset_module_loglevels</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>APLOG_NO_MODULE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>l</name>-&gt;<name>module_levels</name><index>[<expr><name>index</name></expr>]</index></name> = <name>level</name></expr>;</expr_stmt>
}</block>
<decl_stmt><decl><type><specifier>static</specifier> <name>cmd_parms</name></type> <name>default_parms</name> <init>=
<expr><block>{<expr><name>NULL</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr><name>NULL</name></expr>, <expr>-1</expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_server_root_relative</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *file</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>newpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name>newpath</name></expr></argument>, <argument><expr><name>ap_server_root</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>APR_FILEPATH_TRUENAME</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newpath</name> &amp;&amp; (<name>rv</name> == <name>APR_SUCCESS</name> || <call><name>APR_STATUS_IS_EPATHWILD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>
|| <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>
|| <call><name>APR_STATUS_IS_ENOTDIR</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>newpath</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_runtime_dir_relative</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *file</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>newpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>runtime_dir</name> <init>= <expr><name>ap_runtime_dir</name> ? <name>ap_runtime_dir</name> : <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DEFAULT_REL_RUNTIMEDIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name>newpath</name></expr></argument>, <argument><expr><name>runtime_dir</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><name>APR_FILEPATH_TRUENAME</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newpath</name> &amp;&amp; (<name>rv</name> == <name>APR_SUCCESS</name> || <call><name>APR_STATUS_IS_EPATHWILD</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>
|| <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>
|| <call><name>APR_STATUS_IS_ENOTDIR</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>newpath</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_soak_end_container</name><argument_list>(<argument>cmd_parms *cmd</argument>, <argument>char *directive</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type>struct <name>ap_varbuf</name></type> <name>vb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cmd_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>max_len</name> <init>= <expr><name>VARBUF_MAX_LEN</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>pool</name></name> == <name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr>)</condition><then>
<expr_stmt><expr><name>max_len</name> = <name>HUGE_STRING_LEN</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_varbuf_init</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr><name>VARBUF_INIT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>rc</name> = <call><name>ap_varbuf_cfg_getline</name><argument_list>(<argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>config_file</name></name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>)</argument_list></call>)
== <name>APR_SUCCESS</name></expr>)</condition> <block>{
<expr_stmt><expr><name>args</name> = <name><name>vb</name>.<name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_name</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cmd_name</name><index>[<expr>0</expr>]</index></name> == '&lt;'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cmd_name</name><index>[<expr>1</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cmd_name</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd_name</name> + 2</expr></argument>, <argument><expr><name>directive</name> + 1</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Expected &lt;/"</expr></argument>,
<argument><expr><name>directive</name> + 1</expr></argument>, <argument><expr>"&gt; but saw "</expr></argument>,
<argument><expr><name>cmd_name</name></expr></argument>, <argument><expr>"&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_varbuf_free</name><argument_list>(<argument><expr>&amp;<name>vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>args</name> == '\0' &amp;&amp; <name><name>cmd_name</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> == '&gt;'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cmd_name</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>msg</name> = <call><name>ap_soak_end_container</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>msg</name></expr>;</return>
}</block></then></if>
}</block></else></if>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>rc</name> != <name>APR_EOF</name> &amp;&amp; <name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>ap_pcfg_strerror</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>config_file</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Expected &lt;/"</expr></argument>,
<argument><expr><name>directive</name> + 1</expr></argument>, <argument><expr>"&gt; before end of configuration"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>execute_now</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>cmd_line</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>,
<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>ap_directive_t</name> **</type><name>sub_tree</name></decl></param>,
<param><decl><type><name>ap_directive_t</name> *</type><name>parent</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_mod_list</name> *</type><name>ml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dir</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>cmd_line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ml</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ap_config_hash</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ml</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid command '"</expr></argument>,
<argument><expr><name>cmd_line</name></expr></argument>,
<argument><expr>"', perhaps misspelled or defined by a module "
"not included in the server configuration"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<for>for ( <init>;</init> <condition><expr><name>ml</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>ml</name> = <name><name>ml</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cmd</name> = <name><name>ml</name>-&gt;<name>cmd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>invoke_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>parms</name></expr></argument>, <argument><expr><name>sub_tree</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>retval</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curr_idx</name></decl>;</decl_stmt>
}</block></struct></type> <name>arr_elts_param_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>arr_elts_getstr</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>bufsiz</name></decl></param>, <param><decl><type><name>void</name> *</type><name>param</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>arr_elts_param_t</name> *</type><name>arr_param</name> <init>= <expr>(<name>arr_elts_param_t</name> *)<name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elt</name></decl>;</decl_stmt>
<if>if <condition>(<expr>++<name><name>arr_param</name>-&gt;<name>curr_idx</name></name> &gt; <name><name>arr_param</name>-&gt;<name>array</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<return>return <expr><name>APR_EOF</name></expr>;</return></then></if>
<expr_stmt><expr><name>elt</name> = ((const <name>char</name> **)<name><name>arr_param</name>-&gt;<name>array</name>-&gt;<name>elts</name></name>)<index>[<expr><name><name>arr_param</name>-&gt;<name>curr_idx</name></name> - 1</expr>]</index></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>)</argument_list></call> - (<name>char</name> *)<name>buf</name> &gt;= <name>bufsiz</name> - 1</expr>)</condition><then>
<return>return <expr><name>APR_ENOSPC</name></expr>;</return></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>arr_elts_close</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>param</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>arr_elts_param_t</name> *</type><name>arr_param</name> <init>= <expr>(<name>arr_elts_param_t</name> *)<name>param</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>arr_param</name>-&gt;<name>curr_idx</name></name> = <name><name>arr_param</name>-&gt;<name>array</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>process_command_config</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>arr</name></decl></param>,
<param><decl><type><name>ap_directive_t</name> **</type><name>conftree</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cmd_parms</name></type> <name>parms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arr_elts_param_t</name></type> <name>arr_parms</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>arr_parms</name>.<name>curr_idx</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>arr_parms</name>.<name>array</name></name> = <name>arr</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ap_config_hash</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>rebuild_conf_hash</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pconf</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>parms</name> = <name>default_parms</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>pool</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>temp_pool</name></name> = <name>ptemp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>server</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>override</name></name> = (<name>RSRC_CONF</name> | <name>OR_ALL</name>) &amp; ~(<name>OR_AUTHCFG</name> | <name>OR_LIMIT</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>override_opts</name></name> = <name>OPT_ALL</name> | <name>OPT_SYM_OWNER</name> | <name>OPT_MULTI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>config_file</name></name> = <call><name>ap_pcfg_open_custom</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"-c/-C directives"</expr></argument>,
<argument><expr>&amp;<name>arr_parms</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>arr_elts_getstr</name></expr></argument>, <argument><expr><name>arr_elts_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_build_config</name><argument_list>(<argument><expr>&amp;<name>parms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>conftree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name><name>parms</name>.<name>config_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Syntax error in -C/-c directive: "</expr></argument>, <argument><expr><name>errmsg</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
}</block></struct></type> <name>fnames</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fname_alphasort</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>fn1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>fn2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>fnames</name> *</type><name>f1</name> <init>= <expr><name>fn1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>fnames</name> *</type><name>f2</name> <init>= <expr><name>fn2</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>f1</name>-&gt;<name>fname</name></name></expr></argument>,<argument><expr><name><name>f2</name>-&gt;<name>fname</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_config_name</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>recursion</name></decl>, <decl><type ref="prev"/><name>line_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>"ap_include_sentinel"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>data</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>recursion</name> = *(<name>unsigned</name> *)<name>data</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>recursion</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; (<name>recursion</name> + 1)</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>"ap_include_lineno"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>data</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>line_number</name> = *(<name>unsigned</name> *)<name>data</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>line_number</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>line_number</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"(%u)"</expr></argument>, <argument><expr><name>line_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"(*)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>" %s\n"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_process_resource_config</name><argument_list>(<argument>server_rec *s</argument>,
<argument>const char *fname</argument>,
<argument>ap_directive_t **conftree</argument>,
<argument>apr_pool_t *p</argument>,
<argument>apr_pool_t *ptemp</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_configfile_t</name> *</type><name>cfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cmd_parms</name></type> <name>parms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><name>parms</name> = <name>default_parms</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>pool</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>temp_pool</name></name> = <name>ptemp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>server</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>override</name></name> = (<name>RSRC_CONF</name> | <name>OR_ALL</name>) &amp; ~(<name>OR_AUTHCFG</name> | <name>OR_LIMIT</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>override_opts</name></name> = <name>OPT_ALL</name> | <name>OPT_SYM_OWNER</name> | <name>OPT_MULTI</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pcfg_openfile</name><argument_list>(<argument><expr>&amp;<name>cfp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Could not open configuration file %s: %pm"</expr></argument>,
<argument><expr><name>fname</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"DUMP_INCLUDES"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dump_config_name</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>parms</name>.<name>config_file</name></name> = <name>cfp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> = <call><name>ap_build_config</name><argument_list>(<argument><expr>&amp;<name>parms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>conftree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>parms</name>.<name>err_directive</name></name></expr>)</condition><then>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Syntax error on line %d of %s: %s"</expr></argument>,
<argument><expr><name><name>parms</name>.<name>err_directive</name>-&gt;<name>line_num</name></name></expr></argument>,
<argument><expr><name><name>parms</name>.<name>err_directive</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><name>error</name></expr>;</return></else></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>process_resource_config_nofnmatch</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
<param><decl><type><name>ap_directive_t</name> **</type><name>conftree</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>unsigned</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>int</name></type> <name>optional</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_is_directory</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_dir_t</name> *</type><name>dirp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>dirent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>candidates</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fnames</name> *</type><name>fnew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>path</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>++<name>depth</name> &gt; <name>AP_MAX_INCLUDE_DIR_DEPTH</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Directory %s exceeds the maximum include "
"directory nesting level of %u. You have "
"probably a recursion somewhere."</expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>AP_MAX_INCLUDE_DIR_DEPTH</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dir_open</name><argument_list>(<argument><expr>&amp;<name>dirp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Could not open config directory %s: %pm"</expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>candidates</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fnames</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_dir_read</name><argument_list>(<argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr><name>APR_FINFO_DIRENT</name></expr></argument>, <argument><expr><name>dirp</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr>".."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fnew</name> = (<name>fnames</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fnew</name>-&gt;<name>fname</name></name> = <call><name>ap_make_full_path</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>candidates</name>-&gt;<name>nelts</name></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr>(<name>void</name> *) <name><name>candidates</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>candidates</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fnames</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fname_alphasort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>current</name> = 0</expr>;</init> <condition><expr><name>current</name> &lt; <name><name>candidates</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>current</name></expr></incr>) <block>{
<expr_stmt><expr><name>fnew</name> = &amp;((<name>fnames</name> *) <name><name>candidates</name>-&gt;<name>elts</name></name>)<index>[<expr><name>current</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> = <call><name>process_resource_config_nofnmatch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>fnew</name>-&gt;<name>fname</name></name></expr></argument>,
<argument><expr><name>conftree</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<return>return <expr><name>error</name></expr>;</return>
}</block></then></if>
}</block></for>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>ap_process_resource_config</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>conftree</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>process_resource_config_fnmatch</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
<param><decl><type><name>ap_directive_t</name> **</type><name>conftree</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>unsigned</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>int</name></type> <name>optional</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dir_t</name> *</type><name>dirp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>dirent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>candidates</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fnames</name> *</type><name>fnew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rest</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rest</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fname</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>rest</name> - <name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rest</name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>apr_fnmatch_test</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> = <call><name>ap_make_full_path</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>rest</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>process_resource_config_nofnmatch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>conftree</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>process_resource_config_fnmatch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>,
<argument><expr><name>conftree</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dir_open</name><argument_list>(<argument><expr>&amp;<name>dirp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Could not open config directory %s: %pm"</expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>candidates</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fnames</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_dir_read</name><argument_list>(<argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr><name>APR_FINFO_DIRENT</name> | <name>APR_FINFO_TYPE</name></expr></argument>, <argument><expr><name>dirp</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr>".."</expr></argument>)</argument_list></call>
&amp;&amp; (<call><name>apr_fnmatch</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>,
<argument><expr><name>APR_FNM_PERIOD</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name> <init>= <expr><call><name>ap_make_full_path</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rest</name> &amp;&amp; (<name>rv</name> == <name>APR_SUCCESS</name>) &amp;&amp; (<name><name>dirent</name>.<name>filetype</name></name> != <name>APR_DIR</name>)</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>fnew</name> = (<name>fnames</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fnew</name>-&gt;<name>fname</name></name> = <name>full_path</name></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>candidates</name>-&gt;<name>nelts</name></name> != 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr>(<name>void</name> *) <name><name>candidates</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>candidates</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fnames</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fname_alphasort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>current</name> = 0</expr>;</init> <condition><expr><name>current</name> &lt; <name><name>candidates</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>current</name></expr></incr>) <block>{
<expr_stmt><expr><name>fnew</name> = &amp;((<name>fnames</name> *) <name><name>candidates</name>-&gt;<name>elts</name></name>)<index>[<expr><name>current</name></expr>]</index></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>rest</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>error</name> = <call><name>process_resource_config_nofnmatch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>fnew</name>-&gt;<name>fname</name></name></expr></argument>,
<argument><expr><name>conftree</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>error</name> = <call><name>process_resource_config_fnmatch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>fnew</name>-&gt;<name>fname</name></name></expr></argument>, <argument><expr><name>rest</name></expr></argument>,
<argument><expr><name>conftree</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<return>return <expr><name>error</name></expr>;</return>
}</block></then></if>
}</block></for>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<name>optional</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"No matches for the wildcard '%s' in '%s', failing "
"(use IncludeOptional if required)"</expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_process_fnmatch_configs</name><argument_list>(<argument>server_rec *s</argument>,
<argument>const char *fname</argument>,
<argument>ap_directive_t **conftree</argument>,
<argument>apr_pool_t *p</argument>,
<argument>apr_pool_t *ptemp</argument>,
<argument>int optional</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>(<name><name>ap_server_pre_read_config</name>-&gt;<name>nelts</name></name>
|| <name><name>ap_server_post_read_config</name>-&gt;<name>nelts</name></name>)
&amp;&amp; !(<call><name>strcmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>SERVER_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_FINFO_LINK</name> | <name>APR_FINFO_TYPE</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>apr_fnmatch_test</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>process_resource_config_nofnmatch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>conftree</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rootpath</name></decl>, *<decl><type ref="prev"/><name>filepath</name> <init>= <expr><name>fname</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_filepath_root</name><argument_list>(<argument><expr>&amp;<name>rootpath</name></expr></argument>, <argument><expr>&amp;<name>filepath</name></expr></argument>, <argument><expr><name>APR_FILEPATH_TRUENAME</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_ERELATIVE</name> == <name>status</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Include must have an absolute path, "</expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>APR_EBADPATH</name> == <name>status</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Include has a bad path, "</expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<return>return <expr><call><name>process_resource_config_fnmatch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rootpath</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>conftree</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_process_config_tree</name><argument_list>(<argument>server_rec *s</argument>,
<argument>ap_directive_t *conftree</argument>,
<argument>apr_pool_t *p</argument>,
<argument>apr_pool_t *ptemp</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cmd_parms</name></type> <name>parms</name></decl>;</decl_stmt>
<expr_stmt><expr><name>parms</name> = <name>default_parms</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>pool</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>temp_pool</name></name> = <name>ptemp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>server</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>override</name></name> = (<name>RSRC_CONF</name> | <name>OR_ALL</name>) &amp; ~(<name>OR_AUTHCFG</name> | <name>OR_LIMIT</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>override_opts</name></name> = <name>OPT_ALL</name> | <name>OPT_SYM_OWNER</name> | <name>OPT_MULTI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>limited</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config</name><argument_list>(<argument><expr><name>conftree</name></expr></argument>, <argument><expr>&amp;<name>parms</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>lookup_defaults</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>parms</name>.<name>err_directive</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00526</expr></argument>)</argument_list></call>
"Syntax error on line %d of %s:"</expr></argument>,
<argument><expr><name><name>parms</name>.<name>err_directive</name>-&gt;<name>line_num</name></name></expr></argument>,
<argument><expr><name><name>parms</name>.<name>err_directive</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<function><type><name>apr_status_t</name></type> <name>ap_open_htaccess</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir_name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>access_name</name></decl></param>,
<param><decl><type><name>ap_configfile_t</name> **</type><name>conffile</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>full_name</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>full_name</name> = <call><name>ap_make_full_path</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>access_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pcfg_openfile</name><argument_list>(<argument><expr><name>conffile</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>*<name>full_name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_parse_htaccess</name><argument_list>(<argument>ap_conf_vector_t **result</argument>,
<argument>request_rec *r</argument>, <argument>int override</argument>,
<argument>int override_opts</argument>, <argument>apr_table_t *override_list</argument>,
<argument>const char *d</argument>, <argument>const char *access_names</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_configfile_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cmd_parms</name></type> <name>parms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> struct <name>htaccess_result</name> *</type><name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>htaccess_result</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>dc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<for>for (<init><expr><name>cache</name> = <name><name>r</name>-&gt;<name>htaccess</name></name></expr>;</init> <condition><expr><name>cache</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>cache</name> = <name><name>cache</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>override</name></name> == <name>override</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>dir</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>result</name> = <name><name>cache</name>-&gt;<name>htaccess</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>parms</name> = <name>default_parms</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>override</name></name> = <name>override</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>override_opts</name></name> = <name>override_opts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>override_list</name></name> = <name>override_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>temp_pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>server</name></name> = <name><name>r</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>access_names</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>access_name</name> <init>= <expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>access_names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>filename</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_run_open_htaccess</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>access_name</name></expr></argument>, <argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr>&amp;<name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>temptree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dc</name> = <call><name>ap_create_per_dir_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parms</name>.<name>config_file</name></name> = <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_build_config</name><argument_list>(<argument><expr>&amp;<name>parms</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>temptree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config</name><argument_list>(<argument><expr><name>temptree</name></expr></argument>, <argument><expr>&amp;<name>parms</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ALERT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"%s: %s"</expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>result</name> = <name>dc</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
&amp;&amp; !<call><name>APR_STATUS_IS_ENOTDIR</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00529</expr></argument>)</argument_list></call>
"%s pcfg_openfile: unable to check htaccess file, "
"ensure it is readable and that '%s' "
"is executable"</expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"error-notes"</expr></argument>,
<argument><expr>"Server unable to read htaccess file, denying "
"access to be safe"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
}</block></else></if>
}</block></while>
<expr_stmt><expr><name>new</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>htaccess_result</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>dir</name></name> = <name><name>parms</name>.<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>override</name></name> = <name>override</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>override_opts</name></name> = <name>override_opts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>htaccess</name></name> = <name>dc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>next</name></name> = <name><name>r</name>-&gt;<name>htaccess</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>htaccess</name></name> = <name>new</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_init_virtual_host</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>const char *hostname</argument>,
<argument>server_rec *main_server</argument>,
<argument>server_rec **ps</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr>(<name>server_rec</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>process</name></name> = <name><name>main_server</name>-&gt;<name>process</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>server_admin</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>server_hostname</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>server_scheme</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>error_fname</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>timeout</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>keep_alive_timeout</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>keep_alive</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>keep_alive_max</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>error_log</name></name> = <name><name>main_server</name>-&gt;<name>error_log</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>log</name>.<name>level</name></name> = <name>APLOG_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>log</name>.<name>module_levels</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>port</name></name> = <name><name>main_server</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>is_virtual</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>names</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> **</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>wild_names</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> **</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>module_config</name></name> = <call><name>create_empty_config</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>lookup_defaults</name></name> = <call><name>ap_create_per_dir_config</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>limit_req_line</name></name> = <name><name>main_server</name>-&gt;<name>limit_req_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>limit_req_fieldsize</name></name> = <name><name>main_server</name>-&gt;<name>limit_req_fieldsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>limit_req_fields</name></name> = <name><name>main_server</name>-&gt;<name>limit_req_fields</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ps</name> = <name>s</name></expr>;</expr_stmt>
<return>return <expr><call><name>ap_parse_vhost_addrs</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>struct ap_logconf *</argument>)</argument_list></macro> <macro><name>ap_new_log_config</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>const struct ap_logconf *old</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type>struct <name>ap_logconf</name> *</type><name>l</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>ap_logconf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>old</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>l</name>-&gt;<name>level</name></name> = <name><name>old</name>-&gt;<name>level</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>old</name>-&gt;<name>module_levels</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>l</name>-&gt;<name>module_levels</name></name> =
<call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>old</name>-&gt;<name>module_levels</name></name></expr></argument>, <argument><expr><name>conf_vector_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>l</name>-&gt;<name>level</name></name> = <name>APLOG_UNSET</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>l</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_merge_log_config</name><argument_list>(<argument>const struct ap_logconf *old_conf</argument>,
<argument>struct ap_logconf *new_conf</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name><name>new_conf</name>-&gt;<name>level</name></name> != <name>APLOG_UNSET</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name><name>new_conf</name>-&gt;<name>level</name></name> = <name><name>old_conf</name>-&gt;<name>level</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new_conf</name>-&gt;<name>module_levels</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new_conf</name>-&gt;<name>module_levels</name></name> = <name><name>old_conf</name>-&gt;<name>module_levels</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>old_conf</name>-&gt;<name>module_levels</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>conf_vector_length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>new_conf</name>-&gt;<name>module_levels</name><index>[<expr><name>i</name></expr>]</index></name> == <name>APLOG_UNSET</name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_conf</name>-&gt;<name>module_levels</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>old_conf</name>-&gt;<name>module_levels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></then></if>
}</block></for>
}</block></then></if></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fixup_virtual_hosts</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>server_rec *main_server</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>virt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>dconf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>main_server</name>-&gt;<name>lookup_defaults</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>log</name></name> = &amp;<name><name>main_server</name>-&gt;<name>log</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>virt</name> = <name><name>main_server</name>-&gt;<name>next</name></name></expr>;</init> <condition><expr><name>virt</name></expr>;</condition> <incr><expr><name>virt</name> = <name><name>virt</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><call><name>merge_server_configs</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>main_server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr><name><name>virt</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virt</name>-&gt;<name>lookup_defaults</name></name> =
<call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>main_server</name>-&gt;<name>lookup_defaults</name></name></expr></argument>,
<argument><expr><name><name>virt</name>-&gt;<name>lookup_defaults</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>server_admin</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>virt</name>-&gt;<name>server_admin</name></name> = <name><name>main_server</name>-&gt;<name>server_admin</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>timeout</name></name> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>virt</name>-&gt;<name>timeout</name></name> = <name><name>main_server</name>-&gt;<name>timeout</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>keep_alive_timeout</name></name> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>virt</name>-&gt;<name>keep_alive_timeout</name></name> = <name><name>main_server</name>-&gt;<name>keep_alive_timeout</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>keep_alive</name></name> == -1</expr>)</condition><then>
<expr_stmt><expr><name><name>virt</name>-&gt;<name>keep_alive</name></name> = <name><name>main_server</name>-&gt;<name>keep_alive</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>keep_alive_max</name></name> == -1</expr>)</condition><then>
<expr_stmt><expr><name><name>virt</name>-&gt;<name>keep_alive_max</name></name> = <name><name>main_server</name>-&gt;<name>keep_alive_max</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_merge_log_config</name><argument_list>(<argument><expr>&amp;<name><name>main_server</name>-&gt;<name>log</name></name></expr></argument>, <argument><expr>&amp;<name><name>virt</name>-&gt;<name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dconf</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>virt</name>-&gt;<name>lookup_defaults</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>log</name></name> = &amp;<name><name>virt</name>-&gt;<name>log</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_core_reorder_directories</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>virt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>ap_core_reorder_directories</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>main_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type> <name>init_config_globals</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_init_vhost_config</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>server_rec</name> *</type><name>init_server_config</name><parameter_list>(<param><decl><type><name>process_rec</name> *</type><name>process</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr>(<name>server_rec</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name><name>s</name>-&gt;<name>error_log</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>process</name></name> = <name>process</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>port</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>server_admin</name></name> = <name>DEFAULT_ADMIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>server_hostname</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>server_scheme</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>error_fname</name></name> = <name>DEFAULT_ERRORLOG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>log</name>.<name>level</name></name> = <name>DEFAULT_LOGLEVEL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>log</name>.<name>module_levels</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>limit_req_line</name></name> = <name>DEFAULT_LIMIT_REQUEST_LINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>limit_req_fieldsize</name></name> = <name>DEFAULT_LIMIT_REQUEST_FIELDSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>limit_req_fields</name></name> = <name>DEFAULT_LIMIT_REQUEST_FIELDS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>timeout</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>DEFAULT_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>keep_alive_timeout</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>DEFAULT_KEEPALIVE_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>keep_alive_max</name></name> = <name>DEFAULT_KEEPALIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>keep_alive</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>addrs</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server_addr_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name><name>s</name>-&gt;<name>addrs</name>-&gt;<name>host_addr</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00530</expr></argument>)</argument_list></call>
"initialisation: bug or getaddrinfo fail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>s</name>-&gt;<name>addrs</name>-&gt;<name>host_port</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>addrs</name>-&gt;<name>virthost</name></name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>names</name></name> = <name><name>s</name>-&gt;<name>wild_names</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>module_config</name></name> = <call><name>create_server_config</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>lookup_defaults</name></name> = <call><name>create_default_per_dir_config</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>reset_conf_vector_length</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>reserved_module_slots</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>conf_vector_length</name> = <name>max_modules</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>conf_vector_length_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>total_modules</name> + <name>reserved_module_slots</name> &lt; <name>max_modules</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>conf_vector_length</name> = <name>total_modules</name> + <name>reserved_module_slots</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>reset_conf_vector_length</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_register_config_hooks</name><argument_list>(<argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>conf_vector_length_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>server_rec*</argument>)</argument_list></macro> <macro><name>ap_read_config</name><argument_list>(<argument>process_rec *process</argument>, <argument>apr_pool_t *ptemp</argument>,
<argument>const char *filename</argument>,
<argument>ap_directive_t **conftree</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>confname</name></decl>, *<decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>process</name>-&gt;<name>pconf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><call><name>init_server_config</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>s</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>init_config_globals</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"DUMP_INCLUDES"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Included configuration files:\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>error</name> = <call><name>process_command_config</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ap_server_pre_read_config</name></expr></argument>, <argument><expr><name>conftree</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"%s: %s"</expr></argument>,
<argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>confname</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>confname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_CRIT</name></expr></argument>,
<argument><expr><name>APR_EBADPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00532</expr></argument>)</argument_list></call> "Invalid config file path %s"</expr></argument>,
<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>error</name> = <call><name>ap_process_resource_config</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>confname</name></expr></argument>, <argument><expr><name>conftree</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"%s: %s"</expr></argument>, <argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>error</name> = <call><name>ap_check_mpm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00534</expr></argument>)</argument_list></call>
"%s: Configuration error: %s"</expr></argument>, <argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>error</name> = <call><name>process_command_config</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ap_server_post_read_config</name></expr></argument>, <argument><expr><name>conftree</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"%s: %s"</expr></argument>,
<argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>s</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_single_module_configure</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>server_rec *s</argument>,
<argument>module *m</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>create_server_config</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>,
<argument><expr><call>(*<name><name>m</name>-&gt;<name>create_server_config</name></name>)<argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>create_dir_config</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>lookup_defaults</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>,
<argument><expr><call>(*<name><name>m</name>-&gt;<name>create_dir_config</name></name>)<argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_run_rewrite_args</name><argument_list>(<argument>process_rec *process</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>module</name> *</type><name>m</name></decl>;</decl_stmt>
<for>for (<init><expr><name>m</name> = <name>ap_top_module</name></expr>;</init> <condition><expr><name>m</name></expr>;</condition> <incr><expr><name>m</name> = <name><name>m</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>rewrite_args</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call>(*<name><name>m</name>-&gt;<name>rewrite_args</name></name>)<argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type> <name>show_overrides</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>pc</name></decl></param>, <param><decl><type><name>module</name> *</type><name>pm</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\tAllowed in *.conf "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>pc</name>-&gt;<name>req_override</name></name> &amp; (<name>OR_OPTIONS</name> | <name>OR_FILEINFO</name> | <name>OR_INDEXES</name>))
|| ((<name><name>pc</name>-&gt;<name>req_override</name></name> &amp; <name>RSRC_CONF</name>)
&amp;&amp; ((<name><name>pc</name>-&gt;<name>req_override</name></name> &amp; (<name>ACCESS_CONF</name> | <name>OR_AUTHCFG</name> | <name>OR_LIMIT</name>))))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"anywhere"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>pc</name>-&gt;<name>req_override</name></name> &amp; <name>RSRC_CONF</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"only outside &lt;Directory&gt;, &lt;Files&gt;, &lt;Location&gt;, or &lt;If&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"only inside &lt;Directory&gt;, &lt;Files&gt;, &lt;Location&gt;, or &lt;If&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr>(<name><name>pc</name>-&gt;<name>req_override</name></name> &amp; (<name>OR_ALL</name> | <name>ACCESS_CONF</name>)) &amp;&amp; !<name><name>pm</name>-&gt;<name>create_dir_config</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" [no per-dir config]"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>pc</name>-&gt;<name>req_override</name></name> &amp; <name>OR_ALL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" and in .htaccess\n\twhen AllowOverride"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>pc</name>-&gt;<name>req_override</name></name> &amp; <name>OR_ALL</name>) == <name>OR_ALL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" isn't None"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" includes "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pc</name>-&gt;<name>req_override</name></name> &amp; <name>OR_AUTHCFG</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>n</name>++</expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" or "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"AuthConfig"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>pc</name>-&gt;<name>req_override</name></name> &amp; <name>OR_LIMIT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>n</name>++</expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" or "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Limit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>pc</name>-&gt;<name>req_override</name></name> &amp; <name>OR_OPTIONS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>n</name>++</expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" or "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Options"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>pc</name>-&gt;<name>req_override</name></name> &amp; <name>OR_FILEINFO</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>n</name>++</expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" or "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"FileInfo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>pc</name>-&gt;<name>req_override</name></name> &amp; <name>OR_INDEXES</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>n</name>++</expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" or "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Indexes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_show_directives</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name><name>ap_loaded_modules</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr>++<name>n</name></expr></incr>) <block>{
<for>for (<init><expr><name>pc</name> = <name><name>ap_loaded_modules</name><index>[<expr><name>n</name></expr>]</index></name>-&gt;<name>cmds</name></expr>;</init> <condition><expr><name>pc</name> &amp;&amp; <name><name>pc</name>-&gt;<name>name</name></name></expr>;</condition> <incr><expr>++<name>pc</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%s (%s)\n"</expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>ap_loaded_modules</name><index>[<expr><name>n</name></expr>]</index></name>-&gt;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pc</name>-&gt;<name>errmsg</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\t%s\n"</expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>show_overrides</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name><name>ap_loaded_modules</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></for>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_show_modules</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Compiled in modules:\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name><name>ap_loaded_modules</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr>++<name>n</name></expr></incr>)
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" %s\n"</expr></argument>, <argument><expr><name><name>ap_loaded_modules</name><index>[<expr><name>n</name></expr>]</index></name>-&gt;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <macro><name>ap_retained_data_get</name><argument_list>(<argument>const char *key</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>retained</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>(<name>void</name> *)&amp;<name>retained</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>ap_pglobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retained</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <macro><name>ap_retained_data_create</name><argument_list>(<argument>const char *key</argument>, <argument>apr_size_t size</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>retained</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retained</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>ap_pglobal</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_set</name><argument_list>(<argument><expr>(const <name>void</name> *)<name>retained</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>, <argument><expr><name>ap_pglobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retained</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>count_directives_sub</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>directive</name></decl></param>, <param><decl><type><name>ap_directive_t</name> *</type><name>current</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>current</name> != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>current</name>-&gt;<name>first_child</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>count</name> += <call><name>count_directives_sub</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr><name><name>current</name>-&gt;<name>first_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>current</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr><name>directive</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>count</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>current</name> = <name><name>current</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>count</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_reserve_module_slots</name><argument_list>(<argument>int count</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><name>reserved_module_slots</name> += <name>count</name></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_reserve_module_slots_directive</name><argument_list>(<argument>const char *directive</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>ap_reserve_module_slots</name><argument_list>(<argument><expr><call><name>count_directives_sub</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr><name>ap_conftree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
</unit>
