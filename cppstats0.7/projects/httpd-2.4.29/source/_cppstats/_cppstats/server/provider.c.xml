<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/server/provider.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>global_providers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>global_providers_names</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cleanup_global_providers</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>global_providers</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>global_providers_names</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_register_provider</name><argument_list>(<argument>apr_pool_t *pool</argument>,
<argument>const char *provider_group</argument>,
<argument>const char *provider_name</argument>,
<argument>const char *provider_version</argument>,
<argument>const void *provider</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>provider_group_hash</name></decl>, *<decl><type ref="prev"/><name>provider_version_hash</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>global_providers</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>global_providers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>global_providers_names</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cleanup_global_providers</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>provider_group_hash</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>global_providers</name></expr></argument>, <argument><expr><name>provider_group</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>provider_group_hash</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>provider_group_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>global_providers</name></expr></argument>, <argument><expr><name>provider_group</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>provider_group_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>provider_version_hash</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>provider_group_hash</name></expr></argument>, <argument><expr><name>provider_name</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>provider_version_hash</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>provider_version_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>provider_group_hash</name></expr></argument>, <argument><expr><name>provider_name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>provider_version_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>provider_version_hash</name></expr></argument>, <argument><expr><name>provider_version</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>provider_group_hash</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>global_providers_names</name></expr></argument>, <argument><expr><name>provider_group</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>provider_group_hash</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>provider_group_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>global_providers_names</name></expr></argument>, <argument><expr><name>provider_group</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>provider_group_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>provider_version_hash</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>provider_group_hash</name></expr></argument>, <argument><expr><name>provider_version</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>provider_version_hash</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>provider_version_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>provider_group_hash</name></expr></argument>, <argument><expr><name>provider_version</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>provider_version_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>provider_version_hash</name></expr></argument>, <argument><expr><name>provider_name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>provider_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <macro><name>ap_lookup_provider</name><argument_list>(<argument>const char *provider_group</argument>,
<argument>const char *provider_name</argument>,
<argument>const char *provider_version</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>provider_group_hash</name></decl>, *<decl><type ref="prev"/><name>provider_name_hash</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>global_providers</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>provider_group_hash</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>global_providers</name></expr></argument>, <argument><expr><name>provider_group</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>provider_group_hash</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>provider_name_hash</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>provider_group_hash</name></expr></argument>, <argument><expr><name>provider_name</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>provider_name_hash</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>provider_name_hash</name></expr></argument>, <argument><expr><name>provider_version</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_array_header_t *</argument>)</argument_list></macro> <macro><name>ap_list_provider_names</name><argument_list>(<argument>apr_pool_t *pool</argument>,
<argument>const char *provider_group</argument>,
<argument>const char *provider_version</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_list_provider_names_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_list_provider_names_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>provider_group_hash</name></decl>, *<decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>global_providers_names</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>provider_group_hash</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>global_providers_names</name></expr></argument>, <argument><expr><name>provider_group</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>provider_group_hash</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>h</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>provider_group_hash</name></expr></argument>, <argument><expr><name>provider_version</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>h</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>provider_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_array_header_t *</argument>)</argument_list></macro> <macro><name>ap_list_provider_groups</name><argument_list>(<argument>apr_pool_t *pool</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_list_provider_groups_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_list_provider_groups_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>provider_group_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>groups_hi</name></decl>, *<decl><type ref="prev"/><name>vers_hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>group</name></decl>, *<decl><type ref="prev"/><name>version</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>global_providers_names</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>ret</name></expr>;</return></then></if>
<for>for (<init><expr><name>groups_hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>global_providers_names</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>groups_hi</name></expr>;</condition>
<incr><expr><name>groups_hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>groups_hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>groups_hi</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>group</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>provider_group_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>provider_group_hash</name> == <name>NULL</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<for>for (<init><expr><name>vers_hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>provider_group_hash</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>vers_hi</name></expr>;</condition>
<incr><expr><name>vers_hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>vers_hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>vers_hi</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>version</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>provider_group</name></name> = <name>group</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>provider_version</name></name> = <name>version</name></expr>;</expr_stmt>
}</block></for>
}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
}</block>
</unit>
