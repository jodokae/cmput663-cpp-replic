<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/server/util_debug.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>strchr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strchr</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>strrchr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strrchr</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>strstr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strstr</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_strchr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_strchr</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_strchr</name><argument_list>(<argument>char *s</argument>, <argument>int c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_strchr</name><argument_list>(<argument>char *s</argument>, <argument>int c</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_strchr_c</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_strchr_c</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_strchr_c</name><argument_list>(<argument>const char *s</argument>, <argument>int c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_strchr_c</name><argument_list>(<argument>const char *s</argument>, <argument>int c</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_strrchr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_strrchr</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_strrchr</name><argument_list>(<argument>char *s</argument>, <argument>int c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_strrchr</name><argument_list>(<argument>char *s</argument>, <argument>int c</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_strrchr_c</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_strrchr_c</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_strrchr_c</name><argument_list>(<argument>const char *s</argument>, <argument>int c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_strrchr_c</name><argument_list>(<argument>const char *s</argument>, <argument>int c</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_strstr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_strstr</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_strstr</name><argument_list>(<argument><expr><name>char</name> *<name>s</name></expr></argument>, <argument><expr>const <name>char</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_strstr</name><argument_list>(<argument>char *s</argument>, <argument>const char *c</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>strstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_strstr_c</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_strstr_c</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_strstr_c</name><argument_list>(<argument><expr>const <name>char</name> *<name>s</name></expr></argument>, <argument><expr>const <name>char</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_strstr_c</name><argument_list>(<argument>const char *s</argument>, <argument>const char *c</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>strstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_get_module_config</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_get_module_config</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr>const <name>ap_conf_vector_t</name> *<name>cv</name></expr></argument>,
<argument><expr>const <name>module</name> *<name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <macro><name>ap_get_module_config</name><argument_list>(<argument>const ap_conf_vector_t *cv</argument>,
<argument>const module *m</argument>)</argument_list></macro> <block>{
<return>return <expr>((<name>void</name> **)<name>cv</name>)<index>[<expr><name><name>m</name>-&gt;<name>module_index</name></name></expr>]</index></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_get_core_module_config</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_get_core_module_config</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr>const <name>ap_conf_vector_t</name> *<name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <macro><name>ap_get_core_module_config</name><argument_list>(<argument>const ap_conf_vector_t *cv</argument>)</argument_list></macro> <block>{
<return>return <expr>((<name>void</name> **)<name>cv</name>)<index>[<expr><name>AP_CORE_MODULE_INDEX</name></expr>]</index></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_get_server_module_loglevel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_get_server_module_loglevel</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_get_server_module_loglevel</name><argument_list>(<argument>const server_rec *s</argument>, <argument>int module_index</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_get_server_module_loglevel</name><argument_list>(<argument>const server_rec *s</argument>, <argument>int module_index</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>module_index</name> &lt; 0 || <name><name>s</name>-&gt;<name>log</name>.<name>module_levels</name></name> == <name>NULL</name> ||
<name><name>s</name>-&gt;<name>log</name>.<name>module_levels</name><index>[<expr><name>module_index</name></expr>]</index></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name><name>s</name>-&gt;<name>log</name>.<name>level</name></name></expr>;</return>
}</block></then></if>
<return>return <expr><name><name>s</name>-&gt;<name>log</name>.<name>module_levels</name><index>[<expr><name>module_index</name></expr>]</index></name></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_get_conn_module_loglevel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_get_conn_module_loglevel</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_get_conn_module_loglevel</name><argument_list>(<argument>const conn_rec *c</argument>, <argument>int module_index</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_get_conn_module_loglevel</name><argument_list>(<argument>const conn_rec *c</argument>, <argument>int module_index</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> struct <name>ap_logconf</name> *</type><name>l</name> <init>= <expr><name>(<name>c</name>)-&gt;<name>log</name></name> ? <name>(<name>c</name>)-&gt;<name>log</name></name> : &amp;<name>(<name>c</name>)-&gt;<name><name>base_server</name>-&gt;<name>log</name></name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>module_index</name> &lt; 0 || <name><name>l</name>-&gt;<name>module_levels</name></name> == <name>NULL</name> ||
<name><name>l</name>-&gt;<name>module_levels</name><index>[<expr><name>module_index</name></expr>]</index></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name><name>l</name>-&gt;<name>level</name></name></expr>;</return>
}</block></then></if>
<return>return <expr><name><name>l</name>-&gt;<name>module_levels</name><index>[<expr><name>module_index</name></expr>]</index></name></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_get_conn_server_module_loglevel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_get_conn_server_module_loglevel</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_get_conn_server_module_loglevel</name><argument_list>(<argument>const conn_rec *c</argument>,
<argument>const server_rec *s</argument>,
<argument>int module_index</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_get_conn_server_module_loglevel</name><argument_list>(<argument>const conn_rec *c</argument>,
<argument>const server_rec *s</argument>,
<argument>int module_index</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> struct <name>ap_logconf</name> *</type><name>l</name> <init>= <expr>(<name><name>c</name>-&gt;<name>log</name></name> &amp;&amp; <name><name>c</name>-&gt;<name>log</name></name> != &amp;<name><name>c</name>-&gt;<name>base_server</name>-&gt;<name>log</name></name>) ?
<name><name>c</name>-&gt;<name>log</name></name> : &amp;<name><name>s</name>-&gt;<name>log</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>module_index</name> &lt; 0 || <name><name>l</name>-&gt;<name>module_levels</name></name> == <name>NULL</name> ||
<name><name>l</name>-&gt;<name>module_levels</name><index>[<expr><name>module_index</name></expr>]</index></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name><name>l</name>-&gt;<name>level</name></name></expr>;</return>
}</block></then></if>
<return>return <expr><name><name>l</name>-&gt;<name>module_levels</name><index>[<expr><name>module_index</name></expr>]</index></name></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_get_request_module_loglevel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_get_request_module_loglevel</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_get_request_module_loglevel</name><argument_list>(<argument>const request_rec *c</argument>, <argument>int module_index</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_get_request_module_loglevel</name><argument_list>(<argument>const request_rec *r</argument>, <argument>int module_index</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> struct <name>ap_logconf</name> *</type><name>l</name> <init>= <expr><name><name>r</name>-&gt;<name>log</name></name> ? <name><name>r</name>-&gt;<name>log</name></name> :
<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>log</name></name> ? <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>log</name></name> :
&amp;<name><name>r</name>-&gt;<name>server</name>-&gt;<name>log</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>module_index</name> &lt; 0 || <name><name>l</name>-&gt;<name>module_levels</name></name> == <name>NULL</name> ||
<name><name>l</name>-&gt;<name>module_levels</name><index>[<expr><name>module_index</name></expr>]</index></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name><name>l</name>-&gt;<name>level</name></name></expr>;</return>
}</block></then></if>
<return>return <expr><name><name>l</name>-&gt;<name>module_levels</name><index>[<expr><name>module_index</name></expr>]</index></name></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_set_module_config</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_set_module_config</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name>ap_conf_vector_t</name> *<name>cv</name></expr></argument>, <argument><expr>const <name>module</name> *<name>m</name></expr></argument>,
<argument><expr><name>void</name> *<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_set_module_config</name><argument_list>(<argument>ap_conf_vector_t *cv</argument>, <argument>const module *m</argument>,
<argument>void *val</argument>)</argument_list></macro> <block>{
<expr_stmt><expr>((<name>void</name> **)<name>cv</name>)<index>[<expr><name><name>m</name>-&gt;<name>module_index</name></name></expr>]</index> = <name>val</name></expr>;</expr_stmt>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ap_set_core_module_config</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ap_set_core_module_config</name></cpp:undef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_core_module_config</name><argument_list>(<argument><expr><name>ap_conf_vector_t</name> *<name>cv</name></expr></argument>, <argument><expr><name>void</name> *<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_set_core_module_config</name><argument_list>(<argument>ap_conf_vector_t *cv</argument>, <argument>void *val</argument>)</argument_list></macro> <block>{
<expr_stmt><expr>((<name>void</name> **)<name>cv</name>)<index>[<expr><name>AP_CORE_MODULE_INDEX</name></expr>]</index> = <name>val</name></expr>;</expr_stmt>
}</block>
</unit>
