<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/server/mpm/winnt/service.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WINUSER_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arch/win32/apr_arch_utf8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arch/win32/apr_arch_misc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_winnt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_regkey.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOUSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NOUSER</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_WINUSER_</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winuser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>mpm_winnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>mpm_service_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>mpm_display_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_wchar_t</name> *</type><name>mpm_service_name_w</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>nt_service_ctx_t</name> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>mpm_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>service_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>service_thread_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>service_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>service_term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SERVICE_STATUS</name></type> <name>ssStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SERVICE_STATUS_HANDLE</name></type> <name>hServiceStatus</name></decl>;</decl_stmt>
}</block></struct></type> <name>nt_service_ctx_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>nt_service_ctx_t</name></type> <name>globdat</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ReportStatusToSCMgr</name><parameter_list>(<param><decl><type><name>int</name></type> <name>currentState</name></decl></param>, <param><decl><type><name>int</name></type> <name>waitHint</name></decl></param>,
<param><decl><type><name>nt_service_ctx_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OpenSCManager</name></cpp:undef>
<typedef>typedef <function_decl><type><name>SC_HANDLE</name></type> (<name>WINAPI</name> *<name>fpt_OpenSCManager</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>lpMachine</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>lpDatabase</name></decl></param>,
<param><decl><type><name>DWORD</name></type> <name>dwAccess</name></decl></param>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>fpt_OpenSCManager</name></type> <name>pfn_OpenSCManager</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>SC_HANDLE</name></type> <name>OpenSCManager</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>lpMachine</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>lpDatabase</name></decl></param>,
<param><decl><type><name>DWORD</name></type> <name>dwAccess</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>pfn_OpenSCManager</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<decl_stmt><decl><type><name>IF_WIN_OS_IS_UNICODE</name></type>
<name>pfn_OpenSCManager</name> <init>= <expr>(<name>fpt_OpenSCManager</name>)<name>OpenSCManagerW</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<decl_stmt><decl><type><name>ELSE_WIN_OS_IS_ANSI</name></type>
<name>pfn_OpenSCManager</name> <init>= <expr>(<name>fpt_OpenSCManager</name>)<name>OpenSCManagerA</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<return>return <expr>(*(<name>pfn_OpenSCManager</name>))(<name>lpMachine</name>, <name>lpDatabase</name>, <name>dwAccess</name>)</expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>int</name></type> <name>ap_real_exit_code</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>hold_console_open_on_error</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hConIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hConErr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>remains</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>msg</name> <init>= <expr>"Note the errors or messages above, "
"and press the &lt;ESC&gt; key to exit. "</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>coninfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>count</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>ap_real_exit_code</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>hConIn</name> = <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hConErr</name> = <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>hConIn</name> == <name>INVALID_HANDLE_VALUE</name>) || (<name>hConErr</name> == <name>INVALID_HANDLE_VALUE</name>)</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr>!<call><name>WriteConsole</name><argument_list>(<argument><expr><name>hConErr</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr>(<name>DWORD</name>)<call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
|| !<name>result</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr>!<call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>hConErr</name></expr></argument>, <argument><expr>&amp;<name>coninfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr>!<call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>hConIn</name></expr></argument>, <argument><expr><name>ENABLE_MOUSE_INPUT</name> | 0x80</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>start</name> = <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<while>while <condition>(<expr><call><name>PeekConsoleInput</name><argument_list>(<argument><expr><name>hConIn</name></expr></argument>, <argument><expr>&amp;<name>in</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call> &amp;&amp; <name>result</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<call><name>ReadConsoleInput</name><argument_list>(<argument><expr><name>hConIn</name></expr></argument>, <argument><expr>&amp;<name>in</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call> || !<name>result</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr>(<name><name>in</name>.<name>EventType</name></name> == <name>KEY_EVENT</name>) &amp;&amp; <name><name>in</name>.<name>Event</name>.<name>KeyEvent</name>.<name>bKeyDown</name></name>
&amp;&amp; (<name><name>in</name>.<name>Event</name>.<name>KeyEvent</name>.<name>uChar</name>.<name>AsciiChar</name></name> == 27)</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name><name>in</name>.<name>EventType</name></name> == <name>MOUSE_EVENT</name>
&amp;&amp; (<name><name>in</name>.<name>Event</name>.<name>MouseEvent</name>.<name>dwEventFlags</name></name> == <name>DOUBLE_CLICK</name>)</expr>)</condition><then>
<return>return;</return></then></if>
}</block></while>
<expr_stmt><expr><name>remains</name> = ((<name>start</name> + 30) - <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr>"%d..."</expr></argument>,
<argument><expr>(<name>int</name>)<name>remains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConErr</name></expr></argument>, <argument><expr><name><name>coninfo</name>.<name>dwCursorPosition</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr>!<call><name>WriteConsole</name><argument_list>(<argument><expr><name>hConErr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr>(<name>DWORD</name>)<call><name>strlen</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
|| !<name>result</name></expr>)</condition><then>
<return>return;</return></then></if>
}</block> while <condition>(<expr>(<name>remains</name> &gt; 0) &amp;&amp; <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>hConIn</name></expr></argument>, <argument><expr>1000</expr></argument>)</argument_list></call> != <name>WAIT_FAILED</name></expr>)</condition>;</do>
}</block></function>
<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>console_control_handler</name><parameter_list>(<param><decl><type><name>DWORD</name></type> <name>ctrl_type</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>ctrl_type</name></expr>)</condition> <block>{
<case>case <expr><name>CTRL_BREAK_EVENT</name></expr>:
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Apache server restarting...\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_signal_parent</name><argument_list>(<argument><expr><name>SIGNAL_PARENT_RESTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>CTRL_C_EVENT</name></expr>:
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Apache server interrupted...\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_signal_parent</name><argument_list>(<argument><expr><name>SIGNAL_PARENT_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>CTRL_CLOSE_EVENT</name></expr>:
</case><case>case <expr><name>CTRL_LOGOFF_EVENT</name></expr>:
</case><case>case <expr><name>CTRL_SHUTDOWN_EVENT</name></expr>:
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Apache server shutdown initiated...\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_signal_parent</name><argument_list>(<argument><expr><name>SIGNAL_PARENT_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>30000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case>}</block></switch>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stop_console_handler</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>console_control_handler</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>mpm_start_console_handler</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>console_control_handler</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>stop_console_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>mpm_start_child_console_handler</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>FreeConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ReportStatusToSCMgr</name><parameter_list>(<param><decl><type><name>int</name></type> <name>currentState</name></decl></param>, <param><decl><type><name>int</name></type> <name>waitHint</name></decl></param>,
<param><decl><type><name>nt_service_ctx_t</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>hServiceStatus</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>currentState</name> == <name>SERVICE_RUNNING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwWaitHint</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwCheckPoint</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwControlsAccepted</name></name> = <name>SERVICE_ACCEPT_STOP</name>
| <name>SERVICE_ACCEPT_SHUTDOWN</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>currentState</name> == <name>SERVICE_STOPPED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwWaitHint</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwCheckPoint</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwCurrentState</name></name> != <name>SERVICE_STOP_PENDING</name>
&amp;&amp; !<name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwServiceSpecificExitCode</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwServiceSpecificExitCode</name></name> = 1</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwServiceSpecificExitCode</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwWin32ExitCode</name></name> = <name>ERROR_SERVICE_SPECIFIC_ERROR</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>++<name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwCheckPoint</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwControlsAccepted</name></name> = 0</expr>;</expr_stmt>
<if>if<condition>(<expr><name>waitHint</name></expr>)</condition><then>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwWaitHint</name></name> = <name>waitHint</name></expr>;</expr_stmt></then></if>
}</block></else></if></else></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwCurrentState</name></name> = <name>currentState</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>SetServiceStatus</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>hServiceStatus</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>ssStatus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return<expr>(<name>rv</name>)</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>extern</specifier> <name>apr_pool_t</name> *</type><name>pconf</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_service_description</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schSCManager</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>mpm_service_name</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>full_description</name> = <call><name>ap_get_server_description</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>ChangeServiceConfig2</name>) &amp;&amp;
(<name>schSCManager</name> = <call><name>OpenSCManager</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SC_MANAGER_CONNECT</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schService</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<expr_stmt><expr><name>schService</name> = <call><name>OpenServiceW</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>,
<argument><expr>(<name>LPCWSTR</name>)<name>mpm_service_name_w</name></expr></argument>,
<argument><expr><name>SERVICE_CHANGE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>schService</name> = <call><name>OpenService</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>, <argument><expr><name>mpm_service_name</name></expr></argument>,
<argument><expr><name>SERVICE_CHANGE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>schService</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>full_description</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wslen</name> <init>= <expr><name>slen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name> *</type><name>full_description_w</name> <init>=
<expr>(<name>apr_wchar_t</name>*)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>,
<argument><expr><name>wslen</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>apr_wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name>full_description</name></expr></argument>, <argument><expr>&amp;<name>slen</name></expr></argument>,
<argument><expr><name>full_description_w</name></expr></argument>,
<argument><expr>&amp;<name>wslen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> != <name>APR_SUCCESS</name>) || <name>slen</name>
|| <call><name>ChangeServiceConfig2W</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>1</expr></argument>
,
<argument><expr>(<name>LPVOID</name>) &amp;<name>full_description_w</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>full_description</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<if>if <condition>(<expr><call><name>ChangeServiceConfig2</name><argument_list>(<argument><expr><name>schService</name></expr></argument>,
<argument><expr>1</expr></argument> ,
<argument><expr>(<name>LPVOID</name>) &amp;<name>full_description</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>full_description</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>service_nt_ctrl</name><parameter_list>(<param><decl><type><name>DWORD</name></type> <name>dwCtrlCode</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>dwEventType</name></decl></param>,
<param><decl><type><name>LPVOID</name></type> <name>lpEventData</name></decl></param>, <param><decl><type><name>LPVOID</name></type> <name>lpContext</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>nt_service_ctx_t</name> *</type><name>ctx</name> <init>= <expr><name>lpContext</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>dwCtrlCode</name> == <name>SERVICE_CONTROL_STOP</name>)
|| (<name>dwCtrlCode</name> == <name>SERVICE_CONTROL_SHUTDOWN</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_signal_parent</name><argument_list>(<argument><expr><name>SIGNAL_PARENT_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReportStatusToSCMgr</name><argument_list>(<argument><expr><name>SERVICE_STOP_PENDING</name></expr></argument>, <argument><expr>30000</expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NO_ERROR</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>dwCtrlCode</name> == <name>SERVICE_APACHE_RESTART</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_signal_parent</name><argument_list>(<argument><expr><name>SIGNAL_PARENT_RESTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReportStatusToSCMgr</name><argument_list>(<argument><expr><name>SERVICE_START_PENDING</name></expr></argument>, <argument><expr>30000</expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NO_ERROR</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>dwCtrlCode</name> == <name>SERVICE_CONTROL_INTERROGATE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ReportStatusToSCMgr</name><argument_list>(<argument><expr><name><name>globdat</name>.<name>ssStatus</name>.<name>dwCurrentState</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NO_ERROR</name>)</expr>;</return>
}</block></then></if>
<return>return <expr>(<name>ERROR_CALL_NOT_IMPLEMENTED</name>)</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>extern</specifier> <name>apr_array_header_t</name> *</type><name>mpm_new_argv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name> <name>__stdcall</name></type> <name>service_nt_main_fn_w</name><parameter_list>(<param><decl><type><name>DWORD</name></type> <name>argc</name></decl></param>, <param><decl><type><name>LPWSTR</name> *</type><name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ignored</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nt_service_ctx_t</name> *</type><name>ctx</name> <init>= <expr>&amp;<name>globdat</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>service_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wslen</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>slen</name> <init>= <expr><name>wslen</name> * 3 - 2</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>service_name</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<call><name>apr_conv_ucs2_to_utf8</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>wslen</name></expr></argument>, <argument><expr><name>service_name</name></expr></argument>, <argument><expr>&amp;<name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpm_service_set_name</name><argument_list>(<argument><expr><name><name>mpm_new_argv</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>ignored</name></expr></argument>, <argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>ssStatus</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>ssStatus</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwServiceType</name></name> = <name>SERVICE_WIN32_OWN_PROCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwCurrentState</name></name> = <name>SERVICE_START_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwCheckPoint</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name><name>ctx</name>-&gt;<name>hServiceStatus</name></name> =
<call><name>RegisterServiceCtrlHandlerExW</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>service_nt_ctrl</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>,
<argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00365</expr></argument>)</argument_list></call> "Failure registering service handler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ReportStatusToSCMgr</name><argument_list>(<argument><expr><name>SERVICE_START_PENDING</name></expr></argument>, <argument><expr>30000</expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>argc</name> &gt; 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>cmb_data</name></decl>, **<decl><type ref="prev"/><name>cmb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mpm_new_argv</name>-&gt;<name>nalloc</name></name> = <name><name>mpm_new_argv</name>-&gt;<name>nelts</name></name> + <name>argc</name> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>cmb_data</name> = <call><name>malloc</name><argument_list>(<argument><expr><name><name>mpm_new_argv</name>-&gt;<name>nalloc</name></name> * <sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cmb_data</name></expr></argument>, <argument><expr><name><name>mpm_new_argv</name>-&gt;<name>elts</name></name></expr></argument>,
<argument><expr><name><name>mpm_new_argv</name>-&gt;<name>elt_size</name></name> * <name><name>mpm_new_argv</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cmb_data</name> + <name><name>mpm_new_argv</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><name>argv</name> + 1</expr></argument>,
<argument><expr><name><name>mpm_new_argv</name>-&gt;<name>elt_size</name></name> * (<name>argc</name> - 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmb</name> = <name>cmb_data</name> + <name><name>mpm_new_argv</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>wslen</name> = <call><name>wcslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name> = <name>wslen</name> * 3 - 2</expr>;</expr_stmt>
<expr_stmt><expr><name>service_name</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<call><name>apr_conv_ucs2_to_utf8</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>wslen</name></expr></argument>, <argument><expr>*(<name>cmb</name>++)</expr></argument>, <argument><expr>&amp;<name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>mpm_new_argv</name>-&gt;<name>elts</name></name> = (<name>char</name> *)<name>cmb_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mpm_new_argv</name>-&gt;<name>nelts</name></name> = <name><name>mpm_new_argv</name>-&gt;<name>nalloc</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>service_init</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>service_term</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name> <name>__stdcall</name></type> <name>service_nt_main_fn</name><parameter_list>(<param><decl><type><name>DWORD</name></type> <name>argc</name></decl></param>, <param><decl><type><name>LPSTR</name> *</type><name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ignored</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nt_service_ctx_t</name> *</type><name>ctx</name> <init>= <expr>&amp;<name>globdat</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mpm_service_set_name</name><argument_list>(<argument><expr><name><name>mpm_new_argv</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>ignored</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>ssStatus</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>ssStatus</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwServiceType</name></name> = <name>SERVICE_WIN32_OWN_PROCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwCurrentState</name></name> = <name>SERVICE_START_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ssStatus</name>.<name>dwCheckPoint</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name><name>ctx</name>-&gt;<name>hServiceStatus</name></name> =
<call><name>RegisterServiceCtrlHandlerExA</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>service_nt_ctrl</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>,
<argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10008</expr></argument>)</argument_list></call> "Failure registering service handler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ReportStatusToSCMgr</name><argument_list>(<argument><expr><name>SERVICE_START_PENDING</name></expr></argument>, <argument><expr>30000</expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>argc</name> &gt; 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>cmb_data</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mpm_new_argv</name>-&gt;<name>nalloc</name></name> = <name><name>mpm_new_argv</name>-&gt;<name>nelts</name></name> + <name>argc</name> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>cmb_data</name> = <call><name>malloc</name><argument_list>(<argument><expr><name><name>mpm_new_argv</name>-&gt;<name>nalloc</name></name> * <sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cmb_data</name></expr></argument>, <argument><expr><name><name>mpm_new_argv</name>-&gt;<name>elts</name></name></expr></argument>,
<argument><expr><name><name>mpm_new_argv</name>-&gt;<name>elt_size</name></name> * <name><name>mpm_new_argv</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cmb_data</name> + <name><name>mpm_new_argv</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><name>argv</name> + 1</expr></argument>,
<argument><expr><name><name>mpm_new_argv</name>-&gt;<name>elt_size</name></name> * (<name>argc</name> - 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mpm_new_argv</name>-&gt;<name>elts</name></name> = (<name>char</name> *)<name>cmb_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mpm_new_argv</name>-&gt;<name>nelts</name></name> = <name><name>mpm_new_argv</name>-&gt;<name>nalloc</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>service_init</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>service_term</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>service_nt_dispatch_thread</name><parameter_list>(<param><decl><type><name>LPVOID</name></type> <name>nada</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<decl_stmt><decl><type><name>SERVICE_TABLE_ENTRYW</name></type> <name><name>dispatchTable_w</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>L""</expr>, <expr><name>service_nt_main_fn_w</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<decl_stmt><decl><type><name>SERVICE_TABLE_ENTRYA</name></type> <name><name>dispatchTable</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>""</expr>, <expr><name>service_nt_main_fn</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<decl_stmt><decl><type><name>IF_WIN_OS_IS_UNICODE</name></type>
<name>rv</name> <init>= <expr><call><name>StartServiceCtrlDispatcherW</name><argument_list>(<argument><expr><name>dispatchTable_w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<decl_stmt><decl><type><name>ELSE_WIN_OS_IS_ANSI</name></type>
<name>rv</name> <init>= <expr><call><name>StartServiceCtrlDispatcherA</name><argument_list>(<argument><expr><name>dispatchTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00366</expr></argument>)</argument_list></call> "Error starting Windows service control "
"dispatcher"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr>(<name>rv</name>)</expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>mpm_service_set_name</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>display_name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>set_name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>key_name</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regkey_t</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mpm_service_name</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>set_name</name></expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_collapse_spaces</name><argument_list>(<argument><expr>(<name>char</name>*) <name>mpm_service_name</name></expr></argument>, <argument><expr><name>set_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>mpm_service_name</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wslen</name> <init>= <expr><name>slen</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mpm_service_name_w</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>wslen</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>apr_wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name>mpm_service_name</name></expr></argument>, <argument><expr>&amp;<name>slen</name></expr></argument>,
<argument><expr><name>mpm_service_name_w</name></expr></argument>, <argument><expr>&amp;<name>wslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>slen</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SERVICECONFIG</name></expr></argument>, <argument><expr><name>mpm_service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_open</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>AP_REGKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>key_name</name></expr></argument>,
<argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_value_get</name><argument_list>(<argument><expr>&amp;<name>mpm_display_name</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>"DisplayName"</expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_regkey_close</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mpm_display_name</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>set_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>display_name</name> = <name>mpm_display_name</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>mpm_merge_service_args</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>args</name></decl></param>,
<param><decl><type><name>int</name></type> <name>fixed_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>svc_args</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>conf_key</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>cmb_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regkey_t</name> *</type><name>key</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>conf_key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conf_key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SERVICEPARAMS</name></expr></argument>, <argument><expr><name>mpm_service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_open</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>AP_REGKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>conf_key</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_value_array_get</name><argument_list>(<argument><expr>&amp;<name>svc_args</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>"ConfigArgs"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_regkey_close</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> == <name>ERROR_FILE_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00367</expr></argument>)</argument_list></call>
"No ConfigArgs registered for the '%s' service, "
"perhaps this service is not installed?"</expr></argument>,
<argument><expr><name>mpm_service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then> <else>else
<return>return <expr>(<name>rv</name>)</expr>;</return></else></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>svc_args</name> || <name><name>svc_args</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then> <block>{
<return>return <expr>(<name>APR_SUCCESS</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>args</name>-&gt;<name>nalloc</name></name> = <name><name>args</name>-&gt;<name>nelts</name></name> + <name><name>svc_args</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmb_data</name> = <call><name>malloc</name><argument_list>(<argument><expr><name><name>args</name>-&gt;<name>nalloc</name></name> * <sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cmb_data</name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>elt_size</name></name> * <name>fixed_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cmb_data</name> + <name>fixed_args</name></expr></argument>, <argument><expr><name><name>svc_args</name>-&gt;<name>elts</name></name></expr></argument>,
<argument><expr><name><name>svc_args</name>-&gt;<name>elt_size</name></name> * <name><name>svc_args</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cmb_data</name> + <name>fixed_args</name> + <name><name>svc_args</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr>(const <name>char</name> **)<name><name>args</name>-&gt;<name>elts</name></name> + <name>fixed_args</name></expr></argument>,
<argument><expr><name><name>args</name>-&gt;<name>elt_size</name></name> * (<name><name>args</name>-&gt;<name>nelts</name></name> - <name>fixed_args</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>-&gt;<name>elts</name></name> = (<name>char</name> *)<name>cmb_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>-&gt;<name>nelts</name></name> = <name><name>args</name>-&gt;<name>nalloc</name></name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>service_stopped</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>globdat</name>.<name>service_thread</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>mpm_nt_eventlog_stderr_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name><name>globdat</name>.<name>service_term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReportStatusToSCMgr</name><argument_list>(<argument><expr><name>SERVICE_STOPPED</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>globdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>globdat</name>.<name>service_thread</name></name></expr></argument>, <argument><expr>5000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>globdat</name>.<name>service_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>mpm_service_to_start</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>display_name</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hProc</name> <init>= <expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hThread</name> <init>= <expr><call><name>GetCurrentThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>waitfor</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>ap_real_exit_code</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>DuplicateHandle</name><argument_list>(<argument><expr><name>hProc</name></expr></argument>, <argument><expr><name>hThread</name></expr></argument>, <argument><expr><name>hProc</name></expr></argument>, <argument><expr>&amp;(<name><name>globdat</name>.<name>mpm_thread</name></name>)</expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>DUPLICATE_SAME_ACCESS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOTHREAD</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>globdat</name>.<name>service_init</name></name> = <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>globdat</name>.<name>service_term</name></name> = <call><name>CreateMutex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>globdat</name>.<name>service_init</name></name> || !<name><name>globdat</name>.<name>service_term</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>globdat</name>.<name>service_thread</name></name> = <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>65536</expr></argument>,
<argument><expr><name>service_nt_dispatch_thread</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stack_res_flag</name></expr></argument>,
<argument><expr>&amp;<name><name>globdat</name>.<name>service_thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>globdat</name>.<name>service_thread</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOTHREAD</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>waitfor</name><index>[<expr>0</expr>]</index></name> = <name><name>globdat</name>.<name>service_init</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>waitfor</name><index>[<expr>1</expr>]</index></name> = <name><name>globdat</name>.<name>service_thread</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>WaitForMultipleObjects</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>waitfor</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>10000</expr></argument>)</argument_list></call> != <name>WAIT_OBJECT_0</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOTHREAD</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>service_stopped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>display_name</name> = <name>mpm_display_name</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>mpm_service_started</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>set_service_description</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReportStatusToSCMgr</name><argument_list>(<argument><expr><name>SERVICE_RUNNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>globdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>mpm_service_stopping</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ReportStatusToSCMgr</name><argument_list>(<argument><expr><name>SERVICE_STOP_PENDING</name></expr></argument>, <argument><expr>30000</expr></argument>, <argument><expr>&amp;<name>globdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>mpm_service_install</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type> <name>argv</name></decl></param>, <param><decl><type><name>int</name></type> <name>reconfig</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>key_name</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>launch_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regkey_t</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schService</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schSCManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_wchar_t</name> *</type><name>display_name_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name> *</type><name>launch_cmd_w</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>reconfig</name> ? "Reconfiguring the '%s' service\n"
: "Installing the '%s' service\n"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wslen</name> <init>= <expr><name>slen</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>display_name_w</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>wslen</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>apr_wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name>mpm_display_name</name></expr></argument>, <argument><expr>&amp;<name>slen</name></expr></argument>,
<argument><expr><name>display_name_w</name></expr></argument>, <argument><expr>&amp;<name>wslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>slen</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><name>launch_cmd_w</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>(<name>MAX_PATH</name> + 17) * <sizeof>sizeof<argument_list>(<argument><expr><name>apr_wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>launch_cmd_w</name><index>[<expr>0</expr>]</index></name> = L'"'</expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>GetModuleFileNameW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>launch_cmd_w</name> + 1</expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>launch_cmd_w</name> + <name>rc</name> + 1</expr></argument>, <argument><expr>L"\" -k runservice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>launch_cmd</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>MAX_PATH</name> + 17</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>launch_cmd</name><index>[<expr>0</expr>]</index></name> = '"'</expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>launch_cmd</name> + 1</expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>launch_cmd</name> + <name>rc</name> + 1</expr></argument>, <argument><expr>"\" -k runservice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00368</expr></argument>)</argument_list></call> "GetModuleFileName failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>schSCManager</name> = <call><name>OpenSCManager</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SC_MANAGER_CREATE_SERVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>schSCManager</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00369</expr></argument>)</argument_list></call> "Failed to open the Windows service "
"manager, perhaps you forgot to log in as Adminstrator?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>rv</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>reconfig</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<expr_stmt><expr><name>schService</name> = <call><name>OpenServiceW</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>, <argument><expr><name>mpm_service_name_w</name></expr></argument>,
<argument><expr><name>SERVICE_CHANGE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>schService</name> = <call><name>OpenService</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>, <argument><expr><name>mpm_service_name</name></expr></argument>,
<argument><expr><name>SERVICE_CHANGE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<name>schService</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00373</expr></argument>)</argument_list></call> "Failed to open the '%s' service"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>rv</name>)</expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>ChangeServiceConfigW</name><argument_list>(<argument><expr><name>schService</name></expr></argument>,
<argument><expr><name>SERVICE_WIN32_OWN_PROCESS</name></expr></argument>,
<argument><expr><name>SERVICE_AUTO_START</name></expr></argument>,
<argument><expr><name>SERVICE_ERROR_NORMAL</name></expr></argument>,
<argument><expr><name>launch_cmd_w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>L"Tcpip\0Afd\0"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>display_name_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>ChangeServiceConfig</name><argument_list>(<argument><expr><name>schService</name></expr></argument>,
<argument><expr><name>SERVICE_WIN32_OWN_PROCESS</name></expr></argument>,
<argument><expr><name>SERVICE_AUTO_START</name></expr></argument>,
<argument><expr><name>SERVICE_ERROR_NORMAL</name></expr></argument>,
<argument><expr><name>launch_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Tcpip\0Afd\0"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>,
<argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02652</expr></argument>)</argument_list></call> "ChangeServiceConfig failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>schService</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<expr_stmt><expr><name>schService</name> = <call><name>CreateServiceW</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>,
<argument><expr><name>mpm_service_name_w</name></expr></argument>,
<argument><expr><name>display_name_w</name></expr></argument>,
<argument><expr><name>SERVICE_ALL_ACCESS</name></expr></argument>,
<argument><expr><name>SERVICE_WIN32_OWN_PROCESS</name></expr></argument>,
<argument><expr><name>SERVICE_AUTO_START</name></expr></argument>,
<argument><expr><name>SERVICE_ERROR_NORMAL</name></expr></argument>,
<argument><expr><name>launch_cmd_w</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>L"Tcpip\0Afd\0"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>schService</name> = <call><name>CreateService</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>,
<argument><expr><name>mpm_service_name</name></expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>,
<argument><expr><name>SERVICE_ALL_ACCESS</name></expr></argument>,
<argument><expr><name>SERVICE_WIN32_OWN_PROCESS</name></expr></argument>,
<argument><expr><name>SERVICE_AUTO_START</name></expr></argument>,
<argument><expr><name>SERVICE_ERROR_NORMAL</name></expr></argument>,
<argument><expr><name>launch_cmd</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Tcpip\0Afd\0"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<name>schService</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00370</expr></argument>)</argument_list></call> "Failed to create the '%s' service"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>rv</name>)</expr>;</return>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_service_description</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SERVICEPARAMS</name></expr></argument>, <argument><expr><name>mpm_service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_open</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>AP_REGKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>key_name</name></expr></argument>,
<argument><expr><name>APR_READ</name> | <name>APR_WRITE</name> | <name>APR_CREATE</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_value_array_set</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"ConfigArgs"</expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_regkey_close</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00371</expr></argument>)</argument_list></call> "Failed to store ConfigArgs for the "
"'%s' service in the registry."</expr></argument>, <argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>rv</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"The '%s' service is successfully installed.\n"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>mpm_service_uninstall</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schService</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schSCManager</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Removing the '%s' service\n"</expr></argument>, <argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>schSCManager</name> = <call><name>OpenSCManager</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SC_MANAGER_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>schSCManager</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10009</expr></argument>)</argument_list></call> "Failed to open the Windows service "
"manager, perhaps you forgot to log in as Adminstrator?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>rv</name>)</expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<expr_stmt><expr><name>schService</name> = <call><name>OpenServiceW</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>, <argument><expr><name>mpm_service_name_w</name></expr></argument>, <argument><expr><name>DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>schService</name> = <call><name>OpenService</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>, <argument><expr><name>mpm_service_name</name></expr></argument>, <argument><expr><name>DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<name>schService</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10010</expr></argument>)</argument_list></call> "Failed to open the '%s' service"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>rv</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>DeleteService</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00374</expr></argument>)</argument_list></call> "Failed to delete the '%s' service"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>rv</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"The '%s' service has been removed successfully.\n"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>signal_service_transition</name><parameter_list>(<param><decl><type><name>SC_HANDLE</name></type> <name>schService</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>signal</name></decl></param>,
<param><decl><type><name>DWORD</name></type> <name>pending</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>complete</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>signal</name> &amp;&amp; !<call><name>ControlService</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr>&amp;<name><name>globdat</name>.<name>ssStatus</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<do>do <block>{
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>QueryServiceStatus</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>&amp;<name><name>globdat</name>.<name>ssStatus</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
}</block> while <condition>(<expr><name><name>globdat</name>.<name>ssStatus</name>.<name>dwCurrentState</name></name> == <name>pending</name></expr>)</condition>;</do>
<return>return <expr>(<name><name>globdat</name>.<name>ssStatus</name>.<name>dwCurrentState</name></name> == <name>complete</name>)</expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>mpm_service_start</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type> <name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schService</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schSCManager</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Starting the '%s' service\n"</expr></argument>, <argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>schSCManager</name> = <call><name>OpenSCManager</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SC_MANAGER_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>schSCManager</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10011</expr></argument>)</argument_list></call> "Failed to open the Windows service "
"manager, perhaps you forgot to log in as Adminstrator?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>rv</name>)</expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<expr_stmt><expr><name>schService</name> = <call><name>OpenServiceW</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>, <argument><expr><name>mpm_service_name_w</name></expr></argument>,
<argument><expr><name>SERVICE_START</name> | <name>SERVICE_QUERY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>schService</name> = <call><name>OpenService</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>, <argument><expr><name>mpm_service_name</name></expr></argument>,
<argument><expr><name>SERVICE_START</name> | <name>SERVICE_QUERY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<name>schService</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10012</expr></argument>)</argument_list></call> "Failed to open the '%s' service"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>rv</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>QueryServiceStatus</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>&amp;<name><name>globdat</name>.<name>ssStatus</name></name></expr></argument>)</argument_list></call>
&amp;&amp; (<name><name>globdat</name>.<name>ssStatus</name>.<name>dwCurrentState</name></name> == <name>SERVICE_RUNNING</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00377</expr></argument>)</argument_list></call> "The '%s' service is already started!"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <name>APR_EINIT</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>LPWSTR</name> *</type><name>start_argv_w</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr>(<name>argc</name> + 1) * <sizeof>sizeof<argument_list>(<argument><expr><name>LPCWSTR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wslen</name> <init>= <expr><name>slen</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>start_argv_w</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>malloc</name><argument_list>(<argument><expr><name>wslen</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>slen</name></expr></argument>, <argument><expr><name><name>start_argv_w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>wslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>slen</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
}</block></for>
<expr_stmt><expr><name><name>start_argv_w</name><index>[<expr><name>argc</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>StartServiceW</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>start_argv_w</name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>signal_service_transition</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SERVICE_START_PENDING</name></expr></argument>,
<argument><expr><name>SERVICE_RUNNING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt></then></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>start_argv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr>(<name>argc</name> + 1) * <sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>start_argv</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name> * <sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>start_argv</name><index>[<expr><name>argc</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>StartService</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>start_argv</name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>signal_service_transition</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SERVICE_START_PENDING</name></expr></argument>,
<argument><expr><name>SERVICE_RUNNING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt></then></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"The '%s' service is running.\n"</expr></argument>, <argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00378</expr></argument>)</argument_list></call>
"Failed to start the '%s' service"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>mpm_signal_service</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>int</name></type> <name>signal</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schService</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schSCManager</name></decl>;</decl_stmt>
<expr_stmt><expr><name>schSCManager</name> = <call><name>OpenSCManager</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SC_MANAGER_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>schSCManager</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>,
<argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10013</expr></argument>)</argument_list></call> "Failed to open the Windows service "
"manager, perhaps you forgot to log in as Adminstrator?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<expr_stmt><expr><name>schService</name> = <call><name>OpenServiceW</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>, <argument><expr><name>mpm_service_name_w</name></expr></argument>,
<argument><expr><name>SERVICE_INTERROGATE</name> | <name>SERVICE_QUERY_STATUS</name> |
<name>SERVICE_USER_DEFINED_CONTROL</name> |
<name>SERVICE_START</name> | <name>SERVICE_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>schService</name> = <call><name>OpenService</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>, <argument><expr><name>mpm_service_name</name></expr></argument>,
<argument><expr><name>SERVICE_INTERROGATE</name> | <name>SERVICE_QUERY_STATUS</name> |
<name>SERVICE_USER_DEFINED_CONTROL</name> |
<name>SERVICE_START</name> | <name>SERVICE_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>schService</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>,
<argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10014</expr></argument>)</argument_list></call> "Failed to open the '%s' service"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>QueryServiceStatus</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>&amp;<name><name>globdat</name>.<name>ssStatus</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>,
<argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00381</expr></argument>)</argument_list></call> "Query of the '%s' service failed"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>signal</name> &amp;&amp; (<name><name>globdat</name>.<name>ssStatus</name>.<name>dwCurrentState</name></name> == <name>SERVICE_STOPPED</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"The '%s' service is not started.\n"</expr></argument>, <argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>signal</name> ? "The '%s' service is restarting.\n"
: "The '%s' service is stopping.\n"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>signal</name></expr>)</condition><then>
<expr_stmt><expr><name>success</name> = <call><name>signal_service_transition</name><argument_list>(<argument><expr><name>schService</name></expr></argument>,
<argument><expr><name>SERVICE_CONTROL_STOP</name></expr></argument>,
<argument><expr><name>SERVICE_STOP_PENDING</name></expr></argument>,
<argument><expr><name>SERVICE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>globdat</name>.<name>ssStatus</name>.<name>dwCurrentState</name></name> == <name>SERVICE_STOPPED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>mpm_service_start</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then> <else>else
<expr_stmt><expr><name>success</name> = <call><name>signal_service_transition</name><argument_list>(<argument><expr><name>schService</name></expr></argument>,
<argument><expr><name>SERVICE_APACHE_RESTART</name></expr></argument>,
<argument><expr><name>SERVICE_START_PENDING</name></expr></argument>,
<argument><expr><name>SERVICE_RUNNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>success</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>signal</name> ? "The '%s' service has restarted.\n"
: "The '%s' service has stopped.\n"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>signal</name> ? "Failed to restart the '%s' service.\n"
: "Failed to stop the '%s' service.\n"</expr></argument>,
<argument><expr><name>mpm_display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>
</unit>
