<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/server/mpm/winnt/nt_eventlog.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_winnt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_regkey.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>display_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>stderr_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>stderr_ready</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>service_stderr_thread</name><parameter_list>(<param><decl><type><name>LPVOID</name></type> <name>hPipe</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hPipeRead</name> <init>= <expr>(<name>HANDLE</name>) <name>hPipe</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hEventSource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>errmsg</name> <init>= <expr><name>errbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>errarg</name><index>[<expr>9</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>errres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regkey_t</name> *</type><name>regkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create_ex</name><argument_list>(<argument><expr>&amp;<name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errarg</name><index>[<expr>0</expr>]</index></name> = "The Apache service named"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>errarg</name><index>[<expr>1</expr>]</index></name> = <name>display_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errarg</name><index>[<expr>2</expr>]</index></name> = "reported the following error:\r\n&gt;&gt;&gt;"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>errarg</name><index>[<expr>3</expr>]</index></name> = <name>errbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errarg</name><index>[<expr>4</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errarg</name><index>[<expr>5</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errarg</name><index>[<expr>6</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errarg</name><index>[<expr>7</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errarg</name><index>[<expr>8</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_regkey_open</name><argument_list>(<argument><expr>&amp;<name>regkey</name></expr></argument>, <argument><expr><name>AP_REGKEY_LOCAL_MACHINE</name></expr></argument>,
<argument><expr>"SYSTEM\\CurrentControlSet\\Services\\"
"EventLog\\Application\\Apache Service"</expr></argument>,
<argument><expr><name>APR_READ</name> | <name>APR_WRITE</name> | <name>APR_CREATE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>)
== <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwData</name> <init>= <expr><name>EVENTLOG_ERROR_TYPE</name> | <name>EVENTLOG_WARNING_TYPE</name> |
<name>EVENTLOG_INFORMATION_TYPE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_regkey_value_set</name><argument_list>(<argument><expr><name>regkey</name></expr></argument>, <argument><expr>"EventMessageFile"</expr></argument>,
<argument><expr>"%SystemRoot%\\System32\\netmsg.dll"</expr></argument>,
<argument><expr><name>AP_REGKEY_EXPAND</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_regkey_value_raw_set</name><argument_list>(<argument><expr><name>regkey</name></expr></argument>, <argument><expr>"TypesSupported"</expr></argument>, <argument><expr>&amp;<name>dwData</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dwData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>REG_DWORD</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_regkey_close</name><argument_list>(<argument><expr><name>regkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>hEventSource</name> = <call><name>RegisterEventSourceW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>L"Apache Service"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>stderr_ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ReadFile</name><argument_list>(<argument><expr><name>hPipeRead</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>errres</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>errres</name> == 1)</expr>)</condition> <block>{
<if>if <condition>(<expr>(<name>errmsg</name> &gt; <name>errbuf</name>) || !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>errmsg</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(*(<name>errmsg</name> - 1) == '\n')
|| (<name>errmsg</name> &gt;= <name>errbuf</name> + <sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof> - 1)</expr>)</condition><then> <block>{
<while>while <condition>(<expr>(<name>errmsg</name> &gt; <name>errbuf</name>) &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*(<name>errmsg</name> - 1)</expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>--<name>errmsg</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>errmsg</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReportEvent</name><argument_list>(<argument><expr><name>hEventSource</name></expr></argument>, <argument><expr><name>EVENTLOG_ERROR_TYPE</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>3299</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>9</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>errarg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <name>errbuf</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr>(<name>errres</name> = <call><name>GetLastError</name><argument_list>()</argument_list></call>) != <name>ERROR_BROKEN_PIPE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"Win32 error %lu reading stderr pipe stream\r\n"</expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReportEvent</name><argument_list>(<argument><expr><name>hEventSource</name></expr></argument>, <argument><expr><name>EVENTLOG_ERROR_TYPE</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>3299</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>9</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>errarg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hPipeRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeregisterEventSource</name><argument_list>(<argument><expr><name>hEventSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>stderr_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stderr_thread</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>mpm_nt_eventlog_stderr_flush</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>cleanup_thread</name> <init>= <expr><name>stderr_thread</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cleanup_thread</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hErr</name> <init>= <expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>cleanup_thread</name></expr></argument>, <argument><expr>30000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>cleanup_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>mpm_nt_eventlog_stderr_open</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>argv0</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hPipeRead</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hPipeWrite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>threadid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>eventlog_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>stderr_file</name></decl>;</decl_stmt>
<expr_stmt><expr><name>display_name</name> = <name>argv0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name>.<name>nLength</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name>.<name>lpSecurityDescriptor</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name>.<name>bInheritHandle</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CreatePipe</name><argument_list>(<argument><expr>&amp;<name>hPipeRead</name></expr></argument>, <argument><expr>&amp;<name>hPipeWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>hPipeRead</name> &amp;&amp; <name>hPipeWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stderr_ready</name> = <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stderr_thread</name> = <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>65536</expr></argument>, <argument><expr><name>service_stderr_thread</name></expr></argument>,
<argument><expr>(<name>LPVOID</name>)<name>hPipeRead</name></expr></argument>, <argument><expr><name>stack_res_flag</name></expr></argument>, <argument><expr>&amp;<name>threadid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>stderr_ready</name> &amp;&amp; <name>stderr_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>stderr_ready</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name>stderr_file</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>
== <name>APR_SUCCESS</name>)
&amp;&amp; (<call><name>apr_os_file_put</name><argument_list>(<argument><expr>&amp;<name>eventlog_file</name></expr></argument>, <argument><expr>&amp;<name>hPipeWrite</name></expr></argument>, <argument><expr><name>APR_WRITE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>
== <name>APR_SUCCESS</name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_file_dup2</name><argument_list>(<argument><expr><name>stderr_file</name></expr></argument>, <argument><expr><name>eventlog_file</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_open_stderr_log</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
