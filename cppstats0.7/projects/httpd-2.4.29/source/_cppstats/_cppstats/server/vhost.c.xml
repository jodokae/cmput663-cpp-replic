<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/server/vhost.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_vhost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_ARPA_INET_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APLOG_MODULE_INDEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>AP_CORE_MODULE_INDEX</cpp:value></cpp:define>
<typedef>typedef <type>struct <name>name_chain</name></type> <name>name_chain</name>;</typedef>
<struct>struct <name>name_chain</name> <block>{
<decl_stmt><decl><type><name>name_chain</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_addr_rec</name> *</type><name>sar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>server</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>ipaddr_chain</name></type> <name>ipaddr_chain</name>;</typedef>
<struct>struct <name>ipaddr_chain</name> <block>{
<decl_stmt><decl><type><name>ipaddr_chain</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_addr_rec</name> *</type><name>sar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>name_chain</name> *</type><name>names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>name_chain</name> *</type><name>initialnames</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>IPHASH_TABLE_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPHASH_TABLE_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>ipaddr_chain</name> *</type><name><name>iphash_table</name><index>[<expr><name>IPHASH_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ipaddr_chain</name> *</type><name>default_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>config_error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vhost_check_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_init_vhost_config</name><argument_list>(<argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>iphash_table</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iphash_table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>default_list</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_config</name><argument_list>(<argument><expr><name>vhost_check_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>get_addresses</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>w_</name></decl></param>,
<param><decl><type><name>server_addr_rec</name> ***</type><name>paddr</name></decl></param>,
<param><decl><type><name>apr_port_t</name></type> <name>default_port</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>my_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_addr_rec</name> *</type><name>sar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>w</name></decl>, *<decl><type ref="prev"/><name>host</name></decl>, *<decl><type ref="prev"/><name>scope_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wild_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>w_</name> == '\0'</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>wlen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>w_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>w_</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wild_port</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>w</name><index>[<expr><name>wlen</name> - 1</expr>]</index></name> == '*'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>wlen</name> &lt; 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>wild_port</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>w</name><index>[<expr><name>wlen</name> - 2</expr>]</index></name> == ':'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>w</name><index>[<expr><name>wlen</name> - 2</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>wild_port</name> = 1</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_parse_addr_port</name><argument_list>(<argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>scope_id</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>"The address or port is invalid"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>host</name></expr>)</condition><then> <block>{
<return>return <expr>"Missing address for VirtualHost"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>scope_id</name></expr>)</condition><then> <block>{
<return>return <expr>"Scope ids are not supported"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>port</name> &amp;&amp; !<name>wild_port</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>port</name> = <name>default_port</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call> == 0 || <call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>"_default_"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>my_addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<return>return <expr>"Could not determine a wildcard address ('0.0.0.0') -- "
"check resolver configuration."</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>my_addr</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00547</expr></argument>)</argument_list></call>
"Could not resolve host name %s -- ignoring!"</expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<do>do <block>{
<expr_stmt><expr><name>sar</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server_addr_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>**<name>paddr</name> = <name>sar</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>paddr</name> = &amp;<name><name>sar</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sar</name>-&gt;<name>host_addr</name></name> = <name>my_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sar</name>-&gt;<name>host_port</name></name> = <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sar</name>-&gt;<name>virthost</name></name> = <name>host</name></expr>;</expr_stmt>
<expr_stmt><expr><name>my_addr</name> = <name><name>my_addr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>my_addr</name></expr>)</condition>;</do>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ap_parse_vhost_addrs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hostname</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_addr_rec</name> **</type><name>addrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>addrs</name> = &amp;<name><name>s</name>-&gt;<name>addrs</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>hostname</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<expr_stmt><expr><name>err</name> = <call><name>get_addresses</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>hostname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>addrs</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>addrs</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
}</block></while>
<expr_stmt><expr>*<name>addrs</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>addrs</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>addrs</name>-&gt;<name>host_port</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name>-&gt;<name>port</name></name> = <name><name>s</name>-&gt;<name>addrs</name>-&gt;<name>host_port</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro><macro><name>ap_set_name_virtual_host</name><argument_list>(<argument>cmd_parms *cmd</argument>,
<argument>void *dummy</argument>,
<argument>const char *arg</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warnonce</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>++<name>warnonce</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name>|<name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00548</expr></argument>)</argument_list></call>
"NameVirtualHost has no effect and will be removed in the "
"next release %s:%d"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>line_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPHASH_STATISTICS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>iphash_compare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(*(const <name>int</name> *) <name>b</name> - *(const <name>int</name> *) <name>a</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_iphash_statistics</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>main_s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>count</name><index>[<expr><name>IPHASH_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ipaddr_chain</name> *</type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>total</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>IPHASH_TABLE_SIZE</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>count</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>src</name> = <name><name>iphash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>src</name></expr>;</condition> <incr><expr><name>src</name> = <name><name>src</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr>++<name><name>count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; <name>IPHASH_TABLE_SIZE</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>total</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></for>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>IPHASH_TABLE_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>count</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>iphash_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <name>buf</name> + <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03235</expr></argument>)</argument_list></call> "iphash: total hashed = %u, avg chain = %u, "
"chain lengths (count x len):"</expr></argument>,
<argument><expr><name>total</name></expr></argument>, <argument><expr><name>total</name> / <name>IPHASH_TABLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> = 1</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>IPHASH_TABLE_SIZE</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>count</name><index>[<expr><name>i</name> - 1</expr>]</index></name> != <name><name>count</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name> += <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> - (<name>p</name> - <name>buf</name>)</expr></argument>, <argument><expr>" %ux%u"</expr></argument>,
<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>count</name><index>[<expr><name>i</name> - 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>++<name>total</name></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<expr_stmt><expr><name>p</name> += <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> - (<name>p</name> - <name>buf</name>)</expr></argument>, <argument><expr>" %ux%u"</expr></argument>,
<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>count</name><index>[<expr><name>IPHASH_TABLE_SIZE</name> - 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>main_s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>unsigned</name></type> <name>hash_inaddr</name><parameter_list>(<param><decl><type><name>unsigned</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>key</name> ^= (<name>key</name> &gt;&gt; 16)</expr>;</expr_stmt>
<return>return <expr>((<name>key</name> &gt;&gt; 8) ^ <name>key</name>) % <name>IPHASH_TABLE_SIZE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>unsigned</name></type> <name>hash_addr</name><parameter_list>(<param><decl><type>struct <name>apr_sockaddr_t</name> *</type><name>sa</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>key</name></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> = *<call>(<name>unsigned</name> *)<argument_list>(<argument><expr>(<name>char</name> *)<name><name>sa</name>-&gt;<name>ipaddr_ptr</name></name> + <name><name>sa</name>-&gt;<name>ipaddr_len</name></name> - 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>hash_inaddr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>ipaddr_chain</name> *</type><name>new_ipaddr_chain</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>server_addr_rec</name> *</type><name>sar</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ipaddr_chain</name> *</type><name>new</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>names</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>initialnames</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>server</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>sar</name></name> = <name>sar</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>name_chain</name> *</type><name>new_name_chain</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>server_addr_rec</name> *</type><name>sar</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>name_chain</name> *</type><name>new</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>server</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>sar</name></name> = <name>sar</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>ipaddr_chain</name> *</type><name>find_ipaddr</name><parameter_list>(<param><decl><type><name>apr_sockaddr_t</name> *</type><name>sa</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>bucket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ipaddr_chain</name> *</type><name>trav</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ipaddr_chain</name> *</type><name>wild_match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bucket</name> = <call><name>hash_addr</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>trav</name> = <name><name>iphash_table</name><index>[<expr><name>bucket</name></expr>]</index></name></expr>;</init> <condition><expr><name>trav</name></expr>;</condition> <incr><expr><name>trav</name> = <name><name>trav</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>server_addr_rec</name> *</type><name>sar</name> <init>= <expr><name><name>trav</name>-&gt;<name>sar</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>cur</name> <init>= <expr><name><name>sar</name>-&gt;<name>host_addr</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cur</name>-&gt;<name>port</name></name> == <name><name>sa</name>-&gt;<name>port</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_sockaddr_equal</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>trav</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>wild_match</name> == <name>NULL</name> &amp;&amp; (<name><name>cur</name>-&gt;<name>port</name></name> == 0 || <name><name>sa</name>-&gt;<name>port</name></name> == 0)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_sockaddr_equal</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>wild_match</name> = <name>trav</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></for>
<return>return <expr><name>wild_match</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>ipaddr_chain</name> *</type><name>find_default_server</name><parameter_list>(<param><decl><type><name>apr_port_t</name></type> <name>port</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_addr_rec</name> *</type><name>sar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ipaddr_chain</name> *</type><name>trav</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ipaddr_chain</name> *</type><name>wild_match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>trav</name> = <name>default_list</name></expr>;</init> <condition><expr><name>trav</name></expr>;</condition> <incr><expr><name>trav</name> = <name><name>trav</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>sar</name> = <name><name>trav</name>-&gt;<name>sar</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sar</name>-&gt;<name>host_port</name></name> == <name>port</name></expr>)</condition><then> <block>{
<return>return <expr><name>trav</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>wild_match</name> == <name>NULL</name> &amp;&amp; <name><name>sar</name>-&gt;<name>host_port</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>wild_match</name> = <name>trav</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>wild_match</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IPV6</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_IN6_ANYADDR</name><parameter_list>(<param><type><name>ad</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((ad)-&gt;family == APR_INET6 &amp;&amp; IN6_IS_ADDR_UNSPECIFIED(&amp;(ad)-&gt;sa.sin6.sin6_addr))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_IN6_ANYADDR</name><parameter_list>(<param><type><name>ad</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_a_vhost</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>ipaddr_chain</name> *</type><name>ic</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>name_chain</name> *</type><name>nc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>ha</name> <init>= <expr><name><name>ic</name>-&gt;<name>sar</name>-&gt;<name>host_addr</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>ha</name>-&gt;<name>family</name></name> == <name>APR_INET</name> &amp;&amp; <name><name>ha</name>-&gt;<name>sa</name>.<name>sin</name>.<name>sin_addr</name>.<name>s_addr</name></name> == <name>INADDR_ANY</name>)
|| <call><name>IS_IN6_ANYADDR</name><argument_list>(<argument><expr><name>ha</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"*:%u"</expr></argument>,
<argument><expr><name><name>ic</name>-&gt;<name>sar</name>-&gt;<name>host_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>len</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%pI"</expr></argument>, <argument><expr><name>ha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>ic</name>-&gt;<name>sar</name>-&gt;<name>host_port</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name>-1</expr>]</index></name> = '*'</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ic</name>-&gt;<name>names</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%-22s %s (%s:%u)\n"</expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name><name>ic</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr></argument>,
<argument><expr><name><name>ic</name>-&gt;<name>server</name>-&gt;<name>defn_name</name></name></expr></argument>, <argument><expr><name><name>ic</name>-&gt;<name>server</name>-&gt;<name>defn_line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%-22s is a NameVirtualHost\n"
"%8s default server %s (%s:%u)\n"</expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>ic</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr></argument>,
<argument><expr><name><name>ic</name>-&gt;<name>server</name>-&gt;<name>defn_name</name></name></expr></argument>, <argument><expr><name><name>ic</name>-&gt;<name>server</name>-&gt;<name>defn_line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>nc</name> = <name><name>ic</name>-&gt;<name>names</name></name></expr>;</init> <condition><expr><name>nc</name></expr>;</condition> <incr><expr><name>nc</name> = <name><name>nc</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>nc</name>-&gt;<name>sar</name>-&gt;<name>host_port</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%8s port %u "</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>nc</name>-&gt;<name>sar</name>-&gt;<name>host_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%8s port * "</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"namevhost %s (%s:%u)\n"</expr></argument>,
<argument><expr><name><name>nc</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr></argument>,
<argument><expr><name><name>nc</name>-&gt;<name>server</name>-&gt;<name>defn_name</name></name></expr></argument>, <argument><expr><name><name>nc</name>-&gt;<name>server</name>-&gt;<name>defn_line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>nc</name>-&gt;<name>server</name>-&gt;<name>names</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>names</name> <init>= <expr><name><name>nc</name>-&gt;<name>server</name>-&gt;<name>names</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>name</name> <init>= <expr>(<name>char</name> **)<name><name>names</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>names</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%16s alias %s\n"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name><name>nc</name>-&gt;<name>server</name>-&gt;<name>wild_names</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>names</name> <init>= <expr><name><name>nc</name>-&gt;<name>server</name>-&gt;<name>wild_names</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>name</name> <init>= <expr>(<name>char</name> **)<name><name>names</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>names</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%16s wild alias %s\n"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_vhost_config</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ipaddr_chain</name> *</type><name>ic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"VirtualHost configuration:\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>IPHASH_TABLE_SIZE</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<for>for (<init><expr><name>ic</name> = <name><name>iphash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>ic</name></expr>;</condition> <incr><expr><name>ic</name> = <name><name>ic</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><call><name>dump_a_vhost</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></for>
<for>for (<init><expr><name>ic</name> = <name>default_list</name></expr>;</init> <condition><expr><name>ic</name></expr>;</condition> <incr><expr><name>ic</name> = <name><name>ic</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><call><name>dump_a_vhost</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_name_vhost_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>main_s</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>server_addr_rec</name> *</type><name>sar</name></decl></param>,
<param><decl><type><name>ipaddr_chain</name> *</type><name>ic</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>name_chain</name> *</type><name>nc</name> <init>= <expr><call><name>new_name_chain</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>nc</name>-&gt;<name>next</name></name> = <name><name>ic</name>-&gt;<name>names</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ic</name>-&gt;<name>server</name></name> = <name>s</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ic</name>-&gt;<name>names</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ic</name>-&gt;<name>initialnames</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ic</name>-&gt;<name>initialnames</name></name> = <name>nc</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>nc</name>-&gt;<name>next</name></name> = <name><name>ic</name>-&gt;<name>initialnames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ic</name>-&gt;<name>names</name></name> = <name>nc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ic</name>-&gt;<name>initialnames</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ic</name>-&gt;<name>names</name></name> = <name>nc</name></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fini_vhost_config</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>server_rec *main_s</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>server_addr_rec</name> *</type><name>sar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_default_vhost_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ipaddr_chain</name> **</type><name><name>iphash_table_tail</name><index>[<expr><name>IPHASH_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> = <name>main_s</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>s</name>-&gt;<name>server_hostname</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name>-&gt;<name>server_hostname</name></name> = <call><name>ap_get_local_host</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>IPHASH_TABLE_SIZE</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>iphash_table_tail</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>iphash_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>s</name> = <name><name>main_s</name>-&gt;<name>next</name></name></expr>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>server_addr_rec</name> *</type><name>sar_prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>has_default_vhost_addr</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>sar</name> = <name><name>s</name>-&gt;<name>addrs</name></name></expr>;</init> <condition><expr><name>sar</name></expr>;</condition> <incr><expr><name>sar</name> = <name><name>sar</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>ipaddr_chain</name> *</type><name>ic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>inaddr_any</name><index>[<expr>16</expr>]</index></name> <init>= <expr><block>{<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>memcmp</name><argument_list>(<argument><expr><name><name>sar</name>-&gt;<name>host_addr</name>-&gt;<name>ipaddr_ptr</name></name></expr></argument>, <argument><expr><name>inaddr_any</name></expr></argument>, <argument><expr><name><name>sar</name>-&gt;<name>host_addr</name>-&gt;<name>ipaddr_len</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ic</name> = <call><name>find_default_server</name><argument_list>(<argument><expr><name><name>sar</name>-&gt;<name>host_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ic</name> &amp;&amp; <name><name>sar</name>-&gt;<name>host_port</name></name> == <name><name>ic</name>-&gt;<name>sar</name>-&gt;<name>host_port</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>sar_prev</name> || <call><name>memcmp</name><argument_list>(<argument><expr><name><name>sar_prev</name>-&gt;<name>host_addr</name>-&gt;<name>ipaddr_ptr</name></name></expr></argument>, <argument><expr><name>inaddr_any</name></expr></argument>, <argument><expr><name><name>sar_prev</name>-&gt;<name>host_addr</name>-&gt;<name>ipaddr_len</name></name></expr></argument>)</argument_list></call>
|| <name><name>sar_prev</name>-&gt;<name>host_port</name></name> != <name><name>sar</name>-&gt;<name>host_port</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>add_name_vhost_config</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>main_s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sar</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ic</name> = <call><name>new_ipaddr_chain</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ic</name>-&gt;<name>next</name></name> = <name>default_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>default_list</name> = <name>ic</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_name_vhost_config</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>main_s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sar</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>has_default_vhost_addr</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ic</name> = <call><name>find_ipaddr</name><argument_list>(<argument><expr><name><name>sar</name>-&gt;<name>host_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ic</name> || <name><name>sar</name>-&gt;<name>host_port</name></name> != <name><name>ic</name>-&gt;<name>sar</name>-&gt;<name>host_port</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>bucket</name> <init>= <expr><call><name>hash_addr</name><argument_list>(<argument><expr><name><name>sar</name>-&gt;<name>host_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ic</name> = <call><name>new_ipaddr_chain</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ic</name>-&gt;<name>next</name></name> = *<name><name>iphash_table_tail</name><index>[<expr><name>bucket</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>iphash_table_tail</name><index>[<expr><name>bucket</name></expr>]</index></name> = <name>ic</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>add_name_vhost_config</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>main_s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sar</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>sar_prev</name> = <name>sar</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name><name>s</name>-&gt;<name>server_hostname</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>has_default_vhost_addr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name>-&gt;<name>server_hostname</name></name> = <name><name>main_s</name>-&gt;<name>server_hostname</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>s</name>-&gt;<name>addrs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name>-&gt;<name>server_hostname</name></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"bogus_host_without_forward_dns"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>hostname</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_getnameinfo</name><argument_list>(<argument><expr>&amp;<name>hostname</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>addrs</name>-&gt;<name>host_addr</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name>-&gt;<name>server_hostname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ipaddr_str</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_sockaddr_ip_get</name><argument_list>(<argument><expr>&amp;<name>ipaddr_str</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>addrs</name>-&gt;<name>host_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>main_s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00549</expr></argument>)</argument_list></call>
"Failed to resolve server name "
"for %s (check DNS) -- or specify an explicit "
"ServerName"</expr></argument>,
<argument><expr><name>ipaddr_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>server_hostname</name></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"bogus_host_without_reverse_dns"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if></else></if>
}</block></then></if>
}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPHASH_STATISTICS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dump_iphash_statistics</name><argument_list>(<argument><expr><name>main_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"DUMP_VHOSTS"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>thefile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>thefile</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_vhost_config</name><argument_list>(<argument><expr><name>thefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vhost_check_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>config_error</name> ? !<name>OK</name> : <name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>fix_hostname_v6_literal</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>host</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>double_colon</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>dst</name> = <name>host</name></expr>;</init> <condition><expr>*<name>dst</name></expr>;</condition> <incr><expr><name>dst</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>apr_isxdigit</name><argument_list>(<argument><expr>*<name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_isupper</name><argument_list>(<argument><expr>*<name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>dst</name> = <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>*<name>dst</name> == ':'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>*(<name>dst</name> + 1) == ':'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>double_colon</name></expr>)</condition><then>
<return>return <expr><name>APR_EINVAL</name></expr>;</return></then></if>
<expr_stmt><expr><name>double_colon</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*(<name>dst</name> + 1) == '.'</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>*<name>dst</name> == '.'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>*(<name>dst</name> + 1) == ':' || *(<name>dst</name> + 1) == '.'</expr>)</condition><then>
<return>return <expr><name>APR_EINVAL</name></expr>;</return></then></if>
}</block></then> <else>else <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></else></if></else></if></else></if>
}</block></for>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>fix_hostname_non_v6</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>host</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>dst</name></decl>;</decl_stmt>
<for>for (<init><expr><name>dst</name> = <name>host</name></expr>;</init> <condition><expr>*<name>dst</name></expr>;</condition> <incr><expr><name>dst</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>apr_islower</name><argument_list>(<argument><expr>*<name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr>*<name>dst</name> == '.'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>*(<name>dst</name> + 1) == '.'</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>apr_isupper</name><argument_list>(<argument><expr>*<name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>dst</name> = <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>dst</name> == '/' || *<name>dst</name> == '\\'</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if></else></if></else></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>dst</name> &gt; <name>host</name> &amp;&amp; <name><name>dst</name><index>[<expr>-1</expr>]</index></name> == '.'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dst</name><index>[<expr>-1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>strict_hostname_check</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>host</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_dotted_decimal</name> <init>= <expr>1</expr></init>, <name>leading_zeroes</name> <init>= <expr>0</expr></init>, <name>dots</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>ch</name> = <name>host</name></expr>;</init> <condition><expr>*<name>ch</name></expr>;</condition> <incr><expr><name>ch</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>apr_isalpha</name><argument_list>(<argument><expr>*<name>ch</name></expr></argument>)</argument_list></call> || *<name>ch</name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>is_dotted_decimal</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ch</name><index>[<expr>0</expr>]</index></name> == '.'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>dots</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ch</name><index>[<expr>1</expr>]</index></name> == '0' &amp;&amp; <call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>leading_zeroes</name> = 1</expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<goto>goto <name>bad</name>;</goto>
}</block></then></if></else></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>is_dotted_decimal</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>host</name><index>[<expr>0</expr>]</index></name> == '.' || (<name><name>host</name><index>[<expr>0</expr>]</index></name> == '0' &amp;&amp; <call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>host</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><name>leading_zeroes</name> = 1</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>leading_zeroes</name> || <name>dots</name> != 3</expr>)</condition><then> <block>{
<goto>goto <name>bad</name>;</goto>
}</block></then></if>
}</block></then> <else>else <block>{
<while>while <condition>(<expr><name>ch</name> &gt; <name>host</name> &amp;&amp; *<name>ch</name> != '.'</expr>)</condition>
<expr_stmt><expr><name>ch</name>--</expr>;</expr_stmt></while>
<if>if <condition>(<expr><name><name>ch</name><index>[<expr>0</expr>]</index></name> == '.' &amp;&amp; <name><name>ch</name><index>[<expr>1</expr>]</index></name> != '\0' &amp;&amp; !<call><name>apr_isalpha</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>bad</name>;</goto></then></if>
}</block></else></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
<label><name>bad</name>:</label>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02415</expr></argument>)</argument_list></call>
"[strict] Invalid host name '%s'%s%.6s"</expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr>*<name>ch</name> ? ", problem near: " : ""</expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fix_hostname</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host_header</name></decl></param>,
<param><decl><type><name>unsigned</name></type> <name>http_conformance</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>, *<decl><type ref="prev"/><name>scope_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_v6literal</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strict</name> <init>= <expr>(<name>http_conformance</name> != <name>AP_HTTP_CONFORMANCE_UNSAFE</name>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>src</name> = <name>host_header</name> ? <name>host_header</name> : <name><name>r</name>-&gt;<name>hostname</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>src</name></expr>)</condition><then> <block>{
<return>return <expr><name>is_v6literal</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>c</name> = <name>src</name></expr>;</init> <condition><expr><call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>c</name></expr></incr>)<empty_stmt>;</empty_stmt></for>
<if>if <condition>(<expr>!*<name>c</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>strict</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02416</expr></argument>)</argument_list></call>
"[strict] purely numeric host names not allowed: %s"</expr></argument>,
<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad_nolog</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>hostname</name></name> = <name>src</name></expr>;</expr_stmt>
<return>return <expr><name>is_v6literal</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>host_header</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_parse_addr_port</name><argument_list>(<argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>scope_id</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || <name>scope_id</name></expr>)</condition><then>
<goto>goto <name>bad</name>;</goto></then></if>
<if>if <condition>(<expr><name>port</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port_str</name></name> = <call><name>apr_itoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>host_header</name><index>[<expr>0</expr>]</index></name> == '['</expr>)</condition><then>
<expr_stmt><expr><name>is_v6literal</name> = 1</expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>host</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_strchr</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>is_v6literal</name> = 1</expr>;</expr_stmt></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>is_v6literal</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>fix_hostname_v6_literal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>fix_hostname_non_v6</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>strict</name> &amp;&amp; <name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name>rv</name> = <call><name>strict_hostname_check</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<goto>goto <name>bad</name>;</goto></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>hostname</name></name> = <name>host</name></expr>;</expr_stmt>
<return>return <expr><name>is_v6literal</name></expr>;</return>
<label><name>bad</name>:</label>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00550</expr></argument>)</argument_list></call>
"Client sent malformed Host header: %s"</expr></argument>,
<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>bad_nolog</name>:</label>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_BAD_REQUEST</name></expr>;</expr_stmt>
<return>return <expr><name>is_v6literal</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>matches_aliases</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>names</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>server_hostname</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>names</name> = <name><name>s</name>-&gt;<name>names</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>names</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>name</name> <init>= <expr>(<name>char</name> **) <name><name>names</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>names</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <continue>continue;</continue></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name>names</name> = <name><name>s</name>-&gt;<name>wild_names</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>names</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>name</name> <init>= <expr>(<name>char</name> **) <name><name>names</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>names</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <continue>continue;</continue></then></if>
<if>if <condition>(<expr>!<call><name>ap_strcasecmp_match</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
}</block></for>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_matches_request_vhost</name><argument_list>(<argument>request_rec *r</argument>, <argument>const char *host</argument>,
<argument>apr_port_t port</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_addr_rec</name> *</type><name>sar</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> = <name><name>r</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>sar</name> = <name><name>s</name>-&gt;<name>addrs</name></name></expr>;</init> <condition><expr><name>sar</name></expr>;</condition> <incr><expr><name>sar</name> = <name><name>sar</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>(<name><name>sar</name>-&gt;<name>host_port</name></name> == 0 || <name>port</name> == <name><name>sar</name>-&gt;<name>host_port</name></name>)
&amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>sar</name>-&gt;<name>virthost</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>port</name> != <name><name>s</name>-&gt;<name>port</name></name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr><call><name>matches_aliases</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type> <name>check_hostalias</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host</name> <init>= <expr><name><name>r</name>-&gt;<name>hostname</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>virthost_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>last_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>name_chain</name> *</type><name>src</name></decl>;</decl_stmt>
<expr_stmt><expr><name>virthost_s</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_s</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> = <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>src</name> = <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>vhost_lookup_data</name></name></expr>;</init> <condition><expr><name>src</name></expr>;</condition> <incr><expr><name>src</name> = <name><name>src</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>server_addr_rec</name> *</type><name>sar</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sar</name> = <name><name>src</name>-&gt;<name>sar</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sar</name>-&gt;<name>host_port</name></name> != 0 &amp;&amp; <name>port</name> != <name><name>sar</name>-&gt;<name>host_port</name></name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>s</name> = <name><name>src</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> != <name>last_s</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>matches_aliases</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<goto>goto <name>found</name>;</goto>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>last_s</name> = <name>s</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>sar</name>-&gt;<name>virthost</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>virthost_s</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>virthost_s</name> = <name>s</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>virthost_s</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <name>virthost_s</name></expr>;</expr_stmt>
<goto>goto <name>found</name>;</goto>
}</block></then></if>
<return>return;</return>
<label><name>found</name>:</label>
<expr_stmt><expr><name><name>r</name>-&gt;<name>server</name></name> = <name>s</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>check_serverpath</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>last_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>name_chain</name> *</type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<expr_stmt><expr><name>port</name> = <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_s</name> = <name>NULL</name></expr>;</expr_stmt>
<for>for (<init><expr><name>src</name> = <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>vhost_lookup_data</name></name></expr>;</init> <condition><expr><name>src</name></expr>;</condition> <incr><expr><name>src</name> = <name><name>src</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>src</name>-&gt;<name>sar</name>-&gt;<name>host_port</name></name> != 0 &amp;&amp; <name>port</name> != <name><name>src</name>-&gt;<name>sar</name>-&gt;<name>host_port</name></name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>s</name> = <name><name>src</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> == <name>last_s</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>last_s</name> = <name>s</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>path</name></name> &amp;&amp; !<call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>pathlen</name></name></expr></argument>)</argument_list></call> &amp;&amp;
(<name><name>s</name>-&gt;<name>path</name><index>[<expr><name><name>s</name>-&gt;<name>pathlen</name></name> - 1</expr>]</index></name> == '/' ||
<name><name>r</name>-&gt;<name>uri</name><index>[<expr><name><name>s</name>-&gt;<name>pathlen</name></name></expr>]</index></name> == '/' ||
<name><name>r</name>-&gt;<name>uri</name><index>[<expr><name><name>s</name>-&gt;<name>pathlen</name></name></expr>]</index></name> == '\0')</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>server</name></name> = <name>s</name></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <specifier>const</specifier> <name>char</name> *</type><name>construct_host_header</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>int</name></type> <name>is_v6literal</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>iovec</name></type> <name><name>iov</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nvec</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>is_v6literal</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_base</name> = "["</expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_len</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>nvec</name>++</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name><name>r</name>-&gt;<name>hostname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nvec</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_v6literal</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_base</name> = "]"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_len</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>nvec</name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port_str</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_base</name> = ":"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_len</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>nvec</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_base</name> = <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port_str</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nvec</name>++</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>apr_pstrcatv</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_update_vhost_from_headers</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host_header</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Host"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_v6literal</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_hostname_from_url</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>hostname</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>have_hostname_from_url</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>is_v6literal</name> = <call><name>fix_hostname</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>http_conformance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>host_header</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>is_v6literal</name> = <call><name>fix_hostname</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>host_header</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>http_conformance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>http_conformance</name></name> != <name>AP_HTTP_CONFORMANCE_UNSAFE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>have_hostname_from_url</name> &amp;&amp; <name>host_header</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repl</name> <init>= <expr><call><name>construct_host_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>is_v6literal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Host"</expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02417</expr></argument>)</argument_list></call>
"Replacing host header '%s' with host '%s' given "
"in the request uri"</expr></argument>, <argument><expr><name>host_header</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>vhost_lookup_data</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>hostname</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>check_hostalias</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>check_serverpath</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_vhost_iterate_given_conn</name><argument_list>(<argument>conn_rec *conn</argument>,
<argument>ap_vhost_iterate_conn_cb func_cb</argument>,
<argument>void* baton</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>last_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>name_chain</name> *</type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>vhost_lookup_data</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>last_s</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> = <name><name>conn</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>src</name> = <name><name>conn</name>-&gt;<name>vhost_lookup_data</name></name></expr>;</init> <condition><expr><name>src</name></expr>;</condition> <incr><expr><name>src</name> = <name><name>src</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>server_addr_rec</name> *</type><name>sar</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sar</name> = <name><name>src</name>-&gt;<name>sar</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sar</name>-&gt;<name>host_port</name></name> != 0 &amp;&amp; <name>port</name> != <name><name>sar</name>-&gt;<name>host_port</name></name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>s</name> = <name><name>src</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> == <name>last_s</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>last_s</name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>func_cb</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != 0</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>func_cb</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>base_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_update_vhost_given_ip</name><argument_list>(<argument>conn_rec *conn</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ipaddr_chain</name> *</type><name>trav</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<expr_stmt><expr><name>trav</name> = <call><name>find_ipaddr</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>local_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>trav</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>vhost_lookup_data</name></name> = <name><name>trav</name>-&gt;<name>names</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>base_server</name></name> = <name><name>trav</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>port</name> = <name><name>conn</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>trav</name> = <call><name>find_default_server</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>trav</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>vhost_lookup_data</name></name> = <name><name>trav</name>-&gt;<name>names</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>base_server</name></name> = <name><name>trav</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>vhost_lookup_data</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block>
</unit>
