<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/_cppstats/server/scoreboard.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_TYPES_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APLOG_MODULE_INDEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>AP_CORE_MODULE_INDEX</cpp:value></cpp:define>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>scoreboard</name> *</type><name>ap_scoreboard_image</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>const</specifier> <name>char</name> *</type><name>ap_scoreboard_fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_scoreboard_e</name></type> <name>scoreboard_type</name></decl>;</decl_stmt>
<function><type><specifier>const</specifier> <name>char</name> *</type> <name>ap_set_scoreboard</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ap_scoreboard_fname</name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>int</name></type> <name>ap_extended_status</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ap_set_extended_status</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ap_extended_status</name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>int</name></type> <name>ap_mod_status_reqtail</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ap_set_reqtail</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ap_mod_status_reqtail</name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_shm.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>apr_shm_t</name> *</type><name>ap_scoreboard_shm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>APR_HOOK_STRUCT</name><argument_list>(
<argument>APR_HOOK_LINK(pre_mpm)</argument>
)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>,<argument>pre_mpm</argument>,
<argument>(apr_pool_t *p, ap_scoreboard_e sb_type)</argument>,
<argument>(p, sb_type)</argument>,<argument>OK</argument>,<argument>DECLINED</argument>)</argument_list></macro>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_logio_get_last_bytes</name></expr></argument>)</argument_list></call>
*<name>pfn_ap_logio_get_last_bytes</name></expr>;</expr_stmt>
<struct>struct <name>ap_sb_handle_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>child_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thread_num</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>server_limit</name></decl>, <decl><type ref="prev"/><name>thread_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_size_t</name></type> <name>scoreboard_size</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_cleanup_shared_mem</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ap_scoreboard_image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_scoreboard_image</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_shm_destroy</name><argument_list>(<argument><expr><name>ap_scoreboard_shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OF_scoreboard</name></cpp:macro> <cpp:value>APR_ALIGN_DEFAULT(sizeof(scoreboard))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OF_global_score</name></cpp:macro> <cpp:value>APR_ALIGN_DEFAULT(sizeof(global_score))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OF_process_score</name></cpp:macro> <cpp:value>APR_ALIGN_DEFAULT(sizeof(process_score))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OF_worker_score</name></cpp:macro> <cpp:value>APR_ALIGN_DEFAULT(sizeof(worker_score))</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_calc_scoreboard_size</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_HARD_LIMIT_THREADS</name></expr></argument>, <argument><expr>&amp;<name>thread_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_HARD_LIMIT_DAEMONS</name></expr></argument>, <argument><expr>&amp;<name>server_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scoreboard_size</name> = <name>SIZE_OF_global_score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scoreboard_size</name> += <name>SIZE_OF_process_score</name> * <name>server_limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scoreboard_size</name> += <name>SIZE_OF_worker_score</name> * <name>server_limit</name> * <name>thread_limit</name></expr>;</expr_stmt>
<return>return <expr><name>scoreboard_size</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_init_scoreboard</name><argument_list>(<argument>void *shared_score</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>more_storage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pfn_ap_logio_get_last_bytes</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_logio_get_last_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>shared_score</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_calc_scoreboard_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_scoreboard_image</name> =
<call><name>ap_calloc</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>SIZE_OF_scoreboard</name> + <name>server_limit</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>worker_score</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>more_storage</name> = <name>shared_score</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name></name> = (<name>global_score</name> *)<name>more_storage</name></expr>;</expr_stmt>
<expr_stmt><expr><name>more_storage</name> += <name>SIZE_OF_global_score</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name></name> = (<name>process_score</name> *)<name>more_storage</name></expr>;</expr_stmt>
<expr_stmt><expr><name>more_storage</name> += <name>SIZE_OF_process_score</name> * <name>server_limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name></name> =
<call>(<name>worker_score</name> **)<argument_list>(<argument><expr>(<name>char</name>*)<name>ap_scoreboard_image</name> + <name>SIZE_OF_scoreboard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>server_limit</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>worker_score</name> *)<name>more_storage</name></expr>;</expr_stmt>
<expr_stmt><expr><name>more_storage</name> += <name>thread_limit</name> * <name>SIZE_OF_worker_score</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>more_storage</name> == (<name>char</name>*)<name>shared_score</name> + <name>scoreboard_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>server_limit</name></name> = <name>server_limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>thread_limit</name></name> = <name>thread_limit</name></expr>;</expr_stmt>
}</block>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>create_namebased_scoreboard</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_shm_remove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_shm_create</name><argument_list>(<argument><expr>&amp;<name>ap_scoreboard_shm</name></expr></argument>, <argument><expr><name>scoreboard_size</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00001</expr></argument>)</argument_list></call>
"unable to create or access scoreboard \"%s\" "
"(name-based shared memory failure)"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>open_scoreboard</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>global_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>global_pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00002</expr></argument>)</argument_list></call>
"Fatal error: unable to create global pool "
"for use by the scoreboard"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ap_scoreboard_fname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fname</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>ap_scoreboard_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>APR_EBADPATH</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00003</expr></argument>)</argument_list></call>
"Fatal error: Invalid Scoreboard path %s"</expr></argument>,
<argument><expr><name>ap_scoreboard_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EBADPATH</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>create_namebased_scoreboard</name><argument_list>(<argument><expr><name>global_pool</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_shm_create</name><argument_list>(<argument><expr>&amp;<name>ap_scoreboard_shm</name></expr></argument>, <argument><expr><name>scoreboard_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>global_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> != <name>APR_SUCCESS</name>) &amp;&amp; (<name>rv</name> != <name>APR_ENOTIMPL</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00004</expr></argument>)</argument_list></call>
"Unable to create or access scoreboard "
"(anonymous shared memory failure)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then>
<else>else <if>if <condition>(<expr><name>rv</name> == <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_scoreboard_fname</name> = <name>DEFAULT_SCOREBOARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fname</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>ap_scoreboard_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>create_namebased_scoreboard</name><argument_list>(<argument><expr><name>global_pool</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_reopen_scoreboard</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>apr_shm_t **shm</argument>,
<argument>int detached</argument>)</argument_list></macro> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<if>if <condition>(<expr>!<name>detached</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_shm_size_get</name><argument_list>(<argument><expr><name>ap_scoreboard_shm</name></expr></argument>)</argument_list></call> &lt; <name>scoreboard_size</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00005</expr></argument>)</argument_list></call>
"Fatal error: shared scoreboard too small for child!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_shm_detach</name><argument_list>(<argument><expr><name>ap_scoreboard_shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_scoreboard_shm</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>shm</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>shm</name> = <name>ap_scoreboard_shm</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<function><type><name>apr_status_t</name></type> <name>ap_cleanup_scoreboard</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>ap_scoreboard_image</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>scoreboard_type</name> == <name>SB_SHARED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_cleanup_shared_mem</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ap_scoreboard_image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_scoreboard_image</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>ap_create_scoreboard</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>ap_scoreboard_e</name></type> <name>sb_type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>ap_scoreboard_image</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>restart_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SIZE_OF_process_score</name> * <name>server_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>server_limit</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SIZE_OF_worker_score</name> * <name>thread_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>ap_init_scoreboard</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_calc_scoreboard_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<if>if <condition>(<expr><name>sb_type</name> == <name>SB_SHARED</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>sb_shared</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>open_scoreboard</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> || !(<name>sb_shared</name> = <call><name>apr_shm_baseaddr_get</name><argument_list>(<argument><expr><name>ap_scoreboard_shm</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sb_shared</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>scoreboard_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_init_scoreboard</name><argument_list>(<argument><expr><name>sb_shared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<decl_stmt><decl><type><name>void</name> *</type><name>sb_mem</name> <init>= <expr><call><name>ap_calloc</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>scoreboard_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_init_scoreboard</name><argument_list>(<argument><expr><name>sb_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>scoreboard_type</name> = <name>sb_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>running_generation</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>restart_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ap_cleanup_scoreboard</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_exists_scoreboard_image</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<return>return <expr>(<name>ap_scoreboard_image</name> ? 1 : 0)</expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_increment_counts</name><argument_list>(<argument>ap_sb_handle_t *sb</argument>, <argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>worker_score</name> *</type><name>ws</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>sb</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>ws</name> = &amp;<name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name><name>sb</name>-&gt;<name>child_num</name></name></expr>]</index><index>[<expr><name><name>sb</name>-&gt;<name>thread_num</name></name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pfn_ap_logio_get_last_bytes</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bytes</name> = <call><name>pfn_ap_logio_get_last_bytes</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_GET</name> &amp;&amp; <name><name>r</name>-&gt;<name>method</name><index>[<expr>0</expr>]</index></name> == 'H'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>bytes</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>bytes</name> = <name><name>r</name>-&gt;<name>bytes_sent</name></name></expr>;</expr_stmt>
}</block></else></if></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>times</name><argument_list>(<argument><expr>&amp;<name><name>ws</name>-&gt;<name>times</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>access_count</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>my_access_count</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>conn_count</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>bytes_served</name></name> += <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>my_bytes_served</name></name> += <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>conn_bytes</name></name> += <name>bytes</name></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_find_child_by_pid</name><argument_list>(<argument>apr_proc_t *pid</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_daemons_limit</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MAX_DAEMON_USED</name></expr></argument>, <argument><expr>&amp;<name>max_daemons_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>max_daemons_limit</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>i</name></expr>]</index></name>.<name>pid</name> == <name><name>pid</name>-&gt;<name>pid</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>i</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr>-1</expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_create_sb_handle</name><argument_list>(<argument>ap_sb_handle_t **new_sbh</argument>, <argument>apr_pool_t *p</argument>,
<argument>int child_num</argument>, <argument>int thread_num</argument>)</argument_list></macro> <block>{
<expr_stmt><expr>*<name>new_sbh</name> = (<name>ap_sb_handle_t</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_sb_handle_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>new_sbh</name>)-&gt;<name>child_num</name></name> = <name>child_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>new_sbh</name>)-&gt;<name>thread_num</name></name> = <name>thread_num</name></expr>;</expr_stmt>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_request</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>rbuf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>rbuflen</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>the_request</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr>"NULL"</expr></argument>, <argument><expr><name>rbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>password</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name> = <name><name>r</name>-&gt;<name>the_request</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>p</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr>" "</expr></argument>,
<argument><expr><call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>r</name>-&gt;<name>parsed_uri</name></name></expr></argument>,
<argument><expr><name>APR_URI_UNP_OMITPASSWORD</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>assbackwards</name></name> ? <name>NULL</name> : " "</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>protocol</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<name>ap_mod_status_reqtail</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>rbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>slen</name> &lt; <name>rbuflen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>rbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>p</name>+(<name>slen</name>-<name>rbuflen</name>+1)</expr></argument>, <argument><expr><name>rbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>update_child_status_internal</name><parameter_list>(<param><decl><type><name>int</name></type> <name>child_num</name></decl></param>,
<param><decl><type><name>int</name></type> <name>thread_num</name></decl></param>,
<param><decl><type><name>int</name></type> <name>status</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>descr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>old_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>worker_score</name> *</type><name>ws</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mpm_generation</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ws</name> = &amp;<name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_num</name></expr>]</index><index>[<expr><name>thread_num</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_status</name> = <name><name>ws</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>SERVER_READY</name>
&amp;&amp; <name>old_status</name> == <name>SERVER_STARTING</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>process_score</name> *</type><name>ps</name> <init>= <expr>&amp;<name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>child_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>thread_num</name></name> = <name>child_num</name> * <name>thread_limit</name> + <name>thread_num</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_GENERATION</name></expr></argument>, <argument><expr>&amp;<name>mpm_generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>generation</name></name> = <name>mpm_generation</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>ap_extended_status</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>status</name> == <name>SERVER_READY</name> || <name>status</name> == <name>SERVER_DEAD</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>status</name> == <name>SERVER_DEAD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ws</name>-&gt;<name>my_access_count</name></name> = 0L</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>my_bytes_served</name></name> = 0L</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>conn_count</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>conn_bytes</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ws</name>-&gt;<name>last_used</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>descr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>request</name></name></expr></argument>, <argument><expr><name>descr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>request</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>copy_request</name><argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>request</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>request</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ws</name>-&gt;<name>request</name><index>[<expr>0</expr>]</index></name>='\0'</expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr><name>r</name> &amp;&amp; <name><name>r</name>-&gt;<name>useragent_ip</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name>val</name> = <call><name>ap_get_useragent_host</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REMOTE_NOLOOKUP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>client</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>useragent_ip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>client</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>client</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>client</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name>val</name> = <call><name>ap_get_remote_host</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name>-&gt;<name>lookup_defaults</name></name></expr></argument>,
<argument><expr><name>REMOTE_NOLOOKUP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>client</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>client</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>client</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>client</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>s</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>c</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>vhost</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>vhost</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%s:%d"</expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>server_hostname</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>vhost</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>server_hostname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>vhost</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ws</name>-&gt;<name>vhost</name><index>[<expr>0</expr>]</index></name>='\0'</expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>c</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <call><name>ap_get_protocol</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>protocol</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ws</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>old_status</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_update_child_status_from_indexes</name><argument_list>(<argument>int child_num</argument>,
<argument>int thread_num</argument>,
<argument>int status</argument>,
<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>child_num</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr><call><name>update_child_status_internal</name><argument_list>(<argument><expr><name>child_num</name></expr></argument>, <argument><expr><name>thread_num</name></expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr><name>r</name> ? <name><name>r</name>-&gt;<name>connection</name></name> : <name>NULL</name></expr></argument>,
<argument><expr><name>r</name> ? <name><name>r</name>-&gt;<name>server</name></name> : <name>NULL</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_update_child_status</name><argument_list>(<argument>ap_sb_handle_t *sbh</argument>, <argument>int status</argument>,
<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>!<name>sbh</name> || (<name><name>sbh</name>-&gt;<name>child_num</name></name> &lt; 0)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>update_child_status_internal</name><argument_list>(<argument><expr><name><name>sbh</name>-&gt;<name>child_num</name></name></expr></argument>, <argument><expr><name><name>sbh</name>-&gt;<name>thread_num</name></name></expr></argument>,
<argument><expr><name>status</name></expr></argument>,
<argument><expr><name>r</name> ? <name><name>r</name>-&gt;<name>connection</name></name> : <name>NULL</name></expr></argument>,
<argument><expr><name>r</name> ? <name><name>r</name>-&gt;<name>server</name></name> : <name>NULL</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_update_child_status_from_conn</name><argument_list>(<argument>ap_sb_handle_t *sbh</argument>, <argument>int status</argument>,
<argument>conn_rec *c</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>!<name>sbh</name> || (<name><name>sbh</name>-&gt;<name>child_num</name></name> &lt; 0)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>update_child_status_internal</name><argument_list>(<argument><expr><name><name>sbh</name>-&gt;<name>child_num</name></name></expr></argument>, <argument><expr><name><name>sbh</name>-&gt;<name>thread_num</name></name></expr></argument>,
<argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_update_child_status_from_server</name><argument_list>(<argument>ap_sb_handle_t *sbh</argument>, <argument>int status</argument>,
<argument>conn_rec *c</argument>, <argument>server_rec *s</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>!<name>sbh</name> || (<name><name>sbh</name>-&gt;<name>child_num</name></name> &lt; 0)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>update_child_status_internal</name><argument_list>(<argument><expr><name><name>sbh</name>-&gt;<name>child_num</name></name></expr></argument>, <argument><expr><name><name>sbh</name>-&gt;<name>thread_num</name></name></expr></argument>,
<argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_update_child_status_descr</name><argument_list>(<argument>ap_sb_handle_t *sbh</argument>, <argument>int status</argument>, <argument>const char *descr</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>!<name>sbh</name> || (<name><name>sbh</name>-&gt;<name>child_num</name></name> &lt; 0)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>update_child_status_internal</name><argument_list>(<argument><expr><name><name>sbh</name>-&gt;<name>child_num</name></name></expr></argument>, <argument><expr><name><name>sbh</name>-&gt;<name>thread_num</name></name></expr></argument>,
<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_time_process_request</name><argument_list>(<argument>ap_sb_handle_t *sbh</argument>, <argument>int status</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>worker_score</name> *</type><name>ws</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>sbh</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name><name>sbh</name>-&gt;<name>child_num</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>ws</name> = &amp;<name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name><name>sbh</name>-&gt;<name>child_num</name></name></expr>]</index><index>[<expr><name><name>sbh</name>-&gt;<name>thread_num</name></name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>START_PREQUEST</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ws</name>-&gt;<name>start_time</name></name> = <name><name>ws</name>-&gt;<name>last_used</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> == <name>STOP_PREQUEST</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ws</name>-&gt;<name>stop_time</name></name> = <name><name>ws</name>-&gt;<name>last_used</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>worker_score *</argument>)</argument_list></macro> <macro><name>ap_get_scoreboard_worker_from_indexes</name><argument_list>(<argument>int x</argument>, <argument>int y</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>((<name>x</name> &lt; 0) || (<name>x</name> &gt;= <name>server_limit</name>)) ||
((<name>y</name> &lt; 0) || (<name>y</name> &gt;= <name>thread_limit</name>))</expr>)</condition><then> <block>{
<return>return<expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<return>return <expr>&amp;<name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>worker_score *</argument>)</argument_list></macro> <macro><name>ap_get_scoreboard_worker</name><argument_list>(<argument>ap_sb_handle_t *sbh</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>!<name>sbh</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>ap_get_scoreboard_worker_from_indexes</name><argument_list>(<argument><expr><name><name>sbh</name>-&gt;<name>child_num</name></name></expr></argument>,
<argument><expr><name><name>sbh</name>-&gt;<name>thread_num</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_copy_scoreboard_worker</name><argument_list>(<argument>worker_score *dest</argument>,
<argument>int child_num</argument>,
<argument>int thread_num</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>worker_score</name> *</type><name>ws</name> <init>= <expr><call><name>ap_get_scoreboard_worker_from_indexes</name><argument_list>(<argument><expr><name>child_num</name></expr></argument>, <argument><expr><name>thread_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>, <argument><expr>sizeof *<name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name>-&gt;<name>client</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dest</name>-&gt;<name>client</name></name></expr></argument>)</argument_list></sizeof> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name>-&gt;<name>request</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dest</name>-&gt;<name>request</name></name></expr></argument>)</argument_list></sizeof> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name>-&gt;<name>vhost</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dest</name>-&gt;<name>vhost</name></name></expr></argument>)</argument_list></sizeof> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name>-&gt;<name>protocol</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dest</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></sizeof> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>process_score *</argument>)</argument_list></macro> <macro><name>ap_get_scoreboard_process</name><argument_list>(<argument>int x</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>(<name>x</name> &lt; 0) || (<name>x</name> &gt;= <name>server_limit</name>)</expr>)</condition><then> <block>{
<return>return<expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<return>return <expr>&amp;<name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>global_score *</argument>)</argument_list></macro> <macro><name>ap_get_scoreboard_global</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name><name>ap_scoreboard_image</name>-&gt;<name>global</name></name></expr>;</return>
}</block>
</unit>
