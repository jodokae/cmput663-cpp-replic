<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/server/mpm/mpmt_os2/mpmt_os2_child.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_NOPMAPI</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOSERRORS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_default.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_listen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_poll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>mpm_mpmt_os2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HARD_SERVER_LIMIT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HARD_THREAD_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HARD_THREAD_LIMIT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_FROM_CHILD_THREAD</name><parameter_list>(<param><type><name>c</name></type></param>, <param><type><name>t</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((c * HARD_THREAD_LIMIT) + t)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pconn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>conn_sd</name></decl>;</decl_stmt>
}</block></struct></type> <name>worker_args_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORKTYPE_CONN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORKTYPE_EXIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>pchild</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>child_slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>shutdown_pending</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ap_my_generation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <specifier>volatile</specifier></type> <name>is_graceful</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HEV</name></type> <name>shutdown_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ap_min_spare_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ap_max_spare_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>HMTX</name></type> <name>ap_mpm_accept_mutex</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>worker_main</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>vpArg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clean_child_exit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_signals</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>server_maintenance</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>vpArg</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clean_child_exit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>pchild</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>ap_mpm_child_main</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_listen_rec</name> *</type><name>lr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>requests_this_child</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulTimes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>my_pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HQUEUE</name></type> <name>workq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pollset_t</name> *</type><name>pollset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_listeners</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TID</name></type> <name>server_maint_tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>sb_mem</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DosSetSignalExceptionFocus</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>&amp;<name>ulTimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_signals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pchild</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_run_child_init</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>DosCreateEventSem</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>shutdown_event</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00189</expr></argument>)</argument_list></call>
"unable to create shutdown semaphore, exiting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clean_child_exit</name><argument_list>(<argument><expr><name>APEXIT_CHILDFATAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>DosGetNamedSharedMem</name><argument_list>(<argument><expr>&amp;<name>sb_mem</name></expr></argument>, <argument><expr><name>ap_scoreboard_fname</name></expr></argument>,
<argument><expr><name>PAG_READ</name>|<name>PAG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00190</expr></argument>)</argument_list></call>
"scoreboard not readable in child, exiting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clean_child_exit</name><argument_list>(<argument><expr><name>APEXIT_CHILDFATAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_calc_scoreboard_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_init_scoreboard</name><argument_list>(<argument><expr><name>sb_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>DosOpenMutexSem</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>ap_mpm_accept_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00191</expr></argument>)</argument_list></call>
"accept mutex couldn't be accessed in child, exiting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clean_child_exit</name><argument_list>(<argument><expr><name>APEXIT_CHILDFATAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>child_slot</name> = 0</expr>;</init> <condition><expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>child_slot</name></expr>]</index></name>.<name>pid</name> != <name>my_pid</name> &amp;&amp; <name>child_slot</name> &lt; <name>HARD_SERVER_LIMIT</name></expr>;</condition> <incr><expr><name>child_slot</name>++</expr></incr>)<empty_stmt>;</empty_stmt></for>
<if>if <condition>(<expr><name>child_slot</name> == <name>HARD_SERVER_LIMIT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00192</expr></argument>)</argument_list></call>
"child pid not found in scoreboard, exiting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clean_child_exit</name><argument_list>(<argument><expr><name>APEXIT_CHILDFATAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>ap_my_generation</name> = <name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>child_slot</name></expr>]</index></name>.<name>generation</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_slot</name></expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>worker_score</name></expr></argument>)</argument_list></sizeof> * <name>HARD_THREAD_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>DosCreateQueue</name><argument_list>(<argument><expr>&amp;<name>workq</name></expr></argument>, <argument><expr><name>QUE_FIFO</name></expr></argument>, <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>, <argument><expr>"/queues/httpd/work.%d"</expr></argument>, <argument><expr><name>my_pid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00193</expr></argument>)</argument_list></call>
"unable to create work queue, exiting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clean_child_exit</name><argument_list>(<argument><expr><name>APEXIT_CHILDFATAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>c</name> = 0</expr>;</init> <condition><expr><name>c</name> &lt; <name>ap_min_spare_threads</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
}</block></for>
<expr_stmt><expr><name>server_maint_tid</name> = <call><name>_beginthread</name><argument_list>(<argument><expr><name>server_maintenance</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>32768</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>num_listeners</name> = 0</expr>, <expr><name>lr</name> = <name>ap_listeners</name></expr>;</init> <condition><expr><name>lr</name></expr>;</condition> <incr><expr><name>lr</name> = <name><name>lr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>num_listeners</name>++</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>apr_pollset_create</name><argument_list>(<argument><expr>&amp;<name>pollset</name></expr></argument>, <argument><expr><name>num_listeners</name></expr></argument>, <argument><expr><name>pchild</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>lr</name> = <name>ap_listeners</name></expr>;</init> <condition><expr><name>lr</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>lr</name> = <name><name>lr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_pollfd_t</name></type> <name>pfd</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pfd</name>.<name>desc_type</name></name> = <name>APR_POLL_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name>.<name>desc</name>.<name>s</name></name> = <name><name>lr</name>-&gt;<name>sd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name>.<name>reqevents</name></name> = <name>APR_POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name>.<name>client_data</name></name> = <name>lr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pollset_add</name><argument_list>(<argument><expr><name>pollset</name></expr></argument>, <argument><expr>&amp;<name>pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<do>do <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pconn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>worker_args_t</name> *</type><name>worker_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_poll_idx</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pconn</name></expr></argument>, <argument><expr><name>pchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>worker_args</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pconn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>worker_args_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker_args</name>-&gt;<name>pconn</name></name> = <name>pconn</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>num_listeners</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_accept</name><argument_list>(<argument><expr>&amp;<name><name>worker_args</name>-&gt;<name>conn_sd</name></name></expr></argument>, <argument><expr><name><name>ap_listeners</name>-&gt;<name>sd</name></name></expr></argument>, <argument><expr><name>pconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_pollfd_t</name> *</type><name>poll_results</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>num_poll_results</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>DosRequestMutexSem</name><argument_list>(<argument><expr><name>ap_mpm_accept_mutex</name></expr></argument>, <argument><expr><name>SEM_INDEFINITE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>shutdown_pending</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>DosReleaseMutexSem</name><argument_list>(<argument><expr><name>ap_mpm_accept_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_pollset_poll</name><argument_list>(<argument><expr><name>pollset</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>num_poll_results</name></expr></argument>, <argument><expr>&amp;<name>poll_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosReleaseMutexSem</name><argument_list>(<argument><expr><name>ap_mpm_accept_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>last_poll_idx</name> &gt;= <name>num_listeners</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>last_poll_idx</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>lr</name> = <name><name>poll_results</name><index>[<expr><name>last_poll_idx</name>++</expr>]</index></name>.<name>client_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_accept</name><argument_list>(<argument><expr>&amp;<name><name>worker_args</name>-&gt;<name>conn_sd</name></name></expr></argument>, <argument><expr><name><name>lr</name>-&gt;<name>sd</name></name></expr></argument>, <argument><expr><name>pconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_poll_idx</name>++</expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00194</expr></argument>)</argument_list></call>
"apr_socket_accept"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clean_child_exit</name><argument_list>(<argument><expr><name>APEXIT_CHILDFATAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>DosWriteQueue</name><argument_list>(<argument><expr><name>workq</name></expr></argument>, <argument><expr><name>WORKTYPE_CONN</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>worker_args_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>worker_args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>requests_this_child</name>++</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>ap_max_requests_per_child</name> != 0 &amp;&amp; <name>requests_this_child</name> &gt;= <name>ap_max_requests_per_child</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block> while <condition>(<expr>!<name>shutdown_pending</name> &amp;&amp; <name>ap_my_generation</name> == <name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>running_generation</name></name></expr>)</condition>;</do>
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>child_slot</name></expr>]</index></name>.<name>quiescing</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosPostEventSem</name><argument_list>(<argument><expr><name>shutdown_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosWaitThread</name><argument_list>(<argument><expr>&amp;<name>server_maint_tid</name></expr></argument>, <argument><expr><name>DCWW_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_graceful</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>someleft</name></decl>;</decl_stmt>
<for>for (<init><expr><name>c</name>=0</expr>;</init> <condition><expr><name>c</name>&lt;<name>HARD_THREAD_LIMIT</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_slot</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name>.<name>status</name> != <name>SERVER_DEAD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>DosWriteQueue</name><argument_list>(<argument><expr><name>workq</name></expr></argument>, <argument><expr><name>WORKTYPE_EXIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<do>do <block>{
<expr_stmt><expr><name>someleft</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>c</name>=0</expr>;</init> <condition><expr><name>c</name>&lt;<name>HARD_THREAD_LIMIT</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_slot</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name>.<name>status</name> != <name>SERVER_DEAD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>someleft</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosSleep</name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block> while <condition>(<expr><name>someleft</name></expr>)</condition>;</do>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>DosPurgeQueue</name><argument_list>(<argument><expr><name>workq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>c</name>=0</expr>;</init> <condition><expr><name>c</name>&lt;<name>HARD_THREAD_LIMIT</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_slot</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name>.<name>status</name> != <name>SERVER_DEAD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>DosKillThread</name><argument_list>(<argument><expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_slot</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name>.<name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></else></if>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>add_worker</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>thread_slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stacksize</name> <init>= <expr><name>ap_thread_stacksize</name> == 0 ? 128*1024 : <name>ap_thread_stacksize</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>thread_slot</name>=0</expr>;</init> <condition><expr><name>thread_slot</name> &lt; <name>HARD_THREAD_LIMIT</name></expr>;</condition> <incr><expr><name>thread_slot</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_slot</name></expr>]</index><index>[<expr><name>thread_slot</name></expr>]</index></name>.<name>status</name> == <name>SERVER_DEAD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_slot</name></expr>]</index><index>[<expr><name>thread_slot</name></expr>]</index></name>.<name>status</name> = <name>SERVER_STARTING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_slot</name></expr>]</index><index>[<expr><name>thread_slot</name></expr>]</index></name>.<name>tid</name> =
<call><name>_beginthread</name><argument_list>(<argument><expr><name>worker_main</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stacksize</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>thread_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><name>ULONG</name> <name>APIENTRY</name></type> <name>thread_exception_handler</name><parameter_list>(<param><decl><type><name>EXCEPTIONREPORTRECORD</name> *</type><name>pReportRec</name></decl></param>,
<param><decl><type><name>EXCEPTIONREGISTRATIONRECORD</name> *</type><name>pRegRec</name></decl></param>,
<param><decl><type><name>CONTEXTRECORD</name> *</type><name>pContext</name></decl></param>,
<param><decl><type><name>PVOID</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>pReportRec</name>-&gt;<name>fHandlerFlags</name></name> &amp; <name>EH_NESTED_CALL</name></expr>)</condition><then> <block>{
<return>return <expr><name>XCPT_CONTINUE_SEARCH</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>pReportRec</name>-&gt;<name>ExceptionNum</name></name> == <name>XCPT_ACCESS_VIOLATION</name> ||
<name><name>pReportRec</name>-&gt;<name>ExceptionNum</name></name> == <name>XCPT_INTEGER_DIVIDE_BY_ZERO</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00195</expr></argument>)</argument_list></call>
"caught exception in worker thread, initiating child shutdown pid=%d"</expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>c</name>=0</expr>;</init> <condition><expr><name>c</name>&lt;<name>HARD_THREAD_LIMIT</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_slot</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name>.<name>tid</name> == <call><name>_gettid</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_slot</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name>.<name>status</name> = <name>SERVER_DEAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>shutdown_pending</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>parent</name><index>[<expr><name>child_slot</name></expr>]</index></name>.<name>quiescing</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosUnwindException</name><argument_list>(<argument><expr><name>UNWIND_ALL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>XCPT_CONTINUE_SEARCH</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>worker_main</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>vpArg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_thread_t</name> *</type><name>thd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_os_thread_t</name></type> <name>osthd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>conn_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>current_conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pconn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>worker_args_t</name> *</type><name>worker_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HQUEUE</name></type> <name>workq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PID</name></type> <name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>REQUESTDATA</name></type> <name>rd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>priority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thread_slot</name> <init>= <expr>(<name>int</name>)<name>vpArg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EXCEPTIONREGISTRATIONRECORD</name></type> <name>reg_rec</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>thread_exception_handler</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_sb_handle_t</name> *</type><name>sbh</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DosSetExceptionHandler</name><argument_list>( <argument><expr>&amp;<name>reg_rec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>osthd</name> = <call><name>apr_os_thread_current</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_os_thread_put</name><argument_list>(<argument><expr>&amp;<name>thd</name></expr></argument>, <argument><expr>&amp;<name>osthd</name></expr></argument>, <argument><expr><name>pchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>DosOpenQueue</name><argument_list>(<argument><expr>&amp;<name>owner</name></expr></argument>, <argument><expr>&amp;<name>workq</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>, <argument><expr>"/queues/httpd/work.%d"</expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00196</expr></argument>)</argument_list></call>
"unable to open work queue, exiting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_slot</name></expr>]</index><index>[<expr><name>thread_slot</name></expr>]</index></name>.<name>tid</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>conn_id</name> = <call><name>ID_FROM_CHILD_THREAD</name><argument_list>(<argument><expr><name>child_slot</name></expr></argument>, <argument><expr><name>thread_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_update_child_status_from_indexes</name><argument_list>(<argument><expr><name>child_slot</name></expr></argument>, <argument><expr><name>thread_slot</name></expr></argument>, <argument><expr><name>SERVER_READY</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_allocator_create</name><argument_list>(<argument><expr>&amp;<name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_allocator_max_free_set</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>ap_max_mem_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bucket_alloc</name> = <call><name>apr_bucket_alloc_create_ex</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rc</name> = <call><name>DosReadQueue</name><argument_list>(<argument><expr><name>workq</name></expr></argument>, <argument><expr>&amp;<name>rd</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>(<name>PPVOID</name>)&amp;<name>worker_args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>DCWW_WAIT</name></expr></argument>, <argument><expr>&amp;<name>priority</name></expr></argument>, <argument><expr><name>NULLHANDLE</name></expr></argument>)</argument_list></call></expr>,
<expr><name>rc</name> == 0 &amp;&amp; <name><name>rd</name>.<name>ulData</name></name> != <name>WORKTYPE_EXIT</name></expr>)</condition> <block>{
<expr_stmt><expr><name>pconn</name> = <name><name>worker_args</name>-&gt;<name>pconn</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_create_sb_handle</name><argument_list>(<argument><expr>&amp;<name>sbh</name></expr></argument>, <argument><expr><name>pconn</name></expr></argument>, <argument><expr><name>child_slot</name></expr></argument>, <argument><expr><name>thread_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_conn</name> = <call><name>ap_run_create_connection</name><argument_list>(<argument><expr><name>pconn</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
<argument><expr><name><name>worker_args</name>-&gt;<name>conn_sd</name></name></expr></argument>, <argument><expr><name>conn_id</name></expr></argument>,
<argument><expr><name>sbh</name></expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>current_conn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>current_conn</name>-&gt;<name>current_thread</name></name> = <name>thd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_process_connection</name><argument_list>(<argument><expr><name>current_conn</name></expr></argument>, <argument><expr><name><name>worker_args</name>-&gt;<name>conn_sd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lingering_close</name><argument_list>(<argument><expr><name>current_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_update_child_status_from_indexes</name><argument_list>(<argument><expr><name>child_slot</name></expr></argument>, <argument><expr><name>thread_slot</name></expr></argument>,
<argument><expr><name>SERVER_READY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>ap_update_child_status_from_indexes</name><argument_list>(<argument><expr><name>child_slot</name></expr></argument>, <argument><expr><name>thread_slot</name></expr></argument>, <argument><expr><name>SERVER_DEAD</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_alloc_destroy</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_allocator_destroy</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>server_maintenance</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>vpArg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>num_idle</name></decl>, <decl><type ref="prev"/><name>num_needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>num_pending</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>threadnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HQUEUE</name></type> <name>workq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PID</name></type> <name>owner</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>DosOpenQueue</name><argument_list>(<argument><expr>&amp;<name>owner</name></expr></argument>, <argument><expr>&amp;<name>workq</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>, <argument><expr>"/queues/httpd/work.%d"</expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00197</expr></argument>)</argument_list></call>
"unable to open work queue in maintenance thread"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<do>do <block>{
<for>for (<init><expr><name>num_idle</name>=0</expr>, <expr><name>threadnum</name>=0</expr>;</init> <condition><expr><name>threadnum</name> &lt; <name>HARD_THREAD_LIMIT</name></expr>;</condition> <incr><expr><name>threadnum</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>num_idle</name> += <name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr><name>child_slot</name></expr>]</index><index>[<expr><name>threadnum</name></expr>]</index></name>.<name>status</name> == <name>SERVER_READY</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>DosQueryQueue</name><argument_list>(<argument><expr><name>workq</name></expr></argument>, <argument><expr>&amp;<name>num_pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_needed</name> = <name>ap_min_spare_threads</name> - <name>num_idle</name> + <name>num_pending</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>num_needed</name> &gt; 0</expr>)</condition><then> <block>{
<for>for (<init><expr><name>threadnum</name>=0</expr>;</init> <condition><expr><name>threadnum</name> &lt; <name>num_needed</name></expr>;</condition> <incr><expr><name>threadnum</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>add_worker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name>num_idle</name> - <name>num_pending</name> &gt; <name>ap_max_spare_threads</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>DosWriteQueue</name><argument_list>(<argument><expr><name>workq</name></expr></argument>, <argument><expr><name>WORKTYPE_EXIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block> while <condition>(<expr><call><name>DosWaitEventSem</name><argument_list>(<argument><expr><name>shutdown_event</name></expr></argument>, <argument><expr>500</expr></argument>)</argument_list></call> == <name>ERROR_TIMEOUT</name></expr>)</condition>;</do>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sig_term</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sig</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>shutdown_pending</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>is_graceful</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sig_hup</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sig</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>shutdown_pending</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>is_graceful</name> = 1</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_signals</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>sigaction</name></type> <name>sa</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr>&amp;<name><name>sa</name>.<name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name>.<name>sa_flags</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name>.<name>sa_handler</name></name> = <name>sig_term</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr>&amp;<name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00198</expr></argument>)</argument_list></call> "sigaction(SIGTERM)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>sa</name>.<name>sa_handler</name></name> = <name>sig_hup</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr>&amp;<name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00199</expr></argument>)</argument_list></call> "sigaction(SIGHUP)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
