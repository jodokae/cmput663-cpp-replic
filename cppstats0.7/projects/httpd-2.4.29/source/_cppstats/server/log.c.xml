<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/_cppstats/server/log.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_signal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_base64.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDARG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_PROCESS_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_listen.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GETTID</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APLOG_MODULE_INDEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>AP_CORE_MODULE_INDEX</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t_val</name></decl>;</decl_stmt>
}</block></struct></type> <name>TRANS</name>;</typedef>
<macro><name>APR_HOOK_STRUCT</name><argument_list>(
<argument>APR_HOOK_LINK(error_log)
APR_HOOK_LINK(generate_log_id)</argument>
)</argument_list></macro>
<decl_stmt><decl><type><name>int</name> <name>AP_DECLARE_DATA</name></type> <name>ap_default_loglevel</name> <init>= <expr><name>DEFAULT_LOGLEVEL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYSLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TRANS</name></type> <name><name>facilities</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"auth"</expr>, <expr><name>LOG_AUTH</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_AUTHPRIV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"authpriv"</expr>,<expr><name>LOG_AUTHPRIV</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_CRON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"cron"</expr>, <expr><name>LOG_CRON</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_DAEMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"daemon"</expr>, <expr><name>LOG_DAEMON</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"ftp"</expr>, <expr><name>LOG_FTP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_KERN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"kern"</expr>, <expr><name>LOG_KERN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_LPR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"lpr"</expr>, <expr><name>LOG_LPR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_MAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"mail"</expr>, <expr><name>LOG_MAIL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_NEWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"news"</expr>, <expr><name>LOG_NEWS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_SYSLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"syslog"</expr>, <expr><name>LOG_SYSLOG</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_USER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"user"</expr>, <expr><name>LOG_USER</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_UUCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"uucp"</expr>, <expr><name>LOG_UUCP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_LOCAL0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"local0"</expr>, <expr><name>LOG_LOCAL0</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_LOCAL1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"local1"</expr>, <expr><name>LOG_LOCAL1</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_LOCAL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"local2"</expr>, <expr><name>LOG_LOCAL2</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_LOCAL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"local3"</expr>, <expr><name>LOG_LOCAL3</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_LOCAL4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"local4"</expr>, <expr><name>LOG_LOCAL4</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_LOCAL5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"local5"</expr>, <expr><name>LOG_LOCAL5</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_LOCAL6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"local6"</expr>, <expr><name>LOG_LOCAL6</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOG_LOCAL7</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"local7"</expr>, <expr><name>LOG_LOCAL7</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>, <expr>-1</expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TRANS</name></type> <name><name>priorities</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"emerg"</expr>, <expr><name>APLOG_EMERG</name></expr>}</block></expr>,
<expr><block>{<expr>"alert"</expr>, <expr><name>APLOG_ALERT</name></expr>}</block></expr>,
<expr><block>{<expr>"crit"</expr>, <expr><name>APLOG_CRIT</name></expr>}</block></expr>,
<expr><block>{<expr>"error"</expr>, <expr><name>APLOG_ERR</name></expr>}</block></expr>,
<expr><block>{<expr>"warn"</expr>, <expr><name>APLOG_WARNING</name></expr>}</block></expr>,
<expr><block>{<expr>"notice"</expr>, <expr><name>APLOG_NOTICE</name></expr>}</block></expr>,
<expr><block>{<expr>"info"</expr>, <expr><name>APLOG_INFO</name></expr>}</block></expr>,
<expr><block>{<expr>"debug"</expr>, <expr><name>APLOG_DEBUG</name></expr>}</block></expr>,
<expr><block>{<expr>"trace1"</expr>, <expr><name>APLOG_TRACE1</name></expr>}</block></expr>,
<expr><block>{<expr>"trace2"</expr>, <expr><name>APLOG_TRACE2</name></expr>}</block></expr>,
<expr><block>{<expr>"trace3"</expr>, <expr><name>APLOG_TRACE3</name></expr>}</block></expr>,
<expr><block>{<expr>"trace4"</expr>, <expr><name>APLOG_TRACE4</name></expr>}</block></expr>,
<expr><block>{<expr>"trace5"</expr>, <expr><name>APLOG_TRACE5</name></expr>}</block></expr>,
<expr><block>{<expr>"trace6"</expr>, <expr><name>APLOG_TRACE6</name></expr>}</block></expr>,
<expr><block>{<expr>"trace7"</expr>, <expr><name>APLOG_TRACE7</name></expr>}</block></expr>,
<expr><block>{<expr>"trace8"</expr>, <expr><name>APLOG_TRACE8</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr>-1</expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>stderr_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_file_t</name> *</type><name>stderr_log</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <name>read_handle_t</name> <block>{
<decl_stmt><decl><type>struct <name>read_handle_t</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>handle</name></decl>;</decl_stmt>
}</block></struct></type> <name>read_handle_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>read_handle_t</name> *</type><name>read_handles</name></decl>;</decl_stmt>
<struct>struct <name>piped_log</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>read_fd</name></decl>, *<decl><type ref="prev"/><name>write_fd</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HAVE_RELIABLE_PIPED_LOGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> *</type><name>program</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_proc_t</name> *</type><name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_cmdtype_e</name></type> <name>cmdtype</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_file_t *</argument>)</argument_list></macro> <macro><name>ap_piped_log_read_fd</name><argument_list>(<argument>piped_log *pl</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>pl</name>-&gt;<name>read_fd</name></name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_file_t *</argument>)</argument_list></macro> <macro><name>ap_piped_log_write_fd</name><argument_list>(<argument>piped_log *pl</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>pl</name>-&gt;<name>write_fd</name></name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type> <name>close_handle_in_child</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>read_handle_t</name> *</type><name>new_handle</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_handle</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>read_handle_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_handle</name>-&gt;<name>next</name></name> = <name>read_handles</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_handle</name>-&gt;<name>handle</name></name> = <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>read_handles</name> = <name>new_handle</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>void</name></type> <name>ap_logs_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>read_handle_t</name> *</type><name>cur</name> <init>= <expr><name>read_handles</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>cur</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> = <name><name>cur</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_open_stderr_log</name><argument_list>(<argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name>stderr_log</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_replace_stderr_log</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>const char *fname</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>stderr_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>filename</name> <init>= <expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>filename</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_CRIT</name></expr></argument>,
<argument><expr><name>APR_EBADPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00085</expr></argument>)</argument_list></call> "Invalid -E error log file %s"</expr></argument>,
<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EBADPATH</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>stderr_file</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name>APR_APPEND</name> | <name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_LARGEFILE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00086</expr></argument>)</argument_list></call>
"%s: could not open error log file %s."</expr></argument>,
<argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>stderr_pool</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>stderr_pool</name> = <name>p</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name>stderr_log</name></expr></argument>, <argument><expr><name>stderr_pool</name></expr></argument>)</argument_list></call>)
== <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_flush</name><argument_list>(<argument><expr><name>stderr_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>apr_file_dup2</name><argument_list>(<argument><expr><name>stderr_log</name></expr></argument>, <argument><expr><name>stderr_file</name></expr></argument>, <argument><expr><name>stderr_pool</name></expr></argument>)</argument_list></call>)
== <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>stderr_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>stderr_pool</name> == <name>p</name></expr>)</condition><then>
<expr_stmt><expr><name>stderr_pool</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00087</expr></argument>)</argument_list></call>
"unable to replace stderr with error log file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rc</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_child_errfn</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>apr_status_t</name></type> <name>err</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>description</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00088</expr></argument>)</argument_list></call>
"%s"</expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_child</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>progname</name></decl></param>,
<param><decl><type><name>apr_file_t</name> **</type><name>fpin</name></decl></param>, <param><decl><type><name>apr_cmdtype_e</name></type> <name>cmdtype</name></decl></param>,
<param><decl><type><name>int</name></type> <name>dummy_stderr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_procattr_t</name> *</type><name>procattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_proc_t</name> *</type><name>procnew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>errfile</name></decl>;</decl_stmt>
<if>if <condition>(<expr>((<name>rc</name> = <call><name>apr_procattr_create</name><argument_list>(<argument><expr>&amp;<name>procattr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name>)
&amp;&amp; ((<name>rc</name> = <call><name>apr_procattr_dir_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>,
<argument><expr><name>ap_server_root</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name>)
&amp;&amp; ((<name>rc</name> = <call><name>apr_procattr_cmdtype_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>cmdtype</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name>)
&amp;&amp; ((<name>rc</name> = <call><name>apr_procattr_io_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>,
<argument><expr><name>APR_FULL_BLOCK</name></expr></argument>,
<argument><expr><name>APR_NO_PIPE</name></expr></argument>,
<argument><expr><name>APR_NO_PIPE</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name>)
&amp;&amp; ((<name>rc</name> = <call><name>apr_procattr_error_check_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name>)
&amp;&amp; ((<name>rc</name> = <call><name>apr_procattr_child_errfn_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>log_child_errfn</name></expr></argument>)</argument_list></call>)
== <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_tokenize_to_argv</name><argument_list>(<argument><expr><name>progname</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>procnew</name> = (<name>apr_proc_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>procnew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dummy_stderr</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rc</name> = <call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>errfile</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name>rc</name> = <call><name>apr_procattr_child_err_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>errfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>apr_proc_create</name><argument_list>(<argument><expr><name>procnew</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(const <name>char</name> * const *)<name>args</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_note_subprocess</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>procnew</name></expr></argument>, <argument><expr><name>APR_KILL_AFTER_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(*<name>fpin</name>) = <name><name>procnew</name>-&gt;<name>in</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>open_error_log</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>is_main</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name><name>s</name>-&gt;<name>error_fname</name></name> == '|'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>dummy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_cmdtype_e</name></type> <name>cmdtype</name> <init>= <expr><name>APR_PROGRAM_ENV</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fname</name> = <name><name>s</name>-&gt;<name>error_fname</name></name> + 1</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>fname</name> == '|'</expr>)</condition><then>
<expr_stmt><expr>++<name>fname</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>fname</name> == '$'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cmdtype</name> = <name>APR_SHELLCMD_ENV</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>fname</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>log_child</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr>&amp;<name>dummy</name></expr></argument>, <argument><expr><name>cmdtype</name></expr></argument>, <argument><expr><name>is_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00089</expr></argument>)</argument_list></call>
"Couldn't start ErrorLog process '%s'."</expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>error_fname</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>s</name>-&gt;<name>error_log</name></name> = <name>dummy</name></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYSLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>error_fname</name></name></expr></argument>, <argument><expr>"syslog"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>fname</name> = <call><name>strchr</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>error_fname</name></name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>flen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TRANS</name> *</type><name>fac</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fname</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tag</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flen</name> = <name>tag</name> - <name>fname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>tag</name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>tag</name> = <name>ap_server_argv0</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>flen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> = <name>ap_server_argv0</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>flen</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>openlog</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>LOG_NDELAY</name>|<name>LOG_CONS</name>|<name>LOG_PID</name></expr></argument>, <argument><expr><name>LOG_LOCAL7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<for>for (<init><expr><name>fac</name> = <name>facilities</name></expr>;</init> <condition><expr><name><name>fac</name>-&gt;<name>t_name</name></name></expr>;</condition> <incr><expr><name>fac</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>fac</name>-&gt;<name>t_name</name></name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>openlog</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>LOG_NDELAY</name>|<name>LOG_CONS</name>|<name>LOG_PID</name></expr></argument>,
<argument><expr><name><name>fac</name>-&gt;<name>t_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>error_log</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>APR_EBADPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10036</expr></argument>)</argument_list></call>
"%s: could not open syslog error log %s."</expr></argument>,
<argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DONE</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>openlog</name><argument_list>(<argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name>LOG_NDELAY</name>|<name>LOG_CONS</name>|<name>LOG_PID</name></expr></argument>, <argument><expr><name>LOG_LOCAL7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>s</name>-&gt;<name>error_log</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{
<expr_stmt><expr><name>fname</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>error_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>APR_EBADPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00090</expr></argument>)</argument_list></call>
"%s: Invalid error log path %s."</expr></argument>,
<argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>error_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name><name>s</name>-&gt;<name>error_log</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>,
<argument><expr><name>APR_APPEND</name> | <name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_LARGEFILE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00091</expr></argument>)</argument_list></call>
"%s: could not open error log file %s."</expr></argument>,
<argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then></if>
}</block></else></if></else></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>ap_open_logs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param> ,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s_main</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>stderr_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>virt</name></decl>, *<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>replace_stderr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>read_handles</name></expr></argument>, <argument><expr><name>ap_pool_cleanup_set_null</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>stderr_p</name></expr></argument>, <argument><expr><call><name>apr_pool_parent_get</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>stderr_p</name></expr></argument>, <argument><expr>"stderr_pool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>open_error_log</name><argument_list>(<argument><expr><name>s_main</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>stderr_p</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>replace_stderr</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>s_main</name>-&gt;<name>error_log</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_flush</name><argument_list>(<argument><expr><name><name>s_main</name>-&gt;<name>error_log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_dup2</name><argument_list>(<argument><expr><name>stderr_log</name></expr></argument>, <argument><expr><name><name>s_main</name>-&gt;<name>error_log</name></name></expr></argument>, <argument><expr><name>stderr_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s_main</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00092</expr></argument>)</argument_list></call>
"unable to replace stderr with error_log"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>stderr_pool</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>stderr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>stderr_pool</name> = <name>stderr_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>replace_stderr</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>s_main</name>-&gt;<name>error_log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s_main</name>-&gt;<name>error_log</name></name> = <name>stderr_log</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL_DEVICE</name></cpp:macro> <cpp:value>"nul"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL_DEVICE</name></cpp:macro> <cpp:value>"/dev/null"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>replace_stderr</name> &amp;&amp; <call><name>freopen</name><argument_list>(<argument><expr><name>NULL_DEVICE</name></expr></argument>, <argument><expr>"w"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>s_main</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00093</expr></argument>)</argument_list></call>
"unable to replace stderr with %s"</expr></argument>, <argument><expr><name>NULL_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>virt</name> = <name><name>s_main</name>-&gt;<name>next</name></name></expr>;</init> <condition><expr><name>virt</name></expr>;</condition> <incr><expr><name>virt</name> = <name><name>virt</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>virt</name>-&gt;<name>error_fname</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>q</name>=<name>s_main</name></expr>;</init> <condition><expr><name>q</name> != <name>virt</name></expr>;</condition> <incr><expr><name>q</name> = <name><name>q</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>q</name>-&gt;<name>error_fname</name></name> != <name>NULL</name>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>q</name>-&gt;<name>error_fname</name></name></expr></argument>, <argument><expr><name><name>virt</name>-&gt;<name>error_fname</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>q</name> == <name>virt</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>open_error_log</name><argument_list>(<argument><expr><name>virt</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>virt</name>-&gt;<name>error_log</name></name> = <name><name>q</name>-&gt;<name>error_log</name></name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>virt</name>-&gt;<name>error_log</name></name> = <name><name>s_main</name>-&gt;<name>error_log</name></name></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_error_log2stderr</name><argument_list>(<argument>server_rec *s</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>errfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name>errfile</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>error_log</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_dup2</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>error_log</name></name></expr></argument>, <argument><expr><name>errfile</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cpystrn</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>arg</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>end</name> = <call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>end</name> - <name>buf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_remote_address</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>r</name></name> &amp;&amp; !(<name>arg</name> &amp;&amp; *<name>arg</name> == 'c')</expr>)</condition><then>
<return>return <expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%s:%d"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>useragent_ip</name></name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>useragent_addr</name></name> ? <name><name>info</name>-&gt;<name>r</name>-&gt;<name>useragent_addr</name>-&gt;<name>port</name></name> : 0</expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <if>if <condition>(<expr><name><name>info</name>-&gt;<name>c</name></name></expr>)</condition><then>
<return>return <expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%s:%d"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>c</name>-&gt;<name>client_ip</name></name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>c</name>-&gt;<name>client_addr</name></name> ? <name><name>info</name>-&gt;<name>c</name>-&gt;<name>client_addr</name>-&gt;<name>port</name></name> : 0</expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr>0</expr>;</return></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_local_address</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>c</name></name></expr>)</condition><then>
<return>return <expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%s:%d"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>c</name>-&gt;<name>local_ip</name></name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>c</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr>0</expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_pid</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%" <name>APR_PID_T_FMT</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_tid</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GETTID</name></expr></cpp:if>
<if>if <condition>(<expr><name>arg</name> &amp;&amp; *<name>arg</name> == 'g'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>pid_t</name></type> <name>tid</name> <init>= <expr><call><name>syscall</name><argument_list>(<argument><expr><name>SYS_gettid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>tid</name> == -1</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%"<name>APR_PID_T_FMT</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_IS_THREADED</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name>
&amp;&amp; <name>result</name> != <name>AP_MPMQ_NOT_SUPPORTED</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_os_thread_t</name></type> <name>tid</name> <init>= <expr><call><name>apr_os_thread_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%pT"</expr></argument>, <argument><expr>&amp;<name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_ctime</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>time_len</name> <init>= <expr><name>buflen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option</name> <init>= <expr><name>AP_CTIME_OPTION_NONE</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>arg</name> &amp;&amp; *<name>arg</name></expr>)</condition> <block>{
<switch>switch <condition>(<expr>*<name>arg</name></expr>)</condition> <block>{
<case>case <expr>'u'</expr>:
<expr_stmt><expr><name>option</name> |= <name>AP_CTIME_OPTION_USEC</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'c'</expr>:
<expr_stmt><expr><name>option</name> |= <name>AP_CTIME_OPTION_COMPACT</name></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><name>arg</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>ap_recent_ctime_ex</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr>&amp;<name>time_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>time_len</name> - 1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_loglevel</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>level</name></name> &lt; 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then>
<else>else
<return>return <expr><call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>priorities</name><index>[<expr><name><name>info</name>-&gt;<name>level</name></name></expr>]</index></name>.<name>t_name</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_log_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>arg</name> &amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"c"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>c</name></name> &amp;&amp; (*<name>arg</name> != 'C' || !<name><name>info</name>-&gt;<name>r</name></name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>c</name>-&gt;<name>log_id</name></name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>info</name>-&gt;<name>rmain</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>rmain</name>-&gt;<name>log_id</name></name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_keepalives</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>c</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>c</name>-&gt;<name>keepalives</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_module_name</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>ap_find_module_short_name</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>module_index</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_file_line</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>file</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name> <init>= <expr><name><name>info</name>-&gt;<name>file</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OSD_POSIX</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__MVS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>e</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>!<name>e</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>'\\'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>e</name> != <name>NULL</name> &amp;&amp; <name><name>e</name><index>[<expr>1</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr>&amp;<name><name>e</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = &amp;<name><name>tmp</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call>-1</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>e</name> == ')'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>e</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>file</name> = <name>tmp</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>file</name><index>[<expr>0</expr>]</index></name> == '/' &amp;&amp; (<name>p</name> = <call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>file</name> = <name>p</name> + 1</expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%s(%d)"</expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>line</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_apr_status</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name><name>info</name>-&gt;<name>status</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>status</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name>status</name> &lt; <name>APR_OS_START_EAIERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"(%d)"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> &lt; <name>APR_OS_START_SYSERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"(EAI %d)"</expr></argument>,
<argument><expr><name>status</name> - <name>APR_OS_START_EAIERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> &lt; 100000 + <name>APR_OS_START_SYSERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"(OS %d)"</expr></argument>,
<argument><expr><name>status</name> - <name>APR_OS_START_SYSERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>len</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"(os 0x%08x)"</expr></argument>,
<argument><expr><name>status</name> - <name>APR_OS_START_SYSERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name> + <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_server_name</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>r</name></name></expr>)</condition><then>
<return>return <expr><call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr>(<name>request_rec</name> *)<name><name>info</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_virtual_host</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>s</name></name></expr>)</condition><then>
<return>return <expr><call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>s</name>-&gt;<name>server_hostname</name></name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_table_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_table_t</name> *</type><name>table</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_UNSAFE_ERROR_LOG_UNESCAPED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>scratch</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>value</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_escape_errorlog_item</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_header</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>r</name></name></expr>)</condition><then>
<return>return <expr><call><name>log_table_entry</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_note</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>r</name></name></expr>)</condition><then>
<return>return <expr><call><name>log_table_entry</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_env_var</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>r</name></name></expr>)</condition><then>
<return>return <expr><call><name>log_table_entry</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>core_generate_log_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>idstring</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>encoded</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>r</name> &amp;&amp; <name><name>r</name>-&gt;<name>request_time</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>id</name> = (<name>apr_uint64_t</name>)<name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>id</name> = (<name>apr_uint64_t</name>)<call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>pid</name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>pid_t</name></expr></argument>)</argument_list></sizeof> &gt; 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>tmp</name> = <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <name>tmp</name> &lt;&lt; 40</expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> ^= <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pid</name> = <name>pid</name> &gt;&gt; 24</expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <name>tmp</name> &lt;&lt; 56</expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> ^= <name>tmp</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>tmp</name> = <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <name>tmp</name> &lt;&lt; 40</expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> ^= <name>tmp</name></expr>;</expr_stmt>
}</block></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<block>{
<decl_stmt><decl><type><name>apr_uintptr_t</name></type> <name>tmp2</name> <init>= <expr>(<name>apr_uintptr_t</name>)<name><name>c</name>-&gt;<name>current_thread</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> = <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <name>tmp</name> &lt;&lt; 32</expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> ^= <name>tmp</name></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>len</name> = <call><name>apr_base64_encode_len</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>encoded</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>r</name> ? <name><name>r</name>-&gt;<name>pool</name></name> : <name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_base64_encode</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr>(<name>char</name> *)&amp;<name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>len</name> - 2</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>idstring</name> = <name>encoded</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_log_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>id</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>id</name> = &amp;((<name>request_rec</name> *)<name>r</name>)-&gt;<name>log_id</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>id</name> = &amp;((<name>conn_rec</name> *)<name>c</name>)-&gt;<name>log_id</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_run_generate_log_id</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_register_log_hooks</name><argument_list>(<argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>ap_hook_generate_log_id</name><argument_list>(<argument><expr><name>core_generate_log_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_REALLY_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"a"</expr></argument>, <argument><expr><name>log_remote_address</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>log_local_address</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"e"</expr></argument>, <argument><expr><name>log_env_var</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr><name>log_apr_status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr><name>log_file_line</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr><name>log_header</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"k"</expr></argument>, <argument><expr><name>log_keepalives</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr><name>log_loglevel</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"L"</expr></argument>, <argument><expr><name>log_log_id</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"m"</expr></argument>, <argument><expr><name>log_module_name</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"n"</expr></argument>, <argument><expr><name>log_note</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"P"</expr></argument>, <argument><expr><name>log_pid</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"t"</expr></argument>, <argument><expr><name>log_ctime</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"T"</expr></argument>, <argument><expr><name>log_tid</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"v"</expr></argument>, <argument><expr><name>log_virtual_host</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_errorlog_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"V"</expr></argument>, <argument><expr><name>log_server_name</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>do_errorlog_default</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ap_errorlog_info</name> *</type><name>info</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>int</name></type> <name>buflen</name></decl></param>, <param><decl><type><name>int</name> *</type><name>errstr_start</name></decl></param>, <param><decl><type><name>int</name> *</type><name>errstr_end</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errstr_fmt</name></decl></param>, <param><decl><type><name>va_list</name></type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>field_start</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>item_len</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_UNSAFE_ERROR_LOG_UNESCAPED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>scratch</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>using_syslog</name></name> &amp;&amp; !<name><name>info</name>-&gt;<name>startup</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name>++</expr>]</index></name> = '['</expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <call><name>log_ctime</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr>"u"</expr></argument>, <argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name>++</expr>]</index></name> = ']'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name>++</expr>]</index></name> = ' '</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>startup</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name>++</expr>]</index></name> = '['</expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <call><name>log_module_name</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name>++</expr>]</index></name> = ':'</expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <call><name>log_loglevel</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr>"] [pid "</expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <call><name>log_pid</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><name>field_start</name> = <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr>":tid "</expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item_len</name> = <call><name>log_tid</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item_len</name></expr>)</condition><then>
<expr_stmt><expr><name>len</name> = <name>field_start</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>len</name> += <name>item_len</name></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name>++</expr>]</index></name> = ']'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name>++</expr>]</index></name> = ' '</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>level</name></name> &gt;= <name>APLOG_DEBUG</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>item_len</name> = <call><name>log_file_line</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>item_len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> += <name>item_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr>": "</expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>status</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>item_len</name> = <call><name>log_apr_status</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>item_len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> += <name>item_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr>": "</expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>r</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> += <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>sbh</name></name> ? "[client %s:%d] " : "[remote %s:%d] "</expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>useragent_ip</name></name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>useragent_addr</name></name> ? <name><name>info</name>-&gt;<name>r</name>-&gt;<name>useragent_addr</name>-&gt;<name>port</name></name> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>info</name>-&gt;<name>c</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> += <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>c</name>-&gt;<name>sbh</name></name> ? "[client %s:%d] " : "[remote %s:%d] "</expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>c</name>-&gt;<name>client_ip</name></name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>c</name>-&gt;<name>client_addr</name></name> ? <name><name>info</name>-&gt;<name>c</name>-&gt;<name>client_addr</name>-&gt;<name>port</name></name> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr>*<name>errstr_start</name> = <name>len</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_UNSAFE_ERROR_LOG_UNESCAPED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>apr_vsnprintf</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name></expr></argument>, <argument><expr><name>errstr_fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> += <call><name>ap_escape_errorlog_item</name><argument_list>(<argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>,
<argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>len</name> += <call><name>apr_vsnprintf</name><argument_list>(<argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>, <argument><expr><name>errstr_fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr>*<name>errstr_end</name> = <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>field_start</name> = <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <call><name>cpystrn</name><argument_list>(<argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr>", referer: "</expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item_len</name> = <call><name>log_header</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr>"Referer"</expr></argument>, <argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>item_len</name></expr>)</condition><then>
<expr_stmt><expr><name>len</name> += <name>item_len</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>len</name> = <name>field_start</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>len</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>do_errorlog_format</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>fmt</name></decl></param>, <param><decl><type><name>ap_errorlog_info</name> *</type><name>info</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>buflen</name></decl></param>, <param><decl><type><name>int</name> *</type><name>errstr_start</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>errstr_end</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err_fmt</name></decl></param>, <param><decl><type><name>va_list</name></type> <name>args</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_UNSAFE_ERROR_LOG_UNESCAPED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>scratch</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>field_start</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skipping</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_errorlog_format_item</name> *</type><name>items</name> <init>= <expr>(<name>ap_errorlog_format_item</name> *)<name><name>fmt</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name><name>fmt</name>-&gt;<name>nelts</name></name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>fmt</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>ap_errorlog_format_item</name> *</type><name>item</name> <init>= <expr>&amp;<name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>item</name>-&gt;<name>flags</name></name> &amp; <name>AP_ERRORLOG_FLAG_FIELD_SEP</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>skipping</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>skipping</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>field_start</name> = <name>len</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>item</name>-&gt;<name>flags</name></name> &amp; <name>AP_ERRORLOG_FLAG_MESSAGE</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>errstr_start</name> = <name>len</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_UNSAFE_ERROR_LOG_UNESCAPED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>apr_vsnprintf</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name></expr></argument>, <argument><expr><name>err_fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> += <call><name>ap_escape_errorlog_item</name><argument_list>(<argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>,
<argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>len</name> += <call><name>apr_vsnprintf</name><argument_list>(<argument><expr><name>buf</name> + <name>len</name></expr></argument>, <argument><expr><name>buflen</name> - <name>len</name></expr></argument>, <argument><expr><name>err_fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr>*<name>errstr_end</name> = <name>len</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>skipping</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name><name>info</name>-&gt;<name>level</name></name> != -1 &amp;&amp; (<name>int</name>)<name><name>item</name>-&gt;<name>min_loglevel</name></name> &gt; <name><name>info</name>-&gt;<name>level</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <name>field_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skipping</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>item_len</name> <init>= <expr><call>(*<name><name>item</name>-&gt;<name>func</name></name>)<argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>item</name>-&gt;<name>arg</name></name></expr></argument>, <argument><expr><name>buf</name> + <name>len</name></expr></argument>,
<argument><expr><name>buflen</name> - <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>item_len</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>item</name>-&gt;<name>flags</name></name> &amp; <name>AP_ERRORLOG_FLAG_REQUIRED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>item</name>-&gt;<name>flags</name></name> &amp; <name>AP_ERRORLOG_FLAG_NULL_AS_HYPHEN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name>++</expr>]</index></name> = '-'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>len</name> = <name>field_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skipping</name> = 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>len</name> += <name>item_len</name></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if></else></if></else></if>
}</block></for>
<return>return <expr><name>len</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>write_logline</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>errstr</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>logf</name></decl></param>,
<param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>logf</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>len</name> &gt; <name>MAX_STRING_LEN</name> - <sizeof>sizeof<argument_list>(<argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <name>MAX_STRING_LEN</name> - <sizeof>sizeof<argument_list>(<argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errstr</name> + <name>len</name></expr></argument>, <argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr><name>errstr</name></expr></argument>, <argument><expr><name>logf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_flush</name><argument_list>(<argument><expr><name>logf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYSLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <block>{
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>level</name> &lt; <name>LOG_PRIMASK</name> ? <name>level</name> : <name>APLOG_DEBUG</name></expr></argument>, <argument><expr>"%.*s"</expr></argument>,
<argument><expr>(<name>int</name>)<name>len</name></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_error_core</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>module_index</name></decl></param>,
<param><decl><type><name>int</name></type> <name>level</name></decl></param>,
<param><decl><type><name>apr_status_t</name></type> <name>status</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type><name>va_list</name></type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>errstr</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>logf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level_and_mask</name> <init>= <expr><name>level</name> &amp; <name>APLOG_LEVELMASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>rmain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>sconf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_errorlog_info</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_conn_info</name> <init>= <expr>0</expr></init>, <name>log_req_info</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> **</type><name>lines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_number</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <name><name>r</name>-&gt;<name>connection</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name>level_and_mask</name> != <name>APLOG_NOTICE</name>)
&amp;&amp; (<name>level_and_mask</name> &gt; <name>ap_default_loglevel</name>)</expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>logf</name> = <name>stderr_log</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>configured_level</name> <init>= <expr><name>r</name> ? <call><name>ap_get_request_module_loglevel</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>)</argument_list></call> :
<name>c</name> ? <call><name>ap_get_conn_server_module_loglevel</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>)</argument_list></call> :
<call><name>ap_get_server_module_loglevel</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>error_log</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>level_and_mask</name> != <name>APLOG_NOTICE</name>)
&amp;&amp; (<name>level_and_mask</name> &gt; <name>configured_level</name>)</expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>logf</name> = <name><name>s</name>-&gt;<name>error_log</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>level_and_mask</name> &gt; <name>configured_level</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>module_config</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sconf</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> &amp;&amp; !<name><name>c</name>-&gt;<name>log_id</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>add_log_id</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sconf</name>-&gt;<name>error_log_conn</name></name> &amp;&amp; <name><name>sconf</name>-&gt;<name>error_log_conn</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name>log_conn_info</name> = 1</expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then>
<expr_stmt><expr><name>rmain</name> = <name><name>r</name>-&gt;<name/></name>main</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rmain</name> = <name>r</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>!<name><name>rmain</name>-&gt;<name>log_id</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>sconf</name>-&gt;<name>error_log_req</name></name> &amp;&amp; <name><name>sconf</name>-&gt;<name>error_log_req</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name>log_req_info</name> = 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>add_log_id</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rmain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>info</name>.<name>s</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>c</name></name> = <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>file</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>line</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>status</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>using_syslog</name></name> = (<name>logf</name> == <name>NULL</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>startup</name></name> = ((<name>level</name> &amp; <name>APLOG_STARTUP</name>) == <name>APLOG_STARTUP</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>format</name></name> = <name>fmt</name></expr>;</expr_stmt>
<while>while <condition>(<expr>!<name>done</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>log_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr>0</expr></init>, <name>errstr_start</name> <init>= <expr>0</expr></init>, <name>errstr_end</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>log_conn_info</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>line_number</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>lines</name> = (<name>apr_array_header_t</name> **)<name><name>sconf</name>-&gt;<name>error_log_conn</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>r</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>rmain</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>level</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>module_index</name></name> = <name>APLOG_NO_MODULE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>log_format</name> = <name><name>lines</name><index>[<expr><name>line_number</name>++</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>line_number</name> == <name><name>sconf</name>-&gt;<name>error_log_conn</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>line_number</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>log_conn_info</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>log_req_info</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>line_number</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>lines</name> = (<name>apr_array_header_t</name> **)<name><name>sconf</name>-&gt;<name>error_log_req</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>r</name></name> = <name>rmain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>rmain</name></name> = <name>rmain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>level</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>module_index</name></name> = <name>APLOG_NO_MODULE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>log_format</name> = <name><name>lines</name><index>[<expr><name>line_number</name>++</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>line_number</name> == <name><name>sconf</name>-&gt;<name>error_log_req</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>line_number</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>log_req_info</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>info</name>.<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>rmain</name></name> = <name>rmain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>level</name></name> = <name>level_and_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>module_index</name></name> = <name>module_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>line</name></name> = <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><name>log_format</name> = <name>sconf</name> ? <name><name>sconf</name>-&gt;<name>error_log_format</name></name> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name>log_format</name> &amp;&amp; !<name><name>info</name>.<name>startup</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> += <call><name>do_errorlog_format</name><argument_list>(<argument><expr><name>log_format</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr><name>errstr</name> + <name>len</name></expr></argument>,
<argument><expr><name>MAX_STRING_LEN</name> - <name>len</name></expr></argument>,
<argument><expr>&amp;<name>errstr_start</name></expr></argument>, <argument><expr>&amp;<name>errstr_end</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>len</name> += <call><name>do_errorlog_default</name><argument_list>(<argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr><name>errstr</name> + <name>len</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name> - <name>len</name></expr></argument>,
<argument><expr>&amp;<name>errstr_start</name></expr></argument>, <argument><expr>&amp;<name>errstr_end</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!*<name>errstr</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>write_logline</name><argument_list>(<argument><expr><name>errstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>logf</name></expr></argument>, <argument><expr><name>level_and_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>done</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>errstr</name><index>[<expr><name>errstr_end</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_run_error_log</name><argument_list>(<argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr><name>errstr</name> + <name>errstr_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>errstr</name> = '\0'</expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_error_va_glue</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>module_index</name></decl></param>,
<param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><name>apr_status_t</name></type> <name>status</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_error_core</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_error_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>,
<argument>const server_rec *s</argument>, <argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_error_core</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_perror_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>, <argument>apr_pool_t *p</argument>,
<argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_error_core</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_rerror_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>,
<argument>const request_rec *r</argument>, <argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_error_core</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>level</name> &amp; <name>APLOG_TOCLIENT</name>)
&amp;&amp; ((<name>level</name> &amp; <name>APLOG_LEVELMASK</name>) &lt;= <name>APLOG_WARNING</name>)
&amp;&amp; (<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"error-notes"</expr></argument>)</argument_list></call> == <name>NULL</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"error-notes"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_cserror_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>,
<argument>const conn_rec *c</argument>, <argument>const server_rec *s</argument>,
<argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_error_core</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_cerror_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>apr_status_t status</argument>,
<argument>const conn_rec *c</argument>, <argument>const char *fmt</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_error_core</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_LOGGED_PER_LINE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_BYTES_BUFFER_SIZE</name></cpp:macro> <cpp:value>(BYTES_LOGGED_PER_LINE * 3 + 2)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fmt_data</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>vdata</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>off</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>data</name> <init>= <expr>(const <name>unsigned</name> <name>char</name> *)<name>vdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>chars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>hex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>this_time</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>' '</expr></argument>, <argument><expr><name>LOG_BYTES_BUFFER_SIZE</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>LOG_BYTES_BUFFER_SIZE</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>chars</name> = <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hex</name> = <name>buf</name> + <name>BYTES_LOGGED_PER_LINE</name> + 1</expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>off</name> &lt; <name>len</name> &amp;&amp; <name>this_time</name> &lt; <name>BYTES_LOGGED_PER_LINE</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name><name>data</name><index>[<expr>*<name>off</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
&amp;&amp; <name>c</name> != '\\'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>chars</name> = <name>c</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>chars</name> = '.'</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>(<name>c</name> &gt;&gt; 4) &gt;= 10</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>hex</name> = 'a' + ((<name>c</name> &gt;&gt; 4) - 10)</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>hex</name> = '0' + (<name>c</name> &gt;&gt; 4)</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>(<name>c</name> &amp; 0x0F) &gt;= 10</expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>hex</name> + 1) = 'a' + ((<name>c</name> &amp; 0x0F) - 10)</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*(<name>hex</name> + 1) = '0' + (<name>c</name> &amp; 0x0F)</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>chars</name> += 1</expr>;</expr_stmt>
<expr_stmt><expr><name>hex</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr>*<name>off</name> += 1</expr>;</expr_stmt>
<expr_stmt><expr>++<name>this_time</name></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_data_core</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>module_index</name></decl></param>,
<param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>LOG_BYTES_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>prefix</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_LOG_DATA_SHOW_OFFSET</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>prefix</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt; 0xffff</expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = 0xffff</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>label</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_error_va_glue</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"%s (%" <name>APR_SIZE_T_FMT</name> " bytes)"</expr></argument>,
<argument><expr><name>label</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>off</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>off</name> &lt; <name>len</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>flags</name> &amp; <name>AP_LOG_DATA_SHOW_OFFSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr>sizeof <name>prefix</name></expr></argument>, <argument><expr>"%04x: "</expr></argument>, <argument><expr>(<name>unsigned</name> <name>int</name>)<name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>fmt_data</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>&amp;<name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_error_va_glue</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_data_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>,
<argument>int module_index</argument>, <argument>int level</argument>,
<argument>const server_rec *s</argument>, <argument>const char *label</argument>,
<argument>const void *data</argument>, <argument>apr_size_t len</argument>,
<argument>unsigned int flags</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>log_data_core</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_rdata_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>,
<argument>int module_index</argument>, <argument>int level</argument>,
<argument>const request_rec *r</argument>, <argument>const char *label</argument>,
<argument>const void *data</argument>, <argument>apr_size_t len</argument>,
<argument>unsigned int flags</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>log_data_core</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_cdata_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>,
<argument>int module_index</argument>, <argument>int level</argument>,
<argument>const conn_rec *c</argument>, <argument>const char *label</argument>,
<argument>const void *data</argument>, <argument>apr_size_t len</argument>,
<argument>unsigned int flags</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>log_data_core</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>label</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_csdata_</name><argument_list>(<argument>const char *file</argument>, <argument>int line</argument>, <argument>int module_index</argument>,
<argument>int level</argument>, <argument>const conn_rec *c</argument>, <argument>const server_rec *s</argument>,
<argument>const char *label</argument>, <argument>const void *data</argument>,
<argument>apr_size_t len</argument>, <argument>unsigned int flags</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>log_data_core</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>module_index</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_command_line</name><argument_list>(<argument>apr_pool_t *plog</argument>, <argument>server_rec *s</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>process_rec</name> *</type><name>process</name> <init>= <expr><name><name>s</name>-&gt;<name>process</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len_needed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>process</name>-&gt;<name>argc</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>len_needed</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>process</name>-&gt;<name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>result</name> = (<name>char</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>plog</name></expr></argument>, <argument><expr><name>len_needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>result</name> = '\0'</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>process</name>-&gt;<name>argc</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>process</name>-&gt;<name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>i</name>+1)&lt; <name><name>process</name>-&gt;<name>argc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00094</expr></argument>)</argument_list></call>
"Command line: '%s'"</expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_mpm_common</name><argument_list>(<argument>server_rec *s</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument> , <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02639</expr></argument>)</argument_list></call>
"Using SO_REUSEPORT: %s (%d)"</expr></argument>,
<argument><expr><name>ap_have_so_reuseport</name> ? "yes" : "no"</expr></argument>,
<argument><expr><name>ap_num_listen_buckets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_remove_pid</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *rel_fname</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name> <init>= <expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>rel_fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>fname</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00095</expr></argument>)</argument_list></call>
"failed to remove PID file %s"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00096</expr></argument>)</argument_list></call>
"removed PID file %s (pid=%" <name>APR_PID_T_FMT</name> ")"</expr></argument>,
<argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_pid</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *filename</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>pid_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>saved_pid</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>mypid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>filename</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>fname</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>APR_EBADPATH</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00097</expr></argument>)</argument_list></call> "Invalid PID file path %s, ignoring."</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>mypid</name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mypid</name> != <name>saved_pid</name>
&amp;&amp; <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_FINFO_MTIME</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00098</expr></argument>)</argument_list></call>
"pid file %s overwritten -- Unclean "
"shutdown of previous Apache run?"</expr></argument>,
<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>pid_file</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>,
<argument><expr><name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_TRUNCATE</name></expr></argument>,
<argument><expr><name>APR_UREAD</name> | <name>APR_UWRITE</name> | <name>APR_GREAD</name> | <name>APR_WREAD</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00099</expr></argument>)</argument_list></call>
"could not create %s"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00100</expr></argument>)</argument_list></call>
"%s: could not log pid to file %s"</expr></argument>,
<argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<macro><name>apr_file_printf</name><argument_list>(<argument>pid_file</argument>, <argument>"%" APR_PID_T_FMT APR_EOL_STR</argument>, <argument>mypid</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>pid_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_pid</name> = <name>mypid</name></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_read_pid</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *filename</argument>,
<argument>pid_t *mypid</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_size_t</name></type> <name>BUFFER_SIZE</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> * 3 + 2</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>pid_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>, *<decl><type ref="prev"/><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>filename</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>fname</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>APR_EBADPATH</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00101</expr></argument>)</argument_list></call> "Invalid PID file path %s, ignoring."</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>pid_file</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_read_full</name><argument_list>(<argument><expr><name>pid_file</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUFFER_SIZE</name> - 1</expr></argument>, <argument><expr>&amp;<name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_EOF</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>bytes_read</name> == 0 || <name>bytes_read</name> == <name>BUFFER_SIZE</name> - 1 || !<call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>bytes_read</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>mypid</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>pid_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_assert</name><argument_list>(<argument>const char *szExp</argument>, <argument>const char *szFile</argument>,
<argument>int nLine</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>time_str</name><index>[<expr><name>APR_CTIME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_ctime</name><argument_list>(<argument><expr><name>time_str</name></expr></argument>, <argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00102</expr></argument>)</argument_list></call>
"[%s] file %s, line %d, assertion \"%s\" failed"</expr></argument>,
<argument><expr><name>time_str</name></expr></argument>, <argument><expr><name>szFile</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><name>szExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DebugBreak</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HAVE_RELIABLE_PIPED_LOGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>piped_log_maintenance</name><parameter_list>(<param><decl><type><name>int</name></type> <name>reason</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_wait_t</name></type> <name>status</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>piped_log_spawn</name><parameter_list>(<param><decl><type><name>piped_log</name> *</type><name>pl</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_procattr_t</name> *</type><name>procattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_proc_t</name> *</type><name>procnew</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>((<name>status</name> = <call><name>apr_procattr_create</name><argument_list>(<argument><expr>&amp;<name>procattr</name></expr></argument>, <argument><expr><name><name>pl</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>) ||
((<name>status</name> = <call><name>apr_procattr_dir_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>ap_server_root</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name>) ||
((<name>status</name> = <call><name>apr_procattr_cmdtype_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name><name>pl</name>-&gt;<name>cmdtype</name></name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name>) ||
((<name>status</name> = <call><name>apr_procattr_child_in_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>,
<argument><expr><name><name>pl</name>-&gt;<name>read_fd</name></name></expr></argument>,
<argument><expr><name><name>pl</name>-&gt;<name>write_fd</name></name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name>) ||
((<name>status</name> = <call><name>apr_procattr_child_errfn_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>log_child_errfn</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name>) ||
((<name>status</name> = <call><name>apr_procattr_error_check_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00103</expr></argument>)</argument_list></call>
"piped_log_spawn: unable to setup child process '%s'"</expr></argument>,
<argument><expr><name><name>pl</name>-&gt;<name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_tokenize_to_argv</name><argument_list>(<argument><expr><name><name>pl</name>-&gt;<name>program</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name><name>pl</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>procnew</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>pl</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_proc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_proc_create</name><argument_list>(<argument><expr><name>procnew</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(const <name>char</name> * const *) <name>args</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>procattr</name></expr></argument>, <argument><expr><name><name>pl</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>pl</name>-&gt;<name>pid</name></name> = <name>procnew</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>procnew</name>-&gt;<name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procnew</name>-&gt;<name>in</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_proc_other_child_register</name><argument_list>(<argument><expr><name>procnew</name></expr></argument>, <argument><expr><name>piped_log_maintenance</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>,
<argument><expr><name><name>pl</name>-&gt;<name>write_fd</name></name></expr></argument>, <argument><expr><name><name>pl</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_handle_in_child</name><argument_list>(<argument><expr><name><name>pl</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name><name>pl</name>-&gt;<name>read_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00104</expr></argument>)</argument_list></call>
"unable to start piped log program '%s'"</expr></argument>,
<argument><expr><name><name>pl</name>-&gt;<name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>piped_log_maintenance</name><parameter_list>(<param><decl><type><name>int</name></type> <name>reason</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_wait_t</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>piped_log</name> *</type><name>pl</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mpm_state</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>reason</name></expr>)</condition> <block>{
<case>case <expr><name>APR_OC_REASON_DEATH</name></expr>:
</case><case>case <expr><name>APR_OC_REASON_LOST</name></expr>:
<expr_stmt><expr><name><name>pl</name>-&gt;<name>pid</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_proc_other_child_unregister</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MPM_STATE</name></expr></argument>, <argument><expr>&amp;<name>mpm_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00105</expr></argument>)</argument_list></call>
"can't query MPM state; not restarting "
"piped log program '%s'"</expr></argument>,
<argument><expr><name><name>pl</name>-&gt;<name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>mpm_state</name> != <name>AP_MPMQ_STOPPING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00106</expr></argument>)</argument_list></call>
"piped log program '%s' failed unexpectedly"</expr></argument>,
<argument><expr><name><name>pl</name>-&gt;<name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>piped_log_spawn</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00107</expr></argument>)</argument_list></call>
"piped_log_maintenance: unable to respawn '%s'"</expr></argument>,
<argument><expr><name><name>pl</name>-&gt;<name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
<break>break;</break>
</case><case>case <expr><name>APR_OC_REASON_UNWRITABLE</name></expr>:
<break>break;</break>
</case><case>case <expr><name>APR_OC_REASON_RESTART</name></expr>:
<if>if <condition>(<expr><name><name>pl</name>-&gt;<name>pid</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_proc_kill</name><argument_list>(<argument><expr><name><name>pl</name>-&gt;<name>pid</name></name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pl</name>-&gt;<name>pid</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>APR_OC_REASON_UNREGISTER</name></expr>:
<break>break;</break>
</case>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>piped_log_cleanup_for_exec</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>piped_log</name> *</type><name>pl</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>pl</name>-&gt;<name>read_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>pl</name>-&gt;<name>write_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>piped_log_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>piped_log</name> *</type><name>pl</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>pl</name>-&gt;<name>pid</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_proc_kill</name><argument_list>(<argument><expr><name><name>pl</name>-&gt;<name>pid</name></name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>piped_log_cleanup_for_exec</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>piped_log *</argument>)</argument_list></macro> <macro><name>ap_open_piped_log_ex</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>const char *program</argument>,
<argument>apr_cmdtype_e cmdtype</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>piped_log</name> *</type><name>pl</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pl</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>*<name>pl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pl</name>-&gt;<name>p</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pl</name>-&gt;<name>program</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pl</name>-&gt;<name>pid</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pl</name>-&gt;<name>cmdtype</name></name> = <name>cmdtype</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_file_pipe_create_ex</name><argument_list>(<argument><expr>&amp;<name><name>pl</name>-&gt;<name>read_fd</name></name></expr></argument>,
<argument><expr>&amp;<name><name>pl</name>-&gt;<name>write_fd</name></name></expr></argument>,
<argument><expr><name>APR_FULL_BLOCK</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>, <argument><expr><name>piped_log_cleanup</name></expr></argument>,
<argument><expr><name>piped_log_cleanup_for_exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>piped_log_spawn</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>, <argument><expr><name>piped_log_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>pl</name>-&gt;<name>read_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>pl</name>-&gt;<name>write_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>pl</name></expr>;</return>
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>piped_log_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>piped_log</name> *</type><name>pl</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>pl</name>-&gt;<name>write_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>piped_log *</argument>)</argument_list></macro> <macro><name>ap_open_piped_log_ex</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>const char *program</argument>,
<argument>apr_cmdtype_e cmdtype</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>piped_log</name> *</type><name>pl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>dummy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>log_child</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>program</name></expr></argument>, <argument><expr>&amp;<name>dummy</name></expr></argument>, <argument><expr><name>cmdtype</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00108</expr></argument>)</argument_list></call>
"Couldn't start piped log process '%s'."</expr></argument>,
<argument><expr>(<name>program</name> == <name>NULL</name>) ? "NULL" : <name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pl</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>*<name>pl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pl</name>-&gt;<name>p</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pl</name>-&gt;<name>read_fd</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pl</name>-&gt;<name>write_fd</name></name> = <name>dummy</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>, <argument><expr><name>piped_log_cleanup</name></expr></argument>, <argument><expr><name>piped_log_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pl</name></expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>piped_log *</argument>)</argument_list></macro> <macro><name>ap_open_piped_log</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>const char *program</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_cmdtype_e</name></type> <name>cmdtype</name> <init>= <expr><name>APR_PROGRAM_ENV</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>program</name> == '|'</expr>)</condition><then>
<expr_stmt><expr>++<name>program</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>program</name> == '$'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cmdtype</name> = <name>APR_SHELLCMD_ENV</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>program</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>ap_open_piped_log_ex</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>program</name></expr></argument>, <argument><expr><name>cmdtype</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_close_piped_log</name><argument_list>(<argument>piped_log *pl</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_run</name><argument_list>(<argument><expr><name><name>pl</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>pl</name></expr></argument>, <argument><expr><name>piped_log_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_parse_log_level</name><argument_list>(<argument>const char *str</argument>, <argument>int *val</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>err</name> <init>= <expr>"Log level keyword must be one of emerg/alert/crit/error/warn/"
"notice/info/debug/trace1/.../trace8"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<while>while <condition>(<expr><name><name>priorities</name><index>[<expr><name>i</name></expr>]</index></name>.<name>t_name</name> != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>priorities</name><index>[<expr><name>i</name></expr>]</index></name>.<name>t_name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>val</name> = <name><name>priorities</name><index>[<expr><name>i</name></expr>]</index></name>.<name>t_val</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>err</name></expr>;</return>
}</block>
<macro><name>AP_IMPLEMENT_HOOK_VOID</name><argument_list>(<argument>error_log</argument>,
<argument>(const ap_errorlog_info *info, const char *errstr)</argument>,
<argument>(info, errstr)</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>int</argument>, <argument>generate_log_id</argument>,
<argument>(const conn_rec *c, const request_rec *r,
const char **id)</argument>,
<argument>(c, r, id)</argument>, <argument>DECLINED</argument>)</argument_list></macro>
</unit>
