<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/test/cls.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * Compare a string to a mask
 * Mask characters:
 *   @ - uppercase letter
 *   # - lowercase letter
 *   &amp; - hex digit
 *   # - digit
 *   * - swallow remaining characters
 *  &lt;x&gt; - exact match for any other character
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>checkmask</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mask</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> != '\0' &amp;&amp; <name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> != '*'</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>ch</name> = <name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> = <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ch</name> == '@'</expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>isupper</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr>0</expr>;</return></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>ch</name> == '$'</expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>islower</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr>0</expr>;</return></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>ch</name> == '#'</expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>isdigit</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr>0</expr>;</return></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>ch</name> == '&amp;'</expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>isxdigit</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr>0</expr>;</return></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>ch</name> != <name>d</name></expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then></if></else></if></else></if></else></if></else></if>
    }</block></for>

    <if>if <condition>(<expr><name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> == '*'</expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then>
    <else>else
        <return>return <expr>(<name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> == '\0')</expr>;</return></else></if>
}</block></function>

<comment type="block">/*
 * Converts 8 hex digits to a time integer
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hex2sec</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>x</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>j</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 8</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>ch</name> = <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name> &lt;&lt;= 4</expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>j</name> |= <name>ch</name> - '0'</expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>j</name> |= <name>ch</name> - ('A' - 10)</expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>j</name> |= <name>ch</name> - ('a' - 10)</expr>;</expr_stmt></else></if></else></if>
    }</block></for>
    <if>if <condition>(<expr><name>j</name> == 0xffffffff</expr>)</condition><then>
        <return>return <expr>-1</expr>;</return></then>  <comment type="block">/* so that it works with 8-byte ints */</comment>
    <else>else
        <return>return <expr><name>j</name></expr>;</return></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ver</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DIR</name> *</type><name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>dirent</name> *</type><name>e</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>FILENAME_MAX</name> + 1</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr>1035</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>date</name></decl>, <decl><type ref="prev"/><name>lmod</name></decl>, <decl><type ref="prev"/><name>expire</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>tm</name></type> <name>ts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>sdate</name><index>[<expr>30</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>slmod</name><index>[<expr>30</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sexpire</name><index>[<expr>30</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>time_format</name><index>[]</index></name> <init>= <expr>"%e %b %Y %R"</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>argc</name> != 2</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Usage: cls directory\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>d</name> = <call><name>opendir</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>d</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"opendir"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
        <expr_stmt><expr><name>e</name> = <call><name>readdir</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>e</name> == <name>NULL</name></expr>)</condition><then>
            <break>break;</break></then></if>
        <expr_stmt><expr><name>s</name> = <name><name>e</name>-&gt;<name>d_name</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>s</name><index>[<expr>0</expr>]</index></name> == '.' || <name><name>s</name><index>[<expr>0</expr>]</index></name> == '#'</expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"%s/%s"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fp</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>fp</name> == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"fopen"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>1034</expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"fgets"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>checkmask</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>"&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;\n"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Bad cache file\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>date</name> = <call><name>hex2sec</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lmod</name> = <call><name>hex2sec</name><argument_list>(<argument><expr><name>line</name> + 9</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>expire</name> = <call><name>hex2sec</name><argument_list>(<argument><expr><name>line</name> + 18</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ver</name> = <call><name>hex2sec</name><argument_list>(<argument><expr><name>line</name> + 27</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> = <call><name>hex2sec</name><argument_list>(<argument><expr><name>line</name> + 35</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>1034</expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"fgets"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>"X-URL: "</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call> != 0 || <name><name>line</name><index>[<expr><name>i</name> - 1</expr>]</index></name> != '\n'</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Bad cache file\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>date</name> != -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ts</name> = *<call><name>gmtime</name><argument_list>(<argument><expr>&amp;<name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>sdate</name></expr></argument>, <argument><expr>30</expr></argument>, <argument><expr><name>time_format</name></expr></argument>, <argument><expr>&amp;<name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>sdate</name></expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

        <if>if <condition>(<expr><name>lmod</name> != -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ts</name> = *<call><name>gmtime</name><argument_list>(<argument><expr>&amp;<name>lmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>slmod</name></expr></argument>, <argument><expr>30</expr></argument>, <argument><expr><name>time_format</name></expr></argument>, <argument><expr>&amp;<name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>slmod</name></expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

        <if>if <condition>(<expr><name>expire</name> != -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ts</name> = *<call><name>gmtime</name><argument_list>(<argument><expr>&amp;<name>expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>sexpire</name></expr></argument>, <argument><expr>30</expr></argument>, <argument><expr><name>time_format</name></expr></argument>, <argument><expr>&amp;<name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>sexpire</name></expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%s: %d; %s  %s  %s\n"</expr></argument>, <argument><expr><name>line</name> + 7</expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>sdate</name></expr></argument>, <argument><expr><name>slmod</name></expr></argument>, <argument><expr><name>sexpire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>
</unit>
