<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/os/netware/pre_nw.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  pre_nw.h
 * @brief Definitions for Netware systems
 *
 * @addtogroup APACHE_OS_NETWARE
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__pre_nw__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__pre_nw__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__GNUC__</name></cpp:ifndef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> precompile_target "precomp.mch"</cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETWARE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_PLAT_NLM</name></cpp:macro></cpp:define>

<comment type="block">/* hint for MSL C++ that we're on NetWare platform */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NETWARE__</name></cpp:macro></cpp:define>

<comment type="block">/* the FAR keyword has no meaning in a 32-bit environment
   but is used in the SDK headers so we take it out */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAR</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>far</name></cpp:macro></cpp:define>

<comment type="block">/* no-op for Codewarrior C compiler; a functions are cdecl
   by default */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cdecl</name></cpp:macro></cpp:define>

<comment type="block">/* if we have wchar_t enabled in C++, predefine this type to avoid
   a conflict in Novell's header files */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__GNUC__</name></cpp:ifndef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<call><name>__option</name><argument_list>(<argument><expr><name>cplusplus</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>__option</name><argument_list>(<argument><expr><name>wchar_type</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WCHAR_T</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* C9X definition used by MSL C++ library */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECIMAL_DIG</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<comment type="block">/* some code may want to use the MS convention for long long */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__int64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int64</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Restrict the number of nested includes */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MAX_INCLUDE_DEPTH</name></cpp:macro>    <cpp:value>48</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/** @} */</comment>
</unit>
