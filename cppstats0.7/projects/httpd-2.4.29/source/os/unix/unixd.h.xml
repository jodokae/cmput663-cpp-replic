<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/os/unix/unixd.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  unixd.h
 * @brief common stuff that unix MPMs will want
 *
 * @addtogroup APACHE_OS_UNIX
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNIXD_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIXD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_listen.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_TIME_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_RESOURCE_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_proc_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_global_mutex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_TYPES_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_IPC_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ipc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>userdir</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_unix_identity_t</name>;</typedef>

<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>ap_unix_identity_t *</argument>, <argument>get_suexec_identity</argument>,<argument>(const request_rec *r)</argument>)</argument_list></macro>


<comment type="block">/* Default user name and group name. These may be specified as numbers by
 * placing a # before a number */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DEFAULT_USER</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_USER</name></cpp:macro> <cpp:value>"#-1"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DEFAULT_GROUP</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_GROUP</name></cpp:macro> <cpp:value>"#-1"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>group_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uid_t</name></type> <name>user_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gid_t</name></type> <name>group_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>suexec_enabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>chroot_dir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>suexec_disabled_reason</name></decl>;</decl_stmt> <comment type="block">/* suitable msg if !suexec_enabled */</comment>
}</block></struct></type> <name>unixd_config_rec</name>;</typedef>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>unixd_config_rec</name></type> <name>ap_unixd_config</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_CPU</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_NPROC</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_unixd_set_rlimit</name><argument_list>(<argument>cmd_parms *cmd</argument>, <argument>struct rlimit **plimit</argument>,
                                     <argument>const char *arg</argument>,
                                     <argument>const char * arg2</argument>, <argument>int type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * One of the functions to set mutex permissions should be called in
 * the parent process on platforms that switch identity when the
 * server is started as root.
 * If the child init logic is performed before switching identity
 * (e.g., MPM setup for an accept mutex), it should only be called
 * for SysV semaphores.  Otherwise, it is safe to call it for all
 * mutex types.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_unixd_set_proc_mutex_perms</name><argument_list>(<argument><expr><name>apr_proc_mutex_t</name> *<name>pmutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_unixd_set_global_mutex_perms</name><argument_list>(<argument><expr><name>apr_global_mutex_t</name> *<name>gmutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_unixd_accept</name><argument_list>(<argument><expr><name>void</name> **<name>accepted</name></expr></argument>, <argument><expr><name>ap_listen_rec</name> *<name>lr</name></expr></argument>, <argument><expr><name>apr_pool_t</name> *<name>ptrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_KILLPG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_unixd_killpg</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>(killpg ((x), (y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_os_killpg</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>(killpg ((x), (y)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* HAVE_KILLPG */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_unixd_killpg</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>(kill (-(x), (y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_os_killpg</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>(kill (-(x), (y)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_KILLPG */</comment>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>void</name>            *</type><name>baton</name></decl>;</decl_stmt>  <comment type="block">/* MPM's */</comment>

    <comment type="block">/* volatile because they're updated from signals' handlers */</comment>
    <decl_stmt><decl><type><name>int</name> <specifier>volatile</specifier></type>    <name>mpm_state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <specifier>volatile</specifier></type>    <name>shutdown_pending</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <specifier>volatile</specifier></type>    <name>restart_pending</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <specifier>volatile</specifier></type>    <name>is_ungraceful</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ap_generation_t</name></type> <name>my_generation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>module_loads</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>was_graceful</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Current number of listeners buckets and maximum reached across
     * restarts (to size retained data according to dynamic num_buckets,
     * eg. idle_spawn_rate).
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>num_buckets</name></decl>, <name>max_buckets</name>;</decl_stmt>
}</block></struct></type> <name>ap_unixd_mpm_retained_data</name>;</typedef>

<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_unixd_mpm_retained_data *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_unixd_mpm_get_retained_data</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_unixd_mpm_set_signals</name><argument_list>(<argument>apr_pool_t *pconf</argument>, <argument>int once_process</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/** @} */</comment>
</unit>
