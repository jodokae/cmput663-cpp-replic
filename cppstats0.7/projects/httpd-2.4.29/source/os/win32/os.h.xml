<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/os/win32/os.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file win32/os.h
 * @brief This file in included in all Apache source code. It contains definitions
 * of facilities available on _this_ operating system (HAVE_* macros),
 * and prototypes of OS specific functions defined in os.c or os-inline.c
 *
 * @defgroup APACHE_OS_WIN32 win32
 * @ingroup  APACHE_OS
 * @{
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AP_OS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_OS_H</name></cpp:macro></cpp:define>
<comment type="block">/* Delegate windows include to the apr.h header, if USER or GDI declarations
 * are required (for a window rather than console application), include
 * windows.h prior to any other Apache header files.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM</name></cpp:macro> <cpp:value>"Win64"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM</name></cpp:macro> <cpp:value>"Win32"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define command-line rewriting for this platform, handled by core.
 * For Windows, this is currently handled inside the WinNT MPM.
 * XXX To support a choice of MPMs, extract common platform behavior
 * into a function specified here.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_PLATFORM_REWRITE_ARGS_HOOK</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<comment type="block">/* going away shortly... */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DRIVE_LETTERS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_UNC_PATHS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_BLIND_FILESYSTEM</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> <comment type="block">/* for exit() */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* BIG RED WARNING: exit() is mapped to allow us to capture the exit
 * status.  This header must only be included from modules linked into
 * the ApacheCore.dll - since it's a horrible behavior to exit() from
 * any module outside the main() block, and we -will- assume it's a
 * fatal error.
 */</comment>

<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_real_exit_code</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exit</name><parameter_list>(<param><type><name>status</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((exit)((ap_real_exit_code==2) \
                                ? (ap_real_exit_code = (status)) \
                                : ((ap_real_exit_code = 0), (status))))</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AP_DECLARE_EXPORT</name></cpp:ifdef>

<comment type="block">/* Defined in util_win32.c and available only to the core module for
 * win32 MPM design.
 */</comment>

<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_os_proc_filepath</name><argument_list>(<argument><expr><name>char</name> **<name>binpath</name></expr></argument>, <argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><enum>enum <block>{
    <decl><name>AP_DLL_WINBASEAPI</name> <init>= <expr>0</expr></init></decl>,    <comment type="block">/* kernel32 From WinBase.h      */</comment>
    <decl><name>AP_DLL_WINADVAPI</name> <init>= <expr>1</expr></init></decl>,     <comment type="block">/* advapi32 From WinBase.h      */</comment>
    <decl><name>AP_DLL_WINSOCKAPI</name> <init>= <expr>2</expr></init></decl>,    <comment type="block">/* mswsock  From WinSock.h      */</comment>
    <decl><name>AP_DLL_WINSOCK2API</name> <init>= <expr>3</expr></init></decl>,   <comment type="block">/* ws2_32   From WinSock2.h     */</comment>
    <decl><name>AP_DLL_defined</name> <init>= <expr>4</expr></init></decl>        <comment type="block">/* must define as last idx_ + 1 */</comment>
}</block></enum></type> <name>ap_dlltoken_e</name>;</typedef>

<function_decl><type><name>FARPROC</name></type> <name>ap_load_dll_func</name><parameter_list>(<param><decl><type><name>ap_dlltoken_e</name></type> <name>fnLib</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>fnName</name></decl></param>, <param><decl><type><name>int</name></type> <name>ordinal</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>PSECURITY_ATTRIBUTES</name></type> <name>GetNullACL</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>CleanNullACL</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>sa</name></decl></param>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DECLARE_LATE_DLL_FUNC</name><parameter_list>(<param><type><name>lib</name></type></param>, <param><type><name>rettype</name></type></param>, <param><type><name>calltype</name></type></param>, <param><type><name>fn</name></type></param>, <param><type><name>ord</name></type></param>, <param><type><name>args</name></type></param>, <param><type><name>names</name></type></param>)</parameter_list></cpp:macro> \
    <cpp:value>typedef rettype (calltype *ap_winapi_fpt_##fn) args; \
    static ap_winapi_fpt_##fn ap_winapi_pfn_##fn = NULL; \
    static APR_INLINE rettype ap_winapi_##fn args \
    {   if (!ap_winapi_pfn_##fn) \
            ap_winapi_pfn_##fn = (ap_winapi_fpt_##fn) ap_load_dll_func(lib, #fn, ord); \
        return (*(ap_winapi_pfn_##fn)) names; };</cpp:value></cpp:define> \

<comment type="block">/* Win2K kernel only */</comment>
<expr_stmt><expr><call><name>AP_DECLARE_LATE_DLL_FUNC</name><argument_list>(<argument><expr><name>AP_DLL_WINADVAPI</name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>WINAPI</name></expr></argument>, <argument><expr><name>ChangeServiceConfig2A</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(
    <name>SC_HANDLE</name> <name>hService</name>,
    <name>DWORD</name> <name>dwInfoLevel</name>,
    <name>LPVOID</name> <name>lpInfo</name>)</expr></argument>,
    <argument><expr>(<name>hService</name>, <name>dwInfoLevel</name>, <name>lpInfo</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ChangeServiceConfig2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ChangeServiceConfig2</name></cpp:macro> <cpp:value>ap_winapi_ChangeServiceConfig2A</cpp:value></cpp:define>

<comment type="block">/* WinNT kernel only */</comment>
<expr_stmt><expr><call><name>AP_DECLARE_LATE_DLL_FUNC</name><argument_list>(<argument><expr><name>AP_DLL_WINBASEAPI</name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>WINAPI</name></expr></argument>, <argument><expr><name>CancelIo</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(
    <name>IN</name> <name>HANDLE</name> <name>hFile</name>)</expr></argument>,
    <argument><expr>(<name>hFile</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CancelIo</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CancelIo</name></cpp:macro> <cpp:value>ap_winapi_CancelIo</cpp:value></cpp:define>

<comment type="block">/* Win9x kernel only */</comment>
<expr_stmt><expr><call><name>AP_DECLARE_LATE_DLL_FUNC</name><argument_list>(<argument><expr><name>AP_DLL_WINBASEAPI</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>, <argument><expr><name>WINAPI</name></expr></argument>, <argument><expr><name>RegisterServiceProcess</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(
    <name>DWORD</name> <name>dwProcessId</name>,
    <name>DWORD</name> <name>dwType</name>)</expr></argument>,
    <argument><expr>(<name>dwProcessId</name>, <name>dwType</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RegisterServiceProcess</name></cpp:macro> <cpp:value>ap_winapi_RegisterServiceProcess</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* def AP_DECLARE_EXPORT */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ndef AP_OS_H */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* def WIN32 */</comment>
<comment type="block">/** @} */</comment>
</unit>
