<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/os/bs2000/os.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * This file will include OS specific functions which are not inlineable.
 * Any inlineable functions should be defined in os-inline.c instead.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OSD_POSIX</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_LEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><enum>enum
<block>{
    <decl><name>bs2_unknown</name></decl>,     <comment type="block">/* not initialized yet. */</comment>
    <decl><name>bs2_noFORK</name></decl>,      <comment type="block">/* no fork() because -X flag was specified */</comment>
    <decl><name>bs2_FORK</name></decl>,        <comment type="block">/* only fork() because uid != 0 */</comment>
    <decl><name>bs2_UFORK</name></decl>        <comment type="block">/* Normally, ufork() is used to switch identities. */</comment>
}</block></enum></type> <name>bs2_ForkType</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>bs2_ForkType</name></type> <name>forktype</name> <init>= <expr><name>bs2_unknown</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Determine the method for forking off a child in such a way as to
 * set both the POSIX and BS2000 user id's to the unprivileged user.
 */</comment>
<function><type><specifier>static</specifier> <name>bs2_ForkType</name></type> <name>os_forktype</name><parameter_list>(<param><decl><type><name>int</name></type> <name>one_process</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* have we checked the OS version before? If yes return the previous
     * result - the OS release isn't going to change suddenly!
     */</comment>
    <if>if <condition>(<expr><name>forktype</name> == <name>bs2_unknown</name></expr>)</condition><then> <block>{
        <comment type="block">/* not initialized yet */</comment>

        <comment type="block">/* No fork if the one_process option was set */</comment>
        <if>if <condition>(<expr><name>one_process</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>forktype</name> = <name>bs2_noFORK</name></expr>;</expr_stmt>
        }</block></then>
        <comment type="block">/* If the user is unprivileged, use the normal fork() only. */</comment>
        <else>else <if>if <condition>(<expr><call><name>getuid</name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>forktype</name> = <name>bs2_FORK</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <expr_stmt><expr><name>forktype</name> = <name>bs2_UFORK</name></expr>;</expr_stmt></else></if></else></if>
    }</block></then></if>
    <return>return <expr><name>forktype</name></expr>;</return>
}</block></function>



<comment type="block">/* This routine complements the setuid() call: it causes the BS2000 job
 * environment to be switched to the target user's user id.
 * That is important if CGI scripts try to execute native BS2000 commands.
 */</comment>
<function><type><name>int</name></type> <name>os_init_job_environment</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>server</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user_name</name></decl></param>, <param><decl><type><name>int</name></type> <name>one_process</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>bs2_ForkType</name></type>            <name>type</name> <init>= <expr><call><name>os_forktype</name><argument_list>(<argument><expr><name>one_process</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* We can be sure that no change to uid==0 is possible because of
     * the checks in http_core.c:set_user()
     */</comment>

    <if>if <condition>(<expr><name>one_process</name></expr>)</condition><then> <block>{

        <expr_stmt><expr><name>type</name> = <name>forktype</name> = <name>bs2_noFORK</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02170</expr></argument>)</argument_list></call>
                     "The debug mode of Apache should only "
                     "be started by an unprivileged user!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/* BS2000 requires a "special" version of fork() before a setuid() call */</comment>
<function><type><name>pid_t</name></type> <name>os_fork</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>  <name><name>username</name><index>[<expr><name>USER_LEN</name>+1</expr>]</index></name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><call><name>os_forktype</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition> <block>{

      <case>case <expr><name>bs2_FORK</name></expr>:
        <expr_stmt><expr><name>pid</name> = <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      </case><case>case <expr><name>bs2_UFORK</name></expr>:
        <expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr>sizeof <name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Make user name all upper case - for some versions of ufork() */</comment>
        <expr_stmt><expr><call><name>ap_str_toupper</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>pid</name> = <call><name>ufork</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>pid</name> == -1 &amp;&amp; <name>errno</name> == <name>EPERM</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
                         <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02171</expr></argument>)</argument_list></call> "ufork: Possible mis-configuration "
                         "for user %s - Aborting."</expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <break>break;</break>

      </case><default>default:
        <expr_stmt><expr><name>pid</name> = 0</expr>;</expr_stmt>
        <break>break;</break>
    </default>}</block></switch>

    <return>return <expr><name>pid</name></expr>;</return>
}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* _OSD_POSIX */</comment>
<function><type><name>void</name></type> <name>bs2000_os_is_not_here</name><parameter_list>()</parameter_list>
<block>{
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _OSD_POSIX */</comment>
</unit>
