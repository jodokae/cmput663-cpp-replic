<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/ap_socache.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file ap_socache.h
 * @brief Small object cache provider interface.
 *
 * @defgroup AP_SOCACHE ap_socache
 * @ingroup  APACHE_MODS
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AP_SOCACHE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SOCACHE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/** If this flag is set, the store/retrieve/remove/status interfaces
 * of the provider are NOT safe to be called concurrently from
 * multiple processes or threads, and an external global mutex must be
 * used to serialize access to the provider.
 */</comment>
<comment type="block">/* XXX: Even if store/retrieve/remove is atomic, isn't it useful to note
 * independently that status and iterate may or may not be?
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SOCACHE_FLAG_NOTMPSAFE</name></cpp:macro> <cpp:value>(0x0001)</cpp:value></cpp:define>

<comment type="block">/** A cache instance. */</comment>
<typedef>typedef <type>struct <name>ap_socache_instance_t</name></type> <name>ap_socache_instance_t</name>;</typedef>

<comment type="block">/** Hints which may be passed to the init function; providers may
 * ignore some or all of these hints. */</comment>
<struct>struct <name>ap_socache_hints</name> <block>{
    <comment type="block">/** Approximate average length of IDs: */</comment>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>avg_id_len</name></decl>;</decl_stmt>
    <comment type="block">/** Approximate average size of objects: */</comment>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>avg_obj_size</name></decl>;</decl_stmt>
    <comment type="block">/** Suggested interval between expiry cleanup runs; */</comment>
    <decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>expiry_interval</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/**
 * Iterator callback prototype for the ap_socache_provider_t-&gt;iterate() method
 * @param instance The cache instance
 * @param s Associated server context (for logging)
 * @param userctx User defined pointer passed from the iterator call
 * @param id Unique ID for the object (binary blob)
 * with a trailing null char for convenience
 * @param idlen Length of id blob
 * @param data Output buffer to place retrieved data (binary blob)
 * with a trailing null char for convenience
 * @param datalen Length of data buffer
 * @param pool Pool for temporary allocations
 * @return APR status value; return APR_SUCCESS or the iteration will halt;
 * this value is returned to the ap_socache_provider_t-&gt;iterate() caller
 */</comment>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> (<name>ap_socache_iterator_t</name>)<parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>,
                                             <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
                                             <param><decl><type><name>void</name> *</type><name>userctx</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>,
                                             <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>data</name></decl></param>,
                                             <param><decl><type><name>unsigned</name> <name>int</name></type> <name>datalen</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** A socache provider structure.  socache providers are registered
 * with the ap_provider.h interface using the AP_SOCACHE_PROVIDER_*
 * constants. */</comment>
<typedef>typedef <type><struct>struct <name>ap_socache_provider_t</name> <block>{
    <comment type="block">/** Canonical provider name. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>

    <comment type="block">/** Bitmask of AP_SOCACHE_FLAG_* flags. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>

    <comment type="block">/**
     * Create a session cache based on the given configuration string.
     * The instance pointer returned in the instance parameter will be
     * passed as the first argument to subsequent invocations.
     *
     * @param instance Output parameter to which instance object is written.
     * @param arg User-specified configuration string.  May be NULL to
     *        force use of defaults.
     * @param tmp Pool to be used for any temporary allocations
     * @param p Pool to be use for any allocations lasting as long as
     * the created instance
     * @return NULL on success, or an error string on failure.
     */</comment>
    <function_decl><type><specifier>const</specifier> <name>char</name> *</type>(*<name>create</name>)<parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> **</type><name>instance</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>tmp</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * Initialize the cache.  The cname must be of maximum length 16
     * characters, and uniquely identifies the consumer of the cache
     * within the server; using the module name is recommended, e.g.
     * "mod_ssl-sess".  This string may be used within a filesystem
     * path so use of only alphanumeric [a-z0-9_-] characters is
     * recommended.  If hints is non-NULL, it gives a set of hints for
     * the provider.  Returns APR error code.
     *
     * @param instance The cache instance
     * @param cname A unique string identifying the consumer of this API
     * @param hints Optional hints argument describing expected cache use
     * @param s Server structure to which the cache is associated
     * @param pool Pool for long-lived allocations
     * @return APR status value indicating success.
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (*<name>init</name>)<parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cname</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> struct <name>ap_socache_hints</name> *</type><name>hints</name></decl></param>,
                         <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * Destroy a given cache instance object.
     * @param instance The cache instance to destroy.
     * @param s Associated server structure (for logging purposes)
     */</comment>
    <function_decl><type><name>void</name></type> (*<name>destroy</name>)<parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * Store an object in a cache instance.
     * @param instance The cache instance
     * @param s Associated server structure (for logging purposes)
     * @param id Unique ID for the object; binary blob
     * @param idlen Length of id blob
     * @param expiry Absolute time at which the object expires
     * @param data Data to store; binary blob
     * @param datalen Length of data blob
     * @param pool Pool for temporary allocations.
     * @return APR status value.
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (*<name>store</name>)<parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
                          <param><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl></param>,
                          <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>datalen</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * Retrieve a cached object.
     * 
     * @param instance The cache instance
     * @param s Associated server structure (for logging purposes)
     * @param id Unique ID for the object; binary blob
     * @param idlen Length of id blob
     * @param data Output buffer to place retrievd data (binary blob)
     * @param datalen On entry, length of data buffer; on exit, the
     * number of bytes written to the data buffer.
     * @param pool Pool for temporary allocations.
     * @return APR status value; APR_NOTFOUND if the object was not
     * found
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (*<name>retrieve</name>)<parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
                             <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>datalen</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * Remove an object from the cache
     *
     * @param instance The cache instance
     * @param s Associated server structure (for logging purposes)
     * @param id Unique ID for the object; binary blob
     * @param idlen Length of id blob
     * @param pool Pool for temporary allocations.
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (*<name>remove</name>)<parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/** 
     * Dump the status of a cache instance for mod_status.  Will use
     * the ap_r* interfaces to produce appropriate status output.
     * XXX: ap_r* are deprecated, bad dogfood
     *
     * @param instance The cache instance
     * @param r The request structure
     * @param flags The AP_STATUS_* constants used (see mod_status.h)
     */</comment>
    <function_decl><type><name>void</name></type> (*<name>status</name>)<parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * Dump all cached objects through an iterator callback.
     * @param instance The cache instance
     * @param s Associated server context (for processing and logging)
     * @param userctx User defined pointer passed through to the iterator
     * @param iterator The user provided callback function which will receive
     * individual calls for each unexpired id/data pair
     * @param pool Pool for temporary allocations.
     * @return APR status value; APR_NOTFOUND if the object was not
     * found
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (*<name>iterate</name>)<parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>userctx</name></decl></param>, <param><decl><type><name>ap_socache_iterator_t</name> *</type><name>iterator</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

}</block></struct></type> <name>ap_socache_provider_t</name>;</typedef>

<comment type="block">/** The provider group used to register socache providers. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SOCACHE_PROVIDER_GROUP</name></cpp:macro> <cpp:value>"socache"</cpp:value></cpp:define>
<comment type="block">/** The provider version used to register socache providers. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SOCACHE_PROVIDER_VERSION</name></cpp:macro> <cpp:value>"0"</cpp:value></cpp:define>

<comment type="block">/** Default provider name. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SOCACHE_DEFAULT_PROVIDER</name></cpp:macro> <cpp:value>"default"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AP_SOCACHE_H */</comment>
<comment type="block">/** @} */</comment>
</unit>
