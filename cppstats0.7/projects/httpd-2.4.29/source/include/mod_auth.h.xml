<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/mod_auth.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  mod_auth.h
 * @brief Authentication and Authorization Extension for Apache
 *
 * @defgroup MOD_AUTH mod_auth
 * @ingroup  APACHE_MODS
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>APACHE_MOD_AUTH_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_MOD_AUTH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHN_PROVIDER_GROUP</name></cpp:macro> <cpp:value>"authn"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHZ_PROVIDER_GROUP</name></cpp:macro> <cpp:value>"authz"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHN_PROVIDER_VERSION</name></cpp:macro> <cpp:value>"0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHZ_PROVIDER_VERSION</name></cpp:macro> <cpp:value>"0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHN_DEFAULT_PROVIDER</name></cpp:macro> <cpp:value>"file"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHN_PROVIDER_NAME_NOTE</name></cpp:macro> <cpp:value>"authn_provider_name"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHZ_PROVIDER_NAME_NOTE</name></cpp:macro> <cpp:value>"authz_provider_name"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHN_PREFIX</name></cpp:macro> <cpp:value>"AUTHENTICATE_"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHZ_PREFIX</name></cpp:macro> <cpp:value>"AUTHORIZE_"</cpp:value></cpp:define>

<comment type="block">/** all of the requirements must be met */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SATISFY_ALL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATISFY_ALL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/**  any of the requirements must be met */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SATISFY_ANY</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATISFY_ANY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/** There are no applicable satisfy lines */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SATISFY_NOSPEC</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATISFY_NOSPEC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{
    <decl><name>AUTH_DENIED</name></decl>,
    <decl><name>AUTH_GRANTED</name></decl>,
    <decl><name>AUTH_USER_FOUND</name></decl>,
    <decl><name>AUTH_USER_NOT_FOUND</name></decl>,
    <decl><name>AUTH_GENERAL_ERROR</name></decl>
}</block></enum></type> <name>authn_status</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
    <decl><name>AUTHZ_DENIED</name></decl>,
    <decl><name>AUTHZ_GRANTED</name></decl>,
    <decl><name>AUTHZ_NEUTRAL</name></decl>,
    <decl><name>AUTHZ_GENERAL_ERROR</name></decl>,
    <decl><name>AUTHZ_DENIED_NO_USER</name></decl>      <comment type="block">/* denied because r-&gt;user == NULL */</comment>
}</block></enum></type> <name>authz_status</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/* Given a username and password, expected to return AUTH_GRANTED
     * if we can validate this user/password combination.
     */</comment>
    <function_decl><type><name>authn_status</name></type> (*<name>check_password</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/* Given a user and realm, expected to return AUTH_USER_FOUND if we
     * can find a md5 hash of 'user:realm:password'
     */</comment>
    <function_decl><type><name>authn_status</name></type> (*<name>get_realm_hash</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>, <param><decl><type><name>char</name> **</type><name>rethash</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>authn_provider</name>;</typedef>

<comment type="block">/* A linked-list of authn providers. */</comment>
<typedef>typedef <type>struct <name>authn_provider_list</name></type> <name>authn_provider_list</name>;</typedef>

<struct>struct <name>authn_provider_list</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>authn_provider</name> *</type><name>provider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/* Given a request_rec, expected to return AUTHZ_GRANTED
     * if we can authorize user access.
     * @param r the request record
     * @param require_line the argument to the authz provider
     * @param parsed_require_line the value set by parse_require_line(), if any
     */</comment>
    <function_decl><type><name>authz_status</name></type> (*<name>check_authorization</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_line</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/** Check the syntax of a require line and optionally cache the parsed
     * line. This function may be NULL.
     * @param cmd the config directive
     * @param require_line the argument to the authz provider
     * @param parsed_require_line place to store parsed require_line for use by provider
     * @return Error message or NULL on success
     */</comment>
    <function_decl><type><specifier>const</specifier> <name>char</name> *</type>(*<name>parse_require_line</name>)<parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>void</name> **</type><name>parsed_require_line</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>authz_provider</name>;</typedef>

<comment type="block">/* ap_authn_cache_store: Optional function for authn providers
 * to enable cacheing their lookups with mod_authn_cache
 * @param r The request rec
 * @param module Module identifier
 * @param user User name to authenticate
 * @param realm Digest authn realm (NULL for basic authn)
 * @param data The value looked up by the authn provider, to cache
 */</comment>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>ap_authn_cache_store</name></expr></argument>,
                        <argument><expr>(<name>request_rec</name>*, const <name>char</name>*, const <name>char</name>*,
                         const <name>char</name>*, const <name>char</name>*)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
