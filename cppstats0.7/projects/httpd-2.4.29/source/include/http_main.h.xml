<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/http_main.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  http_main.h
 * @brief Command line options
 *
 * @defgroup APACHE_CORE_MAIN Command line options
 * @ingroup  APACHE_CORE
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>APACHE_HTTP_MAIN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_HTTP_MAIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>

<comment type="block">/** AP_SERVER_BASEARGS is the command argument list parsed by http_main.c
 * in apr_getopt() format.  Use this for default'ing args that the MPM
 * can safely ignore and pass on from its rewrite_args() handler.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SERVER_BASEARGS</name></cpp:macro> <cpp:value>"C:c:D:d:E:e:f:vVlLtTSMh?X"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/** The name of the Apache executable */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ap_server_argv0</name></decl>;</decl_stmt>
<comment type="block">/** The global server's ServerRoot */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ap_server_root</name></decl>;</decl_stmt>
<comment type="block">/** The global server's DefaultRuntimeDir
 * This is not usable directly in the general case; use
 * ap_runtime_dir_relative() instead.
 */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ap_runtime_dir</name></decl>;</decl_stmt>
<comment type="block">/** The global server's server_rec */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>server_rec</name> *</type><name>ap_server_conf</name></decl>;</decl_stmt>
<comment type="block">/** global pool, for access prior to creation of server_rec */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>apr_pool_t</name> *</type><name>ap_pglobal</name></decl>;</decl_stmt>
<comment type="block">/** state of the server (startup, exiting, ...) */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_main_state</name></decl>;</decl_stmt>
<comment type="block">/** run mode (normal, config test, config dump, ...) */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_run_mode</name></decl>;</decl_stmt>
<comment type="block">/** run mode (normal, config test, config dump, ...) */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_config_generation</name></decl>;</decl_stmt>

<comment type="block">/* for -C, -c and -D switches */</comment>
<comment type="block">/** An array of all -C directives.  These are processed before the server's
 *  config file */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>apr_array_header_t</name> *</type><name>ap_server_pre_read_config</name></decl>;</decl_stmt>
<comment type="block">/** An array of all -c directives.  These are processed after the server's
 *  config file */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>apr_array_header_t</name> *</type><name>ap_server_post_read_config</name></decl>;</decl_stmt>
<comment type="block">/** An array of all -D defines on the command line.  This allows people to
 *  effect the server based on command line options */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>apr_array_header_t</name> *</type><name>ap_server_config_defines</name></decl>;</decl_stmt>
<comment type="block">/** Available integer for using the -T switch */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_document_root_check</name></decl>;</decl_stmt>

<comment type="block">/**
 * An optional function to send signal to server on presence of '-k'
 * command line argument.
 * @param status The exit status after sending signal
 * @param pool Memory pool to allocate from
 */</comment>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ap_signal_server</name></expr></argument>, <argument><expr>(<name>int</name> *<name>status</name>, <name>apr_pool_t</name> *<name>pool</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* !APACHE_HTTP_MAIN_H */</comment>
<comment type="block">/** @} */</comment>
</unit>
