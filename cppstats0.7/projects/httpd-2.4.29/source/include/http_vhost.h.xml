<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/http_vhost.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  http_vhost.h
 * @brief Virtual Host package
 *
 * @defgroup APACHE_CORE_VHOST Virtual Host Package
 * @ingroup  APACHE_CORE
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>APACHE_HTTP_VHOST_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_HTTP_VHOST_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * called before any config is read
 * @param p Pool to allocate out of
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_init_vhost_config</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * called after the config has been read to compile the tables needed to do
 * the run-time vhost lookups
 * @param p The pool to allocate out of
 * @param main_server The start of the virtual host list
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_fini_vhost_config</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>server_rec</name> *<name>main_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * handle addresses in "&lt;VirtualHost&gt;" statement
 * @param p The pool to allocate out of
 * @param hostname The hostname in the VirtualHost statement
 * @param s The list of Virtual Hosts.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ap_parse_vhost_addrs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hostname</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * handle NameVirtualHost directive
 * @param cmd Command Parameters structure
 * @param dummy NOT USED
 * @param arg a host of the form "&lt;address&gt;[:port]"
 */</comment>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro><expr_stmt><expr><call><name>ap_set_name_virtual_host</name><argument_list>(<argument><expr><name>cmd_parms</name> *<name>cmd</name></expr></argument>,
                                                        <argument><expr><name>void</name> *<name>dummy</name></expr></argument>,
                                                        <argument><expr>const <name>char</name> *<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * Callback function for every Name Based Virtual Host.
 * @param baton Opaque user object
 * @param conn The current Connection
 * @param s The current Server
 * @see ap_vhost_iterate_given_conn
 * @return 0 on success, any non-zero return will stop the iteration.
 */</comment>
<typedef>typedef <function_decl><type><name>int</name></type>(*<name>ap_vhost_iterate_conn_cb</name>)<parameter_list>(<param><decl><type><name>void</name>*</type> <name>baton</name></decl></param>, <param><decl><type><name>conn_rec</name>*</type> <name>conn</name></decl></param>, <param><decl><type><name>server_rec</name>*</type> <name>s</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/**
 * For every virtual host on this connection, call func_cb.
 * @param conn The current connection
 * @param func_cb Function called for every Name Based Virtual Host for this
 *                connection.
 * @param baton Opaque object passed to func_cb.
 * @return The return value from func_cb.
 * @note If func_cb returns non-zero, the function will return at this point,
 *       and not continue iterating the virtual hosts.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_vhost_iterate_given_conn</name><argument_list>(<argument>conn_rec *conn</argument>,
                                            <argument>ap_vhost_iterate_conn_cb func_cb</argument>,
                                            <argument>void* baton</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * given an ip address only, give our best guess as to what vhost it is
 * @param conn The current connection
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_update_vhost_given_ip</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * ap_update_vhost_given_ip is never enough, and this is always called after
 * the headers have been read.  It may change r-&gt;server.
 * @param r The current request
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_update_vhost_from_headers</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * Match the host in the header with the hostname of the server for this
 * request.
 * @param r The current request
 * @param host The hostname in the headers
 * @param port The port from the headers
 * @return return 1 if the host:port matches any of the aliases of r-&gt;server,
 * return 0 otherwise
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_matches_request_vhost</name><argument_list>(<argument>request_rec *r</argument>, <argument>const char *host</argument>,
    <argument>apr_port_t port</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* !APACHE_HTTP_VHOST_H */</comment>
<comment type="block">/** @} */</comment>
</unit>
