<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/util_fcgi.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  util_fcgi.h
 * @brief FastCGI protocol defitions and support routines
 *
 * @defgroup APACHE_CORE_FASTCGI FastCGI Tools
 * @ingroup  APACHE_CORE
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>APACHE_UTIL_FCGI_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_UTIL_FCGI_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>

<comment type="block">/**
 * @brief A structure that represents the fixed header fields
 * at the beginning of a "FastCGI record" (i.e., the data prior
 * to content data and padding).
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/** See values for version, below */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>version</name></decl>;</decl_stmt>
    <comment type="block">/** See values for type, below */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
    <comment type="block">/** request id, in two parts */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>requestIdB1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>requestIdB0</name></decl>;</decl_stmt>
    <comment type="block">/** content length, in two parts */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>contentLengthB1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>contentLengthB0</name></decl>;</decl_stmt>
    <comment type="block">/** padding length */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>paddingLength</name></decl>;</decl_stmt>
    <comment type="block">/** 8-bit reserved field */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>reserved</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_fcgi_header</name>;</typedef>

<comment type="block">/*
 * Number of bytes in the header portion of a FastCGI record
 * (i.e., ap_fcgi_header structure).  Future versions of the
 * protocol may increase the size.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_HEADER_LEN</name></cpp:macro>  <cpp:value>8</cpp:value></cpp:define>

<comment type="block">/*
 * Maximum number of bytes in the content portion of a FastCGI record.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_MAX_CONTENT_LEN</name></cpp:macro> <cpp:value>65535</cpp:value></cpp:define>

<comment type="block">/**
 * Possible values for the version field of ap_fcgi_header
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_VERSION_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/**
 * Possible values for the type field of ap_fcgi_header
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_BEGIN_REQUEST</name></cpp:macro>       <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_ABORT_REQUEST</name></cpp:macro>       <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_END_REQUEST</name></cpp:macro>         <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_PARAMS</name></cpp:macro>              <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_STDIN</name></cpp:macro>               <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_STDOUT</name></cpp:macro>              <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_STDERR</name></cpp:macro>              <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_DATA</name></cpp:macro>                <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_GET_VALUES</name></cpp:macro>          <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_GET_VALUES_RESULT</name></cpp:macro>  <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_UNKNOWN_TYPE</name></cpp:macro>       <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_MAXTYPE</name></cpp:macro> <cpp:value>(AP_FCGI_UNKNOWN_TYPE)</cpp:value></cpp:define>

<comment type="block">/**
 * Offsets of the various fields of ap_fcgi_header
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_HDR_VERSION_OFFSET</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_HDR_TYPE_OFFSET</name></cpp:macro>            <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_HDR_REQUEST_ID_B1_OFFSET</name></cpp:macro>   <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_HDR_REQUEST_ID_B0_OFFSET</name></cpp:macro>   <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_HDR_CONTENT_LEN_B1_OFFSET</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_HDR_CONTENT_LEN_B0_OFFSET</name></cpp:macro>  <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_HDR_PADDING_LEN_OFFSET</name></cpp:macro>     <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_HDR_RESERVED_OFFSET</name></cpp:macro>        <cpp:value>7</cpp:value></cpp:define>

<comment type="block">/**
 * @brief This represents the content data of the FastCGI record when
 * the type is AP_FCGI_BEGIN_REQUEST.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/**
     * role, in two parts
     * See values for role, below
     */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>roleB1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>roleB0</name></decl>;</decl_stmt>
    <comment type="block">/**
     * flags
     * See values for flags bits, below
     */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name></decl>;</decl_stmt>
    <comment type="block">/** reserved */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>reserved</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_fcgi_begin_request_body</name>;</typedef>

<comment type="block">/*
 * Values for role component of ap_fcgi_begin_request_body
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_RESPONDER</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_AUTHORIZER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_FILTER</name></cpp:macro>     <cpp:value>3</cpp:value></cpp:define>

<comment type="block">/*
 * Values for flags bits of ap_fcgi_begin_request_body
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_KEEP_CONN</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>  <comment type="block">/* otherwise the application closes */</comment>

<comment type="block">/**
 * Offsets of the various fields of ap_fcgi_begin_request_body
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_BRB_ROLEB1_OFFSET</name></cpp:macro>       <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_BRB_ROLEB0_OFFSET</name></cpp:macro>       <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_BRB_FLAGS_OFFSET</name></cpp:macro>        <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_BRB_RESERVED0_OFFSET</name></cpp:macro>    <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_BRB_RESERVED1_OFFSET</name></cpp:macro>    <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_BRB_RESERVED2_OFFSET</name></cpp:macro>    <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_BRB_RESERVED3_OFFSET</name></cpp:macro>    <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_BRB_RESERVED4_OFFSET</name></cpp:macro>    <cpp:value>7</cpp:value></cpp:define>

<comment type="block">/**
 * Pack ap_fcgi_header
 * @param h The header to read from
 * @param a The array to write to, of size AP_FCGI_HEADER_LEN
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fcgi_header_to_array</name><argument_list>(<argument>ap_fcgi_header *h</argument>,
                                         <argument>unsigned char a[]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Unpack header of FastCGI record into ap_fcgi_header
 * @param h The header to write to
 * @param a The array to read from, of size AP_FCGI_HEADER_LEN
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fcgi_header_from_array</name><argument_list>(<argument>ap_fcgi_header *h</argument>,
                                           <argument>unsigned char a[]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Unpack header of FastCGI record into individual fields
 * @param version The version, on output
 * @param type The type, on output
 * @param request_id The request id, on output
 * @param content_len The content length, on output
 * @param padding_len The amount of padding following the content, on output
 * @param a The array to read from, of size AP_FCGI_HEADER_LEN
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fcgi_header_fields_from_array</name><argument_list>(<argument>unsigned char *version</argument>,
                                                  <argument>unsigned char *type</argument>,
                                                  <argument>apr_uint16_t *request_id</argument>,
                                                  <argument>apr_uint16_t *content_len</argument>,
                                                  <argument>unsigned char *padding_len</argument>,
                                                  <argument>unsigned char a[]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Pack ap_fcgi_begin_request_body
 * @param h The begin-request body to read from
 * @param a The array to write to, of size AP_FCGI_HEADER_LEN
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fcgi_begin_request_body_to_array</name><argument_list>(<argument>ap_fcgi_begin_request_body *h</argument>,
                                                     <argument>unsigned char a[]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Fill in a FastCGI request header with the required field values.
 * @param header The header to fill in
 * @param type The type of record
 * @param request_id The request id
 * @param content_len The amount of content which follows the header
 * @param padding_len The amount of padding which follows the content
 *
 * The header array must be at least AP_FCGI_HEADER_LEN bytes long.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fcgi_fill_in_header</name><argument_list>(<argument>ap_fcgi_header *header</argument>,
                                        <argument>unsigned char type</argument>,
                                        <argument>apr_uint16_t request_id</argument>,
                                        <argument>apr_uint16_t content_len</argument>,
                                        <argument>unsigned char padding_len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Fill in a FastCGI begin request body with the required field values.
 * @param brb The begin-request-body to fill in
 * @param role AP_FCGI_RESPONDER or other roles
 * @param flags 0 or a combination of flags like AP_FCGI_KEEP_CONN
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_fcgi_fill_in_request_body</name><argument_list>(<argument>ap_fcgi_begin_request_body *brb</argument>,
                                              <argument>int role</argument>,
                                              <argument>unsigned char flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Compute the buffer size needed to encode the next portion of
 * the provided environment table.
 * @param env The environment table
 * @param maxlen The maximum buffer size allowable, capped at 
 * AP_FCGI_MAX_CONTENT_LEN.
 * @param starting_elem On input, the next element of the table array
 * to process in this FastCGI record.  On output, the next element to
 * process on the *next* FastCGI record.
 * @return Size of buffer needed to encode the next part, or 0
 * if no more can be encoded.  When 0 is returned: If starting_elem
 * has reached the end of the table array, all has been encoded;
 * otherwise, the next envvar can't be encoded within the specified
 * limit.
 * @note If an envvar can't be encoded within the specified limit,
 * the caller can log a warning and increment starting_elem and try 
 * again or increase the limit or fail, as appropriate for the module.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_size_t</argument>)</argument_list></macro> <macro><name>ap_fcgi_encoded_env_len</name><argument_list>(<argument>apr_table_t *env</argument>,
                                               <argument>apr_size_t maxlen</argument>,
                                               <argument>int *starting_elem</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Encode the next portion of the provided environment table using
 * a buffer previously allocated.
 * @param r The request, for logging
 * @param env The environment table
 * @param buffer A buffer to contain the encoded environment table
 * @param buflen The length of the buffer, previously computed by
 * ap_fcgi_encoded_env_len().
 * @param starting_elem On input, the next element of the table array
 * to process in this FastCGI record.  On output, the next element to
 * process on the *next* FastCGI record.
 * @return APR_SUCCESS if a section could be encoded or APR_ENOSPC
 * otherwise.
 * @note The output starting_elem from ap_fcgi_encoded_env_len
 * shouldn't be used as input to ap_fcgi_encode_env when building the
 * same FastCGI record.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_fcgi_encode_env</name><argument_list>(<argument>request_rec *r</argument>,
                                            <argument>apr_table_t *env</argument>,
                                            <argument>void *buffer</argument>,
                                            <argument>apr_size_t buflen</argument>,
                                            <argument>int *starting_elem</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * String forms for the value of the FCGI_ROLE envvar
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_RESPONDER_STR</name></cpp:macro>   <cpp:value>"RESPONDER"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_AUTHORIZER_STR</name></cpp:macro>  <cpp:value>"AUTHORIZER"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_FILTER_STR</name></cpp:macro>      <cpp:value>"FILTER"</cpp:value></cpp:define>

<comment type="block">/**
 * FastCGI implementations that implement the AUTHORIZER role
 * for Apache httpd and allow the application to participate in
 * any of the Apache httpd AAA phases typically set the variable
 * FCGI_APACHE_ROLE to one of these strings to indicate the
 * specific AAA phase.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_APACHE_ROLE_AUTHENTICATOR_STR</name></cpp:macro>  <cpp:value>"AUTHENTICATOR"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_APACHE_ROLE_AUTHORIZER_STR</name></cpp:macro>     <cpp:value>"AUTHORIZER"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FCGI_APACHE_ROLE_ACCESS_CHECKER_STR</name></cpp:macro> <cpp:value>"ACCESS_CHECKER"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* !APACHE_UTIL_FCGI_H */</comment>
<comment type="block">/** @} */</comment>
</unit>
