<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/ap_regkey.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file ap_regkey.h
 * @brief APR-style Win32 Registry Manipulation
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AP_REGKEY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>      <comment type="block">/* Just for AP_DECLARE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type>struct <name>ap_regkey_t</name></type> <name>ap_regkey_t</name>;</typedef>

<comment type="block">/* Used to recover AP_REGKEY_* constants
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const ap_regkey_t *</argument>)</argument_list></macro> <macro><name>ap_regkey_const</name><argument_list>(<argument>int i</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Win32 Only: Constants for ap_regkey_open()
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_CLASSES_ROOT</name></cpp:macro>         <cpp:value>ap_regkey_const(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_CURRENT_CONFIG</name></cpp:macro>       <cpp:value>ap_regkey_const(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_CURRENT_USER</name></cpp:macro>         <cpp:value>ap_regkey_const(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_LOCAL_MACHINE</name></cpp:macro>        <cpp:value>ap_regkey_const(3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_USERS</name></cpp:macro>                <cpp:value>ap_regkey_const(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_PERFORMANCE_DATA</name></cpp:macro>     <cpp:value>ap_regkey_const(5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_DYN_DATA</name></cpp:macro>             <cpp:value>ap_regkey_const(6)</cpp:value></cpp:define>

<comment type="block">/**
 * Win32 Only: Flags for ap_regkey_value_set()
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REGKEY_EXPAND</name></cpp:macro>               <cpp:value>0x0001</cpp:value></cpp:define>

<comment type="block">/**
 * Win32 Only: Open the specified registry key.
 * @param newkey The opened registry key
 * @param parentkey The open registry key of the parent, or one of
 * &lt;PRE&gt;
 *           AP_REGKEY_CLASSES_ROOT
 *           AP_REGKEY_CURRENT_CONFIG
 *           AP_REGKEY_CURRENT_USER
 *           AP_REGKEY_LOCAL_MACHINE
 *           AP_REGKEY_USERS
 *           AP_REGKEY_PERFORMANCE_DATA
 *           AP_REGKEY_DYN_DATA
 * &lt;/PRE&gt;
 * @param keyname The path of the key relative to the parent key
 * @param flags Or'ed value of:
 * &lt;PRE&gt;
 *           APR_READ             open key for reading
 *           APR_WRITE            open key for writing
 *           APR_CREATE           create the key if it doesn't exist
 *           APR_EXCL             return error if APR_CREATE and key exists
 * &lt;/PRE&gt;
 * @param pool The pool in which newkey is allocated
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_open</name><argument_list>(<argument>ap_regkey_t **newkey</argument>,
                                        <argument>const ap_regkey_t *parentkey</argument>,
                                        <argument>const char *keyname</argument>,
                                        <argument>apr_int32_t flags</argument>,
                                        <argument>apr_pool_t *pool</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Win32 Only: Close the registry key opened or created by ap_regkey_open().
 * @param key The registry key to close
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regkey_close</name><argument_list>(<argument><expr><name>ap_regkey_t</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * Win32 Only: Remove the given registry key.
 * @param parent The open registry key of the parent, or one of
 * &lt;PRE&gt;
 *           AP_REGKEY_CLASSES_ROOT
 *           AP_REGKEY_CURRENT_CONFIG
 *           AP_REGKEY_CURRENT_USER
 *           AP_REGKEY_LOCAL_MACHINE
 *           AP_REGKEY_USERS
 *           AP_REGKEY_PERFORMANCE_DATA
 *           AP_REGKEY_DYN_DATA
 * &lt;/PRE&gt;
 * @param keyname The path of the key relative to the parent key
 * @param pool The pool used for temp allocations
 * @remark ap_regkey_remove() is not recursive, although it removes
 * all values within the given keyname, it will not remove a key
 * containing subkeys.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regkey_remove</name><argument_list>(<argument><expr>const <name>ap_regkey_t</name> *<name>parent</name></expr></argument>,
                                          <argument><expr>const <name>char</name> *<name>keyname</name></expr></argument>,
                                          <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * Win32 Only: Retrieve a registry value string from an open key.
 * @param result The string value retrieved
 * @param key The registry key to retrieve the value from
 * @param valuename The named value to retrieve (pass "" for the default)
 * @param pool The pool used to store the result
 * @remark There is no toggle to prevent environment variable expansion
 * if the registry value is set with AP_REG_EXPAND (REG_EXPAND_SZ), such
 * expansions are always performed.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regkey_value_get</name><argument_list>(<argument><expr><name>char</name> **<name>result</name></expr></argument>,
                                             <argument><expr><name>ap_regkey_t</name> *<name>key</name></expr></argument>,
                                             <argument><expr>const <name>char</name> *<name>valuename</name></expr></argument>,
                                             <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * Win32 Only: Store a registry value string into an open key.
 * @param key The registry key to store the value into
 * @param valuename The named value to store (pass "" for the default)
 * @param value The string to store for the named value
 * @param flags The option AP_REGKEY_EXPAND or 0, where AP_REGKEY_EXPAND
 * values will find all %foo% variables expanded from the environment.
 * @param pool The pool used for temp allocations
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_set</name><argument_list>(<argument>ap_regkey_t *key</argument>,
                                             <argument>const char *valuename</argument>,
                                             <argument>const char *value</argument>,
                                             <argument>apr_int32_t flags</argument>,
                                             <argument>apr_pool_t *pool</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Win32 Only: Retrieve a raw byte value from an open key.
 * @param result The raw bytes value retrieved
 * @param resultsize Pointer to a variable to store the number raw bytes retrieved
 * @param resulttype Pointer to a variable to store the registry type of the value retrieved
 * @param key The registry key to retrieve the value from
 * @param valuename The named value to retrieve (pass "" for the default)
 * @param pool The pool used to store the result
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regkey_value_raw_get</name><argument_list>(<argument><expr><name>void</name> **<name>result</name></expr></argument>,
                                                 <argument><expr><name>apr_size_t</name> *<name>resultsize</name></expr></argument>,
                                                 <argument><expr><name>apr_int32_t</name> *<name>resulttype</name></expr></argument>,
                                                 <argument><expr><name>ap_regkey_t</name> *<name>key</name></expr></argument>,
                                                 <argument><expr>const <name>char</name> *<name>valuename</name></expr></argument>,
                                                 <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * Win32 Only: Store a raw bytes value into an open key.
 * @param key The registry key to store the value into
 * @param valuename The named value to store (pass "" for the default)
 * @param value The bytes to store for the named value
 * @param valuesize The number of bytes for value
 * @param valuetype The
 * values will find all %foo% variables expanded from the environment.
 * @param pool The pool used for temp allocations
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_raw_set</name><argument_list>(<argument>ap_regkey_t *key</argument>,
                                                 <argument>const char *valuename</argument>,
                                                 <argument>const void *value</argument>,
                                                 <argument>apr_size_t  valuesize</argument>,
                                                 <argument>apr_int32_t valuetype</argument>,
                                                 <argument>apr_pool_t *pool</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Win32 Only: Retrieve a registry value string from an open key.
 * @param result The string elements retrieved from a REG_MULTI_SZ string array
 * @param key The registry key to retrieve the value from
 * @param valuename The named value to retrieve (pass "" for the default)
 * @param pool The pool used to store the result
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regkey_value_array_get</name><argument_list>(<argument><expr><name>apr_array_header_t</name> **<name>result</name></expr></argument>,
                                                   <argument><expr><name>ap_regkey_t</name> *<name>key</name></expr></argument>,
                                                   <argument><expr>const <name>char</name> *<name>valuename</name></expr></argument>,
                                                   <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * Win32 Only: Store a registry value string array into an open key.
 * @param key The registry key to store the value into
 * @param valuename The named value to store (pass "" for the default)
 * @param nelts The string elements to store in a REG_MULTI_SZ string array
 * @param elts The number of elements in the elts string array
 * @param pool The pool used for temp allocations
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_array_set</name><argument_list>(<argument>ap_regkey_t *key</argument>,
                                                   <argument>const char *valuename</argument>,
                                                   <argument>int nelts</argument>,
                                                   <argument>const char * const * elts</argument>,
                                                   <argument>apr_pool_t *pool</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Win32 Only: Remove a registry value from an open key.
 * @param key The registry key to remove the value from
 * @param valuename The named value to remove (pass "" for the default)
 * @param pool The pool used for temp allocations
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_regkey_value_remove</name><argument_list>(<argument><expr>const <name>ap_regkey_t</name> *<name>key</name></expr></argument>,
                                                <argument><expr>const <name>char</name> *<name>valuename</name></expr></argument>,
                                                <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* def WIN32 || def DOXYGEN */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AP_REGKEY_H */</comment>
</unit>
