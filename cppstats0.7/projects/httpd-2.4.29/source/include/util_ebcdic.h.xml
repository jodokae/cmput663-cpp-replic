<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/util_ebcdic.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  util_ebcdic.h
 * @brief Utilities for EBCDIC conversion
 *
 * @defgroup APACHE_CORE_EBCDIC Utilities for EBCDIC conversion
 * @ingroup  APACHE_CORE
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>APACHE_UTIL_EBCDIC_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_UTIL_EBCDIC_H</name></cpp:macro></cpp:define>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_xlate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_charset.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name> || <call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/**
 * Setup all of the global translation handlers.
 * @param   pool    The pool to allocate out of.
 * @note On non-EBCDIC system, this function does &lt;b&gt;not&lt;/b&gt; exist.
 * So, its use should be guarded by \#if APR_CHARSET_EBCDIC.
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ap_init_ebcdic</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Convert protocol data from the implementation character
 * set to ASCII.
 * @param   buffer  Buffer to translate.
 * @param   len     Number of bytes to translate.
 * @note On non-EBCDIC system, this function is replaced by an 
 * empty macro.
 */</comment>
<function_decl><type><name>void</name></type> <name>ap_xlate_proto_to_ascii</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Convert protocol data to the implementation character
 * set from ASCII.
 * @param   buffer  Buffer to translate.
 * @param   len     Number of bytes to translate.
 * @note On non-EBCDIC system, this function is replaced by an 
 * empty macro.
 */</comment>
<function_decl><type><name>void</name></type> <name>ap_xlate_proto_from_ascii</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Convert protocol data from the implementation character
 * set to ASCII, then send it.
 * @param   r       The current request.
 * @param   ...     The strings to write, followed by a NULL pointer.
 * @note On non-EBCDIC system, this function is replaced by a call to
 * #ap_rvputs.
 */</comment>
<function_decl><type><name>int</name></type> <name>ap_rvputs_proto_in_ascii</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>   <comment type="block">/* APR_CHARSET_EBCDIC */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_xlate_proto_to_ascii</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>)</parameter_list></cpp:macro></cpp:define>          <comment type="block">/* NOOP */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_xlate_proto_from_ascii</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>)</parameter_list></cpp:macro></cpp:define>        <comment type="block">/* NOOP */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_rvputs_proto_in_ascii</name></cpp:macro>  <cpp:value>ap_rvputs</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* APR_CHARSET_EBCDIC */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* !APACHE_UTIL_EBCDIC_H */</comment>
<comment type="block">/** @} */</comment>
</unit>
