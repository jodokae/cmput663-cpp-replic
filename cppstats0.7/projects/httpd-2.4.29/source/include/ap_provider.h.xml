<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/ap_provider.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  ap_provider.h
 * @brief Apache Provider API
 *
 * @defgroup APACHE_CORE_PROVIDER Provider API
 * @ingroup  APACHE_CORE
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AP_PROVIDER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_PROVIDER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_list_provider_names_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_group</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_version</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_list_provider_groups_t</name>;</typedef>

<comment type="block">/**
 * This function is used to register a provider with the global
 * provider pool.
 * @param pool The pool to create any storage from
 * @param provider_group The group to store the provider in
 * @param provider_name The name for this provider
 * @param provider_version The version for this provider
 * @param provider Opaque structure for this provider
 * @return APR_SUCCESS if all went well
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
                                              <argument><expr>const <name>char</name> *<name>provider_group</name></expr></argument>,
                                              <argument><expr>const <name>char</name> *<name>provider_name</name></expr></argument>,
                                              <argument><expr>const <name>char</name> *<name>provider_version</name></expr></argument>,
                                              <argument><expr>const <name>void</name> *<name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * This function is used to retrieve a provider from the global
 * provider pool.
 * @param provider_group The group to look for this provider in
 * @param provider_name The name for the provider
 * @param provider_version The version for the provider
 * @return provider pointer to provider if found, NULL otherwise
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_lookup_provider</name><argument_list>(<argument><expr>const <name>char</name> *<name>provider_group</name></expr></argument>,
                                      <argument><expr>const <name>char</name> *<name>provider_name</name></expr></argument>,
                                      <argument><expr>const <name>char</name> *<name>provider_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * This function is used to retrieve a list (array) of provider
 * names from the specified group with the specified version.
 * @param pool The pool to create any storage from
 * @param provider_group The group to look for this provider in
 * @param provider_version The version for the provider
 * @return pointer to array of ap_list_provider_names_t of provider names (could be empty)
 */</comment>

<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_array_header_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_list_provider_names</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
                                              <argument><expr>const <name>char</name> *<name>provider_group</name></expr></argument>,
                                              <argument><expr>const <name>char</name> *<name>provider_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * This function is used to retrieve a list (array) of provider groups and versions
 * @param pool The pool to create any storage from
 * @return pointer to array of ap_list_provider_groups_t of provider groups
 *         and versions (could be empty)
 */</comment>

<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_array_header_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_list_provider_groups</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/** @} */</comment>
</unit>
