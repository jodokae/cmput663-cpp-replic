<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/util_cfgtree.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  util_cfgtree.h
 * @brief Config Tree Package
 *
 * @defgroup APACHE_CORE_CONFIG_TREE Config Tree Package
 * @ingroup  APACHE_CORE_CONFIG
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AP_CONFTREE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CONFTREE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type>struct <name>ap_directive_t</name></type> <name>ap_directive_t</name>;</typedef>

<comment type="block">/**
 * @brief Structure used to build the config tree.
 *
 * The config tree only stores
 * the directives that will be active in the running server.  Directives
 * that contain other directions, such as &amp;lt;Directory ...&amp;gt; cause a sub-level
 * to be created, where the included directives are stored.  The closing
 * directive (&amp;lt;/Directory&amp;gt;) is not stored in the tree.
 */</comment>
<struct>struct <name>ap_directive_t</name> <block>{
    <comment type="block">/** The current directive */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>directive</name></decl>;</decl_stmt>
    <comment type="block">/** The arguments for the current directive, stored as a space
     *  separated list */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl>;</decl_stmt>
    <comment type="block">/** The next directive node in the tree */</comment>
    <decl_stmt><decl><type>struct <name>ap_directive_t</name> *</type><name>next</name></decl>;</decl_stmt>
    <comment type="block">/** The first child node of this directive */</comment>
    <decl_stmt><decl><type>struct <name>ap_directive_t</name> *</type><name>first_child</name></decl>;</decl_stmt>
    <comment type="block">/** The parent node of this directive */</comment>
    <decl_stmt><decl><type>struct <name>ap_directive_t</name> *</type><name>parent</name></decl>;</decl_stmt>

    <comment type="block">/** directive's module can store add'l data here */</comment>
    <decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>

    <comment type="block">/* ### these may go away in the future, but are needed for now */</comment>
    <comment type="block">/** The name of the file this directive was found in */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
    <comment type="block">/** The line number the directive was on */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>line_num</name></decl>;</decl_stmt>

    <comment type="block">/** A short-cut towards the last directive node in the tree.
     *  The value may not always be up-to-date but it always points to
     *  somewhere in the tree, nearer to the tail.
     *  This value is only set in the first node
     */</comment>
    <decl_stmt><decl><type>struct <name>ap_directive_t</name> *</type><name>last</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/**
 * The root of the configuration tree
 */</comment>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>ap_directive_t</name> *</type><name>ap_conftree</name></decl>;</decl_stmt>

<comment type="block">/**
 * Add a node to the configuration tree.
 * @param parent The current parent node.  If the added node is a first_child,
                 then this is changed to the current node
 * @param current The current node
 * @param toadd The node to add to the tree
 * @param child Is the node to add a child node
 * @return the added node
 */</comment>
<function_decl><type><name>ap_directive_t</name> *</type><name>ap_add_node</name><parameter_list>(<param><decl><type><name>ap_directive_t</name> **</type><name>parent</name></decl></param>, <param><decl><type><name>ap_directive_t</name> *</type><name>current</name></decl></param>,
                            <param><decl><type><name>ap_directive_t</name> *</type><name>toadd</name></decl></param>, <param><decl><type><name>int</name></type> <name>child</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/** @} */</comment>
</unit>
