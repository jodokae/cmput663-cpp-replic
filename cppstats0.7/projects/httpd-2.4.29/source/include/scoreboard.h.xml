<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/scoreboard.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  scoreboard.h
 * @brief Apache scoreboard library
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>APACHE_SCOREBOARD_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_SCOREBOARD_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_TIME_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/times.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_shm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>

<comment type="block">/* Scoreboard file, if there is one */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DEFAULT_SCOREBOARD</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SCOREBOARD</name></cpp:macro> <cpp:value>"logs/apache_runtime_status"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Scoreboard info on a process is, for now, kept very brief ---
 * just status value and pid (the latter so that the caretaker process
 * can properly update the scoreboard when a process dies).  We may want
 * to eventually add a separate set of long_score structures which would
 * give, for each process, the number of requests serviced, and info on
 * the current, or most recent, request.
 *
 * Status values:
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_DEAD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_STARTING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>       <comment type="block">/* Server Starting up */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_READY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>          <comment type="block">/* Waiting for connection (or accept() lock) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_BUSY_READ</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>      <comment type="block">/* Reading a client request */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_BUSY_WRITE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>     <comment type="block">/* Processing a client request */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_BUSY_KEEPALIVE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> <comment type="block">/* Waiting for more requests via keepalive */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_BUSY_LOG</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>       <comment type="block">/* Logging the request */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_BUSY_DNS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>       <comment type="block">/* Looking up a hostname */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_CLOSING</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>        <comment type="block">/* Closing the connection */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_GRACEFUL</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>       <comment type="block">/* server is gracefully finishing request */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_IDLE_KILL</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>     <comment type="block">/* Server is cleaning up idle children. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_NUM_STATUS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>    <comment type="block">/* number of status settings */</comment>

<comment type="block">/* Type used for generation indicies.  Startup and every restart cause a
 * new generation of children to be spawned.  Children within the same
 * generation share the same configuration information -- pointers to stuff
 * created at config time in the parent are valid across children.  However,
 * this can't work effectively with non-forked architectures.  So while the
 * arrays in the scoreboard never change between the parent and forked
 * children, so they do not require shm storage, the contents of the shm
 * may contain no pointers.
 */</comment>
<typedef>typedef <type><name>int</name></type> <name>ap_generation_t</name>;</typedef>

<comment type="block">/* Is the scoreboard shared between processes or not?
 * Set by the MPM when the scoreboard is created.
 */</comment>
<typedef>typedef <type><enum>enum <block>{
    <decl><name>SB_NOT_SHARED</name> <init>= <expr>1</expr></init></decl>,
    <decl><name>SB_SHARED</name> <init>= <expr>2</expr></init></decl>
}</block></enum></type> <name>ap_scoreboard_e</name>;</typedef>

<comment type="block">/* stuff which is worker specific */</comment>
<typedef>typedef <type>struct <name>worker_score</name></type> <name>worker_score</name>;</typedef>
<struct>struct <name>worker_score</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
    <decl_stmt><decl><type><name>apr_os_thread_t</name></type> <name>tid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>thread_num</name></decl>;</decl_stmt>
    <comment type="block">/* With some MPMs (e.g., worker), a worker_score can represent
     * a thread in a terminating process which is no longer
     * represented by the corresponding process_score.  These MPMs
     * should set pid and generation fields in the worker_score.
     */</comment>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_generation_t</name></type> <name>generation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>conn_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type>     <name>conn_bytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>access_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type>     <name>bytes_served</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>my_access_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type>     <name>my_bytes_served</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>start_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>stop_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>last_used</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TIMES</name></cpp:ifdef>
    <decl_stmt><decl><type>struct <name>tms</name></type> <name>times</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>char</name></type> <name><name>client</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>            <comment type="block">/* Keep 'em small... */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>request</name><index>[<expr>64</expr>]</index></name></decl>;</decl_stmt>           <comment type="block">/* We just want an idea... */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>vhost</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>             <comment type="block">/* What virtual host is being accessed? */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>protocol</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>          <comment type="block">/* What protocol is used on the connection? */</comment>
}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>int</name></type>             <name>server_limit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>thread_limit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_generation_t</name></type> <name>running_generation</name></decl>;</decl_stmt> <comment type="block">/* the generation of children which
                                         * should still be serving requests.
                                         */</comment>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>restart_time</name></decl>;</decl_stmt>
}</block></struct></type> <name>global_score</name>;</typedef>

<comment type="block">/* stuff which the parent generally writes and the children rarely read */</comment>
<typedef>typedef <type>struct <name>process_score</name></type> <name>process_score</name>;</typedef>
<struct>struct <name>process_score</name> <block>{
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_generation_t</name></type> <name>generation</name></decl>;</decl_stmt> <comment type="block">/* generation of this child */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name>quiescing</name></decl>;</decl_stmt>         <comment type="block">/* the process whose pid is stored above is
                             * going down gracefully
                             */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name>not_accepting</name></decl>;</decl_stmt>     <comment type="block">/* the process is busy and is not accepting more
                             * connections (for async MPMs)
                             */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>connections</name></decl>;</decl_stmt>       <comment type="block">/* total connections (for async MPMs) */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>write_completion</name></decl>;</decl_stmt>  <comment type="block">/* async connections doing write completion */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>lingering_close</name></decl>;</decl_stmt>   <comment type="block">/* async connections in lingering close */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>keep_alive</name></decl>;</decl_stmt>        <comment type="block">/* async connections in keep alive */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>suspended</name></decl>;</decl_stmt>         <comment type="block">/* connections suspended by some module */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>bucket</name></decl>;</decl_stmt>             <comment type="block">/* Listener bucket used by this child */</comment>
}</block>;</struct>

<comment type="block">/* Scoreboard is now in 'local' memory, since it isn't updated once created,
 * even in forked architectures.  Child created-processes (non-fork) will
 * set up these indicies into the (possibly relocated) shmem records.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>global_score</name> *</type><name>global</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>process_score</name> *</type><name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>worker_score</name> **</type><name>servers</name></decl>;</decl_stmt>
}</block></struct></type> <name>scoreboard</name>;</typedef>

<typedef>typedef <type>struct <name>ap_sb_handle_t</name></type> <name>ap_sb_handle_t</name>;</typedef>

<comment type="block">/*
 * Creation and deletion (internal)
 */</comment>
<function_decl><type><name>int</name></type> <name>ap_create_scoreboard</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>ap_scoreboard_e</name></type> <name>t</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>ap_cleanup_scoreboard</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>d</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * APIs for MPMs and other modules
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_exists_scoreboard_image</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_increment_counts</name><argument_list>(<argument><expr><name>ap_sb_handle_t</name> *<name>sbh</name></expr></argument>, <argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_reopen_scoreboard</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>apr_shm_t **shm</argument>, <argument>int detached</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_init_scoreboard</name><argument_list>(<argument><expr><name>void</name> *<name>shared_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_calc_scoreboard_size</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_create_sb_handle</name><argument_list>(<argument>ap_sb_handle_t **new_sbh</argument>, <argument>apr_pool_t *p</argument>,
                                     <argument>int child_num</argument>, <argument>int thread_num</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_find_child_by_pid</name><argument_list>(<argument><expr><name>apr_proc_t</name> *<name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_update_child_status</name><argument_list>(<argument>ap_sb_handle_t *sbh</argument>, <argument>int status</argument>, <argument>request_rec *r</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_update_child_status_from_indexes</name><argument_list>(<argument>int child_num</argument>, <argument>int thread_num</argument>,
                                                    <argument>int status</argument>, <argument>request_rec *r</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_update_child_status_from_conn</name><argument_list>(<argument>ap_sb_handle_t *sbh</argument>, <argument>int status</argument>, <argument>conn_rec *c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_update_child_status_from_server</name><argument_list>(<argument>ap_sb_handle_t *sbh</argument>, <argument>int status</argument>, 
                                                   <argument>conn_rec *c</argument>, <argument>server_rec *s</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_update_child_status_descr</name><argument_list>(<argument>ap_sb_handle_t *sbh</argument>, <argument>int status</argument>, <argument>const char *descr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_time_process_request</name><argument_list>(<argument>ap_sb_handle_t *sbh</argument>, <argument>int status</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>AP_DECLARE</name><argument_list>(<argument>worker_score *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_scoreboard_worker</name><argument_list>(<argument><expr><name>ap_sb_handle_t</name> *<name>sbh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/** Return a pointer to the worker_score for a given child, thread pair.
 * @param child_num The child number.
 * @param thread_num The thread number.
 * @return A pointer to the worker_score structure.
 * @deprecated This function is deprecated, use ap_copy_scoreboard_worker instead. */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>worker_score *</argument>)</argument_list></macro> <macro><name>ap_get_scoreboard_worker_from_indexes</name><argument_list>(<argument>int child_num</argument>,
                                                                <argument>int thread_num</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/** Copy the contents of a worker scoreboard entry.  The contents of
 * the worker_score structure are copied verbatim into the dest
 * structure.
 * @param dest Output parameter.
 * @param child_num The child number.
 * @param thread_num The thread number.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_copy_scoreboard_worker</name><argument_list>(<argument>worker_score *dest</argument>,
                                           <argument>int child_num</argument>, <argument>int thread_num</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>AP_DECLARE</name><argument_list>(<argument>process_score *</argument>)</argument_list></macro> <macro><name>ap_get_scoreboard_process</name><argument_list>(<argument>int x</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>global_score *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_scoreboard_global</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>scoreboard</name> *</type><name>ap_scoreboard_image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ap_scoreboard_fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_extended_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>int</name></type> <name>ap_mod_status_reqtail</name></decl>;</decl_stmt>

<comment type="block">/*
 * Command handlers [internal]
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ap_set_scoreboard</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ap_set_extended_status</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ap_set_reqtail</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Hooks */</comment>
<comment type="block">/**
  * Hook for post scoreboard creation, pre mpm.
  * @param p       Apache pool to allocate from.
  * @param sb_type
  * @ingroup hooks
  * @return OK or DECLINE on success; anything else is a error
  */</comment>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>, <argument>pre_mpm</argument>, <argument>(apr_pool_t *p, ap_scoreboard_e sb_type)</argument>)</argument_list></macro>

<comment type="block">/* for time_process_request() in http_main.c */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_PREQUEST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STOP_PREQUEST</name></cpp:macro>  <cpp:value>2</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* !APACHE_SCOREBOARD_H */</comment>
</unit>
