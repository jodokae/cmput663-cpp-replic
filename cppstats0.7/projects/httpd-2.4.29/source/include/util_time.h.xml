<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/util_time.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  util_time.h
 * @brief Apache date-time handling functions
 *
 * @defgroup APACHE_CORE_TIME Date-time handling functions
 * @ingroup  APACHE_CORE
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>APACHE_UTIL_TIME_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_UTIL_TIME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Maximum delta from the current time, in seconds, for a past time
 * to qualify as "recent" for use in the ap_explode_recent_*() functions:
 * (Must be a power of two minus one!)
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_TIME_RECENT_THRESHOLD</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<comment type="block">/* Options for ap_recent_ctime_ex */</comment>
<comment type="block">/* No extension */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CTIME_OPTION_NONE</name></cpp:macro>    <cpp:value>0x0</cpp:value></cpp:define>
<comment type="block">/* Add sub second timestamps with micro second resolution */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CTIME_OPTION_USEC</name></cpp:macro>    <cpp:value>0x1</cpp:value></cpp:define>
<comment type="block">/* Use more compact ISO 8601 format */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CTIME_OPTION_COMPACT</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>


<comment type="block">/**
 * convert a recent time to its human readable components in local timezone
 * @param tm the exploded time
 * @param t the time to explode: MUST be within the last
 *          AP_TIME_RECENT_THRESHOLD seconds
 * @note This is a faster alternative to apr_time_exp_lt that uses
 *       a cache of pre-exploded time structures.  It is useful for things
 *       that need to explode the current time multiple times per second,
 *       like loggers.
 * @return APR_SUCCESS iff successful
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_explode_recent_localtime</name><argument_list>(<argument>apr_time_exp_t *tm</argument>,
                                                     <argument>apr_time_t t</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * convert a recent time to its human readable components in GMT timezone
 * @param tm the exploded time
 * @param t the time to explode: MUST be within the last
 *          AP_TIME_RECENT_THRESHOLD seconds
 * @note This is a faster alternative to apr_time_exp_gmt that uses
 *       a cache of pre-exploded time structures.  It is useful for things
 *       that need to explode the current time multiple times per second,
 *       like loggers.
 * @return APR_SUCCESS iff successful
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_explode_recent_gmt</name><argument_list>(<argument>apr_time_exp_t *tm</argument>,
                                               <argument>apr_time_t t</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<comment type="block">/**
 * format a recent timestamp in the ctime() format.
 * @param date_str String to write to.
 * @param t the time to convert
 * @note Consider using ap_recent_ctime_ex instead.
 * @return APR_SUCCESS iff successful
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_recent_ctime</name><argument_list>(<argument>char *date_str</argument>, <argument>apr_time_t t</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<comment type="block">/**
 * format a recent timestamp in an extended ctime() format.
 * @param date_str String to write to.
 * @param t the time to convert
 * @param option Additional formatting options (AP_CTIME_OPTION_*).
 * @param len Pointer to an int containing the length of the provided buffer.
 *        On successful return it contains the number of bytes written to the
 *        buffer.
 * @return APR_SUCCESS iff successful, APR_ENOMEM if buffer was to short.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_recent_ctime_ex</name><argument_list>(<argument>char *date_str</argument>, <argument>apr_time_t t</argument>,
                                            <argument>int option</argument>, <argument>int *len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<comment type="block">/**
 * format a recent timestamp in the RFC822 format
 * @param date_str String to write to (must have length &gt;= APR_RFC822_DATE_LEN)
 * @param t the time to convert
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_recent_rfc822_date</name><argument_list>(<argument>char *date_str</argument>, <argument>apr_time_t t</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* !APACHE_UTIL_TIME_H */</comment>
<comment type="block">/** @} */</comment>
</unit>
