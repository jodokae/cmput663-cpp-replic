<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/ap_expr.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file ap_expr.h
 * @brief Expression parser
 *
 * @defgroup AP_EXPR Expression parser
 * @ingroup  APACHE_CORE
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AP_EXPR_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_regex.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/** A node in the expression parse tree */</comment>
<typedef>typedef <type>struct <name>ap_expr_node</name></type> <name>ap_expr_t</name>;</typedef>

<comment type="block">/** Struct describing a parsed expression */</comment>
<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/** The root of the actual expression parse tree */</comment>
    <decl_stmt><decl><type><name>ap_expr_t</name> *</type><name>root_node</name></decl>;</decl_stmt>
    <comment type="block">/** The filename where the expression has been defined (for logging).
     *  May be NULL
     */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
    <comment type="block">/** The line number where the expression has been defined (for logging). */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>line_number</name></decl>;</decl_stmt>
    <comment type="block">/** Flags relevant for the expression, see AP_EXPR_FLAG_* */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
    <comment type="block">/** The module that is used for loglevel configuration */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>module_index</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_expr_info_t</name>;</typedef>

<comment type="block">/** Use ssl_expr compatibility mode (changes the meaning of the comparison
 * operators)
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FLAG_SSL_EXPR_COMPAT</name></cpp:macro>       <cpp:value>1</cpp:value></cpp:define>
<comment type="block">/** Don't add siginificant request headers to the Vary response header */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FLAG_DONT_VARY</name></cpp:macro>             <cpp:value>2</cpp:value></cpp:define>
<comment type="block">/** Don't allow functions/vars that bypass the current request's access
 *  restrictions or would otherwise leak confidential information.
 *  Used by e.g. mod_include.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FLAG_RESTRICTED</name></cpp:macro>            <cpp:value>4</cpp:value></cpp:define>
<comment type="block">/** Expression evaluates to a string, not to a bool */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FLAG_STRING_RESULT</name></cpp:macro>         <cpp:value>8</cpp:value></cpp:define>


<comment type="block">/**
 * Evaluate a parse tree, simple interface
 * @param r The current request
 * @param expr The expression to be evaluated
 * @param err Where an error message should be stored
 * @return &gt; 0 if expression evaluates to true, == 0 if false, &lt; 0 on error
 * @note err will be set to NULL on success, or to an error message on error
 * @note request headers used during evaluation will be added to the Vary:
 *       response header, unless ::AP_EXPR_FLAG_DONT_VARY is set.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_expr_exec</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr>const <name>ap_expr_info_t</name> *<name>expr</name></expr></argument>,
                             <argument><expr>const <name>char</name> **<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * Evaluate a parse tree, with access to regexp backreference
 * @param r The current request
 * @param expr The expression to be evaluated
 * @param nmatch size of the regex match vector pmatch
 * @param pmatch information about regex matches
 * @param source the string that pmatch applies to
 * @param err Where an error message should be stored
 * @return &gt; 0 if expression evaluates to true, == 0 if false, &lt; 0 on error
 * @note err will be set to NULL on success, or to an error message on error
 * @note nmatch/pmatch/source can be used both to make previous matches
 *       available to ap_expr_exec_re and to use ap_expr_exec_re's matches
 *       later on.
 * @note request headers used during evaluation will be added to the Vary:
 *       response header, unless ::AP_EXPR_FLAG_DONT_VARY is set.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_expr_exec_re</name><argument_list>(<argument>request_rec *r</argument>, <argument>const ap_expr_info_t *expr</argument>,
                                <argument>apr_size_t nmatch</argument>, <argument>ap_regmatch_t *pmatch</argument>,
                                <argument>const char **source</argument>, <argument>const char **err</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/** Context used during evaluation of a parse tree, created by ap_expr_exec */</comment>
<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/** the current request */</comment>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
    <comment type="block">/** the current connection */</comment>
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
    <comment type="block">/** the current virtual host */</comment>
    <decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
    <comment type="block">/** the pool to use */</comment>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
    <comment type="block">/** where to store the error string */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>err</name></decl>;</decl_stmt>
    <comment type="block">/** ap_expr_info_t for the expression */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ap_expr_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
    <comment type="block">/** regex match information for back references */</comment>
    <decl_stmt><decl><type><name>ap_regmatch_t</name> *</type><name>re_pmatch</name></decl>;</decl_stmt>
    <comment type="block">/** size of the vector pointed to by re_pmatch */</comment>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>re_nmatch</name></decl>;</decl_stmt>
    <comment type="block">/** the string corresponding to the re_pmatch */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>re_source</name></decl>;</decl_stmt>
    <comment type="block">/** A string where the comma separated names of headers are stored
     * to be later added to the Vary: header. If NULL, the caller is not
     * interested in this information.
     */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vary_this</name></decl>;</decl_stmt>
    <comment type="block">/** where to store the result string */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>result_string</name></decl>;</decl_stmt>
    <comment type="block">/** Arbitrary context data provided by the caller for custom functions */</comment>
    <decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
    <comment type="block">/** The current recursion level */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>reclvl</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_expr_eval_ctx_t</name>;</typedef>

<comment type="block">/**
 * Evaluate a parse tree, full featured version
 * @param ctx The evaluation context with all data filled in
 * @return &gt; 0 if expression evaluates to true, == 0 if false, &lt; 0 on error
 * @note *ctx-&gt;err will be set to NULL on success, or to an error message on
 *       error
 * @note request headers used during evaluation will be added to the Vary:
 *       response header if ctx-&gt;vary_this is set.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_expr_exec_ctx</name><argument_list>(<argument><expr><name>ap_expr_eval_ctx_t</name> *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * Evaluate a parse tree of a string valued expression
 * @param r The current request
 * @param expr The expression to be evaluated
 * @param err Where an error message should be stored
 * @return The result string, NULL on error
 * @note err will be set to NULL on success, or to an error message on error
 * @note request headers used during evaluation will be added to the Vary:
 *       response header, unless ::AP_EXPR_FLAG_DONT_VARY is set.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
                                          <argument><expr>const <name>ap_expr_info_t</name> *<name>expr</name></expr></argument>,
                                          <argument><expr>const <name>char</name> **<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * Evaluate a parse tree of a string valued expression
 * @param r The current request
 * @param expr The expression to be evaluated
 * @param nmatch size of the regex match vector pmatch
 * @param pmatch information about regex matches
 * @param source the string that pmatch applies to
 * @param err Where an error message should be stored
 * @return The result string, NULL on error
 * @note err will be set to NULL on success, or to an error message on error
 * @note nmatch/pmatch/source can be used both to make previous matches
 *       available to ap_expr_exec_re and to use ap_expr_exec_re's matches
 *       later on.
 * @note request headers used during evaluation will be added to the Vary:
 *       response header, unless ::AP_EXPR_FLAG_DONT_VARY is set.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_expr_str_exec_re</name><argument_list>(<argument>request_rec *r</argument>,
                                             <argument>const ap_expr_info_t *expr</argument>,
                                             <argument>apr_size_t nmatch</argument>,
                                             <argument>ap_regmatch_t *pmatch</argument>,
                                             <argument>const char **source</argument>,
                                             <argument>const char **err</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<comment type="block">/**
 * The parser can be extended with variable lookup, functions, and
 * and operators.
 *
 * During parsing, the parser calls the lookup function to resolve a
 * name into a function pointer and an opaque context for the function.
 * If the argument to a function or operator is constant, the lookup function
 * may also parse that argument and store the parsed data in the context.
 *
 * The default lookup function is the hook ::ap_expr_lookup_default which just
 * calls ap_run_expr_lookup. Modules can use it to make functions and
 * variables generally available.
 *
 * An ap_expr consumer can also provide its own custom lookup function to
 * modify the set of variables and functions that are available. The custom
 * lookup function can in turn call 'ap_run_expr_lookup'.
 */</comment>

<comment type="block">/** Unary operator, takes one string argument and returns a bool value.
 * The name must have the form '-z' (one letter only).
 * @param ctx The evaluation context
 * @param data An opaque context provided by the lookup hook function
 * @param arg The (right) operand
 * @return 0 or 1
 */</comment>
<typedef>typedef <function_decl><type><name>int</name></type> <name>ap_expr_op_unary_t</name><parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** Binary operator, takes two string arguments and returns a bool value.
 * The name must have the form '-cmp' (at least two letters).
 * @param ctx The evaluation context
 * @param data An opaque context provided by the lookup hook function
 * @param arg1 The left operand
 * @param arg2 The right operand
 * @return 0 or 1
 */</comment>
<typedef>typedef <function_decl><type><name>int</name></type> <name>ap_expr_op_binary_t</name><parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** String valued function, takes a string argument and returns a string
 * @param ctx The evaluation context
 * @param data An opaque context provided by the lookup hook function
 * @param arg The argument
 * @return The functions result string, may be NULL for 'empty string'
 */</comment>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> *</type>(<name>ap_expr_string_func_t</name>)<parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** List valued function, takes a string argument and returns a list of strings
 * Can currently only be called following the builtin '-in' operator.
 * @param ctx The evaluation context
 * @param data An opaque context provided by the lookup hook function
 * @param arg The argument
 * @return The functions result list of strings, may be NULL for 'empty array'
 */</comment>
<typedef>typedef <function_decl><type><name>apr_array_header_t</name> *</type>(<name>ap_expr_list_func_t</name>)<parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>,
                                                  <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>,
                                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** Variable lookup function, takes no argument and returns a string
 * @param ctx The evaluation context
 * @param data An opaque context provided by the lookup hook function
 * @return The expanded variable
 */</comment>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> *</type>(<name>ap_expr_var_func_t</name>)<parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** parameter struct passed to the lookup hook functions */</comment>
<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/** type of the looked up object */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FUNC_VAR</name></cpp:macro>        <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FUNC_STRING</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FUNC_LIST</name></cpp:macro>       <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FUNC_OP_UNARY</name></cpp:macro>   <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_EXPR_FUNC_OP_BINARY</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define>
    <comment type="block">/** name of the looked up object */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl>;</decl_stmt>

    <comment type="block">/** where to store the function pointer */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> **</type><name>func</name></decl>;</decl_stmt>
    <comment type="block">/** where to store the function's context */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> **</type><name>data</name></decl>;</decl_stmt>
    <comment type="block">/** where to store the error message (if any) */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>err</name></decl>;</decl_stmt>

    <comment type="block">/** arg for pre-parsing (only if a simple string).
     *  For binary ops, this is the right argument. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_expr_lookup_parms</name>;</typedef>

<comment type="block">/** Function for looking up the provider function for a variable, operator
 *  or function in an expression.
 *  @param parms The parameter struct, also determins where the result is
 *               stored.
 *  @return OK on success,
 *          !OK on failure,
 *          DECLINED if the requested name is not handled by this function
 */</comment>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>ap_expr_lookup_fn_t</name>)<parameter_list>(<param><decl><type><name>ap_expr_lookup_parms</name> *</type><name>parms</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** Default lookup function which just calls ap_run_expr_lookup().
 *  ap_run_expr_lookup cannot be used directly because it has the wrong
 *  calling convention under Windows.
 */</comment>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_expr_lookup_default</name><argument_list>(<argument><expr><name>ap_expr_lookup_parms</name> *<name>parms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>, <argument>expr_lookup</argument>, <argument>(ap_expr_lookup_parms *parms)</argument>)</argument_list></macro>

<comment type="block">/**
 * Parse an expression into a parse tree
 * @param pool Pool
 * @param ptemp temp pool
 * @param info The ap_expr_info_t struct (with values filled in)
 * @param expr The expression string to parse
 * @param lookup_fn The lookup function to use, NULL for default
 * @return NULL on success, error message on error.
 *         A pointer to the resulting parse tree will be stored in
 *         info-&gt;root_node.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_expr_parse</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>, <argument><expr><name>apr_pool_t</name> *<name>ptemp</name></expr></argument>,
                                       <argument><expr><name>ap_expr_info_t</name> *<name>info</name></expr></argument>, <argument><expr>const <name>char</name> *<name>expr</name></expr></argument>,
                                       <argument><expr><name>ap_expr_lookup_fn_t</name> *<name>lookup_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * High level interface to ap_expr_parse that also creates ap_expr_info_t and
 * uses info from cmd_parms to fill in most of it.
 * @param cmd The cmd_parms struct
 * @param expr The expression string to parse
 * @param flags The flags to use, see AP_EXPR_FLAG_*
 * @param err Set to NULL on success, error message on error
 * @param lookup_fn The lookup function used to lookup vars, functions, and
 *        operators
 * @param module_index The module_index to set for the expression
 * @return The parsed expression
 * @note Usually ap_expr_parse_cmd() should be used
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_expr_info_t *</argument>)</argument_list></macro> <macro><name>ap_expr_parse_cmd_mi</name><argument_list>(<argument>const cmd_parms *cmd</argument>,
                                                  <argument>const char *expr</argument>,
                                                  <argument>unsigned int flags</argument>,
                                                  <argument>const char **err</argument>,
                                                  <argument>ap_expr_lookup_fn_t *lookup_fn</argument>,
                                                  <argument>int module_index</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Convenience wrapper for ap_expr_parse_cmd_mi() that sets
 * module_index = APLOG_MODULE_INDEX
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_expr_parse_cmd</name><parameter_list>(<param><type><name>cmd</name></type></param>, <param><type><name>expr</name></type></param>, <param><type><name>flags</name></type></param>, <param><type><name>err</name></type></param>, <param><type><name>lookup_fn</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>ap_expr_parse_cmd_mi(cmd, expr, flags, err, lookup_fn, APLOG_MODULE_INDEX)</cpp:value></cpp:define>

 <comment type="block">/**
  * Internal initialisation of ap_expr (for httpd internal use)
  */</comment>
<function_decl><type><name>void</name></type> <name>ap_expr_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AP_EXPR_H */</comment>
<comment type="block">/** @} */</comment>
</unit>
