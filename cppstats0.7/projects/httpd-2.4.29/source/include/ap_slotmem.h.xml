<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/ap_slotmem.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SLOTMEM_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOTMEM_H</name></cpp:macro></cpp:define>

<comment type="block">/* Memory handler for a shared memory divided in slot.
 */</comment>
<comment type="block">/**
 * @file  ap_slotmem.h
 * @brief Memory Slot Extension Storage Module for Apache
 *
 * @defgroup MEM mem
 * @ingroup  APACHE_MODS
 * @{
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_shm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_global_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>         <comment type="block">/* for getpid() */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_PROVIDER_GROUP</name></cpp:macro> <cpp:value>"slotmem"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_PROVIDER_VERSION</name></cpp:macro> <cpp:value>"0"</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ap_slotmem_type_t</name>;</typedef>

<comment type="block">/*
 * Values for ap_slotmem_type_t::
 *
 * AP_SLOTMEM_TYPE_PERSIST: For transitory providers, persist
 *    the data on the file-system
 *
 * AP_SLOTMEM_TYPE_NOTMPSAFE:
 *
 * AP_SLOTMEM_TYPE_PREALLOC: Access to slots require they be grabbed 1st
 *
 * AP_SLOTMEM_TYPE_CLEARINUSE: If persisting, clear 'inuse' array before
 *    storing
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_TYPE_PERSIST</name></cpp:macro>      <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_TYPE_NOTMPSAFE</name></cpp:macro>    <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_TYPE_PREGRAB</name></cpp:macro>      <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_TYPE_CLEARINUSE</name></cpp:macro>   <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<typedef>typedef <type>struct <name>ap_slotmem_instance_t</name></type> <name>ap_slotmem_instance_t</name>;</typedef>

<comment type="block">/**
 * callback function used for slotmem doall.
 * @param mem is the memory associated with a worker.
 * @param data is what is passed to slotmem.
 * @param pool is pool used
 * @return APR_SUCCESS if all went well
 */</comment>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> <name>ap_slotmem_callback_fn_t</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>mem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>ap_slotmem_provider_t</name> <block>{
    <comment type="block">/*
     * Name of the provider method
     */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <comment type="block">/**
     * call the callback on all worker slots
     * @param s ap_slotmem_instance_t to use.
     * @param funct callback function to call for each element.
     * @param data parameter for the callback function.
     * @param pool is pool used
     * @return APR_SUCCESS if all went well
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (* <name>doall</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>ap_slotmem_callback_fn_t</name> *</type><name>func</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * create a new slotmem with each item size is item_size.
     * This would create shared memory, basically.
     * @param inst where to store pointer to slotmem
     * @param name a key used for debugging and in mod_status output or allow another process to share this space.
     * @param item_size size of each item
     * @param item_num number of item to create.
     * @param type type of slotmem.
     * @param pool is pool used
     * @return APR_SUCCESS if all went well
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (* <name>create</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> **</type><name>inst</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>item_size</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_num</name></decl></param>, <param><decl><type><name>ap_slotmem_type_t</name></type> <name>type</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * attach to an existing slotmem.
     * This would attach to  shared memory, basically.
     * @param inst where to store pointer to slotmem
     * @param name a key used for debugging and in mod_status output or allow another process to share this space.
     * @param item_size size of each item
     * @param item_num max number of item.
     * @param pool is pool to memory allocate.
     * @return APR_SUCCESS if all went well
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (* <name>attach</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> **</type><name>inst</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>item_size</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>item_num</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * get the memory ptr associated with this worker slot.
     * @param s ap_slotmem_instance_t to use.
     * @param item_id item to return for 0 to item_num
     * @param mem address to store the pointer to the slot
     * @return APR_SUCCESS if all went well
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (* <name>dptr</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_id</name></decl></param>, <param><decl><type><name>void</name>**</type><name>mem</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * get/read the data associated with this worker slot.
     * @param s ap_slotmem_instance_t to use.
     * @param item_id item to return for 0 to item_num
     * @param dest address to store the data
     * @param dest_len length of dataset to retrieve
     * @return APR_SUCCESS if all went well
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (* <name>get</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>dest</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>dest_len</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * put/write the data associated with this worker slot.
     * @param s ap_slotmem_instance_t to use.
     * @param item_id item to return for 0 to item_num
     * @param src address of the data to store in the slot
     * @param src_len length of dataset to store in the slot
     * @return APR_SUCCESS if all went well
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (* <name>put</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>src</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>src_len</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * return number of slots allocated for this entry.
     * @param s ap_slotmem_instance_t to use.
     * @return number of slots
     */</comment>
    <function_decl><type><name>unsigned</name> <name>int</name></type> (* <name>num_slots</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * return number of free (not used) slots allocated for this entry.
     * Valid for slots which are AP_SLOTMEM_TYPE_PREGRAB as well as
     * any which use get/release.
     * @param s ap_slotmem_instance_t to use.
     * @return number of slots
     */</comment>
    <function_decl><type><name>unsigned</name> <name>int</name></type> (* <name>num_free_slots</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * return slot size allocated for this entry.
     * @param s ap_slotmem_instance_t to use.
     * @return size of slot
     */</comment>
    <function_decl><type><name>apr_size_t</name></type> (* <name>slot_size</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * grab (or alloc) a free slot
     * @param s ap_slotmem_instance_t to use.
     * @param item_id ptr to the available slot id and marked as in-use
     * @return APR_SUCCESS if all went well
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (* <name>grab</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>item_id</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * release (or free) the slot associated with this item_id
     * @param s ap_slotmem_instance_t to use.
     * @param item_id slot id to free and mark as no longer in-use
     * @return APR_SUCCESS if all went well
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (* <name>release</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_id</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * forced grab (or alloc) a slot associated with this item_id
     * @param s ap_slotmem_instance_t to use.
     * @param item_id to the specified slot id and marked as in-use
     * @return APR_SUCCESS if all went well
     */</comment>
    <function_decl><type><name>apr_status_t</name></type> (* <name>fgrab</name>)<parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_id</name></decl></param>)</parameter_list>;</function_decl>
}</block>;</struct>

<typedef>typedef <type>struct <name>ap_slotmem_provider_t</name></type> <name>ap_slotmem_provider_t</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/** @} */</comment>
</unit>
