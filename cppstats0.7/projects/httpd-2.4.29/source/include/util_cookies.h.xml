<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/util_cookies.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file util_cookies.h
 * @brief Apache cookie library
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UTIL_COOKIES_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTIL_COOKIES_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * @defgroup APACHE_CORE_COOKIE Cookies
 * @ingroup  APACHE_CORE
 *
 * RFC2109 and RFC2965 compliant HTTP cookies can be read from and written
 * to using this set of functions.
 *
 * @{
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_COOKIE</name></cpp:macro> <cpp:value>"Set-Cookie"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_COOKIE2</name></cpp:macro> <cpp:value>"Set-Cookie2"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ATTRS</name></cpp:macro> <cpp:value>"HttpOnly;Secure;Version=1"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR_ATTRS</name></cpp:macro> <cpp:value>"Version=1"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoded</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>new_cookies</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>duplicated</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_cookie_do</name>;</typedef>

<comment type="block">/**
 * Write an RFC2109 compliant cookie.
 *
 * @param r The request
 * @param name The name of the cookie.
 * @param val The value to place in the cookie.
 * @param attrs The string containing additional cookie attributes. If NULL, the
 *              DEFAULT_ATTRS will be used.
 * @param maxage If non zero, a Max-Age header will be added to the cookie.
 * @param ... A varargs array of zero or more (apr_table_t *) tables followed by NULL
 *            to which the cookies should be added.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_write</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name</argument>,
                                         <argument>const char *val</argument>, <argument>const char *attrs</argument>,
                                         <argument>long maxage</argument>, <argument>...</argument>)</argument_list></macro>
                         <expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>

<comment type="block">/**
 * Write an RFC2965 compliant cookie.
 *
 * @param r The request
 * @param name2 The name of the cookie.
 * @param val The value to place in the cookie.
 * @param attrs2 The string containing additional cookie attributes. If NULL, the
 *               DEFAULT_ATTRS will be used.
 * @param maxage If non zero, a Max-Age header will be added to the cookie.
 * @param ... A varargs array of zero or more (apr_table_t *) tables followed by NULL
 *            to which the cookies should be added.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_write2</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name2</argument>,
                                          <argument>const char *val</argument>, <argument>const char *attrs2</argument>,
                                          <argument>long maxage</argument>, <argument>...</argument>)</argument_list></macro>
                         <expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>

<comment type="block">/**
 * Remove an RFC2109 compliant cookie.
 *
 * @param r The request
 * @param name The name of the cookie.
 * @param attrs The string containing additional cookie attributes. If NULL, the
 *              CLEAR_ATTRS will be used.
 * @param ... A varargs array of zero or more (apr_table_t *) tables followed by NULL
 *            to which the cookies should be added.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_remove</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name</argument>,
                                          <argument>const char *attrs</argument>, <argument>...</argument>)</argument_list></macro>
                         <expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>

<comment type="block">/**
 * Remove an RFC2965 compliant cookie.
 *
 * @param r The request
 * @param name2 The name of the cookie.
 * @param attrs2 The string containing additional cookie attributes. If NULL, the
 *               CLEAR_ATTRS will be used.
 * @param ... A varargs array of zero or more (apr_table_t *) tables followed by NULL
 *            to which the cookies should be added.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_remove2</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name2</argument>,
                                           <argument>const char *attrs2</argument>, <argument>...</argument>)</argument_list></macro>
                         <expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>

<comment type="block">/**
 * Read a cookie called name, placing its value in val.
 *
 * Both the Cookie and Cookie2 headers are scanned for the cookie.
 *
 * If the cookie is duplicated, this function returns APR_EGENERAL. If found,
 * and if remove is non zero, the cookie will be removed from the headers, and
 * thus kept private from the backend.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_read</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name</argument>, <argument>const char **val</argument>,
                                        <argument>int remove</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * Sanity check a given string that it exists, is not empty,
 * and does not contain the special characters '=', ';' and '&amp;'.
 *
 * It is used to sanity check the cookie names.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_cookie_check_string</name><argument_list>(<argument><expr>const <name>char</name> *<name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * @}
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !UTIL_COOKIES_H */</comment>
</unit>
