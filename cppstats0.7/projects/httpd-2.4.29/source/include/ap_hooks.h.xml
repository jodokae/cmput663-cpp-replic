<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/include/ap_hooks.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file ap_hooks.h
 * @brief ap hook functions and macros
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AP_HOOKS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_HOOKS_H</name></cpp:macro></cpp:define>

<comment type="block">/* Although this file doesn't declare any hooks, declare the hook group here */</comment>
<comment type="block">/**
 * @defgroup hooks Apache Hooks
 * @ingroup  APACHE_CORE
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HOOK_PROBES_ENABLED</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>APR_HOOK_PROBES_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HOOK_PROBES_ENABLED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>APR_HOOK_PROBES_ENABLED</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_hook_probes.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional_hooks.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DOXYGEN</name></cpp:ifdef>
<comment type="block">/* define these just so doxygen documents them */</comment>

<comment type="block">/**
 * AP_DECLARE_STATIC is defined when including Apache's Core headers,
 * to provide static linkage when the dynamic library may be unavailable.
 *
 * @see AP_DECLARE_EXPORT
 *
 * AP_DECLARE_STATIC and AP_DECLARE_EXPORT are left undefined when
 * including Apache's Core headers, to import and link the symbols from the
 * dynamic Apache Core library and assure appropriate indirection and calling
 * conventions at compile time.
 */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DECLARE_STATIC</name></cpp:macro></cpp:define>
<comment type="block">/**
 * AP_DECLARE_EXPORT is defined when building the Apache Core dynamic
 * library, so that all public symbols are exported.
 *
 * @see AP_DECLARE_STATIC
 */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DECLARE_EXPORT</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* def DOXYGEN */</comment>

<comment type="block">/**
 * Declare a hook function
 * @param ret The return type of the hook
 * @param name The hook's name (as a literal)
 * @param args The arguments the hook function takes, in brackets.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DECLARE_HOOK</name><parameter_list>(<param><type><name>ret</name></type></param>,<param><type><name>name</name></type></param>,<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>APR_DECLARE_EXTERNAL_HOOK(ap,AP,ret,name,args)</cpp:value></cpp:define>

<comment type="block">/** @internal */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_IMPLEMENT_HOOK_BASE</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>APR_IMPLEMENT_EXTERNAL_HOOK_BASE(ap,AP,name)</cpp:value></cpp:define>

<comment type="block">/**
 * Implement an Apache core hook that has no return code, and
 * therefore runs all of the registered functions. The implementation
 * is called ap_run_&lt;i&gt;name&lt;/i&gt;.
 *
 * @param name The name of the hook
 * @param args_decl The declaration of the arguments for the hook, for example
 * "(int x,void *y)"
 * @param args_use The arguments for the hook as used in a call, for example
 * "(x,y)"
 * @note If IMPLEMENTing a hook that is not linked into the Apache core,
 * (e.g. within a dso) see APR_IMPLEMENT_EXTERNAL_HOOK_VOID.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_IMPLEMENT_HOOK_VOID</name><parameter_list>(<param><type><name>name</name></type></param>,<param><type><name>args_decl</name></type></param>,<param><type><name>args_use</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>APR_IMPLEMENT_EXTERNAL_HOOK_VOID(ap,AP,name,args_decl,args_use)</cpp:value></cpp:define>

<comment type="block">/**
 * Implement an Apache core hook that runs until one of the functions
 * returns something other than ok or decline. That return value is
 * then returned from the hook runner. If the hooks run to completion,
 * then ok is returned. Note that if no hook runs it would probably be
 * more correct to return decline, but this currently does not do
 * so. The implementation is called ap_run_&lt;i&gt;name&lt;/i&gt;.
 *
 * @param ret The return type of the hook (and the hook runner)
 * @param name The name of the hook
 * @param args_decl The declaration of the arguments for the hook, for example
 * "(int x,void *y)"
 * @param args_use The arguments for the hook as used in a call, for example
 * "(x,y)"
 * @param ok The "ok" return value
 * @param decline The "decline" return value
 * @return ok, decline or an error.
 * @note If IMPLEMENTing a hook that is not linked into the Apache core,
 * (e.g. within a dso) see APR_IMPLEMENT_EXTERNAL_HOOK_RUN_ALL.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><parameter_list>(<param><type><name>ret</name></type></param>,<param><type><name>name</name></type></param>,<param><type><name>args_decl</name></type></param>,<param><type><name>args_use</name></type></param>,<param><type><name>ok</name></type></param>,<param><type><name>decline</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>APR_IMPLEMENT_EXTERNAL_HOOK_RUN_ALL(ap,AP,ret,name,args_decl, \
                                            args_use,ok,decline)</cpp:value></cpp:define>

<comment type="block">/**
 * Implement a hook that runs until a function returns something other than
 * decline. If all functions return decline, the hook runner returns decline.
 * The implementation is called ap_run_&lt;i&gt;name&lt;/i&gt;.
 *
 * @param ret The return type of the hook (and the hook runner)
 * @param name The name of the hook
 * @param args_decl The declaration of the arguments for the hook, for example
 * "(int x,void *y)"
 * @param args_use The arguments for the hook as used in a call, for example
 * "(x,y)"
 * @param decline The "decline" return value
 * @return decline or an error.
 * @note If IMPLEMENTing a hook that is not linked into the Apache core
 * (e.g. within a dso) see APR_IMPLEMENT_EXTERNAL_HOOK_RUN_FIRST.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><parameter_list>(<param><type><name>ret</name></type></param>,<param><type><name>name</name></type></param>,<param><type><name>args_decl</name></type></param>,<param><type><name>args_use</name></type></param>,<param><type><name>decline</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>APR_IMPLEMENT_EXTERNAL_HOOK_RUN_FIRST(ap,AP,ret,name,args_decl, \
                                              args_use,decline)</cpp:value></cpp:define>

<comment type="block">/* Note that the other optional hook implementations are straightforward but
 * have not yet been needed
 */</comment>

<comment type="block">/**
 * Implement an optional hook. This is exactly the same as a standard hook
 * implementation, except the hook is optional.
 * @see AP_IMPLEMENT_HOOK_RUN_ALL
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><parameter_list>(<param><type><name>ret</name></type></param>,<param><type><name>name</name></type></param>,<param><type><name>args_decl</name></type></param>,<param><type><name>args_use</name></type></param>,<param><type><name>ok</name></type></param>, \
                                           <param><type><name>decline</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL(ap,AP,ret,name,args_decl, \
                                            args_use,ok,decline)</cpp:value></cpp:define>

<comment type="block">/**
 * Hook an optional hook. Unlike static hooks, this uses a macro instead of a
 * function.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_OPTIONAL_HOOK</name><parameter_list>(<param><type><name>name</name></type></param>,<param><type><name>fn</name></type></param>,<param><type><name>pre</name></type></param>,<param><type><name>succ</name></type></param>,<param><type><name>order</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>APR_OPTIONAL_HOOK(ap,name,fn,pre,succ,order)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AP_HOOKS_H */</comment>
</unit>
