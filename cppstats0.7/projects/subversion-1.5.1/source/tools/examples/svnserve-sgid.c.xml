<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/tools/examples/svnserve-sgid.c"><comment type="block">/*
 * Wrapper to run the svnserve process setgid.
 * The idea is to avoid the problem that some interpreters like bash
 * invoked by svnserve in hook scripts will reset the effective gid to
 * the real gid, nuking the effect of an ordinary setgid svnserve binary.
 * Sadly, to set the real gid portably, you need to be root, if only
 * for a moment.
 * Also smashes the environment to something known, so that games
 * can't be played to try to break the security of the hook scripts,
 * by setting IFS, PATH, and similar means.
 */</comment>
<comment type="block">/*
 * Written by Perry Metzger, and placed into the public domain.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_PATH</name></cpp:macro> <cpp:value>"/usr/bin/svnserve.real"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name> *</type><name><name>newenv</name><index>[]</index></name> <init>= <expr><block>{ <expr>"PATH=/bin:/usr/bin"</expr>, <expr>"SHELL=/bin/sh"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name>setgid</name><argument_list>(<argument><expr><call><name>getegid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"setgid(getegid())"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr><call><name>seteuid</name><argument_list>(<argument><expr><call><name>getuid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"seteuid(getuid())"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>1</expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><call><name>execve</name><argument_list>(<argument><expr><name>REAL_PATH</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>newenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"attempting to exec " <name>REAL_PATH</name> " failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>1</expr>;</return>
}</block></function>
</unit>
