<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/tools/examples/minimal_client.c"><comment type="block">/*
 * minimal_client.c  - a minimal Subversion client application ("hello world")
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 *
 *  This app demonstrates how to use the svn_client.h API.
 *
 *  It reads a directory URL from the commandline, runs
 *  svn_client_list() and prints the list of directory-entries.  It
 *  also knows how to deal with basic username/password authentication
 *  challenges.
 *
 *  For a much more complex example, the svn cmdline client might be
 *  considered the 'reference implementation'.
 *
 *  From a Linux system, a typical commandline compile might look like:
 *
 *  cc minimal_client.c -o minimal_client \
 *  -I/usr/local/include/subversion-1 -I/usr/local/apache2/include \
 *  -L/usr/local/apache2/lib -L/usr/local/lib \
 *  -lsvn_client-1 -lapr-0 -laprutil-0
 *
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>


<comment type="block">/* Display a prompt and read a one-line response into the provided buffer,
   removing a trailing newline if present. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>prompt_and_read_line</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prompt</name></decl></param>,
                     <param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>,
                     <param><decl><type><name>size_t</name></type> <name>max</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%s: "</expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"error reading stdin"</expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>len</name> &gt; 0 &amp;&amp; <name><name>buffer</name><index>[<expr><name>len</name>-1</expr>]</index></name> == '\n'</expr>)</condition><then>
    <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name>-1</expr>]</index></name> = 0</expr>;</expr_stmt></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* A tiny callback function of type 'svn_auth_simple_prompt_func_t'. For
   a much better example, see svn_cl__auth_simple_prompt in the official
   svn cmdline client. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>my_simple_prompt_callback</name> <parameter_list>(<param><decl><type><name>svn_auth_cred_simple_t</name> **</type><name>cred</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_auth_cred_simple_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_pcalloc</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>*<name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>answerbuf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>realm</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"Authentication realm: %s\n"</expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>username</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>ret</name>-&gt;<name>username</name></name> = <call><name>apr_pstrdup</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>prompt_and_read_line</name><argument_list>(<argument><expr>"Username"</expr></argument>, <argument><expr><name>answerbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>answerbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ret</name>-&gt;<name>username</name></name> = <call><name>apr_pstrdup</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>answerbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>prompt_and_read_line</name><argument_list>(<argument><expr>"Password"</expr></argument>, <argument><expr><name>answerbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>answerbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>password</name></name> = <call><name>apr_pstrdup</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>answerbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>cred</name> = <name>ret</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* A tiny callback function of type 'svn_auth_username_prompt_func_t'. For
   a much better example, see svn_cl__auth_username_prompt in the official
   svn cmdline client. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>my_username_prompt_callback</name> <parameter_list>(<param><decl><type><name>svn_auth_cred_username_t</name> **</type><name>cred</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_auth_cred_username_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_pcalloc</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>*<name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>answerbuf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>realm</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"Authentication realm: %s\n"</expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>prompt_and_read_line</name><argument_list>(<argument><expr>"Username"</expr></argument>, <argument><expr><name>answerbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>answerbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>username</name></name> = <call><name>apr_pstrdup</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>answerbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>cred</name> = <name>ret</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>argv</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>dirents</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>argc</name> &lt;= 1</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"Usage:  %s URL\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    }</block></then>
  <else>else
    <expr_stmt><expr><name>URL</name> = <name><name>argv</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt></else></if>

  <comment type="block">/* Initialize the app.  Send all error messages to 'stderr'.  */</comment>
  <if>if <condition>(<expr><call><name>svn_cmdline_init</name> <argument_list>(<argument><expr>"minimal_client"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call> != <name>EXIT_SUCCESS</name></expr>)</condition><then>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return></then></if>

  <comment type="block">/* Create top-level memory pool. Be sure to read the HACKING file to
     understand how to properly use/free subpools. */</comment>
  <expr_stmt><expr><name>pool</name> = <call><name>svn_pool_create</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize the FS library. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_fs_initialize</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* For functions deeper in the stack, we usually use the
         SVN_ERR() exception-throwing macro (see svn_error.h).  At the
         top level, we catch &amp; print the error with svn_handle_error2(). */</comment>
      <expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"minimal_client: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Make sure the ~/.subversion run-time config files exist */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_config_ensure</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"minimal_client: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* All clients need to fill out a client_ctx object. */</comment>
  <block>{
    <comment type="block">/* Initialize and allocate the client_ctx object. */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>svn_client_create_context</name> <argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
      <block>{
        <expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"minimal_client: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
      }</block></then></if>

    <comment type="block">/* Load the run-time config file into a hash */</comment>
    <if>if <condition>(<expr>(<name>err</name> = <call><name>svn_config_get_config</name> <argument_list>(<argument><expr>&amp;(<name><name>ctx</name>-&gt;<name>config</name></name>)</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
      <block>{
        <expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"minimal_client: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
      }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
    <comment type="block">/* Set the working copy administrative directory name. */</comment>
    <if>if <condition>(<expr><call><name>getenv</name> <argument_list>(<argument><expr>"SVN_ASP_DOT_NET_HACK"</expr></argument>)</argument_list></call></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name>err</name> = <call><name>svn_wc_set_adm_dir</name> <argument_list>(<argument><expr>"_svn"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"minimal_client: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
          }</block></then></if>
      }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Depending on what your client does, you'll want to read about
       (and implement) the various callback function types below.  */</comment>

    <comment type="block">/* A func (&amp; context) which receives event signals during
       checkouts, updates, commits, etc.  */</comment>
    <comment type="block">/* ctx-&gt;notify_func = my_notification_func;
       ctx-&gt;notify_baton = NULL; */</comment>

    <comment type="block">/* A func (&amp; context) which can receive log messages */</comment>
    <comment type="block">/* ctx-&gt;log_msg_func = my_log_msg_receiver_func;
       ctx-&gt;log_msg_baton = NULL; */</comment>

    <comment type="block">/* A func (&amp; context) which checks whether the user cancelled */</comment>
    <comment type="block">/* ctx-&gt;cancel_func = my_cancel_checking_func;
       ctx-&gt;cancel_baton = NULL; */</comment>

    <comment type="block">/* Make the client_ctx capable of authenticating users */</comment>
    <block>{
      <comment type="block">/* There are many different kinds of authentication back-end
         "providers".  See svn_auth.h for a full overview.

         If you want to get the auth behavior of the 'svn' program,
         you can use svn_cmdline_setup_auth_baton, which will give
         you the exact set of auth providers it uses.  This program
         doesn't use it because it's only appropriate for a command
         line program, and this is supposed to be a general purpose
         example. */</comment>

      <decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>provider</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>providers</name>
        <init>= <expr><call><name>apr_array_make</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_auth_get_simple_prompt_provider</name> <argument_list>(<argument><expr>&amp;<name>provider</name></expr></argument>,
                                           <argument><expr><name>my_simple_prompt_callback</name></expr></argument>,
                                           <argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* baton */</comment>
                                           <argument><expr>2</expr></argument>, <comment type="block">/* retry limit */</comment> <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name> <argument_list>(<argument><expr><name>providers</name></expr></argument>, <argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></call> = <name>provider</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>svn_auth_get_username_prompt_provider</name> <argument_list>(<argument><expr>&amp;<name>provider</name></expr></argument>,
                                             <argument><expr><name>my_username_prompt_callback</name></expr></argument>,
                                             <argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* baton */</comment>
                                             <argument><expr>2</expr></argument>, <comment type="block">/* retry limit */</comment> <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name> <argument_list>(<argument><expr><name>providers</name></expr></argument>, <argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></call> = <name>provider</name></expr>;</expr_stmt>

      <comment type="block">/* Register the auth-providers into the context's auth_baton. */</comment>
      <expr_stmt><expr><call><name>svn_auth_open</name> <argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>auth_baton</name></name></expr></argument>, <argument><expr><name>providers</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
  }</block> <comment type="block">/* end of client_ctx setup */</comment>


  <comment type="block">/* Now do the real work. */</comment>

  <comment type="block">/* Set revision to always be the HEAD revision.  It could, however,
     be set to a specific revision number, date, or other values. */</comment>
  <expr_stmt><expr><name><name>revision</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt>

  <comment type="block">/* Main call into libsvn_client does all the work. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_client_ls</name> <argument_list>(<argument><expr>&amp;<name>dirents</name></expr></argument>,
                       <argument><expr><name>URL</name></expr></argument>, <argument><expr>&amp;<name>revision</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* no recursion */</comment>
                       <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"minimal_client: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Print the dir entries in the hash. */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>dirents</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name> <argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entryname</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>val</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name> <argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>entryname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"   %s\n"</expr></argument>, <argument><expr><name>entryname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* 'val' is actually an svn_dirent_t structure; a more complex
          program would mine it for extra printable information. */</comment>
    }</block></for>

  <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
}</block></function>
</unit>
