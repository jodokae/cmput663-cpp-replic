<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/contrib/server-side/mod_dontdothat/mod_dontdothat.c"><comment type="block">/*
 * mod_dontdothat.c: an Apache filter that allows you to return arbitrary
 *                   errors for various types of Subversion requests.
 *
 * ====================================================================
 * Copyright (c) 2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_protocol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_request.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ap_config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_dav_svn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>dontdothat_module</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>no_replay</name></decl>;</decl_stmt>
}</block></struct></type> <name>dontdothat_config_rec</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_dontdothat_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dir</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>dontdothat_config_rec</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>cfg</name>-&gt;<name>base_path</name></name> = <name>dir</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cfg</name>-&gt;<name>no_replay</name></name> = 1</expr>;</expr_stmt>

  <return>return <expr><name>cfg</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>dontdothat_cmds</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DontDoThatConfigFile"</expr></argument>, <argument><expr><name>ap_set_file_slot</name></expr></argument>,
                <argument><expr>(<name>void</name> *) <call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>dontdothat_config_rec</name></expr></argument>, <argument><expr><name>config_file</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>OR_ALL</name></expr></argument>,
                <argument><expr>"Text file containing actions to take for specific requests"</expr></argument>)</argument_list></call></expr>,
  <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"DontDoThatDisallowReplay"</expr></argument>,  <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
                <argument><expr>(<name>void</name> *) <call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>dontdothat_config_rec</name></expr></argument>, <argument><expr><name>no_replay</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>OR_ALL</name></expr></argument>, <argument><expr>"Disallow replay requests as if they are other recursive requests."</expr></argument>)</argument_list></call></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>STATE_BEGINNING</name></decl>,
  <decl><name>STATE_IN_UPDATE</name></decl>,
  <decl><name>STATE_IN_SRC_PATH</name></decl>,
  <decl><name>STATE_IN_DST_PATH</name></decl>,
  <decl><name>STATE_IN_RECURSIVE</name></decl>
}</block></enum></type> <name>parse_state_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <comment type="block">/* Set to TRUE when we determine that the request is safe and should be
   * allowed to continue. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>let_it_go</name></decl>;</decl_stmt>

  <comment type="block">/* Set to TRUE when we determine that the request is unsafe and should be
   * stopped in its tracks. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_soup_for_you</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>XML_Parser</name></type> <name>xmlp</name></decl>;</decl_stmt>

  <comment type="block">/* The current location in the REPORT body. */</comment>
  <decl_stmt><decl><type><name>parse_state_t</name></type> <name>state</name></decl>;</decl_stmt>

  <comment type="block">/* A buffer to hold CDATA we encounter. */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>buffer</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>dontdothat_config_rec</name> *</type><name>cfg</name></decl>;</decl_stmt>

  <comment type="block">/* An array of wildcards that are special cased to be allowed. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>allow_recursive_ops</name></decl>;</decl_stmt>

  <comment type="block">/* An array of wildcards where recursive operations are not allowed. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>no_recursive_ops</name></decl>;</decl_stmt>

  <comment type="block">/* TRUE if a path has failed a test already. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>path_failed</name></decl>;</decl_stmt>

  <comment type="block">/* An error for when we're using this as a baton while parsing config
   * files. */</comment>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <comment type="block">/* The current request. */</comment>
  <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
}</block></struct></type> <name>dontdothat_filter_ctx</name>;</typedef>

<comment type="block">/* Return TRUE if wildcard WC matches path P, FALSE otherwise. */</comment>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>matches</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
  <for>for (<init>;</init><condition>;</condition><incr/>)
    <block>{
      <switch>switch <condition>(<expr>*<name>wc</name></expr>)</condition>
        <block>{
          <case>case <expr>'*'</expr>:
            <if>if <condition>(<expr><name><name>wc</name><index>[<expr>1</expr>]</index></name> != '/' &amp;&amp; <name><name>wc</name><index>[<expr>1</expr>]</index></name> != '\0'</expr>)</condition><then>
              <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if> <comment type="block">/* This was checked for during parsing of the config. */</comment>

            <comment type="block">/* It's a wild card, so eat up until the next / in p. */</comment>
            <while>while <condition>(<expr>*<name>p</name> &amp;&amp; <name><name>p</name><index>[<expr>1</expr>]</index></name> != '/'</expr>)</condition>
              <expr_stmt><expr>++<name>p</name></expr>;</expr_stmt></while>

            <comment type="block">/* If we ran out of p and we're out of wc then it matched. */</comment>
            <if>if <condition>(<expr>! *<name>p</name></expr>)</condition><then>
              <block>{
                <if>if <condition>(<expr><name><name>wc</name><index>[<expr>1</expr>]</index></name> == '\0'</expr>)</condition><then>
                  <return>return <expr><name>TRUE</name></expr>;</return></then>
                <else>else
                  <return>return <expr><name>FALSE</name></expr>;</return></else></if>
              }</block></then></if>
            <break>break;</break>

          </case><case>case <expr>'\0'</expr>:
            <if>if <condition>(<expr>*<name>p</name> != '\0'</expr>)</condition><then>
              <comment type="block">/* This means we hit the end of wc without running out of p. */</comment>
              <return>return <expr><name>FALSE</name></expr>;</return></then>
            <else>else
              <comment type="block">/* Or they were exactly the same length, so it's not lower. */</comment>
              <return>return <expr><name>TRUE</name></expr>;</return></else></if>

          </case><default>default:
            <if>if <condition>(<expr>*<name>wc</name> != *<name>p</name></expr>)</condition><then>
              <return>return <expr><name>FALSE</name></expr>;</return></then> <comment type="block">/* If we don't match, then move on to the next
                             * case. */</comment>
            <else>else
              <break>break;</break></else></if>
        </default>}</block></switch>

      <expr_stmt><expr>++<name>wc</name></expr>;</expr_stmt>
      <expr_stmt><expr>++<name>p</name></expr>;</expr_stmt>

      <if>if <condition>(<expr>! *<name>p</name> &amp;&amp; *<name>wc</name></expr>)</condition><then>
        <return>return <expr><name>FALSE</name></expr>;</return></then></if>
    }</block></for>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>is_this_legal</name><parameter_list>(<param><decl><type><name>dontdothat_filter_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relative_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cleaned_uri</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>trailing_slash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dav_error</name> *</type><name>derr</name></decl>;</decl_stmt>

  <comment type="block">/* Ok, so we need to skip past the scheme, host, etc. */</comment>
  <expr_stmt><expr><name>uri</name> = <call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr>"://"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>uri</name></expr>)</condition><then>
    <expr_stmt><expr><name>uri</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>uri</name> + 3</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>uri</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_path</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>derr</name> = <call><name>dav_svn_split_uri</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>,
                               <argument><expr><name>uri</name></expr></argument>,
                               <argument><expr><name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>base_path</name></name></expr></argument>,
                               <argument><expr>&amp;<name>cleaned_uri</name></expr></argument>,
                               <argument><expr>&amp;<name>trailing_slash</name></expr></argument>,
                               <argument><expr>&amp;<name>repos_name</name></expr></argument>,
                               <argument><expr>&amp;<name>relative_path</name></expr></argument>,
                               <argument><expr>&amp;<name>repos_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>derr</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

          <if>if <condition>(<expr>! <name>repos_path</name></expr>)</condition><then>
            <expr_stmt><expr><name>repos_path</name> = ""</expr>;</expr_stmt></then></if>

          <expr_stmt><expr><name>repos_path</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"/%s"</expr></argument>, <argument><expr><name>repos_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* First check the special cases that are always legal... */</comment>
          <for>for (<init><expr><name>idx</name> = 0</expr>;</init> <condition><expr><name>idx</name> &lt; <name><name>ctx</name>-&gt;<name>allow_recursive_ops</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>idx</name></expr></incr>)
            <block>{
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>allow_recursive_ops</name></name></expr></argument>,
                                             <argument><expr><name>idx</name></expr></argument>,
                                             <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <if>if <condition>(<expr><call><name>matches</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>repos_path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>,
                                <argument><expr>"mod_dontdothat: rule %s allows %s"</expr></argument>,
                                <argument><expr><name>wc</name></expr></argument>, <argument><expr><name>repos_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <return>return <expr><name>TRUE</name></expr>;</return>
                }</block></then></if>
            }</block></for>

          <comment type="block">/* Then look for stuff we explicitly don't allow. */</comment>
          <for>for (<init><expr><name>idx</name> = 0</expr>;</init> <condition><expr><name>idx</name> &lt; <name><name>ctx</name>-&gt;<name>no_recursive_ops</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>idx</name></expr></incr>)
            <block>{
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>no_recursive_ops</name></name></expr></argument>,
                                             <argument><expr><name>idx</name></expr></argument>,
                                             <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <if>if <condition>(<expr><call><name>matches</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>repos_path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>,
                                <argument><expr>"mod_dontdothat: rule %s forbids %s"</expr></argument>,
                                <argument><expr><name>wc</name></expr></argument>, <argument><expr><name>repos_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <return>return <expr><name>FALSE</name></expr>;</return>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
    }</block></then></if>

  <return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>dontdothat_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
                  <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
                  <param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
                  <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
                  <param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>dontdothat_filter_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>mode</name> != <name>AP_MODE_READBYTES</name></expr>)</condition><then>
    <return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>rv</name></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init>
       <condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</condition>
       <incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>last</name> <init>= <expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>last</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>str</name> = ""</expr>;</expr_stmt>
          <expr_stmt><expr><name>len</name> = 0</expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>rv</name></expr>)</condition><then>
            <return>return <expr><name>rv</name></expr>;</return></then></if>
        }</block></else></if>

      <if>if <condition>(<expr>! <call><name>XML_Parse</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <comment type="block">/* let_it_go so we clean up our parser, no_soup_for_you so that we
           * bail out before bothering to parse this stuff a second time. */</comment>
          <expr_stmt><expr><name><name>ctx</name>-&gt;<name>let_it_go</name></name> = <name>TRUE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ctx</name>-&gt;<name>no_soup_for_you</name></name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></then></if>

      <comment type="block">/* If we found something that isn't allowed, set the correct status
       * and return an error so it'll bail out before it gets anywhere it
       * can do real damage. */</comment>
      <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>no_soup_for_you</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* XXX maybe set up the SVN-ACTION env var so that it'll show up
           *     in the Subversion operational logs? */</comment>

          <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>,
                        <argument><expr>"mod_dontdothat: client broke the rules, "
                        "returning error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Ok, pass an error bucket and an eos bucket back to the client.
           *
           * NOTE: The custom error string passed here doesn't seem to be
           *       used anywhere by httpd.  This is quite possibly a bug.
           *
           * TODO: Try and pass back a custom document body containing a
           *       serialized svn_error_t so the client displays a better
           *       error message. */</comment>
          <expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>e</name> = <call><name>ap_bucket_error_create</name><argument_list>(<argument><expr>403</expr></argument>, <argument><expr>"No Soup For You!"</expr></argument>,
                                     <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Don't forget to remove us, otherwise recursion blows the stack. */</comment>
          <expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
      <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>let_it_go</name></name> || <name>last</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>,
                        <argument><expr>"mod_dontdothat: letting request go through"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>rv</name></expr>;</return>
        }</block></then></if></else></if>
    }</block></for>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cdata</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>dontdothat_filter_ctx</name> *</type><name>ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>no_soup_for_you</name></name> || <name><name>ctx</name>-&gt;<name>let_it_go</name></name></expr>)</condition><then>
    <return>return;</return></then></if>

  <switch>switch <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name></expr>)</condition>
    <block>{
      <case>case <expr><name>STATE_IN_SRC_PATH</name></expr>:
        <comment type="block">/* FALLTHROUGH */</comment>

      </case><case>case <expr><name>STATE_IN_DST_PATH</name></expr>:
        <comment type="block">/* FALLTHROUGH */</comment>

      </case><case>case <expr><name>STATE_IN_RECURSIVE</name></expr>:
        <if>if <condition>(<expr>! <name><name>ctx</name>-&gt;<name>buffer</name></name></expr>)</condition><then>
          <expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name></name> = <call><name>svn_stringbuf_ncreate</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
          <expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <break>break;</break>

      </case><default>default:
        <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>start_element</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>dontdothat_filter_ctx</name> *</type><name>ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sep</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>no_soup_for_you</name></name> || <name><name>ctx</name>-&gt;<name>let_it_go</name></name></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="block">/* XXX Hack.  We should be doing real namespace support, but for now we
   *     just skip ahead of any namespace prefix.  If someone's sending us
   *     an update-report element outside of the SVN namespace they'll get
   *     what they deserve... */</comment>
  <expr_stmt><expr><name>sep</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>sep</name></expr>)</condition><then>
    <expr_stmt><expr><name>name</name> = <name>sep</name> + 1</expr>;</expr_stmt></then></if>

  <switch>switch <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name></expr>)</condition>
    <block>{
      <case>case <expr><name>STATE_BEGINNING</name></expr>:
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"update-report"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
          <expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>STATE_IN_UPDATE</name></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"replay-report"</expr></argument>)</argument_list></call> == 0 &amp;&amp; <name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>no_replay</name></name></expr>)</condition><then>
          <block>{
            <comment type="block">/* XXX it would be useful if there was a way to override this
             *     on a per-user basis... */</comment>
            <if>if <condition>(<expr>! <call><name>is_this_legal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>r</name>-&gt;<name>unparsed_uri</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
              <expr_stmt><expr><name><name>ctx</name>-&gt;<name>no_soup_for_you</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
            <else>else
              <expr_stmt><expr><name><name>ctx</name>-&gt;<name>let_it_go</name></name> = <name>TRUE</name></expr>;</expr_stmt></else></if>
          }</block></then>
        <else>else
          <expr_stmt><expr><name><name>ctx</name>-&gt;<name>let_it_go</name></name> = <name>TRUE</name></expr>;</expr_stmt></else></if></else></if>
        <break>break;</break>

      </case><case>case <expr><name>STATE_IN_UPDATE</name></expr>:
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"src-path"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
          <block>{
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>STATE_IN_SRC_PATH</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr>)</condition><then>
              <expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name>-&gt;<name>len</name></name> = 0</expr>;</expr_stmt></then></if>
          }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"dst-path"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
          <block>{
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>STATE_IN_DST_PATH</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr>)</condition><then>
              <expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name>-&gt;<name>len</name></name> = 0</expr>;</expr_stmt></then></if>
          }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"recursive"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
          <block>{
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>STATE_IN_RECURSIVE</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr>)</condition><then>
              <expr_stmt><expr><name><name>ctx</name>-&gt;<name>buffer</name>-&gt;<name>len</name></name> = 0</expr>;</expr_stmt></then></if>
          }</block></then>
        <else>else
          <empty_stmt>;</empty_stmt></else></if></else></if></else></if> <comment type="block">/* XXX Figure out what else we need to deal with...  Switch
             *     has that link-path thing we probably need to look out
             *     for... */</comment>
        <break>break;</break>

      </case><default>default:
        <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>end_element</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>dontdothat_filter_ctx</name> *</type><name>ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sep</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>no_soup_for_you</name></name> || <name><name>ctx</name>-&gt;<name>let_it_go</name></name></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="block">/* XXX Hack.  We should be doing real namespace support, but for now we
   *     just skip ahead of any namespace prefix.  If someone's sending us
   *     an update-report element outside of the SVN namespace they'll get
   *     what they deserve... */</comment>
  <expr_stmt><expr><name>sep</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>sep</name></expr>)</condition><then>
    <expr_stmt><expr><name>name</name> = <name>sep</name> + 1</expr>;</expr_stmt></then></if>

  <switch>switch <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name></expr>)</condition>
    <block>{
      <case>case <expr><name>STATE_IN_SRC_PATH</name></expr>:
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>STATE_IN_UPDATE</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>svn_stringbuf_strip_whitespace</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>! <name><name>ctx</name>-&gt;<name>path_failed</name></name> &amp;&amp; ! <call><name>is_this_legal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buffer</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <expr_stmt><expr><name><name>ctx</name>-&gt;<name>path_failed</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
        <break>break;</break>

      </case><case>case <expr><name>STATE_IN_DST_PATH</name></expr>:
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>STATE_IN_UPDATE</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>svn_stringbuf_strip_whitespace</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>! <name><name>ctx</name>-&gt;<name>path_failed</name></name> &amp;&amp; ! <call><name>is_this_legal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buffer</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <expr_stmt><expr><name><name>ctx</name>-&gt;<name>path_failed</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
        <break>break;</break>

      </case><case>case <expr><name>STATE_IN_RECURSIVE</name></expr>:
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>STATE_IN_UPDATE</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>svn_stringbuf_strip_whitespace</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* If this isn't recursive we let it go. */</comment>
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"no"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>,
                          <argument><expr>"mod_dontdothat: letting nonrecursive request go"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>let_it_go</name></name> = <name>TRUE</name></expr>;</expr_stmt>
          }</block></then></if>
        <break>break;</break>

      </case><case>case <expr><name>STATE_IN_UPDATE</name></expr>:
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"update-report"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
          <block>{
            <comment type="block">/* If we made it here without figuring out that this is
             * nonrecursive, then the path check is our final word
             * on the subject. */</comment>

            <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>path_failed</name></name></expr>)</condition><then>
              <expr_stmt><expr><name><name>ctx</name>-&gt;<name>no_soup_for_you</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
            <else>else
              <expr_stmt><expr><name><name>ctx</name>-&gt;<name>let_it_go</name></name> = <name>TRUE</name></expr>;</expr_stmt></else></if>
          }</block></then>
        <else>else
          <empty_stmt>;</empty_stmt></else></if> <comment type="block">/* XXX Is there other stuff we care about? */</comment>
        <break>break;</break>

      </case><default>default:
        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>is_valid_wildcard</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc</name></decl></param>)</parameter_list>
<block>{
  <while>while <condition>(<expr>*<name>wc</name></expr>)</condition>
    <block>{
      <if>if <condition>(<expr>*<name>wc</name> == '*'</expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name><name>wc</name><index>[<expr>1</expr>]</index></name> &amp;&amp; <name><name>wc</name><index>[<expr>1</expr>]</index></name> != '/'</expr>)</condition><then>
            <return>return <expr><name>FALSE</name></expr>;</return></then></if>
        }</block></then></if>

      <expr_stmt><expr>++<name>wc</name></expr>;</expr_stmt>
    }</block></while>

  <return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>config_enumerator</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wildcard</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>dontdothat_filter_ctx</name> *</type><name>ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"deny"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><call><name>is_valid_wildcard</name><argument_list>(<argument><expr><name>wildcard</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>no_recursive_ops</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>wildcard</name></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>err</name></name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr>"'%s' is an invalid wildcard"</expr></argument>,
                                     <argument><expr><name>wildcard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr>"allow"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><call><name>is_valid_wildcard</name><argument_list>(<argument><expr><name>wildcard</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>allow_recursive_ops</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>wildcard</name></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>err</name></name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr>"'%s' is an invalid wildcard"</expr></argument>,
                                     <argument><expr><name>wildcard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name><name>ctx</name>-&gt;<name>err</name></name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>,
                                   <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr>"'%s' is not a valid action"</expr></argument>,
                                   <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>

  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>err</name></name></expr>)</condition><then>
    <return>return <expr><name>FALSE</name></expr>;</return></then>
  <else>else
    <return>return <expr><name>TRUE</name></expr>;</return></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>clean_up_parser</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>XML_Parser</name></type> <name>xmlp</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>XML_ParserFree</name><argument_list>(<argument><expr><name>xmlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dontdothat_insert_filters</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>dontdothat_config_rec</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                    <argument><expr>&amp;<name>dontdothat_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name><name>cfg</name>-&gt;<name>config_file</name></name></expr>)</condition><then>
    <return>return;</return></then></if>

  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>"REPORT"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>dontdothat_filter_ctx</name> *</type><name>ctx</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>config</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>ctx</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>ctx</name>-&gt;<name>cfg</name></name> = <name>cfg</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>ctx</name>-&gt;<name>allow_recursive_ops</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>ctx</name>-&gt;<name>no_recursive_ops</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* XXX is there a way to error out from this point?  Would be nice... */</comment>

      <expr_stmt><expr><name>err</name> = <call><name>svn_config_read</name><argument_list>(<argument><expr>&amp;<name>config</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>config_file</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>,
                        <argument><expr>((<name><name>err</name>-&gt;<name>apr_err</name></name> &gt;= <name>APR_OS_START_USERERR</name> &amp;&amp;
                          <name><name>err</name>-&gt;<name>apr_err</name></name> &lt; <name>APR_OS_START_CANONERR</name>) ?
                         0 : <name><name>err</name>-&gt;<name>apr_err</name></name>)</expr></argument>,
                        <argument><expr><name>r</name></expr></argument>, <argument><expr>"Failed to load DontDoThatConfigFile: %s"</expr></argument>,
                        <argument><expr><call><name>svn_err_best_message</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return;</return>
        }</block></then></if>

      <expr_stmt><expr><call><name>svn_config_enumerate2</name><argument_list>(<argument><expr><name>config</name></expr></argument>,
                            <argument><expr>"recursive-actions"</expr></argument>,
                            <argument><expr><name>config_enumerator</name></expr></argument>,
                            <argument><expr><name>ctx</name></expr></argument>,
                            <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>err</name></name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>,
                        <argument><expr>((<name><name>ctx</name>-&gt;<name>err</name>-&gt;<name>apr_err</name></name> &gt;= <name>APR_OS_START_USERERR</name> &amp;&amp;
                          <name><name>ctx</name>-&gt;<name>err</name>-&gt;<name>apr_err</name></name> &lt; <name>APR_OS_START_CANONERR</name>) ?
                         0 : <name><name>ctx</name>-&gt;<name>err</name>-&gt;<name>apr_err</name></name>)</expr></argument>,
                        <argument><expr><name>r</name></expr></argument>, <argument><expr>"Failed to parse DontDoThatConfigFile: %s"</expr></argument>,
                        <argument><expr><call><name>svn_err_best_message</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>err</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return;</return>
        }</block></then></if>

      <expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>STATE_BEGINNING</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name> = <call><name>XML_ParserCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>,
                                <argument><expr><name>clean_up_parser</name></expr></argument>,
                                <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>XML_SetUserData</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>XML_SetElementHandler</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>, <argument><expr><name>start_element</name></expr></argument>, <argument><expr><name>end_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>XML_SetCharacterDataHandler</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>ap_add_input_filter</name><argument_list>(<argument><expr>"DONTDOTHAT_FILTER"</expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dontdothat_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>dontdothat_insert_filters</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ap_register_input_filter</name><argument_list>(<argument><expr>"DONTDOTHAT_FILTER"</expr></argument>,
                           <argument><expr><name>dontdothat_filter</name></expr></argument>,
                           <argument><expr><name>NULL</name></expr></argument>,
                           <argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>dontdothat_module</name> <init>=
<expr><block>{
  <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
  <expr><name>create_dontdothat_dir_config</name></expr>,
  <expr><name>NULL</name></expr>,
  <expr><name>NULL</name></expr>,
  <expr><name>NULL</name></expr>,
  <expr><name>dontdothat_cmds</name></expr>,
  <expr><name>dontdothat_register_hooks</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
