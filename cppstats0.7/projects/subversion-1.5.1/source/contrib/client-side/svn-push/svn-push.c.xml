<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/contrib/client-side/svn-push/svn-push.c"><comment type="block">/* svn-push.c --- propagate changesets from one (networked) repository to
 * a different (networked) repository.
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>

<comment type="block">/* Implements svn_commit_callback2_t. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>my_commit_callback</name> <parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_commit_info_t</name> *</type><name>ci</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"Commiting Rev. %ld at date \"%s\", by "
          "author \"%s\"\n"</expr></argument>, <argument><expr><name><name>ci</name>-&gt;<name>revision</name></name></expr></argument>, <argument><expr><name><name>ci</name>-&gt;<name>date</name></name></expr></argument>, <argument><expr><name><name>ci</name>-&gt;<name>author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>ci</name>-&gt;<name>post_commit_err</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"Post-commit Error: %s\n"</expr></argument>, <argument><expr><name><name>ci</name>-&gt;<name>post_commit_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Implements svn_ra_callbacks2_t.open_tmp_file */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_tmp_file</name> <parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>fp</name></decl></param>, <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>svn_io_temp_dir</name> <argument_list>(<argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"tempfile"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>svn_io_open_unique_file</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>".tmp"</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function_decl><type><name>svn_error_t</name> *</type>(*<name>old_change_file_prop</name>) <parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Implements svn_ra_callbacks2_t.change_file_prop */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>new_change_file_prop</name> <parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>svn_property_kind</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> != <name>svn_prop_regular_kind</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
  <else>else
    <return>return <expr><call><name>old_change_file_prop</name> <argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>


<function_decl><type><name>svn_error_t</name> *</type>(*<name>old_change_dir_prop</name>) <parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Implements svn_ra_callbacks2_t.change_dir_prop */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>new_change_dir_prop</name> <parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>svn_property_kind</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> != <name>svn_prop_regular_kind</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
  <else>else
    <return>return <expr><call><name>old_change_dir_prop</name> <argument_list>(<argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_job</name> <parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest_url</name></decl></param>, <param><decl><type><name>int</name></type> <name>start_rev</name></decl></param>, <param><decl><type><name>int</name></type> <name>end_rev</name></decl></param>,
        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_auth_baton_t</name> *</type><name>ab</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_callbacks2_t</name> *</type><name>callbacks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_src</name></decl>, *<decl><type ref="prev"/><name>ra_dest</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>my_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter2_t</name> *</type><name>reporter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>report_baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>svn_config_get_config</name> <argument_list>(<argument><expr>&amp;<name>config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cfg</name> = <call><name>apr_hash_get</name> <argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>svn_cmdline_setup_auth_baton</name> <argument_list>(<argument><expr>&amp;<name>ab</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                         <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>svn_ra_create_callbacks</name> <argument_list>(<argument><expr>&amp;<name>callbacks</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name>-&gt;<name>open_tmp_file</name></name> = <name>open_tmp_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name>-&gt;<name>auth_baton</name></name> = <name>ab</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>svn_ra_open2</name> <argument_list>(<argument><expr>&amp;<name>ra_dest</name></expr></argument>, <argument><expr><name>dest_url</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>svn_ra_open2</name> <argument_list>(<argument><expr>&amp;<name>ra_src</name></expr></argument>, <argument><expr><name>src_url</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>svn_ra_get_commit_editor2</name> <argument_list>(<argument><expr><name>ra_dest</name></expr></argument>, <argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>,
                                      <argument><expr>"Hello World!"</expr></argument>, <argument><expr><name>my_commit_callback</name></expr></argument>,
                                      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create a copy of the editor so we can hook some calls. */</comment>
  <expr_stmt><expr><name>my_editor</name> = <call><name>apr_palloc</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>*<name>my_editor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>my_editor</name> = *<name>editor</name></expr>;</expr_stmt>

  <comment type="block">/* Install the editor hooks. */</comment>
  <expr_stmt><expr><name>old_change_file_prop</name> = <name><name>editor</name>-&gt;<name>change_file_prop</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_editor</name>-&gt;<name>change_file_prop</name></name> = <name>new_change_file_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>old_change_dir_prop</name> = <name><name>editor</name>-&gt;<name>change_dir_prop</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>new_change_dir_prop</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>svn_ra_do_diff</name> <argument_list>(<argument><expr><name>ra_src</name></expr></argument>, <argument><expr>&amp;<name>reporter</name></expr></argument>, <argument><expr>&amp;<name>report_baton</name></expr></argument>,
                           <argument><expr><name>end_rev</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>src_url</name></expr></argument>,
                           <argument><expr><name>my_editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name> <argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>start_rev</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>finish_report</name></name> <argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Version compatibility check */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_lib_versions</name> <parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_version_checklist_t</name></type> <name><name>checklist</name><index>[]</index></name> <init>=
    <expr><block>{
      <expr><block>{ <expr>"svn_subr"</expr>,   <expr><name>svn_subr_version</name></expr> }</block></expr>,
      <expr><block>{ <expr>"svn_delta"</expr>,  <expr><name>svn_delta_version</name></expr> }</block></expr>,
      <expr><block>{ <expr>"svn_ra"</expr>,     <expr><name>svn_ra_version</name></expr> }</block></expr>,
      <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_VERSION_DEFINE</name> <argument_list>(<argument><expr><name>my_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_ver_check_list</name> <argument_list>(<argument><expr>&amp;<name>my_version</name></expr></argument>, <argument><expr><name>checklist</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> *</type><name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>start_rev</name></decl>, <decl><type ref="prev"/><name>end_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>src_url</name></decl>, *<decl><type ref="prev"/><name>dest_url</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>svn_cmdline_init</name> <argument_list>(<argument><expr>"svn-push"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call> != <name>EXIT_SUCCESS</name></expr>)</condition><then>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>argc</name> != 5 ||
      <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>"-r"</expr></argument>)</argument_list></call> != 0 ||
      <call><name>sscanf</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>"%i:%i"</expr></argument>, <argument><expr>&amp;<name>start_rev</name></expr></argument>, <argument><expr>&amp;<name>end_rev</name></expr></argument>)</argument_list></call> != 2</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr>"Usage : svn-push -r N:M SRC_URL DEST_URL\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>src_url</name> = <name><name>argv</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>dest_url</name> = <name><name>argv</name><index>[<expr>4</expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>pool</name> = <call><name>svn_pool_create</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check library versions */</comment>
  <expr_stmt><expr><name>error</name> = <call><name>check_lib_versions</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>error</name></expr>)</condition><then> <goto>goto <name>error</name>;</goto></then></if>

  <expr_stmt><expr><name>error</name> = <call><name>do_job</name> <argument_list>(<argument><expr><name>src_url</name></expr></argument>, <argument><expr><name>dest_url</name></expr></argument>, <argument><expr><name>start_rev</name></expr></argument>, <argument><expr><name>end_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>error</name></expr>)</condition><then> <goto>goto <name>error</name>;</goto></then></if>

  <expr_stmt><expr><call><name>svn_pool_destroy</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
  <expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"svn-push: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></function>
</unit>
