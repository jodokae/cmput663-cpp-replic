<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_local/ra_local.h"><comment type="block">/*
 * ra_local.h : shared internal declarations for ra_local module
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_RA_LOCAL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_RA_LOCAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/** Structures **/</comment>

<comment type="block">/* A baton which represents a single ra_local session. */</comment>
<typedef>typedef <type><struct>struct <name>svn_ra_local__session_baton_t</name>
<block>{
  <comment type="block">/* The user accessing the repository. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl>;</decl_stmt>

  <comment type="block">/* The URL of the session, split into two components. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>fs_path</name></decl>;</decl_stmt>  <comment type="block">/* URI-decoded, always with a leading slash. */</comment>

  <comment type="block">/* A repository object. */</comment>
  <decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>

  <comment type="block">/* The filesystem object associated with REPOS above (for
     convenience). */</comment>
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>

  <comment type="block">/* The UUID associated with REPOS above (cached) */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl>;</decl_stmt>

  <comment type="block">/* Callbacks/baton passed to svn_ra_open. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_callbacks2_t</name> *</type><name>callbacks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>callback_baton</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_local__session_baton_t</name>;</typedef>



<escape char="0xc"/>
<comment type="block">/** Private routines **/</comment>




<comment type="block">/* Given a `file://' URL, figure out which portion specifies a
   repository on local disk, and return that in REPOS_URL (if not
   NULL); URI-decode and return the remainder (the path *within* the
   repository's filesystem) in FS_PATH.  Open REPOS to the repository
   root (if not NULL).  Allocate the return values in POOL.
   Currently, we are not expecting to handle `file://hostname/'-type
   URLs; hostname, in this case, is expected to be the empty string or
   "localhost". */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_local__split_URL</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> **</type><name>repos</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>repos_url</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>fs_path</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>




<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_RA_LOCAL_H */</comment>
</unit>
