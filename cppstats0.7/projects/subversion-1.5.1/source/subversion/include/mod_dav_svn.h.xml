<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/mod_dav_svn.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file mod_dav_svn.h
 * @brief Subversion's backend for Apache's mod_dav module
 */</comment>

<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MOD_DAV_SVN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_DAV_SVN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_dav.h&gt;</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* Given an apache request R, a URI, and a ROOT_PATH to the svn
   location block, process URI and return many things, allocated in
   r-&gt;pool:

   * CLEANED_URI:     The uri with duplicate and trailing slashes removed.

   * TRAILING_SLASH:  Whether the uri had a trailing slash on it.

   Three special substrings of the uri are returned for convenience:

   * REPOS_NAME:      The single path component that is the directory
                      which contains the repository.

   * RELATIVE_PATH:   The remaining imaginary path components.

   * REPOS_PATH:      The actual path within the repository filesystem, or
                      NULL if no part of the uri refers to a path in
                      the repository (e.g. "!svn/vcc/default" or
                      "!svn/bln/25").


   For example, consider the uri

       /svn/repos/proj1/!svn/blah/13//A/B/alpha

   In the SVNPath case, this function would receive a ROOT_PATH of
   '/svn/repos/proj1', and in the SVNParentPath case would receive a
   ROOT_PATH of '/svn/repos'.  But either way, we would get back:

     * CLEANED_URI:    /svn/repos/proj1/!svn/blah/13/A/B/alpha
     * REPOS_NAME:     proj1
     * RELATIVE_PATH:  /!svn/blah/13/A/B/alpha
     * REPOS_PATH:     A/B/alpha
     * TRAILING_SLASH: FALSE
*/</comment>
<macro><name>AP_MODULE_DECLARE</name><argument_list>(<argument>dav_error *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_svn_split_uri</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
                                                 <argument><expr>const <name>char</name> *<name>uri</name></expr></argument>,
                                                 <argument><expr>const <name>char</name> *<name>root_path</name></expr></argument>,
                                                 <argument><expr>const <name>char</name> **<name>cleaned_uri</name></expr></argument>,
                                                 <argument><expr><name>int</name> *<name>trailing_slash</name></expr></argument>,
                                                 <argument><expr>const <name>char</name> **<name>repos_name</name></expr></argument>,
                                                 <argument><expr>const <name>char</name> **<name>relative_path</name></expr></argument>,
                                                 <argument><expr>const <name>char</name> **<name>repos_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/* Given an apache request R and a ROOT_PATH to the svn location
   block sets *REPOS_PATH to the path of the repository on disk.
*/</comment>
<macro><name>AP_MODULE_DECLARE</name><argument_list>(<argument>dav_error *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_svn_get_repos_path</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
                                                      <argument><expr>const <name>char</name> *<name>root_path</name></expr></argument>,
                                                      <argument><expr>const <name>char</name> **<name>repos_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MOD_DAV_SVN_H */</comment>
</unit>
