<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_version.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_version.h
 * @brief Version information.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_VERSION_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VERSION_H</name></cpp:macro></cpp:define>

<comment type="block">/* Hack to prevent the resource compiler from including
   apr_general.h.  It doesn't resolve the include paths
   correctly and blows up without this.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>APR_STRINGIFY</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* Symbols that define the version number. */</comment>

<comment type="block">/* Version numbers: &lt;major&gt;.&lt;minor&gt;.&lt;micro&gt;
 *
 * The version numbers in this file follow the rules established by:
 *
 *   http://apr.apache.org/versioning.html
 */</comment>

<comment type="block">/** Major version number.
 *
 * Modify when incompatible changes are made to published interfaces.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_MAJOR</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/** Minor version number.
 *
 * Modify when new functionality is added or new interfaces are
 * defined, but all changes are backward compatible.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_MINOR</name></cpp:macro>      <cpp:value>5</cpp:value></cpp:define>

<comment type="block">/**
 * Patch number.
 *
 * Modify for every released patch.
 *
 * @since New in 1.1.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_PATCH</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>


<comment type="block">/** @deprecated Provided for backward compatibility with the 1.0 API. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_MICRO</name></cpp:macro>      <cpp:value>SVN_VER_PATCH</cpp:value></cpp:define>

<comment type="block">/** @deprecated Provided for backward compatibility with the 1.0 API. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_LIBRARY</name></cpp:macro>    <cpp:value>SVN_VER_MAJOR</cpp:value></cpp:define>


<comment type="block">/** Version tag: a string describing the version.
 *
 * This tag remains " (dev build)" in the repository so that we can
 * always see from "svn --version" that the software has been built
 * from the repository rather than a "blessed" distribution.
 *
 * When rolling a tarball, we automatically replace this text with " (r1234)"
 * (where 1234 is the last revision on the branch prior to the release)
 * for final releases; in prereleases, it becomes " (Alpha 1)",
 * " (Beta 1)", etc., as appropriate.
 *
 * Always change this at the same time as SVN_VER_NUMTAG.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_TAG</name></cpp:macro>        <cpp:value>" (r32289)"</cpp:value></cpp:define>


<comment type="block">/** Number tag: a string describing the version.
 *
 * This tag is used to generate a version number string to identify
 * the client and server in HTTP requests, for example. It must not
 * contain any spaces. This value remains "-dev" in the repository.
 *
 * When rolling a tarball, we automatically replace this text with ""
 * for final releases; in prereleases, it becomes "-alpha1, "-beta1",
 * etc., as appropriate.
 *
 * Always change this at the same time as SVN_VER_TAG.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_NUMTAG</name></cpp:macro>     <cpp:value>""</cpp:value></cpp:define>


<comment type="block">/** Revision number: The repository revision number of this release.
 *
 * This constant is used to generate the build number part of the Windows
 * file version. Its value remains 0 in the repository.
 *
 * When rolling a tarball, we automatically replace it with what we
 * guess to be the correct revision number.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_REVISION</name></cpp:macro>   <cpp:value>32289</cpp:value></cpp:define>

<escape char="0xc"/>
<comment type="block">/* Version strings composed from the above definitions. */</comment>

<comment type="block">/** Version number */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_NUM</name></cpp:macro>        <cpp:value>APR_STRINGIFY(SVN_VER_MAJOR) \
                           "." APR_STRINGIFY(SVN_VER_MINOR) \
                           "." APR_STRINGIFY(SVN_VER_PATCH)</cpp:value></cpp:define>

<comment type="block">/** Version number with tag (contains no whitespace) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_NUMBER</name></cpp:macro>     <cpp:value>SVN_VER_NUM SVN_VER_NUMTAG</cpp:value></cpp:define>

<comment type="block">/** Complete version string */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VERSION</name></cpp:macro>        <cpp:value>SVN_VER_NUM SVN_VER_TAG</cpp:value></cpp:define>


<escape char="0xc"/>
<comment type="block">/* Version queries and compatibility checks */</comment>

<comment type="block">/**
 * Version information. Each library contains a function called
 * svn_&lt;i&gt;libname&lt;/i&gt;_version() that returns a pointer to a statically
 * allocated object of this type.
 *
 * @since New in 1.1.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_version_t</name>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>                    <comment type="block">/**&lt; Major version number */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>                    <comment type="block">/**&lt; Minor version number */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>patch</name></decl>;</decl_stmt>                    <comment type="block">/**&lt; Patch number */</comment>

  <comment type="block">/**
   * The version tag (#SVN_VER_NUMTAG).\ Must always point to a
   * statically allocated string.
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_version_t</name>;</typedef>

<comment type="block">/**
 * Define a static svn_version_t object.
 *
 * @since New in 1.1.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VERSION_DEFINE</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> \
  <cpp:value>static const svn_version_t name = \
    { \
      SVN_VER_MAJOR, \
      SVN_VER_MINOR, \
      SVN_VER_PATCH, \
      SVN_VER_NUMTAG \
    }</cpp:value></cpp:define> \

<comment type="block">/**
 * Generate the implementation of a version query function.
 *
 * @since New in 1.1.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VERSION_BODY</name></cpp:macro> \
  <cpp:value>SVN_VERSION_DEFINE(versioninfo);              \
  return &amp;versioninfo</cpp:value></cpp:define>

<comment type="block">/**
 * Check library version compatibility. Return #TRUE if the client's
 * version, given in @a my_version, is compatible with the library
 * version, provided in @a lib_version.
 *
 * This function checks for version compatibility as per our
 * guarantees, but requires an exact match when linking to an
 * unreleased library. A development client is always compatible with
 * a previous released library.
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_ver_compatible</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>my_version</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>lib_version</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Check if @a my_version and @a lib_version encode the same version number.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_ver_equal</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>my_version</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>lib_version</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * An entry in the compatibility checklist.
 * @see svn_ver_check_list()
 *
 * @since New in 1.1.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_version_checklist_t</name>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl>;</decl_stmt>            <comment type="block">/**&lt; Entry label */</comment>

  <comment type="block">/** Version query function for this entry */</comment>
  <function_decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type>(*<name>version_query</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>svn_version_checklist_t</name>;</typedef>


<comment type="block">/**
 * Perform a series of version compatibility checks. Checks if @a
 * my_version is compatible with each entry in @a checklist. @a
 * checklist must end with an entry whose label is @c NULL.
 *
 * @see svn_ver_compatible()
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_ver_check_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>my_version</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>svn_version_checklist_t</name> *</type><name>checklist</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* libsvn_subr doesn't have an svn_subr header, so put the prototype here. */</comment>
<comment type="block">/**
 * Get libsvn_subr version information.
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>svn_subr_version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_VERSION_H */</comment>
</unit>
