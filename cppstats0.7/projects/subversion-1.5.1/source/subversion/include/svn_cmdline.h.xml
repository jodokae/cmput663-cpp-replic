<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_cmdline.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_cmdline.h
 * @brief Support functions for command line programs
 */</comment>


<escape char="0xc"/>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_CMDLINE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CMDLINE_H</name></cpp:macro></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DOXYGEN_SHOULD_SKIP_THIS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_getopt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>


<comment type="block">/** Set up the locale for character conversion, and initialize APR.
 * If @a error_stream is non-NULL, print error messages to the stream,
 * using @a progname as the program name.  Attempt to set @c stdout to
 * line-buffered mode, and @a error_stream to unbuffered mode.  Return
 * @c EXIT_SUCCESS if successful, otherwise @c EXIT_FAILURE.
 *
 * @note This function should be called exactly once at program startup,
 *       before calling any other APR or Subversion functions.
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_cmdline_init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>progname</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>error_stream</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *dest to an output-encoded C string from UTF-8 C string @a
 * src; allocate @a *dest in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cmdline_cstring_from_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Like svn_utf_cstring_from_utf8_fuzzy(), but converts to an
 * output-encoded C string. */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_cmdline_cstring_from_utf8_fuzzy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Set @a *dest to a UTF-8-encoded C string from input-encoded C
 * string @a src; allocate @a *dest in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type> <name>svn_cmdline_cstring_to_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Set @a *dest to an output-encoded natively-formatted path string
 * from canonical path @a src; allocate @a *dest in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cmdline_path_local_style_from_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
                                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Write to stdout, using a printf-like format string @a fmt, passed
 * through apr_pvsprintf().  All string arguments are in UTF-8; the output
 * is converted to the output encoding.  Use @a pool for temporary
 * allocation.
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cmdline_printf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>,
                                <param><decl><type>...</type></decl></param>)</parameter_list>
       __attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>2, 3</function_decl>)</block></extern>))<empty_stmt>;</empty_stmt>

<comment type="block">/** Write to the stdio @a stream, using a printf-like format string @a fmt,
 * passed through apr_pvsprintf().  All string arguments are in UTF-8;
 * the output is converted to the output encoding.  Use @a pool for
 * temporary allocation.
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cmdline_fprintf</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>,
                                 <param><decl><type>...</type></decl></param>)</parameter_list>
       __attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>3, 4</function_decl>)))<empty_stmt>;</empty_stmt>

<comment type="block">/** Output the @a string to the stdio @a stream, converting from UTF-8
 * to the output encoding.  Use @a pool for temporary allocation.
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cmdline_fputs</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>,
                               <param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Flush output buffers of the stdio @a stream, returning an error if that
 * fails.  This is just a wrapper for the standard fflush() function for
 * consistent error handling.
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cmdline_fflush</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return the name of the output encoding allocated in @a pool, or @c
 * APR_LOCALE_CHARSET if the output encoding is the same as the locale
 * encoding.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_cmdline_output_encoding</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Handle @a error in preparation for immediate exit from a
 * command-line client.  Specifically:
 *
 * Call svn_handle_error2(@a error, stderr, FALSE, @a prefix), clear
 * @a error, destroy @a pool iff it is non-NULL, and return EXIT_FAILURE.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_cmdline_handle_exit_error</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** A cancellation function/baton pair to be passed as the baton argument
 * to the @c svn_cmdline_*_prompt functions.
 *
 * @since New in 1.4.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_cmdline_prompt_baton_t</name> <block>{
  <decl_stmt><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>cancel_baton</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_cmdline_prompt_baton_t</name>;</typedef>

<comment type="block">/** Prompt the user for input, using @a prompt_str for the prompt and
 * @a baton (which may be @c NULL) for cancellation, and returning the
 * user's response in @a result, allocated in @a pool.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_prompt_user2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>result</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prompt_str</name></decl></param>,
                         <param><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>baton</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Similar to svn_cmdline_prompt_user2, but without cancellation
 * support.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_prompt_user</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>result</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prompt_str</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** An implementation of @c svn_auth_simple_prompt_func_t that prompts
 * the user for keyboard input on the command line.
 *
 * @since New in 1.4.
 *
 * Expects a @c svn_cmdline_prompt_baton_t to be passed as @a baton.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_auth_simple_prompt</name><parameter_list>(<param><decl><type><name>svn_auth_cred_simple_t</name> **</type><name>cred_p</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** An implementation of @c svn_auth_username_prompt_func_t that prompts
 * the user for their username via the command line.
 *
 * @since New in 1.4.
 *
 * Expects a @c svn_cmdline_prompt_baton_t to be passed as @a baton.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_auth_username_prompt</name><parameter_list>(<param><decl><type><name>svn_auth_cred_username_t</name> **</type><name>cred_p</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** An implementation of @c svn_auth_ssl_server_trust_prompt_func_t that
 * asks the user if they trust a specific ssl server via the command line.
 *
 * @since New in 1.4.
 *
 * Expects a @c svn_cmdline_prompt_baton_t to be passed as @a baton.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_auth_ssl_server_trust_prompt</name>
  <parameter_list>(<param><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> **</type><name>cred_p</name></decl></param>,
   <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
   <param><decl><type><name>apr_uint32_t</name></type> <name>failures</name></decl></param>,
   <param><decl><type><specifier>const</specifier> <name>svn_auth_ssl_server_cert_info_t</name> *</type><name>cert_info</name></decl></param>,
   <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** An implementation of @c svn_auth_ssl_client_cert_prompt_func_t that
 * prompts the user for the filename of their SSL client certificate via
 * the command line.
 *
 * @since New in 1.4.
 *
 * Expects a @c svn_cmdline_prompt_baton_t to be passed as @a baton.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_auth_ssl_client_cert_prompt</name>
  <parameter_list>(<param><decl><type><name>svn_auth_cred_ssl_client_cert_t</name> **</type><name>cred_p</name></decl></param>,
   <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
   <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** An implementation of @c svn_auth_ssl_client_cert_pw_prompt_func_t that
 * prompts the user for their SSL certificate password via the command line.
 *
 * @since New in 1.4.
 *
 * Expects a @c svn_cmdline_prompt_baton_t to be passed as @a baton.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_auth_ssl_client_cert_pw_prompt</name>
  <parameter_list>(<param><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> **</type><name>cred_p</name></decl></param>,
   <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
   <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Initialize auth baton @a ab with the standard set of authentication
 * providers used by the command line client.  @a non_interactive,
 * @a username, @a password, @a config_dir, and @a no_auth_cache are the
 * values of the command line options of the same names.  @a cfg is the
 * @c SVN_CONFIG_CATEGORY_CONFIG configuration, and @a cancel_func and
 * @a cancel_baton control the cancellation of the prompting providers
 * that are initialized.  @a pool is used for all allocations.
 *
 * @since New in 1.4.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_setup_auth_baton</name><parameter_list>(<param><decl><type><name>svn_auth_baton_t</name> **</type><name>ab</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>no_auth_cache</name></decl></param>,
                             <param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
                             <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Wrapper for apr_getopt_init(), which see.
 *
 * @since New in 1.4.
 *
 * On OS400 V5R4, prior to calling apr_getopt_init(), converts each of the
 * @a argc strings in @a argv[] in place from EBCDIC to UTF-8, allocating
 * each new UTF-8 string in @a pool.
 *
 * This is a private API for Subversion's own use.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cmdline__getopt_init</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> **</type><name>os</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>argv</name><index>[]</index></name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_CMDLINE_H */</comment>
</unit>
