<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/private/svn_atomic.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_atomic.h
 * @brief Macros and functions for atomic operations
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_ATOMIC_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ATOMIC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_version.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_atomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dep_compat.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<comment type="block">/**
 * @name Macro definitions for atomic types and operations
 *
 * @note These are necessary because the apr_atomic API changed somewhat
 *       between apr-0.x and apr-1.x.
 * @{
 */</comment>

<comment type="block">/** The type used by all the other atomic operations. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>APR_VERSION_AT_LEAST</name><argument_list>(<argument><expr>1, 0, 0</expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_atomic_t</name></cpp:macro> <cpp:value>apr_uint32_t</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_atomic_t</name></cpp:macro> <cpp:value>apr_atomic_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/** Atomically read an #svn_atomic_t from memory. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>APR_VERSION_AT_LEAST</name><argument_list>(<argument><expr>1, 0, 0</expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_atomic_read</name><parameter_list>(<param><type><name>mem</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_atomic_read32((mem))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_atomic_read</name><parameter_list>(<param><type><name>mem</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_atomic_read((mem))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/** Atomically set an #svn_atomic_t in memory. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>APR_VERSION_AT_LEAST</name><argument_list>(<argument><expr>1, 0, 0</expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_atomic_set</name><parameter_list>(<param><type><name>mem</name></type></param>, <param><type><name>val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_atomic_set32((mem), (val))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_atomic_set</name><parameter_list>(<param><type><name>mem</name></type></param>, <param><type><name>val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_atomic_set((mem), (val))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/** Atomically increment an #svn_atomic_t. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>APR_VERSION_AT_LEAST</name><argument_list>(<argument><expr>1, 0, 0</expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_atomic_inc</name><parameter_list>(<param><type><name>mem</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_atomic_inc32(mem)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_atomic_inc</name><parameter_list>(<param><type><name>mem</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_atomic_inc(mem)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/** Atomically decrement an #svn_atomic_t. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>APR_VERSION_AT_LEAST</name><argument_list>(<argument><expr>1, 0, 0</expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_atomic_dec</name><parameter_list>(<param><type><name>mem</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_atomic_dec32(mem)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_atomic_dec</name><parameter_list>(<param><type><name>mem</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_atomic_dec(mem)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * Atomic compare-and-swap.
 *
 * Compare the value that @a mem points to with @a cmp. If they are
 * the same swap the value with @a with.
 *
 * @note svn_atomic_cas should not be combined with the other
 *       svn_atomic operations.  A comment in apr_atomic.h explains
 *       that on some platforms, the CAS function is implemented in a
 *       way that is incompatible with the other atomic operations.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>APR_VERSION_AT_LEAST</name><argument_list>(<argument><expr>1, 0, 0</expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_atomic_cas</name><parameter_list>(<param><type><name>mem</name></type></param>, <param><type><name>with</name></type></param>, <param><type><name>cmp</name></type></param>)</parameter_list></cpp:macro> \
    <cpp:value>apr_atomic_cas32((mem), (with), (cmp))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_atomic_cas</name><parameter_list>(<param><type><name>mem</name></type></param>, <param><type><name>with</name></type></param>, <param><type><name>cmp</name></type></param>)</parameter_list></cpp:macro> \
    <cpp:value>apr_atomic_cas((mem), (with), (cmp))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/** @} */</comment>

<comment type="block">/**
 * Call an initialization function in a thread-safe manner.
 *
 * @a global_status must be a pointer to a global, zero-initialized
 * #svn_atomic_t. @a init_func is a pointer to the function that performs
 * the actual initialization, and @a pool is passed on to the init_func
 * for its use.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_atomic__init_once</name><parameter_list>(<param><decl><type><specifier>volatile</specifier> <name>svn_atomic_t</name> *</type><name>global_status</name></decl></param>,
                      <param><function_decl><type><name>svn_error_t</name> *</type>(*<name>init_func</name>)<parameter_list>(<param><decl><type><name>apr_pool_t</name>*</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>apr_pool_t</name>*</type> <name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_ATOMIC_H */</comment>
</unit>
