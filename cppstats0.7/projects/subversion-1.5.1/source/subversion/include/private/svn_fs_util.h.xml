<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/private/svn_fs_util.h"><comment type="block">/*
 * svn_fs_util.h: Declarations for the APIs of libsvn_fs_util to be
 * consumed by only fs_* libs.
 *
 * ====================================================================
 * Copyright (c) 2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_FS_UTIL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS_UTIL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<comment type="block">/* Return a canonicalized version of a filesystem PATH, allocated in
   POOL.  While the filesystem API is pretty flexible about the
   incoming paths (they must be UTF-8 with '/' as separators, but they
   don't have to begin with '/', and multiple contiguous '/'s are
   ignored) we want any paths that are physically stored in the
   underlying database to look consistent.  Specifically, absolute
   filesystem paths should begin with '/', and all redundant and trailing '/'
   characters be removed.  */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_fs__canonicalize_abspath</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* If EXPECT_OPEN, verify that FS refers to an open database;
   otherwise, verify that FS refers to an unopened database.  Return
   an appropriate error if the expecation fails to match the
   reality.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs__check_fs</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>expect_open</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Constructing nice error messages for roots.  */</comment>

<comment type="block">/* Build an SVN_ERR_FS_NOT_FOUND error, with a detailed error text,
   for PATH in ROOT. ROOT is of type svn_fs_root_t *. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__NOT_FOUND</name><parameter_list>(<param><type><name>root</name></type></param>, <param><type><name>path</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(                        \
  root-&gt;is_txn_root ?                                          \
    svn_error_createf                                          \
      (SVN_ERR_FS_NOT_FOUND, 0,                                \
       _("File not found: transaction '%s', path '%s'"),       \
       root-&gt;txn, path)                                        \
  :                                                            \
    svn_error_createf                                          \
      (SVN_ERR_FS_NOT_FOUND, 0,                                \
       _("File not found: revision %ld, path '%s'"),           \
       root-&gt;rev, path)                                        \
  )</cpp:value></cpp:define>


<comment type="block">/* Build a detailed `file already exists' message for PATH in ROOT.
   ROOT is of type svn_fs_root_t *. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__ALREADY_EXISTS</name><parameter_list>(<param><type><name>root</name></type></param>, <param><type><name>path_str</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(                               \
  root-&gt;is_txn_root ?                                                          \
    svn_error_createf                                                          \
      (SVN_ERR_FS_ALREADY_EXISTS, 0,                                           \
       _("File already exists: filesystem '%s', transaction '%s', path '%s'"), \
       root-&gt;fs-&gt;path, root-&gt;txn, path_str)                                    \
  :                                                                            \
    svn_error_createf                                                          \
      (SVN_ERR_FS_ALREADY_EXISTS, 0,                                           \
       _("File already exists: filesystem '%s', revision %ld, path '%s'"),     \
       root-&gt;fs-&gt;path, root-&gt;rev, path_str)                                    \
  )</cpp:value></cpp:define>

<comment type="block">/* ROOT is of type svn_fs_root_t *. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__NOT_TXN</name><parameter_list>(<param><type><name>root</name></type></param>)</parameter_list></cpp:macro>                         \
  <cpp:value>svn_error_create                                    \
    (SVN_ERR_FS_NOT_TXN_ROOT, NULL,                   \
     _("Root object must be a transaction root"))</cpp:value></cpp:define>

<comment type="block">/* SVN_FS__ERR_NOT_MUTABLE: the caller attempted to change a node
   outside of a transaction. FS is of type "svn_fs_t *". */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__ERR_NOT_MUTABLE</name><parameter_list>(<param><type><name>fs</name></type></param>, <param><type><name>rev</name></type></param>, <param><type><name>path_in_repo</name></type></param>)</parameter_list></cpp:macro>                   \
  <cpp:value>svn_error_createf                                                      \
    (SVN_ERR_FS_NOT_MUTABLE, 0,                                          \
     _("File is not mutable: filesystem '%s', revision %ld, path '%s'"), \
     fs-&gt;path, rev, path_in_repo)</cpp:value></cpp:define>

<comment type="block">/* FS is of type "svn fs_t *".*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__ERR_NOT_DIRECTORY</name><parameter_list>(<param><type><name>fs</name></type></param>, <param><type><name>path_in_repo</name></type></param>)</parameter_list></cpp:macro>    \
  <cpp:value>svn_error_createf                                    \
    (SVN_ERR_FS_NOT_DIRECTORY, 0,                      \
     _("'%s' is not a directory in filesystem '%s'"),  \
     path_in_repo, fs-&gt;path)</cpp:value></cpp:define>

<comment type="block">/* FS is of type "svn fs_t *".   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__ERR_NOT_FILE</name><parameter_list>(<param><type><name>fs</name></type></param>, <param><type><name>path_in_repo</name></type></param>)</parameter_list></cpp:macro>         \
  <cpp:value>svn_error_createf                                    \
    (SVN_ERR_FS_NOT_FILE, 0,                           \
     _("'%s' is not a file in filesystem '%s'"),       \
     path_in_repo, fs-&gt;path)</cpp:value></cpp:define>

<comment type="block">/* FS is of type "svn fs_t *", LOCK is of type "svn_lock_t *".   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__ERR_PATH_ALREADY_LOCKED</name><parameter_list>(<param><type><name>fs</name></type></param>, <param><type><name>lock</name></type></param>)</parameter_list></cpp:macro>                      \
  <cpp:value>svn_error_createf                                                    \
    (SVN_ERR_FS_PATH_ALREADY_LOCKED, 0,                                \
     _("Path '%s' is already locked by user '%s' in filesystem '%s'"), \
     lock-&gt;path, lock-&gt;owner, fs-&gt;path)</cpp:value></cpp:define>

<comment type="block">/* FS is of type "svn fs_t *". */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__ERR_NO_SUCH_LOCK</name><parameter_list>(<param><type><name>fs</name></type></param>, <param><type><name>path_in_repo</name></type></param>)</parameter_list></cpp:macro>     \
  <cpp:value>svn_error_createf                                    \
    (SVN_ERR_FS_NO_SUCH_LOCK, 0,                       \
     _("No lock on path '%s' in filesystem '%s'"),     \
     path_in_repo, fs-&gt;path)</cpp:value></cpp:define>

<comment type="block">/* FS is of type "svn fs_t *". */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__ERR_LOCK_EXPIRED</name><parameter_list>(<param><type><name>fs</name></type></param>, <param><type><name>token</name></type></param>)</parameter_list></cpp:macro>                      \
  <cpp:value>svn_error_createf                                              \
    (SVN_ERR_FS_LOCK_EXPIRED, 0,                                 \
     _("Lock has expired:  lock-token '%s' in filesystem '%s'"), \
     token, fs-&gt;path)</cpp:value></cpp:define>

<comment type="block">/* FS is of type "svn fs_t *". */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__ERR_NO_USER</name><parameter_list>(<param><type><name>fs</name></type></param>)</parameter_list></cpp:macro>                                     \
  <cpp:value>svn_error_createf                                                 \
    (SVN_ERR_FS_NO_USER, 0,                                         \
     _("No username is currently associated with filesystem '%s'"), \
     fs-&gt;path)</cpp:value></cpp:define>

<comment type="block">/* SVN_FS__ERR_LOCK_OWNER_MISMATCH: trying to use a lock whose
   LOCK_OWNER doesn't match the USERNAME associated with FS.
   FS is of type "svn fs_t *". */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__ERR_LOCK_OWNER_MISMATCH</name><parameter_list>(<param><type><name>fs</name></type></param>, <param><type><name>username</name></type></param>, <param><type><name>lock_owner</name></type></param>)</parameter_list></cpp:macro>  \
  <cpp:value>svn_error_createf                                                \
    (SVN_ERR_FS_LOCK_OWNER_MISMATCH, 0,                            \
     _("User '%s' is trying to use a lock owned by '%s' in "       \
       "filesystem '%s'"),                                         \
     username, lock_owner, fs-&gt;path)</cpp:value></cpp:define>

<comment type="block">/* Return a NULL-terminated copy of the first component of PATH,
   allocated in POOL.  If path is empty, or consists entirely of
   slashes, return the empty string.

   If the component is followed by one or more slashes, we set *NEXT_P
   to point after the slashes.  If the component ends PATH, we set
   *NEXT_P to zero.  This means:
   - If *NEXT_P is zero, then the component ends the PATH, and there
     are no trailing slashes in the path.
   - If *NEXT_P points at PATH's terminating NULL character, then
     the component returned was the last, and PATH ends with one or more
     slash characters.
   - Otherwise, *NEXT_P points to the beginning of the next component
     of PATH.  You can pass this value to next_entry_name to extract
     the next component. */</comment>
<function_decl><type><name>char</name> *</type>
<name>svn_fs__next_entry_name</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>next_p</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_FS_UTIL_H */</comment>
</unit>
