<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/private/ra_svn_sasl.h"><comment type="block">/*
 * ra_svn_sasl.h :  SASL-related declarations shared between the
 * ra_svn and svnserve module
 *
 * ====================================================================
 * Copyright (c) 2006-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>



<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RA_SVN_SASL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA_SVN_SASL_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<comment type="block">/* This prevents sasl.h from redefining iovec, which is always defined by APR
   on win32. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRUCT_IOVEC_DEFINED</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sasl.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sasl/sasl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<comment type="block">/** The application and service name used for sasl_client_new,
 * sasl_server_init, and sasl_server_new. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RA_SVN_SASL_NAME</name></cpp:macro> <cpp:value>"svn"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>svn_atomic_t</name></type> <name>svn_ra_svn__sasl_status</name></decl>;</decl_stmt>

<comment type="block">/* Initialize secprops with default values. */</comment>
<function_decl><type><name>void</name></type> <name>svn_ra_svn__default_secprops</name><parameter_list>(<param><decl><type><name>sasl_security_properties_t</name> *</type><name>secprops</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* This function is called by the client and the server before
   calling sasl_{client, server}_init, pool is used for allocations. */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>svn_ra_svn__sasl_common_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Sets local_addrport and remote_addrport to a string containing the
   remote and local IP address and port, formatted like this: a.b.c.d;port. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_ra_svn__get_addresses</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>local_addrport</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>remote_addrport</name></decl></param>,
                                       <param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* If a security layer was negotiated during the authentication exchange,
   create an encrypted stream for conn. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_ra_svn__enable_sasl_encryption</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                                <param><decl><type><name>sasl_conn_t</name> *</type><name>sasl_ctx</name></decl></param>,
                                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* RA_SVN_SASL_H */</comment>
</unit>
