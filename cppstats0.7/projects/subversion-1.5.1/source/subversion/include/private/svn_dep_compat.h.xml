<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/private/svn_dep_compat.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_compat.h
 * @brief Compatibility macros and functions.
 * @since New in 1.5.0.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_DEP_COMPAT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DEP_COMPAT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_version.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<comment type="block">/**
 * Check at compile time if the APR version is at least a certain
 * level.
 * @param major The major version component of the version checked
 * for (e.g., the "1" of "1.3.0").
 * @param minor The minor version component of the version checked
 * for (e.g., the "3" of "1.3.0").
 * @param patch The patch level component of the version checked
 * for (e.g., the "0" of "1.3.0").
 *
 * @since New in 1.5.0
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>APR_VERSION_AT_LEAST</name></cpp:ifndef> <comment type="block">/* Introduced in APR 1.3.0 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_VERSION_AT_LEAST</name><parameter_list>(<param><type><name>major</name></type></param>,<param><type><name>minor</name></type></param>,<param><type><name>patch</name></type></param>)</parameter_list></cpp:macro>                  \
<cpp:value>(((major) &lt; APR_MAJOR_VERSION)                                       \
 || ((major) == APR_MAJOR_VERSION &amp;&amp; (minor) &lt; APR_MINOR_VERSION)    \
 || ((major) == APR_MAJOR_VERSION &amp;&amp; (minor) == APR_MINOR_VERSION &amp;&amp; \
     (patch) &lt;= APR_PATCH_VERSION))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* APR_VERSION_AT_LEAST */</comment>

<comment type="block">/**
 * Check at compile time if the Serf version is at least a certain
 * level.
 * @param major The major version component of the version checked
 * for (e.g., the "1" of "1.3.0").
 * @param minor The minor version component of the version checked
 * for (e.g., the "3" of "1.3.0").
 * @param patch The patch level component of the version checked
 * for (e.g., the "0" of "1.3.0").
 *
 * @since New in 1.5.0
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SERF_VERSION_AT_LEAST</name></cpp:ifndef> <comment type="block">/* Introduced in Serf 0.1.1 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERF_VERSION_AT_LEAST</name><parameter_list>(<param><type><name>major</name></type></param>,<param><type><name>minor</name></type></param>,<param><type><name>patch</name></type></param>)</parameter_list></cpp:macro>                       \
<cpp:value>(((major) &lt; SERF_MAJOR_VERSION)                                        \
 || ((major) == SERF_MAJOR_VERSION &amp;&amp; (minor) &lt; SERF_MINOR_VERSION)    \
 || ((major) == SERF_MAJOR_VERSION &amp;&amp; (minor) == SERF_MINOR_VERSION &amp;&amp; \
     (patch) &lt;= SERF_PATCH_VERSION))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SERF_VERSION_AT_LEAST */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_DEP_COMPAT_H */</comment>
</unit>
