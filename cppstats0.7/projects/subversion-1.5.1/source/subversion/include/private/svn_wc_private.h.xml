<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/private/svn_wc_private.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_wc_private.h
 * @brief The Subversion Working Copy Library - Internal routines
 *
 * Requires:
 *            - A working copy
 *
 * Provides:
 *            - Ability to manipulate working copy's versioned data.
 *            - Ability to manipulate working copy's administrative files.
 *
 * Used By:
 *            - Clients.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_WC_PRIVATE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC_PRIVATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<comment type="block">/** Internal function used by the svn_wc_entry_versioned() macro.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__entry_versioned_internal</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> **</type><name>entry</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>caller_filename</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>caller_lineno</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Same as svn_wc_entry() except that the entry returned
 * is a non @c NULL entry.
 *
 * Returns an error when svn_wc_entry() would have returned a @c NULL entry.
 *
 * @since New in 1.5.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_DEBUG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_wc__entry_versioned</name><parameter_list>(<param><type><name>entry</name></type></param>, <param><type><name>path</name></type></param>, <param><type><name>adm_access</name></type></param>, <param><type><name>show_hidden</name></type></param>, <param><type><name>pool</name></type></param>)</parameter_list></cpp:macro> \
  <cpp:value>svn_wc__entry_versioned_internal((entry), (path), (adm_access), \
                                   (show_hidden), __FILE__, __LINE__, (pool))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_wc__entry_versioned</name><parameter_list>(<param><type><name>entry</name></type></param>, <param><type><name>path</name></type></param>, <param><type><name>adm_access</name></type></param>, <param><type><name>show_hidden</name></type></param>, <param><type><name>pool</name></type></param>)</parameter_list></cpp:macro> \
  <cpp:value>svn_wc__entry_versioned_internal((entry), (path), (adm_access), \
                                   (show_hidden), NULL, 0, (pool))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/** If @a path's properties are modified with regard to the base revision set
 * @a *which_props to a hashtable
 * (&lt;tt&gt;const char *name&lt;/tt&gt; -&gt; &lt;tt&gt;const svn_string_t *value&lt;/tt&gt;)
 * that contains only the modified properties or an empty hash if there are
 * no modifications.  @a adm_access must be an access baton for @a path.
 * @a *which_props is allocated in @a pool.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__props_modified</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                    <param><decl><type><name>apr_hash_t</name> **</type><name>which_props</name></decl></param>,
                                    <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Given a @a wcpath with its accompanying @a entry, set @a *switched to
 * true if @a wcpath is switched, otherwise set @a *switched to false.
 * If @a entry is an incomplete entry obtained from @a wcpath's parent return
 * @c SVN_ERR_ENTRY_MISSING_URL.  All allocations are done in @a pool.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__path_switched</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name> *</type><name>switched</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Return the shallowest sufficient @c levels_to_lock value for @a depth;
 * see the @a levels_to_lock parameter of svn_wc_adm_open3() and
 * similar functions for more information.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LEVELS_TO_LOCK_FROM_DEPTH</name><parameter_list>(<param><type><name>depth</name></type></param>)</parameter_list></cpp:macro>              \
  <cpp:value>(((depth) == svn_depth_empty || (depth) == svn_depth_files) \
   ? 0 : (((depth) == svn_depth_immediates) ? 1 : -1))</cpp:value></cpp:define>


<comment type="block">/* Return TRUE iff CLHASH (a hash whose keys are const char *
   changelist names) is NULL or if ENTRY-&gt;changelist (which may be
   NULL) is a key in CLHASH.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__CL_MATCH</name><parameter_list>(<param><type><name>clhash</name></type></param>, <param><type><name>entry</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>(((clhash == NULL) \
          || (entry \
              &amp;&amp; entry-&gt;changelist \
              &amp;&amp; apr_hash_get(clhash, entry-&gt;changelist, \
                              APR_HASH_KEY_STRING))) ? TRUE : FALSE)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_WC_PRIVATE_H */</comment>
</unit>
