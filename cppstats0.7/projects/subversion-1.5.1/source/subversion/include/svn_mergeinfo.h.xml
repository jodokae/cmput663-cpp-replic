<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_mergeinfo.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2006-2008 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_mergeinfo.h
 * @brief mergeinfo handling and processing
 */</comment>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_MERGEINFO_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_MERGEINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>         <comment type="block">/* for apr_array_header_t */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<comment type="block">/** Overview of the @c SVN_PROP_MERGEINFO property.
 *
 * Merge history is stored in the @c SVN_PROP_MERGEINFO property of files
 * and directories.  The @c SVN_PROP_MERGEINFO property on a path stores the
 * complete list of changes merged to that path, either directly or via the
 * path's parent, grand-parent, etc..  A path may have empty mergeinfo which
 * means that nothing has been merged to that path or all previous merges
 * to the path were reversed.  Note that a path may have no mergeinfo, this
 * is not the same as empty mergeinfo.
 *
 * Every path in a tree may have @c SVN_PROP_MERGEINFO set, but if the
 * @c SVN_PROP_MERGEINFO for a path is equivalent to the
 * @c SVN_PROP_MERGEINFO for its parent, then the @c SVN_PROP_MERGEINFO on
 * the path will 'elide' (be removed) from the path as a post step to any
 * merge.  If a path's parent does not have any @c SVN_PROP_MERGEINFO set,
 * the path's mergeinfo can elide to its nearest grand-parent,
 * great-grand-parent, etc. that has equivalent @c SVN_PROP_MERGEINFO set
 * on it.  
 *
 * If a path has no @c SVN_PROP_MERGEINFO of its own, it inherits mergeinfo
 * from its nearest parent that has @c SVN_PROP_MERGEINFO set.  The
 * exception to this is @c SVN_PROP_MERGEINFO with non-ineritable revision
 * ranges.  These non-inheritable ranges apply only to the path which they
 * are set on.
 *
 * Due to Subversion's allowance for mixed revision working copies, both
 * elision and inheritance within the working copy presume the path
 * between a path and its nearest parent with mergeinfo is at the same
 * working revision.  If this is not the case then neither inheritance nor
 * elision can occur.
 *
 * The value of the @c SVN_PROP_MERGEINFO property is either an empty string
 * (representing empty mergeinfo) or a non-empty string consisting of
 * a path, a colon, and comma separated revision list, containing one or more
 * revision or revision ranges. Revision range start and end points are
 * separated by "-".  Revisions and revision ranges may have the optional
 * @c SVN_MERGEINFO_NONINHERITABLE_STR suffix to signify a non-inheritable
 * revision/revision range.
 *
 * @c SVN_PROP_MERGEINFO Value Grammar:
 *
 *   Token             Definition
 *   -----             ----------
 *   revisionrange     REVISION1 "-" REVISION2
 *   revisioneelement  (revisionrange | REVISION)"*"?
 *   rangelist         revisioneelement (COMMA revisioneelement)*
 *   revisionline      PATHNAME COLON rangelist
 *   top               "" | (revisionline (NEWLINE revisionline))*
 *
 * The PATHNAME is the source of a merge and the rangelist the revision(s)
 * merged to the path @c SVN_PROP_MERGEINFO is set on directly or indirectly
 * via inheritance.  PATHNAME must always exist at the specified rangelist
 * and thus a single merge may result in multiple revisionlines if the source
 * was renamed.
 *
 * Rangelists must be sorted from lowest to highest revision and cannot
 * contain overlapping revisionlistelements.  REVISION1 must be less than
 * REVISION2.  Consecutive single revisions that can be represented by a
 * revisionrange are allowed however (e.g. '5,6,7,8,9-12' or '5-12' are
 * both acceptable).
 */</comment>

<comment type="block">/* Suffix for SVN_PROP_MERGEINFO revision ranges indicating a given
   range is non-inheritable. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_MERGEINFO_NONINHERITABLE_STR</name></cpp:macro> <cpp:value>"*"</cpp:value></cpp:define>

<comment type="block">/** Terminology for data structures that contain mergeinfo.
 *
 * Subversion commonly uses several data structures to represent
 * mergeinfo in RAM:
 *
 * (a) Strings (@c svn_string_t *) containing "unparsed mergeinfo".
 *
 * (b) Hashes mapping merge source paths (@c const char *, starting
 *     with slashes) to non-empty arrays (@c apr_array_header_t *) of
 *     merge ranges (@c svn_merge_range_t *), ordered from smallest
 *     revision range to largest.  These hashes are called "mergeinfo"
 *     and are represented by @c svn_mergeinfo_t.  The sorted arrays
 *     are called "rangelists".  A @c NULL hash is used to represent
 *     no mergeinfo and an empty hash is used to represent empty
 *     mergeinfo.
 *
 * (c) Hashes mapping paths (@c const char *, starting with slashes)
 *     to @c svn_mergeinfo_t.  These hashes are called "mergeinfo
 *     catalogs" and are represented by @c svn_mergeinfo_catalog_t.
 *
 * Both @c svn_mergeinfo_t and @c svn_mergeinfo_catalog_t are just
 * typedefs for @c apr_hash_t *; there is no static type-checking, and
 * you still use standard @c apr_hash_t functions to interact with
 * them.
 *
 * Note that while the keys of mergeinfos are always relative to the
 * repository root, the keys of a catalog may be relative to something
 * else, such as an RA session root.
 */</comment>

<typedef>typedef <type><name>apr_hash_t</name> *</type><name>svn_mergeinfo_t</name>;</typedef>
<typedef>typedef <type><name>apr_hash_t</name> *</type><name>svn_mergeinfo_catalog_t</name>;</typedef>

<comment type="block">/** Parse the mergeinfo from @a input into @a *mergeinfo.  If no
 * mergeinfo is available, return an empty mergeinfo (never @c NULL).
 * Perform temporary allocations in @a pool.
 *
 * If @a input is not a grammatically correct @c SVN_PROP_MERGEINFO
 * property, contains overlapping or unordered revision ranges, or revision
 * ranges with a start revision greater than or equal to its end revision,
 * or contains paths mapped to empty revision ranges, then return
 * @c SVN_ERR_MERGEINFO_PARSE_ERROR.
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_mergeinfo_parse</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>mergeinfo</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Calculate the delta between two mergeinfos, @a mergefrom and @a mergeto
 * (which may be @c NULL), and place the result in @a *deleted and @a
 * *added (neither output argument may be @c NULL).
 *
 * @a consider_inheritance determines how the rangelists in the two
 * hashes are compared for equality.  If @a consider_inheritance is FALSE,
 * then the start and end revisions of the @c svn_merge_range_t's being
 * compared are the only factors considered when determining equality.
 * 
 *  e.g. '/trunk: 1,3-4*,5' == '/trunk: 1,3-5'
 *
 * If @a consider_inheritance is TRUE, then the inheritability of the
 * @c svn_merge_range_t's is also considered and must be the same for two
 * otherwise identical ranges to be judged equal.
 *
 *  e.g. '/trunk: 1,3-4*,5' != '/trunk: 1,3-5'
 *       '/trunk: 1,3-4*,5' == '/trunk: 1,3-4*,5'
 *       '/trunk: 1,3-4,5'  == '/trunk: 1,3-4,5'
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_mergeinfo_diff</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>deleted</name></decl></param>, <param><decl><type><name>svn_mergeinfo_t</name> *</type><name>added</name></decl></param>,
                   <param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergefrom</name></decl></param>, <param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeto</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>consider_inheritance</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Merge one mergeinfo, @a changes, into another mergeinfo @a
 * mergeinfo.
 *
 * When intersecting rangelists for a path are merged, the inheritability of
 * the resulting svn_merge_range_t depends on the inheritability of the
 * operands.  If two non-inheritable ranges are merged the result is always
 * non-inheritable, in all other cases the resulting range is inheritable.
 *
 *  e.g. '/A: 1,3-4'  merged with '/A: 1,3,4*,5' --&gt; '/A: 1,3-5'
 *       '/A: 1,3-4*' merged with '/A: 1,3,4*,5' --&gt; '/A: 1,3,4*,5'
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_mergeinfo_merge</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl></param>, <param><decl><type><name>svn_mergeinfo_t</name></type> <name>changes</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Removes @a eraser (the subtrahend) from @a whiteboard (the
 * minuend), and places the resulting difference in @a *mergeinfo.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_mergeinfo_remove</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>mergeinfo</name></decl></param>, <param><decl><type><name>svn_mergeinfo_t</name></type> <name>eraser</name></decl></param>,
                     <param><decl><type><name>svn_mergeinfo_t</name></type> <name>whiteboard</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Calculate the delta between two rangelists consisting of @c
 * svn_merge_range_t * elements (sorted in ascending order), @a from
 * and @a to, and place the result in @a deleted and @a added (neither
 * output argument will ever be @c NULL).
 *
 * @a consider_inheritance determines how to account for the inheritability
 * of the two rangelist's ranges when calculating the diff,
 * @see svn_mergeinfo_diff().
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_rangelist_diff</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>deleted</name></decl></param>, <param><decl><type><name>apr_array_header_t</name> **</type><name>added</name></decl></param>,
                   <param><decl><type><name>apr_array_header_t</name> *</type><name>from</name></decl></param>, <param><decl><type><name>apr_array_header_t</name> *</type><name>to</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>consider_inheritance</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Merge two rangelists consisting of @c svn_merge_range_t *
 * elements, @a *rangelist and @a changes, placing the results in
 * @a *rangelist.  Either rangelist may be empty.
 *
 * When intersecting rangelists are merged, the inheritability of
 * the resulting svn_merge_range_t depends on the inheritability of the
 * operands, @see svn_mergeinfo_merge().
 *
 * Note: @a *rangelist and @a changes must be sorted as said by @c
 * svn_sort_compare_ranges().  @a *rangelist is guaranteed to remain
 * in sorted order and be compacted to the minimal number of ranges
 * needed to represent the merged result.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_rangelist_merge</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>rangelist</name></decl></param>,
                    <param><decl><type><name>apr_array_header_t</name> *</type><name>changes</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Removes @a eraser (the subtrahend) from @a whiteboard (the
 * minuend), and places the resulting difference in @a output.
 *
 * Note: @a eraser and @a whiteboard must be sorted as said by @c
 * svn_sort_compare_ranges().  @a output is guaranteed to be in sorted
 * order.
 *
 * @a consider_inheritance determines how to account for the
 * @c svn_merge_range_t inheritable field when comparing @a whiteboard's
 * and @a *eraser's rangelists for equality.  @See svn_mergeinfo_diff().
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_rangelist_remove</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>output</name></decl></param>, <param><decl><type><name>apr_array_header_t</name> *</type><name>eraser</name></decl></param>,
                     <param><decl><type><name>apr_array_header_t</name> *</type><name>whiteboard</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>consider_inheritance</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Find the intersection of two mergeinfos, @a mergeinfo1 and @a
 * mergeinfo2, and place the result in @a *mergeinfo, which is (deeply)
 * allocated in @a pool.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_mergeinfo_intersect</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>mergeinfo</name></decl></param>,
                        <param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo1</name></decl></param>,
                        <param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo2</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Find the intersection of two rangelists consisting of @c
 * svn_merge_range_t * elements, @a rangelist1 and @a rangelist2, and
 * place the result in @a *rangelist (which is never @c NULL).
 *
 * @a consider_inheritance determines how to account for the inheritability
 * of the two rangelist's ranges when calculating the intersection,
 * @see svn_mergeinfo_diff().
 *
 * Note: @a rangelist1 and @a rangelist2 must be sorted as said by @c
 * svn_sort_compare_ranges(). @a *rangelist is guaranteed to be in sorted
 * order.
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_rangelist_intersect</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>rangelist</name></decl></param>,
                        <param><decl><type><name>apr_array_header_t</name> *</type><name>rangelist1</name></decl></param>,
                        <param><decl><type><name>apr_array_header_t</name> *</type><name>rangelist2</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>consider_inheritance</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Reverse @a rangelist, and the @c start and @c end fields of each
 * range in @a rangelist, in place.
 *
 * TODO(miapi): Is this really a valid function?  Rangelists that
 * aren't sorted, or rangelists containing reverse ranges, are
 * generally not valid in mergeinfo code.  Can we rewrite the two
 * places where this is used?
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_rangelist_reverse</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Take an array of svn_merge_range_t *'s in @a rangelist, and convert it
 * back to a text format rangelist in @a output.  If @a rangelist contains
 * no elements, sets @a output to the empty string.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_rangelist_to_string</name><parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>output</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>rangelist</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return a deep copy of @c svn_merge_range_t *'s in @a rangelist excluding
 * all non-inheritable @c svn_merge_range_t.  If @a start and @a end are valid
 * revisions and @a start is less than or equal to @a end, then exclude only the
 * non-inheritable revision ranges that intersect inclusively with the range
 * defined by @a start and @a end.  If @a rangelist contains no elements, return
 * an empty array.  Allocate the copy in @a pool.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_rangelist_inheritable</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>inheritable_rangelist</name></decl></param>,
                          <param><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return a deep copy of @a mergeinfo, excluding all non-inheritable
 * @c svn_merge_range_t.  If @a start and @a end are valid revisions
 * and @a start is less than or equal to @a end, then exclude only the
 * non-inheritable revisions that intersect inclusively with the range
 * defined by @a start and @a end.  If @a path is not NULL remove
 * non-inheritable ranges only for @a path.  Allocate the copy in @a
 * pool.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_mergeinfo_inheritable</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>inheritable_mergeinfo</name></decl></param>,
                          <param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Take a mergeinfo in MERGEINPUT, and convert it back to unparsed
 *  mergeinfo in *OUTPUT.  If INPUT contains no elements, return the
 *  empty string.
 *
 * @since New in 1.5.
*/</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_mergeinfo_to_string</name><parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>output</name></decl></param>,
                        <param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinput</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Take a hash of mergeinfo in @a mergeinfo, and sort the rangelists
 * associated with each key (in place).
 *
 * TODO(miapi): mergeinfos should *always* be sorted.  This should be
 * a private function.
 *
 * @since New in 1.5
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_mergeinfo_sort</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return a deep copy of @a mergeinfo, allocated in @a pool.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_mergeinfo_t</name></type>
<name>svn_mergeinfo_dup</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return a deep copy of @a rangelist, allocated in @a pool.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>apr_array_header_t</name> *</type>
<name>svn_rangelist_dup</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * The three ways to request mergeinfo affecting a given path.
 *
 * @since New in 1.5.
 */</comment>
<typedef>typedef <type><enum>enum
<block>{
  <comment type="block">/** Explicit mergeinfo only. */</comment>
  <decl><name>svn_mergeinfo_explicit</name></decl>,

  <comment type="block">/** Explicit mergeinfo, or if that doesn't exist, the inherited
      mergeinfo from a target's nearest (path-wise, not history-wise)
      ancestor. */</comment> 
  <decl><name>svn_mergeinfo_inherited</name></decl>,

  <comment type="block">/** Mergeinfo on target's nearest (path-wise, not history-wise)
      ancestor, regardless of whether target has explict mergeinfo. */</comment>
  <decl><name>svn_mergeinfo_nearest_ancestor</name></decl>
}</block></enum></type> <name>svn_mergeinfo_inheritance_t</name>;</typedef>

<comment type="block">/** Return a constant string expressing @a inherit as an English word,
 * i.e., "explicit" (default), "inherited", or "nearest_ancestor".
 * The string is not localized, as it may be used for client&lt;-&gt;server
 * communications.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_inheritance_to_word</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Return the appropriate @c svn_mergeinfo_inheritance_t for @a word.
 * @a word is as returned from svn_inheritance_to_word().  Defaults to
 * @c svn_mergeinfo_explicit.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_mergeinfo_inheritance_t</name></type>
<name>svn_inheritance_from_word</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl></param>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_MERGEINFO_H */</comment>
</unit>
