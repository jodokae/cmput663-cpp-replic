<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_compat.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2006, 2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_compat.h
 * @brief Utilities to help applications provide backwards-compatibility
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_COMPAT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_COMPAT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<comment type="block">/** Return, in @a *callback2 and @a *callback2_baton a function/baton that
 * will call @a callback/@a callback_baton, allocating the @a *callback2_baton
 * in @a pool.
 *
 * @note This is used by compatibility wrappers, which exist in more than
 * Subversion core library.
 *
 * @since New in 1.4.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_compat_wrap_commit_callback</name><parameter_list>(<param><decl><type><name>svn_commit_callback2_t</name> *</type><name>callback2</name></decl></param>,
                                     <param><decl><type><name>void</name> **</type><name>callback2_baton</name></decl></param>,
                                     <param><decl><type><name>svn_commit_callback_t</name></type> <name>callback</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Clear svn:author, svn:date, and svn:log from @a revprops if not NULL.
 * Use this if you must handle these three properties separately for
 * compatibility reasons.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_compat_log_revprops_clear</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>revprops</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return a list to pass to post-1.5 log-retrieval functions in order to
 * retrieve the pre-1.5 set of revprops: svn:author, svn:date, and svn:log.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>apr_array_header_t</name> *</type>
<name>svn_compat_log_revprops_in</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return, in @a **author, @a **date, and @a **message, the values of the
 * svn:author, svn:date, and svn:log revprops from @a revprops.  If @a
 * revprops is NULL, all return values are NULL.  Any return value may be
 * NULL if the corresponding property is not set in @a revprops.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_compat_log_revprops_out</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>author</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>date</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>message</name></decl></param>, <param><decl><type><name>apr_hash_t</name> *</type><name>revprops</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return, in @a *receiver2 and @a *receiver2_baton a function/baton that
 * will call @a receiver/@a receiver_baton, allocating the @a *receiver2_baton
 * in @a pool.
 *
 * @note This is used by compatibility wrappers, which exist in more than
 * Subversion core library.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_compat_wrap_log_receiver</name><parameter_list>(<param><decl><type><name>svn_log_entry_receiver_t</name> *</type><name>receiver2</name></decl></param>,
                                  <param><decl><type><name>void</name> **</type><name>receiver2_baton</name></decl></param>,
                                  <param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
                                  <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_COMPAT_H */</comment>
</unit>
