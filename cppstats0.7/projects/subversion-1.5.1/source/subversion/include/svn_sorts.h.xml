<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_sorts.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_sorts.h
 * @brief all sorts of sorts.
 */</comment>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_SORTS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_SORTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>         <comment type="block">/* for apr_array_header_t */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Define a MAX macro if we don't already have one */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (b) : (a))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define a MIN macro if we don't already have one */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MIN</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>

<comment type="block">/** This structure is used to hold a key/value from a hash table.
 * @note Private. For use by Subversion's own code only. See issue #1644.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_sort__item_t</name> <block>{
  <comment type="block">/** pointer to the key */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>

  <comment type="block">/** size of the key */</comment>
  <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>

  <comment type="block">/** pointer to the value */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_sort__item_t</name>;</typedef>


<comment type="block">/** Compare two @c svn_sort__item_t's, returning an integer greater than,
 * equal to, or less than 0, according to whether the key of @a a is
 * greater than, equal to, or less than the key of @a b as determined
 * by comparing them with svn_path_compare_paths().
 *
 * The key strings must be NULL-terminated, even though klen does not
 * include the terminator.
 *
 * This is useful for converting a hash into a sorted
 * @c apr_array_header_t.  For example, to convert hash @a hsh to a sorted
 * array, do this:
 *
 * @verbatim
     apr_array_header_t *hdr;
     hdr = svn_sort__hash (hsh, @c svn_sort_compare_items_as_paths, pool);
   @endverbatim
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_sort_compare_items_as_paths</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_sort__item_t</name> *</type><name>a</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>svn_sort__item_t</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Compare two @c svn_sort__item_t's, returning an integer greater than,
 * equal to, or less than 0, according as @a a is greater than, equal to,
 * or less than @a b according to a lexical key comparison.  The keys are
 * not required to be zero-terminated.
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_sort_compare_items_lexically</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_sort__item_t</name> *</type><name>a</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_sort__item_t</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Compare two @c svn_revnum_t's, returning an integer greater than, equal
 * to, or less than 0, according as @a b is greater than, equal to, or less
 * than @a a. Note that this sorts newest revision to oldest (IOW, descending
 * order).
 *
 * This function is compatible for use with qsort().
 *
 * This is useful for converting an array of revisions into a sorted
 * @c apr_array_header_t. You are responsible for detecting, preventing or
 * removing duplicates.
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_sort_compare_revisions</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Compare two @c const char * paths, returning an integer greater
 * than, equal to, or less than 0, using the same comparison rules as
 * are used by svn_path_compare_paths().
 *
 * This function is compatible for use with qsort().
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_sort_compare_paths</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Compare two @c svn_merge_range_t *'s, returning an integer greater
 * than, equal to, or less than 0 if the first range is greater than,
 * equal to, or less than, the second range.
 * @since New in 1.5
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_sort_compare_ranges</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Sort @a ht according to its keys, return an @c apr_array_header_t
 * containing @c svn_sort__item_t structures holding those keys and values
 * (i.e. for each @c svn_sort__item_t @a item in the returned array,
 * @a item-&gt;key and @a item-&gt;size are the hash key, and @a item-&gt;data points to
 * the hash value).
 *
 * Storage is shared with the original hash, not copied.
 *
 * @a comparison_func should take two @c svn_sort__item_t's and return an
 * integer greater than, equal to, or less than 0, according as the first item
 * is greater than, equal to, or less than the second.
 *
 * @note Private. For use by Subversion's own code only. See issue #1644.
 *
 * @note This function and the @c svn_sort__item_t should go over to APR.
 */</comment>
<function_decl><type><name>apr_array_header_t</name> *</type>
<name>svn_sort__hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>ht</name></decl></param>,
               <param><function_decl><type><name>int</name></type> (*<name>comparison_func</name>)<parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>svn_sort__item_t</name> *</decl></param>,
                                      <param><decl><type><specifier>const</specifier></type> <name>svn_sort__item_t</name> *</decl></param>)</parameter_list></function_decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_SORTS_H */</comment>
</unit>
