<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_pools.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_pools.h
 * @brief APR pool management for Subversion
 */</comment>


<escape char="0xc"/>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_POOLS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_POOLS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_errno.h&gt;</cpp:file></cpp:include>     <comment type="block">/* APR's error system */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>


<escape char="0xc"/>
<comment type="block">/* Wrappers around APR pools, so we get debugging. */</comment>

<comment type="block">/** The recommended maximum amount of memory (4MB) to keep in an APR
 * allocator on the free list, conveniently defined here to share
 * between all our applications.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ALLOCATOR_RECOMMENDED_MAX_FREE</name></cpp:macro> <cpp:value>(4096 * 1024)</cpp:value></cpp:define>


<comment type="block">/** Wrapper around apr_pool_create_ex(), with a simpler interface.
 * The return pool will have an abort function set, which will call
 * abort() on OOM.
 */</comment>
<function_decl><type><name>apr_pool_t</name> *</type><name>svn_pool_create_ex</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>parent_pool</name></decl></param>,
                               <param><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DOXYGEN_SHOULD_SKIP_THIS</name></cpp:ifndef>
<function_decl><type><name>apr_pool_t</name> *</type><name>svn_pool_create_ex_debug</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>parent_pool</name></decl></param>,
                                     <param><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_line</name></decl></param>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_POOL_DEBUG</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_pool_create_ex</name><parameter_list>(<param><type><name>pool</name></type></param>, <param><type><name>allocator</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>svn_pool_create_ex_debug(pool, allocator, APR_POOL__FILE_LINE__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* APR_POOL_DEBUG */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DOXYGEN_SHOULD_SKIP_THIS */</comment>


<comment type="block">/** Create a pool as a subpool of @a parent_pool */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_pool_create</name><parameter_list>(<param><type><name>parent_pool</name></type></param>)</parameter_list></cpp:macro> <cpp:value>svn_pool_create_ex(parent_pool, NULL)</cpp:value></cpp:define>

<comment type="block">/** Clear a @a pool destroying its children.
 *
 * This define for @c svn_pool_clear exists for completeness.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_pool_clear</name></cpp:macro> <cpp:value>apr_pool_clear</cpp:value></cpp:define>


<comment type="block">/** Destroy a @a pool and all of its children.
 *
 * This define for @c svn_pool_destroy exists for symmetry and
 * completeness.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_pool_destroy</name></cpp:macro> <cpp:value>apr_pool_destroy</cpp:value></cpp:define>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_POOLS_H */</comment>
</unit>
