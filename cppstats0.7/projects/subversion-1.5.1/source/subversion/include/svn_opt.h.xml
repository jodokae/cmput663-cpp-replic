<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_opt.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_opt.h
 * @brief Option and argument parsing for Subversion command lines
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_OPTS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_OPTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_getopt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>


<escape char="0xc"/>
<comment type="block">/**
 * All subcommand procedures in Subversion conform to this prototype.
 *
 * @a os is the apr option state after getopt processing has been run; in
 * other words, it still contains the non-option arguments following
 * the subcommand.  See @a os-&gt;argv and @a os-&gt;ind.
 *
 * @a baton is anything you need it to be.
 *
 * @a pool is used for allocating errors, and for any other allocation
 * unless the instance is explicitly documented to allocate from a
 * pool in @a baton.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(<name>svn_opt_subcommand_t</name>)
       <parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>


<comment type="block">/** The maximum number of aliases a subcommand can have. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_OPT_MAX_ALIASES</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<comment type="block">/** The maximum number of options that can be accepted by a subcommand. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_OPT_MAX_OPTIONS</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<comment type="block">/** Options that have no short option char should use an identifying
 * integer equal to or greater than this.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_OPT_FIRST_LONGOPT_ID</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>


<comment type="block">/** One element of a subcommand dispatch table.
 *
 * @since New in 1.4.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_opt_subcommand_desc2_t</name>
<block>{
  <comment type="block">/** The full name of this command. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>

  <comment type="block">/** The function this command invokes. */</comment>
  <decl_stmt><decl><type><name>svn_opt_subcommand_t</name> *</type><name>cmd_func</name></decl>;</decl_stmt>

  <comment type="block">/** A list of alias names for this command (e.g., 'up' for 'update'). */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>aliases</name><index>[<expr><name>SVN_OPT_MAX_ALIASES</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/** A brief string describing this command, for usage messages. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>help</name></decl>;</decl_stmt>

  <comment type="block">/** A list of options accepted by this command.  Each value in the
   * array is a unique enum (the 2nd field in apr_getopt_option_t)
   */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>valid_options</name><index>[<expr><name>SVN_OPT_MAX_OPTIONS</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/** A list of option help descriptions, keyed by the option unique enum
   * (the 2nd field in apr_getopt_option_t), which override the generic
   * descriptions given in an apr_getopt_option_t on a per-subcommand basis.
   */</comment>
  <struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>optch</name></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>desc</name></decl>;</decl_stmt> }</block> <decl><name><name>desc_overrides</name><index>[<expr><name>SVN_OPT_MAX_OPTIONS</name></expr>]</index></name></decl>;</struct>
}</block></struct></type> <name>svn_opt_subcommand_desc2_t</name>;</typedef>


<comment type="block">/** One element of a subcommand dispatch table.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.
 *
 * Like #svn_opt_subcommand_desc2_t but lacking the @c desc_overrides
 * member.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_opt_subcommand_desc_t</name>
<block>{
  <comment type="block">/** The full name of this command. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>

  <comment type="block">/** The function this command invokes. */</comment>
  <decl_stmt><decl><type><name>svn_opt_subcommand_t</name> *</type><name>cmd_func</name></decl>;</decl_stmt>

  <comment type="block">/** A list of alias names for this command (e.g., 'up' for 'update'). */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>aliases</name><index>[<expr><name>SVN_OPT_MAX_ALIASES</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/** A brief string describing this command, for usage messages. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>help</name></decl>;</decl_stmt>

  <comment type="block">/** A list of options accepted by this command.  Each value in the
   * array is a unique enum (the 2nd field in apr_getopt_option_t)
   */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>valid_options</name><index>[<expr><name>SVN_OPT_MAX_OPTIONS</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>svn_opt_subcommand_desc_t</name>;</typedef>


<comment type="block">/**
 * Return the entry in @a table whose name matches @a cmd_name, or @c NULL if
 * none.  @a cmd_name may be an alias.
 *
 * @since New in 1.4.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc2_t</name> *</type>
<name>svn_opt_get_canonical_subcommand2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc2_t</name> *</type><name>table</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmd_name</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Return the entry in @a table whose name matches @a cmd_name, or @c NULL if
 * none.  @a cmd_name may be an alias.
 *
 * Same as svn_opt_get_canonical_subcommand2(), but acts on
 * #svn_opt_subcommand_desc_t.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc_t</name> *</type>
<name>svn_opt_get_canonical_subcommand</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc_t</name> *</type><name>table</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmd_name</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Return pointer to an @c apr_getopt_option_t for the option whose
 * option code is @a code, or @c NULL if no match.  @a option_table must end
 * with an element whose every field is zero.  If @c command is non-NULL,
 * then return the subcommand-specific option description instead of the
 * generic one, if a specific description is defined.
 *
 * The returned value may be statically allocated, or allocated in @a pool.
 *
 * @since New in 1.4.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type>
<name>svn_opt_get_option_from_code2</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>option_table</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc2_t</name> *</type><name>command</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Return the first entry from @a option_table whose option code is @a code,
 * or @c NULL if no match.  @a option_table must end with an element whose
 * every field is zero.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type>
<name>svn_opt_get_option_from_code</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>option_table</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Return @c TRUE iff subcommand @a command supports option @a
 * option_code, else return @c FALSE.  If @a global_options is
 * non-NULL, it is a zero-terminated array, and all subcommands take
 * the options listed in it.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type>
<name>svn_opt_subcommand_takes_option3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc2_t</name> *</type><name>command</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>option_code</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>int</name> *</type><name>global_options</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Same as svn_opt_subcommand_takes_option3(), but with @c NULL for @a
 * global_options.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type>
<name>svn_opt_subcommand_takes_option2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc2_t</name> *</type><name>command</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>option_code</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Return @c TRUE iff subcommand @a command supports option @a option_code,
 * else return @c FALSE.
 *
 * Same as svn_opt_subcommand_takes_option2(), but acts on
 * #svn_opt_subcommand_desc_t.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type>
<name>svn_opt_subcommand_takes_option</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc_t</name> *</type><name>command</name></decl></param>,
                                <param><decl><type><name>int</name></type> <name>option_code</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Print a generic (not command-specific) usage message to @a stream.
 *
 * ### @todo Why is @a stream a stdio file instead of an svn stream?
 *
 * If @a header is non-NULL, print @a header followed by a newline.  Then
 * loop over @a cmd_table printing the usage for each command (getting
 * option usages from @a opt_table).  Then if @a footer is non-NULL, print
 * @a footer followed by a newline.
 *
 * Use @a pool for temporary allocation.
 *
 * @since New in 1.4.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_opt_print_generic_help2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc2_t</name> *</type><name>cmd_table</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>opt_table</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>footer</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                            <param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Same as svn_opt_print_generic_help2(), but acts on
 * #svn_opt_subcommand_desc_t.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_opt_print_generic_help</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc_t</name> *</type><name>cmd_table</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>opt_table</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>footer</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                           <param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Print an option @a opt nicely into a @a string allocated in @a pool.
 * If @a doc is set, include the generic documentation string of @a opt,
 * localized to the current locale if a translation is available.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_opt_format_option</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>string</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>opt</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>doc</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>



<comment type="block">/**
 * Get @a subcommand's usage from @a table, and print it to @c stdout.
 * Obtain option usage from @a options_table.  If not @c NULL, @a
 * global_options is a zero-terminated list of global options.  Use @a
 * pool for temporary allocation.  @a subcommand may be a canonical
 * command name or an alias.  ### @todo Why does this only print to
 * @c stdout, whereas svn_opt_print_generic_help() gives us a choice?
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_opt_subcommand_help3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>subcommand</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc2_t</name> *</type><name>table</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>options_table</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>int</name> *</type><name>global_options</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Same as svn_opt_subcommand_help3(), but with @a global_options
 * always NULL.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_opt_subcommand_help2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>subcommand</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc2_t</name> *</type><name>table</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>options_table</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Same as svn_opt_subcommand_help2(), but acts on
 * #svn_opt_subcommand_desc_t.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_opt_subcommand_help</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>subcommand</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc_t</name> *</type><name>table</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>options_table</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/* Parsing revision and date options. */</comment>

<comment type="block">/**
 * Various ways of specifying revisions.
 *
 * @note
 * In contexts where local mods are relevant, the `working' kind
 * refers to the uncommitted "working" revision, which may be modified
 * with respect to its base revision.  In other contexts, `working'
 * should behave the same as `committed' or `current'.
 */</comment>
<enum>enum <name>svn_opt_revision_kind</name> <block>{
  <comment type="block">/** No revision information given. */</comment>
  <decl><name>svn_opt_revision_unspecified</name></decl>,

  <comment type="block">/** revision given as number */</comment>
  <decl><name>svn_opt_revision_number</name></decl>,

  <comment type="block">/** revision given as date */</comment>
  <decl><name>svn_opt_revision_date</name></decl>,

  <comment type="block">/** rev of most recent change */</comment>
  <decl><name>svn_opt_revision_committed</name></decl>,

  <comment type="block">/** (rev of most recent change) - 1 */</comment>
  <decl><name>svn_opt_revision_previous</name></decl>,

  <comment type="block">/** .svn/entries current revision */</comment>
  <decl><name>svn_opt_revision_base</name></decl>,

  <comment type="block">/** current, plus local mods */</comment>
  <decl><name>svn_opt_revision_working</name></decl>,

  <comment type="block">/** repository youngest */</comment>
  <decl><name>svn_opt_revision_head</name></decl>
}</block>;</enum>

<comment type="block">/**
 * A revision value, which can be specified as a number or a date.
 *
 * @note This union was formerly an anonymous inline type in
 * @c svn_opt_revision_t, and was converted to a named type just to
 * make things easier for SWIG.
 *
 * @since New in 1.3.
 */</comment>
<typedef>typedef <type><union>union <name>svn_opt_revision_value_t</name>
<block>{
  <comment type="block">/** The revision number */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>number</name></decl>;</decl_stmt>

  <comment type="block">/** the date of the revision */</comment>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>date</name></decl>;</decl_stmt>
}</block></union></type> <name>svn_opt_revision_value_t</name>;</typedef>

<comment type="block">/** A revision, specified in one of @c svn_opt_revision_kind ways. */</comment>
<typedef>typedef <type><struct>struct <name>svn_opt_revision_t</name>
<block>{
  <enum>enum <name>svn_opt_revision_kind</name> <name>kind</name>;</enum>  <comment type="block">/**&lt; See svn_opt_revision_kind */</comment>
  <decl_stmt><decl><type><name>svn_opt_revision_value_t</name></type> <name>value</name></decl>;</decl_stmt>   <comment type="block">/**&lt; Extra data qualifying the @c kind */</comment>
}</block></struct></type> <name>svn_opt_revision_t</name>;</typedef>

<comment type="block">/** A revision range, specified in one of @c svn_opt_revision_kind ways. */</comment>
<typedef>typedef <type><struct>struct <name>svn_opt_revision_range_t</name>
<block>{
  <comment type="block">/** The first revision in the range */</comment>
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>start</name></decl>;</decl_stmt>

  <comment type="block">/** The last revision in the range */</comment>
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>end</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_opt_revision_range_t</name>;</typedef>

<comment type="block">/**
 * Set @a *start_revision and/or @a *end_revision according to @a arg,
 * where @a arg is "N" or "N:M", like so:
 *
 *    - If @a arg is "N", set @a *start_revision to represent N, and
 *      leave @a *end_revision untouched.
 *
 *    - If @a arg is "N:M", set @a *start_revision and @a *end_revision
 *      to represent N and M respectively.
 *
 * N and/or M may be one of the special revision descriptors
 * recognized by revision_from_word(), or a date in curly braces.
 *
 * If @a arg is invalid, return -1; else return 0.
 * It is invalid to omit a revision (as in, ":", "N:" or ":M").
 *
 * @note It is typical, though not required, for @a *start_revision and
 * @a *end_revision to be @c svn_opt_revision_unspecified kind on entry.
 *
 * Use @a pool for temporary allocations.
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_opt_parse_revision</name><parameter_list>(<param><decl><type><name>svn_opt_revision_t</name> *</type><name>start_revision</name></decl></param>,
                           <param><decl><type><name>svn_opt_revision_t</name> *</type><name>end_revision</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Parse @a arg, where @a arg is "N" or "N:M", into a
 * @c svn_opt_revision_range_t and push that onto @a opt_ranges.
 *
 *    - If @a arg is "N", set the @c start field of the
 *      @c svn_opt_revision_range_t to represent N and the @c end field
 *      to @c svn_opt_revision_unspecified.
 *
 *    - If @a arg is "N:M", set the @c start field of the
 *      @c svn_opt_revision_range_t to represent N and the @c end field
 *      to represent M.
 *
 * If @a arg is invalid, return -1; else return 0.  It is invalid to omit
 * a revision (as in, ":", "N:" or ":M").
 *
 * Use @a pool to allocate @c svn_opt_revision_range_t pushed to the array.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>int</name></type>
<name>svn_opt_parse_revision_to_range</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>opt_ranges</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Resolve peg revisions and operational revisions in the following way:
 *
 *    - If @a is_url is set and @a peg_rev-&gt;kind is
 *      @c svn_opt_revision_unspecified, @a peg_rev-&gt;kind defaults to
 *      @c svn_opt_revision_head.
 *
 *    - If @a is_url is not set, and @a peg_rev-&gt;kind is
 *      @c svn_opt_revision_unspecified, @a peg_rev-&gt;kind defaults to
 *      @c svn_opt_revision_base.
 *
 *    - If @a op_rev-&gt;kind is @c svn_opt_revision_unspecified, @a op_rev
 *      defaults to @a peg_rev.
 *
 * Both @a peg_rev and @a op_rev may be modified as a result of this
 * function.  @a is_url should be set if the path the revisions refer to is
 * a url, and unset otherwise.
 *
 * If @a notice_local_mods is set, @c svn_opt_revision_working is used,
 * instead of @c svn_opt_revision_base.
 *
 * Use @a pool for allocations.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_opt_resolve_revisions</name><parameter_list>(<param><decl><type><name>svn_opt_revision_t</name> *</type><name>peg_rev</name></decl></param>,
                          <param><decl><type><name>svn_opt_revision_t</name> *</type><name>op_rev</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>is_url</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>notice_local_mods</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/* Parsing arguments. */</comment>

<comment type="block">/**
 * Pull remaining target arguments from @a os into @a *targets_p,
 * converting them to UTF-8, followed by targets from @a known_targets
 * (which might come from, for example, the "--targets" command line
 * option), which are already in UTF-8.
 *
 * On each URL target, do some IRI-to-URI encoding and some
 * auto-escaping.  On each local path, canonicalize case and path
 * separators.
 *
 * Allocate @a *targets_p and its elements in @a pool.
 *
 * If a path has the same name as a Subversion working copy
 * administrative directory, return SVN_ERR_RESERVED_FILENAME_SPECIFIED;
 * if multiple reserved paths are encountered, return a chain of
 * errors, all of which are SVN_ERR_RESERVED_FILENAME_SPECIFIED.  Do
 * not return this type of error in a chain with any other type of
 * error, and if this is the only type of error encountered, complete
 * the operation before returning the error(s).
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_opt_args_to_target_array3</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>targets_p</name></decl></param>,
                              <param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
                              <param><decl><type><name>apr_array_header_t</name> *</type><name>known_targets</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * This is the same as svn_opt_args_to_target_array3() except that it
 * silently ignores paths that have the same name as a working copy
 * administrative directory.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_opt_args_to_target_array2</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>targets_p</name></decl></param>,
                              <param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
                              <param><decl><type><name>apr_array_header_t</name> *</type><name>known_targets</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * The same as svn_opt_args_to_target_array2() except that, in
 * addition, if @a extract_revisions is set, then look for trailing
 * "@rev" syntax on the first two paths.  If the first target in @a
 * *targets_p ends in "@rev", replace it with a canonicalized version of
 * the part before "@rev" and replace @a *start_revision with the value
 * of "rev".  If the second target in @a *targets_p ends in "@rev",
 * replace it with a canonicalized version of the part before "@rev"
 * and replace @a *end_revision with the value of "rev".  Ignore
 * revision specifiers on any further paths.  "rev" can be any form of
 * single revision specifier, as accepted by svn_opt_parse_revision().
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_opt_args_to_target_array</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>targets_p</name></decl></param>,
                             <param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
                             <param><decl><type><name>apr_array_header_t</name> *</type><name>known_targets</name></decl></param>,
                             <param><decl><type><name>svn_opt_revision_t</name> *</type><name>start_revision</name></decl></param>,
                             <param><decl><type><name>svn_opt_revision_t</name> *</type><name>end_revision</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>extract_revisions</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * If no targets exist in @a *targets, add `.' as the lone target.
 *
 * (Some commands take an implicit "." string argument when invoked
 * with no arguments. Those commands make use of this function to
 * add "." to the target array if the user passes no args.)
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_opt_push_implicit_dot_target</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Parse @a num_args non-target arguments from the list of arguments in
 * @a os-&gt;argv, return them as &lt;tt&gt;const char *&lt;/tt&gt; in @a *args_p, without
 * doing any UTF-8 conversion.  Allocate @a *args_p and its values in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_opt_parse_num_args</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>args_p</name></decl></param>,
                       <param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
                       <param><decl><type><name>int</name></type> <name>num_args</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Parse all remaining arguments from @a os-&gt;argv, return them as
 * &lt;tt&gt;const char *&lt;/tt&gt; in @a *args_p, without doing any UTF-8 conversion.
 * Allocate @a *args_p and its values in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_opt_parse_all_args</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>args_p</name></decl></param>,
                       <param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Parse a working-copy or URL in @a path, extracting any trailing
 * revision specifier of the form "@rev" from the last component of
 * the path.
 *
 * Some examples would be:
 *
 *    "foo/bar"                      -&gt; "foo/bar",       (unspecified)
 *    "foo/bar@13"                   -&gt; "foo/bar",       (number, 13)
 *    "foo/bar@HEAD"                 -&gt; "foo/bar",       (head)
 *    "foo/bar@{1999-12-31}"         -&gt; "foo/bar",       (date, 1999-12-31)
 *    "http://a/b@27"                -&gt; "http://a/b",    (number, 27)
 *    "http://a/b@COMMITTED"         -&gt; "http://a/b",    (committed) [*]
 *    "http://a/b@{1999-12-31}       -&gt; "http://a/b",    (date, 1999-12-31)
 *    "http://a/b@%7B1999-12-31%7D   -&gt; "http://a/b",    (date, 1999-12-31)
 *    "foo/bar@1:2"                  -&gt; error
 *    "foo/bar@baz"                  -&gt; error
 *    "foo/bar@"                     -&gt; "foo/bar",       (base)
 *    "foo/bar/@13"                  -&gt; "foo/bar/",      (number, 13)
 *    "foo/bar@@13"                  -&gt; "foo/bar@",      (number, 13)
 *    "foo/@bar@HEAD"                -&gt; "foo/@bar",      (head)
 *    "foo@/bar"                     -&gt; "foo@/bar",      (unspecified)
 *    "foo@HEAD/bar"                 -&gt; "foo@HEAD/bar",  (unspecified)
 *
 *   [*] Syntactically valid but probably not semantically useful.
 *
 * If a trailing revision specifier is found, parse it into @a *rev and
 * put the rest of the path into @a *truepath, allocating from @a pool;
 * or return an @c SVN_ERR_CL_ARG_PARSING_ERROR if the revision
 * specifier is invalid.  If no trailing revision specifier is found,
 * set @a *truepath to @a path and @a rev-&gt;kind to @c
 * svn_opt_revision_unspecified.
 *
 * This function does not require that @a path be in canonical form.
 * No canonicalization is done and @a *truepath will only be in
 * canonical form if @a path is in canonical form.
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_opt_parse_path</name><parameter_list>(<param><decl><type><name>svn_opt_revision_t</name> *</type><name>rev</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>truepath</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Central dispatcher function for various kinds of help message.
 * Prints one of:
 *   * subcommand-specific help (svn_opt_subcommand_help)
 *   * generic help (svn_opt_print_generic_help)
 *   * version info
 *   * simple usage complaint: "Type '@a pgm_name help' for usage."
 *
 * If @a os is not @c NULL and it contains arguments, then try
 * printing help for them as though they are subcommands, using @a
 * cmd_table and @a option_table for option information.  If not @c
 * NULL, @a global_options is a zero-terminated array of options taken
 * by all subcommands.
 *
 * Else, if @a print_version is TRUE, then print version info, in
 * brief form if @a quiet is also TRUE; if @a quiet is FALSE, then if
 * @a version_footer is non-NULL, print it following the version
 * information.
 *
 * Else, if @a os is not @c NULL and does not contain arguments, print
 * generic help, via svn_opt_print_generic_help2() with the @a header,
 * @a cmd_table, @a option_table, and @a footer arguments.
 *
 * Else, when @a os is @c NULL, print the simple usage complaint.
 *
 * Use @a pool for temporary allocations.
 *
 * Notes: The reason this function handles both version printing and
 * general usage help is that a confused user might put both the
 * --version flag *and* subcommand arguments on a help command line.
 * The logic for handling such a situation should be in one place.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_opt_print_help3</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pgm_name</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>print_version</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>version_footer</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc2_t</name> *</type><name>cmd_table</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>option_table</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>int</name> *</type><name>global_options</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>footer</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Same as svn_opt_print_help3(), but with @a global_options always @c
 * NULL.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_opt_print_help2</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pgm_name</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>print_version</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>version_footer</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc2_t</name> *</type><name>cmd_table</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>option_table</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>footer</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Same as svn_opt_print_help2(), but acts on #svn_opt_subcommand_desc_t.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_opt_print_help</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pgm_name</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>print_version</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>version_footer</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc_t</name> *</type><name>cmd_table</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>option_table</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>footer</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_OPTS_H */</comment>
</unit>
