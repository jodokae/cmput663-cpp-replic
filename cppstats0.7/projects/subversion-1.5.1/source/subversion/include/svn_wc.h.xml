<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_wc.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_wc.h
 * @brief Subversion's working copy library
 *
 * Requires:
 *            - A working copy
 *
 * Provides:
 *            - Ability to manipulate working copy's versioned data.
 *            - Ability to manipulate working copy's administrative files.
 *
 * Used By:
 *            - Clients.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_WC_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC_H</name></cpp:macro></cpp:define>

<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>    <comment type="block">/* for svn_ra_reporter_t type */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/**
 * Get libsvn_wc version information.
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>svn_wc_version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * @defgroup svn_wc  Working copy management
 * @{
 */</comment>

<comment type="block">/** Flags for use with svn_wc_translated_file2
 *
 * @defgroup translate_flags Translation flags
 *
 * @{
 */</comment>

  <comment type="block">/** Translate from Normal Form.
   *
   * The working copy text bases and repository files are stored
   * in normal form.  Some files' contents - or ever representation -
   * differs between the working copy and the normal form.  This flag
   * specifies to take the latter form as input and transform it
   * to the former.
   *
   * Either this flag or @c SVN_WC_TRANSLATE_TO_NF should be specified,
   * but not both.
   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC_TRANSLATE_FROM_NF</name></cpp:macro>                 <cpp:value>0x00000000</cpp:value></cpp:define>

  <comment type="block">/** Translate to Normal Form.
   *
   * Either this flag or @c SVN_WC_TRANSLATE_FROM_NF should be specified,
   * but not both.
   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC_TRANSLATE_TO_NF</name></cpp:macro>                   <cpp:value>0x00000001</cpp:value></cpp:define>

  <comment type="block">/** Force repair of eol styles, making sure the output file consistently
   * contains the one eol style as specified by the svn:eol-style
   * property and the required translation direction.
   *
   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC_TRANSLATE_FORCE_EOL_REPAIR</name></cpp:macro>        <cpp:value>0x00000002</cpp:value></cpp:define>

  <comment type="block">/** Don't register a pool cleanup to delete the output file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC_TRANSLATE_NO_OUTPUT_CLEANUP</name></cpp:macro>       <cpp:value>0x00000004</cpp:value></cpp:define>

  <comment type="block">/** Guarantee a new file is created on successful return.
   * The default shortcuts translation by returning the path
   * of the untranslated file when no translation is required.
   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC_TRANSLATE_FORCE_COPY</name></cpp:macro>              <cpp:value>0x00000008</cpp:value></cpp:define>

  <comment type="block">/** Use a non-wc-local tmp directory for creating output files,
   * instead of in the working copy admin tmp area which is the default.
   *
   * @since New in 1.4.
   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC_TRANSLATE_USE_GLOBAL_TMP</name></cpp:macro>          <cpp:value>0x00000010</cpp:value></cpp:define>

<comment type="block">/** @} */</comment>


<comment type="block">/* Locking/Opening/Closing */</comment>

<comment type="block">/** Baton for access to a working copy administrative area.
 *
 * One day all such access will require a baton, we're not there yet.
 *
 * Access batons can be grouped into sets, by passing an existing open
 * baton when opening a new baton.  Given one baton in a set, other batons
 * may be retrieved.  This allows an entire hierarchy to be locked, and
 * then the set of batons can be passed around by passing a single baton.
 */</comment>
<typedef>typedef <type>struct <name>svn_wc_adm_access_t</name></type> <name>svn_wc_adm_access_t</name>;</typedef>


<comment type="block">/**
 * Return, in @a *adm_access, a pointer to a new access baton for the working
 * copy administrative area associated with the directory @a path.  If
 * @a write_lock is TRUE the baton will include a write lock, otherwise the
 * baton can only be used for read access.  If @a path refers to a directory
 * that is already write locked then the error @c SVN_ERR_WC_LOCKED will be
 * returned.  The error @c SVN_ERR_WC_NOT_DIRECTORY will be returned if
 * @a path is not a versioned directory.
 *
 * If @a associated is an open access baton then @a adm_access will be added
 * to the set containing @a associated.  @a associated can be @c NULL, in
 * which case @a adm_access is the start of a new set.
 *
 * @a levels_to_lock specifies how far to lock.  Zero means just the specified
 * directory.  Any negative value means to lock the entire working copy
 * directory hierarchy under @a path.  A positive value indicates the number of
 * levels of directories to lock -- 1 means just immediate subdirectories, 2
 * means immediate subdirectories and their subdirectories, etc.  All the
 * access batons will become part of the set containing @a adm_access.  This
 * is an all-or-nothing option, if it is not possible to lock all the
 * requested directories then an error will be returned and @a adm_access will
 * be invalid, with the exception that subdirectories of @a path that are
 * missing from the physical filesystem will not be locked and will not cause
 * an error.  The error @c SVN_ERR_WC_LOCKED will be returned if a
 * subdirectory of @a path is already write locked.
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton to determine
 * if the client has cancelled the operation.
 *
 * @a pool will be used to allocate memory for the baton and any subsequently
 * cached items.  If @a adm_access has not been closed when the pool is
 * cleared, it will be closed automatically at that point, and removed from
 * its set.  A baton closed in this way will not remove physical locks from
 * the working copy if cleanup is required.
 *
 * The first baton in a set, with @a associated passed as @c NULL, must have
 * the longest lifetime of all the batons in the set.  This implies it must be
 * the root of the hierarchy.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_open3</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                 <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                 <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_adm_open3(), but without cancellation support.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_open2</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                 <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_adm_open2(), but with @a tree_lock instead of
 * @a levels_to_lock.  @a levels_to_lock is set to -1 if @a tree_lock
 * is @c TRUE, else 0.
 *
 * @deprecated Provided for backward compatibility with the 1.0 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_open</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>tree_lock</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Checks the working copy to determine the node type of @a path.  If
 * @a path is a versioned directory then the behaviour is like that of
 * svn_wc_adm_open3(), otherwise, if @a path is a file or does not
 * exist, then the behaviour is like that of svn_wc_adm_open3() with
 * @a path replaced by the parent directory of @a path.  If @a path is
 * an unversioned directory, the behaviour is also like that of
 * svn_wc_adm_open3() on the parent, except that if the open fails,
 * then the returned SVN_ERR_WC_NOT_DIRECTORY error refers to @a path,
 * not to @a path's parent.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_open3</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                       <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                       <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_adm_probe_open3() without the cancel
 * functionality.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_open2</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                       <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_adm_probe_open2(), but with @a tree_lock instead of
 * @a levels_to_lock.  @a levels_to_lock is set to -1 if @a tree_lock
 * is @c TRUE, else 0.
 *
 * @deprecated Provided for backward compatibility with the 1.0 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_open</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>tree_lock</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Open access batons for @a path and return in @a *anchor_access and
 * @a *target the anchor and target required to drive an editor.  Return
 * in @a *target_access the access baton for the target, which may be the
 * same as @a *anchor_access.  All the access batons will be in the
 * @a *anchor_access set.
 *
 * @a levels_to_lock determines the levels_to_lock used when opening
 * @a path if @a path is a versioned directory, @a levels_to_lock is
 * ignored otherwise.  If @a write_lock is  @c TRUE the access batons
 * will hold write locks.
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton to determine
 * if the client has cancelled the operation.
 *
 * This function is essentially a combination of svn_wc_adm_open3() and
 * svn_wc_get_actual_target(), with the emphasis on reducing physical IO.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_open_anchor</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>anchor_access</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>target_access</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>target</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                       <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                       <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return, in @a *adm_access, a pointer to an existing access baton associated
 * with @a path.  @a path must be a directory that is locked as part of the
 * set containing the @a associated access baton.
 *
 * If the requested access baton is marked as missing in, or is simply
 * absent from, @a associated, return SVN_ERR_WC_NOT_LOCKED.
 *
 * @a pool is used only for local processing, it is not used for the batons.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_retrieve</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                    <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Check the working copy to determine the node type of @a path.  If
 * @a path is a versioned directory then the behaviour is like that of
 * svn_wc_adm_retrieve(), otherwise, if @a path is a file, an unversioned
 * directory, or does not exist, then the behaviour is like that of
 * svn_wc_adm_retrieve() with @a path replaced by the parent directory of
 * @a path.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_retrieve</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Try various ways to obtain an access baton for @a path.
 *
 * First, try to obtain @a *adm_access via svn_wc_adm_probe_retrieve(),
 * but if this fails because @a associated can't give a baton for
 * @a path or @a path's parent, then try svn_wc_adm_probe_open3(),
 * this time passing @a write_lock and @a levels_to_lock.  If there is
 * still no access because @a path is not a versioned directory, then
 * just set @a *adm_access to NULL and return success.  But if it is
 * because @a path is locked, then return the error @c SVN_ERR_WC_LOCKED,
 * and the effect on @a *adm_access is undefined.  (Or if the attempt
 * fails for any other reason, return the corresponding error, and the
 * effect on @a *adm_access is also undefined.)
 *
 * If svn_wc_adm_probe_open3() succeeds, then add @a *adm_access to
 * @a associated.
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton to determine
 * if the client has cancelled the operation.
 *
 * Use @a pool only for local processing, not to allocate @a *adm_access.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_try3</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                      <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                      <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                      <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_adm_probe_try3() without the cancel
 * functionality.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_try2</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                      <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_adm_probe_try2(), but with @a tree_lock instead of
 * @a levels_to_lock.  @a levels_to_lock is set to -1 if @a tree_lock
 * is @c TRUE, else 0.
 *
 * @deprecated Provided for backward compatibility with the 1.0 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_try</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                     <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>tree_lock</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Give up the access baton @a adm_access, and its lock if any. This will
 * recursively close any batons in the same set that are direct
 * subdirectories of @a adm_access.  Any physical locks will be removed from
 * the working copy.  Lock removal is unconditional, there is no check to
 * determine if cleanup is required.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc_adm_close</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return the path used to open the access baton @a adm_access */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_wc_adm_access_path</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return the pool used by access baton @a adm_access */</comment>
<function_decl><type><name>apr_pool_t</name> *</type><name>svn_wc_adm_access_pool</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return @c TRUE is the access baton @a adm_access has a write lock,
 * @c FALSE otherwise. Compared to svn_wc_locked() this is a cheap, fast
 * function that doesn't access the filesystem.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_wc_adm_locked</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Set @a *locked to non-zero if @a path is locked, else set it to zero. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_locked</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>locked</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Return @c TRUE if @a name is the name of the WC administrative
 * directory.  Use @a pool for any temporary allocations.  Only works
 * with base directory names, not paths or URIs.
 *
 * For compatibility, the default name (.svn) will always be treated
 * as an admin dir name, even if the working copy is actually using an
 * alternative name.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_wc_is_adm_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Return the name of the administrative directory.
 * Use @a pool for any temporary allocations.
 *
 * The returned pointer will refer to either a statically allocated
 * string, or to a string allocated in @a pool.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_wc_get_adm_dir</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Use @a name for the administrative directory in the working copy.
 * Use @a pool for any temporary allocations.
 *
 * The list of valid names is limited.  Currently only ".svn" (the
 * default) and "_svn" are allowed.
 *
 * @note This function changes global (per-process) state and must be
 * called in a single-threaded context during the initialization of a
 * Subversion client.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc_set_adm_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/** Traversal information is information gathered by a working copy
 * crawl or update.  For example, the before and after values of the
 * svn:externals property are important after an update, and since
 * we're traversing the working tree anyway (a complete traversal
 * during the initial crawl, and a traversal of changed paths during
 * the checkout/update/switch), it makes sense to gather the
 * property's values then instead of making a second pass.
 */</comment>
<typedef>typedef <type>struct <name>svn_wc_traversal_info_t</name></type> <name>svn_wc_traversal_info_t</name>;</typedef>


<comment type="block">/** Return a new, empty traversal info object, allocated in @a pool. */</comment>
<function_decl><type><name>svn_wc_traversal_info_t</name> *</type><name>svn_wc_init_traversal_info</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *externals_old and @a *externals_new to hash tables representing
 * changes to values of the svn:externals property on directories
 * traversed by @a traversal_info.
 *
 * @a traversal_info is obtained from svn_wc_init_traversal_info(), but is
 * only useful after it has been passed through another function, such
 * as svn_wc_crawl_revisions(), svn_wc_get_update_editor(),
 * svn_wc_get_switch_editor(), etc.
 *
 * Each hash maps &lt;tt&gt;const char *&lt;/tt&gt; directory names onto
 * &lt;tt&gt;const char *&lt;/tt&gt; values of the externals property for that directory.
 * The dir names are full paths -- that is, anchor plus target, not target
 * alone. The values are not parsed, they are simply copied raw, and are
 * never NULL: directories that acquired or lost the property are
 * simply omitted from the appropriate table.  Directories whose value
 * of the property did not change show the same value in each hash.
 *
 * The hashes, keys, and values have the same lifetime as @a traversal_info.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_wc_edited_externals</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>externals_old</name></decl></param>,
                        <param><decl><type><name>apr_hash_t</name> **</type><name>externals_new</name></decl></param>,
                        <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *depths to a hash table mapping &lt;tt&gt;const char *&lt;/tt&gt;
 * directory names (directories traversed by @a traversal_info) to
 * &lt;tt&gt;const char *&lt;/tt&gt; values (the depths of those directories, as
 * converted by svn_depth_to_word()).
 *
 * @a traversal_info is obtained from svn_wc_init_traversal_info(), but is
 * only useful after it has been passed through another function, such
 * as svn_wc_crawl_revisions(), svn_wc_get_update_editor(),
 * svn_wc_get_switch_editor(), etc.
 *
 * The dir names are full paths -- that is, anchor plus target, not target
 * alone.  The values are not allocated, they are static constant strings.
 * Although the values are never NULL, not all directories traversed
 * are necessarily listed.  For example, directories which did not
 * have an svn:externals property set or modified are not included.
 *
 * The hashes and keys have the same lifetime as @a traversal_info.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_wc_traversed_depths</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>depths</name></decl></param>,
                        <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** One external item.  This usually represents one line from an
 * svn:externals description but with the path and URL
 * canonicalized.
 *
 * In order to avoid backwards compatibility problems clients should use
 * svn_wc_external_item_create() to allocate and intialize this structure
 * instead of doing so themselves.
 *
 * @since New in 1.5.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_external_item2_t</name>
<block>{
  <comment type="block">/** The name of the subdirectory into which this external should be
      checked out.  This is relative to the parent directory that
      holds this external item.  (Note that these structs are often
      stored in hash tables with the target dirs as keys, so this
      field will often be redundant.) */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_dir</name></decl>;</decl_stmt>

  <comment type="block">/** Where to check out from. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>

  <comment type="block">/** What revision to check out.  The only valid kinds for this are
      svn_opt_revision_number, svn_opt_revision_date, and
      svn_opt_revision_head. */</comment>
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>revision</name></decl>;</decl_stmt>

  <comment type="block">/** The peg revision to use when checking out.  The only valid kinds are
      svn_opt_revision_number, svn_opt_revision_date, and
      svn_opt_revision_head. */</comment>
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>

}</block></struct></type> <name>svn_wc_external_item2_t</name>;</typedef>

<comment type="block">/**
 * Initialize an external item.
 * Set @a *item to an external item object, allocated in @a pool.
 *
 * In order to avoid backwards compatibility problems, this function
 * is used to intialize and allocate the @c svn_wc_external_item2_t
 * structure rather than doing so explicitly, as the size of this
 * structure may change in the future.
 *
 * The current implementation never returns error, but callers should
 * still check for error, for compatibility with future versions.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_external_item_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_external_item2_t</name> **</type><name>item</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Return a duplicate of @a item, allocated in @a pool.  No part of the new
 * item will be shared with @a item.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_wc_external_item2_t</name> *</type>
<name>svn_wc_external_item2_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_external_item2_t</name> *</type><name>item</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * One external item.  Similar to svn_wc_external_item2_t, except
 * @a revision is interpreted as both the operational revision and the
 * peg revision.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_external_item_t</name>
<block>{
  <comment type="block">/** Same as @c svn_wc_external_item2_t.target_dir */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_dir</name></decl>;</decl_stmt>

  <comment type="block">/** Same as @c svn_wc_external_item2_t.url */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>

  <comment type="block">/** Same as @c svn_wc_external_item2_t.revision */</comment>
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>revision</name></decl>;</decl_stmt>

}</block></struct></type> <name>svn_wc_external_item_t</name>;</typedef>

<comment type="block">/**
 * Return a duplicate of @a item, allocated in @a pool.  No part of the new
 * item will be shared with @a item.
 *
 * @since New in 1.3.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>svn_wc_external_item_t</name> *</type>
<name>svn_wc_external_item_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_external_item_t</name> *</type><name>item</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * If @a externals_p is non-NULL, set @a *externals_p to an array of
 * @c svn_wc_external_item2_t * objects based on @a desc.  The @a url
 * member of the objects will be canonicalized if @a canonicalize_url
 * is @c TRUE.
 *
 * If the format of @a desc is invalid, don't touch @a *externals_p and
 * return @c SVN_ERR_CLIENT_INVALID_EXTERNALS_DESCRIPTION.  Thus, if
 * you just want to check the validity of an externals description,
 * and don't care about the parsed result, pass NULL for @a externals_p.
 *
 * The format of @a desc is the same as for values of the directory
 * property @c SVN_PROP_EXTERNALS, which see.
 *
 * Allocate the table, keys, and values in @a pool.
 *
 * Use @a parent_directory only in constructing error strings.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_parse_externals_description3</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>externals_p</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_directory</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>desc</name></decl></param>,
                                    <param><decl><type><name>svn_boolean_t</name></type> <name>canonicalize_url</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_parse_externals_description3() with @a
 * canonicalize_url set to @c TRUE, but returns an array of @c
 * svn_wc_external_item_t * objects instead of @c
 * svn_wc_external_item2_t * objects
 *
 * @since New in 1.1.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_parse_externals_description2</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>externals_p</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_directory</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>desc</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_parse_externals_description2(), but returns the
 * parsed externals in a hash instead of an array.  This function
 * should not be used, as storing the externals in a hash causes their
 * order of evaluation to be not easily identifiable.
 *
 * @deprecated Provided for backward compatibility with the 1.0 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_parse_externals_description</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>externals_p</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_directory</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>desc</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/* Notification/callback handling. */</comment>

<comment type="block">/**
 * @defgroup svn_wc_notifications Notification callback handling
 * @{
 *
 * In many cases, the WC library will scan a working copy and make
 * changes. The caller usually wants to know when each of these changes
 * has been made, so that it can display some kind of notification to
 * the user.
 *
 * These notifications have a standard callback function type, which
 * takes the path of the file that was affected, and a caller-
 * supplied baton.
 *
 * Note that the callback is a 'void' return -- this is a simple
 * reporting mechanism, rather than an opportunity for the caller to
 * alter the operation of the WC library.
 *
 * Note also that some of the actions are used across several
 * different Subversion commands.  For example, the update actions are
 * also used for checkouts, switches, and merges.
 */</comment>

<comment type="block">/** The type of action occurring. */</comment>
<typedef>typedef <type><enum>enum <name>svn_wc_notify_action_t</name>
<block>{
  <comment type="block">/** Adding a path to revision control. */</comment>
  <decl><name>svn_wc_notify_add</name> <init>= <expr>0</expr></init></decl>,

  <comment type="block">/** Copying a versioned path. */</comment>
  <decl><name>svn_wc_notify_copy</name></decl>,

  <comment type="block">/** Deleting a versioned path. */</comment>
  <decl><name>svn_wc_notify_delete</name></decl>,

  <comment type="block">/** Restoring a missing path from the pristine text-base. */</comment>
  <decl><name>svn_wc_notify_restore</name></decl>,

  <comment type="block">/** Reverting a modified path. */</comment>
  <decl><name>svn_wc_notify_revert</name></decl>,

  <comment type="block">/** A revert operation has failed. */</comment>
  <decl><name>svn_wc_notify_failed_revert</name></decl>,

  <comment type="block">/** Resolving a conflict. */</comment>
  <decl><name>svn_wc_notify_resolved</name></decl>,

  <comment type="block">/** Skipping a path. */</comment>
  <decl><name>svn_wc_notify_skip</name></decl>,

  <comment type="block">/** Got a delete in an update. */</comment>
  <decl><name>svn_wc_notify_update_delete</name></decl>,

  <comment type="block">/** Got an add in an update. */</comment>
  <decl><name>svn_wc_notify_update_add</name></decl>,

  <comment type="block">/** Got any other action in an update. */</comment>
  <decl><name>svn_wc_notify_update_update</name></decl>,

  <comment type="block">/** The last notification in an update (including updates of externals). */</comment>
  <decl><name>svn_wc_notify_update_completed</name></decl>,

  <comment type="block">/** Updating an external module. */</comment>
  <decl><name>svn_wc_notify_update_external</name></decl>,

  <comment type="block">/** The last notification in a status (including status on externals). */</comment>
  <decl><name>svn_wc_notify_status_completed</name></decl>,

  <comment type="block">/** Running status on an external module. */</comment>
  <decl><name>svn_wc_notify_status_external</name></decl>,

  <comment type="block">/** Committing a modification. */</comment>
  <decl><name>svn_wc_notify_commit_modified</name></decl>,

  <comment type="block">/** Committing an addition. */</comment>
  <decl><name>svn_wc_notify_commit_added</name></decl>,

  <comment type="block">/** Committing a deletion. */</comment>
  <decl><name>svn_wc_notify_commit_deleted</name></decl>,

  <comment type="block">/** Committing a replacement. */</comment>
  <decl><name>svn_wc_notify_commit_replaced</name></decl>,

  <comment type="block">/** Transmitting post-fix text-delta data for a file. */</comment>
  <decl><name>svn_wc_notify_commit_postfix_txdelta</name></decl>,

  <comment type="block">/** Processed a single revision's blame. */</comment>
  <decl><name>svn_wc_notify_blame_revision</name></decl>,

  <comment type="block">/** Locking a path. @since New in 1.2. */</comment>
  <decl><name>svn_wc_notify_locked</name></decl>,

  <comment type="block">/** Unlocking a path. @since New in 1.2. */</comment>
  <decl><name>svn_wc_notify_unlocked</name></decl>,

  <comment type="block">/** Failed to lock a path. @since New in 1.2. */</comment>
  <decl><name>svn_wc_notify_failed_lock</name></decl>,

  <comment type="block">/** Failed to unlock a path. @since New in 1.2. */</comment>
  <decl><name>svn_wc_notify_failed_unlock</name></decl>,

  <comment type="block">/** Tried adding a path that already exists. @since New in 1.5. */</comment>
  <decl><name>svn_wc_notify_exists</name></decl>,

  <comment type="block">/** Changelist name set. @since New in 1.5. */</comment>
  <decl><name>svn_wc_notify_changelist_set</name></decl>,

  <comment type="block">/** Changelist name cleared. @since New in 1.5. */</comment>
  <decl><name>svn_wc_notify_changelist_clear</name></decl>,

  <comment type="block">/** Warn user that a path has moved from one changelist to another.
      @since New in 1.5. */</comment>
  <decl><name>svn_wc_notify_changelist_moved</name></decl>,

  <comment type="block">/** A merge operation (to path) has begun.  See @c merge_range in
      @c svn_wc_notify_t.  @since New in 1.5   */</comment>
  <decl><name>svn_wc_notify_merge_begin</name></decl>,

  <comment type="block">/** A merge operation (to path) from a foreign repository has begun.
      See @c merge_range in @c svn_wc_notify_t. @since New in 1.5. */</comment>
  <decl><name>svn_wc_notify_foreign_merge_begin</name></decl>,

  <comment type="block">/** Replace notification. @since New in 1.5. */</comment>
  <decl><name>svn_wc_notify_update_replace</name></decl>

}</block></enum></type> <name>svn_wc_notify_action_t</name>;</typedef>


<comment type="block">/** The type of notification that is occurring. */</comment>
<typedef>typedef <type><enum>enum <name>svn_wc_notify_state_t</name>
<block>{
  <decl><name>svn_wc_notify_state_inapplicable</name> <init>= <expr>0</expr></init></decl>,

  <comment type="block">/** Notifier doesn't know or isn't saying. */</comment>
  <decl><name>svn_wc_notify_state_unknown</name></decl>,

  <comment type="block">/** The state did not change. */</comment>
  <decl><name>svn_wc_notify_state_unchanged</name></decl>,

  <comment type="block">/** The item wasn't present. */</comment>
  <decl><name>svn_wc_notify_state_missing</name></decl>,

  <comment type="block">/** An unversioned item obstructed work. */</comment>
  <decl><name>svn_wc_notify_state_obstructed</name></decl>,

  <comment type="block">/** Pristine state was modified. */</comment>
  <decl><name>svn_wc_notify_state_changed</name></decl>,

  <comment type="block">/** Modified state had mods merged in. */</comment>
  <decl><name>svn_wc_notify_state_merged</name></decl>,

  <comment type="block">/** Modified state got conflicting mods. */</comment>
  <decl><name>svn_wc_notify_state_conflicted</name></decl>

}</block></enum></type> <name>svn_wc_notify_state_t</name>;</typedef>

<comment type="block">/**
 * What happened to a lock during an operation.
 *
 * @since New in 1.2.
 */</comment>
<typedef>typedef <type><enum>enum <name>svn_wc_notify_lock_state_t</name> <block>{
  <decl><name>svn_wc_notify_lock_state_inapplicable</name> <init>= <expr>0</expr></init></decl>,
  <decl><name>svn_wc_notify_lock_state_unknown</name></decl>,
  <comment type="block">/** The lock wasn't changed. */</comment>
  <decl><name>svn_wc_notify_lock_state_unchanged</name></decl>,
  <comment type="block">/** The item was locked. */</comment>
  <decl><name>svn_wc_notify_lock_state_locked</name></decl>,
  <comment type="block">/** The item was unlocked. */</comment>
  <decl><name>svn_wc_notify_lock_state_unlocked</name></decl>
}</block></enum></type> <name>svn_wc_notify_lock_state_t</name>;</typedef>

<comment type="block">/**
 * Structure used in the @c svn_wc_notify_func2_t function.
 *
 * @c kind, @c content_state, @c prop_state and @c lock_state are from
 * after @c action, not before.
 *
 * @note If @c action is @c svn_wc_notify_update, then @c path has
 * already been installed, so it is legitimate for an implementation of
 * @c svn_wc_notify_func2_t to examine @c path in the working copy.
 *
 * @note The purpose of the @c kind, @c mime_type, @c content_state, and
 * @c prop_state fields is to provide "for free" information that an
 * implementation is likely to want, and which it would otherwise be
 * forced to deduce via expensive operations such as reading entries
 * and properties.  However, if the caller does not have this
 * information, it will simply pass the corresponding `*_unknown'
 * values, and it is up to the implementation how to handle that
 * (i.e., whether to attempt deduction, or just to punt and
 * give a less informative notification).
 *
 * @note Callers of notification functions should use svn_wc_create_notify()
 * to create structures of this type to allow for extensibility.
 *
 * @since New in 1.2.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_notify_t</name> <block>{
  <comment type="block">/** Path, either absolute or relative to the current working directory
   * (i.e., not relative to an anchor). */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <comment type="block">/** Action that describes what happened to @c path. */</comment>
  <decl_stmt><decl><type><name>svn_wc_notify_action_t</name></type> <name>action</name></decl>;</decl_stmt>
  <comment type="block">/** Node kind of @c path. */</comment>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
  <comment type="block">/** If non-NULL, indicates the mime-type of @c path.
   * It is always @c NULL for directories. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime_type</name></decl>;</decl_stmt>
  <comment type="block">/** Points to the lock structure received from the repository when
   * @c action is @c svn_wc_notify_locked.  For other actions, it is
   * @c NULL. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>
  <comment type="block">/** Points to an error describing the reason for the failure when @c
   * action is @c svn_wc_notify_failed_lock or @c svn_wc_notify_failed_unlock.
   * Is @c NULL otherwise. */</comment>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <comment type="block">/** The type of notification that is occurring about node content. */</comment>
  <decl_stmt><decl><type><name>svn_wc_notify_state_t</name></type> <name>content_state</name></decl>;</decl_stmt>
  <comment type="block">/** The type of notification that is occurring about node properties. */</comment>
  <decl_stmt><decl><type><name>svn_wc_notify_state_t</name></type> <name>prop_state</name></decl>;</decl_stmt>
  <comment type="block">/** Reflects the addition or removal of a lock token in the working copy. */</comment>
  <decl_stmt><decl><type><name>svn_wc_notify_lock_state_t</name></type> <name>lock_state</name></decl>;</decl_stmt>
  <comment type="block">/** When @c action is @c svn_wc_notify_update_completed, target revision
   * of the update, or @c SVN_INVALID_REVNUM if not available; when @c
   * action is @c svn_wc_notify_blame_revision, processed revision.
   * In all other cases, it is @c SVN_INVALID_REVNUM. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
  <comment type="block">/** When @c action is @c svn_wc_notify_changelist_add or name.  In all other
   * cases, it is @c NULL. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changelist_name</name></decl>;</decl_stmt>
  <comment type="block">/** When @c action is @c svn_wc_notify_merge_begin, and both the
      left and right sides of the merge are from the same URL.  In all
      other cases, it is @c NULL.  */</comment>
  <decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>merge_range</name></decl>;</decl_stmt>
  <comment type="block">/* NOTE: Add new fields at the end to preserve binary compatibility.
     Also, if you add fields here, you have to update svn_wc_create_notify
     and svn_wc_dup_notify. */</comment>
}</block></struct></type> <name>svn_wc_notify_t</name>;</typedef>

<comment type="block">/**
 * Allocate an @c svn_wc_notify_t structure in @a pool, initialize and return
 * it.
 *
 * Set the @c path field of the created struct to @a path, and @c action to
 * @a action.  Set all other fields to their @c _unknown, @c NULL or
 * invalid value, respectively.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_wc_notify_t</name> *</type>
<name>svn_wc_create_notify</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>svn_wc_notify_action_t</name></type> <name>action</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Return a deep copy of @a notify, allocated in @a pool.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_wc_notify_t</name> *</type>
<name>svn_wc_dup_notify</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_notify_t</name> *</type><name>notify</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Notify the world that @a notify-&gt;action has happened to @a notify-&gt;path.
 *
 * Recommendation: callers of @c svn_wc_notify_func2_t should avoid
 * invoking it multiple times on the same path within a given
 * operation, and implementations should not bother checking for such
 * duplicate calls.  For example, in an update, the caller should not
 * invoke the notify func on receiving a prop change and then again
 * on receiving a text change.  Instead, wait until all changes have
 * been received, and then invoke the notify func once (from within
 * an @c svn_delta_editor_t's close_file(), for example), passing
 * the appropriate @a notify-&gt;content_state and @a notify-&gt;prop_state flags.
 *
 * @since New in 1.2.
 */</comment>
<typedef>typedef <function_decl><type><name>void</name></type> (*<name>svn_wc_notify_func2_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>svn_wc_notify_t</name> *</type><name>notify</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/**
 * Similar to @c svn_wc_notify_func2_t, but takes the information as arguments
 * instead of struct fields.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<typedef>typedef <function_decl><type><name>void</name></type> (*<name>svn_wc_notify_func_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                     <param><decl><type><name>svn_wc_notify_action_t</name></type> <name>action</name></decl></param>,
                                     <param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime_type</name></decl></param>,
                                     <param><decl><type><name>svn_wc_notify_state_t</name></type> <name>content_state</name></decl></param>,
                                     <param><decl><type><name>svn_wc_notify_state_t</name></type> <name>prop_state</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** @} */</comment>

<escape char="0xc"/>
<comment type="block">/**
 * A simple callback type to wrap svn_ra_get_file();  see that
 * docstring for more information.
 *
 * This technique allows libsvn_client to 'wrap' svn_ra_get_file() and
 * pass it down into libsvn_wc functions, thus allowing the WC layer
 * to legally call the RA function via (blind) callback.
 *
 * @since New in 1.5
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_wc_get_file_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                          <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                          <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                                          <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
                                          <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<escape char="0xc"/>
<comment type="block">/**
 * Interactive conflict handling
 *
 * @defgroup svn_wc_conflict Conflict callback functionality
 *
 * @{
 *
 * This API gives a Subversion client application the opportunity to
 * define a callback that allows the user to resolve conflicts
 * interactively during updates and merges.
 *
 * If a conflict is discovered, libsvn_wc invokes the callback with an
 * @c svn_wc_conflict_description_t.  This structure describes the
 * path in conflict, whether it's a text or property conflict, and may
 * also present up to three files that can be used to resolve the
 * conflict (perhaps by launching an editor or 3rd-party merging
 * tool).  The structure also provides a possible fourth file (@c
 * merged_file) which, if not NULL, represents libsvn_wc's attempt to
 * contextually merge the first three files.  (Note that libsvn_wc
 * will not attempt to merge a file that it believes is binary, and it
 * will only attempt to merge property values it believes to be a
 * series of multi-line text.)
 *
 * When the callback is finished interacting with the user, it
 * responds by returning a @c svn_wc_conflict_result_t.  This
 * structure indicates whether the user wants to postpone the conflict
 * for later (allowing libsvn_wc to mark the path "conflicted" as
 * usual), or whether the user wants libsvn_wc to use one of the four
 * files as the "final" state for resolving the conflict immediately.
 *
 * Note that the callback is at liberty (and encouraged) to merge the
 * three files itself.  If it does so, it signals this to libsvn_wc by
 * returning a choice of @c svn_wc_conflict_choose_merged.  To return
 * the 'final' merged file to libsvn_wc, the callback has the option of
 * either:
 *
 *    - editing the original @c merged_file in-place
 *
 *        or, if libsvn_wc never supplied a merged_file in the
 *        description structure (i.e. passed NULL for that field),
 *
 *    - return the merged file in the @c svn_wc_conflict_result_t.
 *
 */</comment>

<comment type="block">/** The type of action being attempted on an object.
 *
 * @since New in 1.5.
 */</comment>
<typedef>typedef <type><enum>enum <name>svn_wc_conflict_action_t</name>
<block>{
  <decl><name>svn_wc_conflict_action_edit</name></decl>,    <comment type="block">/* attempting to change text or props */</comment>
  <decl><name>svn_wc_conflict_action_add</name></decl>,     <comment type="block">/* attempting to add object */</comment>
  <decl><name>svn_wc_conflict_action_delete</name></decl>   <comment type="block">/* attempting to delete object */</comment>

}</block></enum></type> <name>svn_wc_conflict_action_t</name>;</typedef>


<comment type="block">/** The pre-existing condition which is causing a state of conflict.
 *
 * @since New in 1.5.
 */</comment>
<typedef>typedef <type><enum>enum <name>svn_wc_conflict_reason_t</name>
<block>{
  <decl><name>svn_wc_conflict_reason_edited</name></decl>,     <comment type="block">/* local edits are already present */</comment>
  <decl><name>svn_wc_conflict_reason_obstructed</name></decl>, <comment type="block">/* another object is in the way */</comment>
  <decl><name>svn_wc_conflict_reason_deleted</name></decl>,    <comment type="block">/* object is already schedule-delete */</comment>
  <decl><name>svn_wc_conflict_reason_missing</name></decl>,    <comment type="block">/* object is unknown or missing */</comment>
  <decl><name>svn_wc_conflict_reason_unversioned</name></decl> <comment type="block">/* object is unversioned */</comment>

}</block></enum></type> <name>svn_wc_conflict_reason_t</name>;</typedef>


<comment type="block">/** The type of conflict being described by an @c
 * svn_wc_conflict_description_t (see below).
 *
 * @since New in 1.5.
 */</comment>
<typedef>typedef <type><enum>enum <name>svn_wc_conflict_kind_t</name>
<block>{
  <decl><name>svn_wc_conflict_kind_text</name></decl>,         <comment type="block">/* textual conflict (on a file) */</comment>
  <decl><name>svn_wc_conflict_kind_property</name></decl>      <comment type="block">/* property conflict (on a file or dir) */</comment>

  <comment type="block">/* ### Add future kinds here that represent "tree" conflicts. */</comment>

}</block></enum></type> <name>svn_wc_conflict_kind_t</name>;</typedef>


<comment type="block">/** A struct that describes a conflict that has occurred in the
 * working copy.  Passed to @c svn_wc_conflict_resolver_func_t.
 *
 * @note Fields may be added to the end of this structure in future
 * versions.  Therefore, to preserve binary compatibility, users
 * should not directly allocate structures of this type.
 *
 * @since New in 1.5.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_conflict_description_t</name>
<block>{
  <comment type="block">/** The path that is being operated on */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/** The node type of the path being operated on */</comment>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>node_kind</name></decl>;</decl_stmt>

  <comment type="block">/** What sort of conflict are we describing? */</comment>
  <decl_stmt><decl><type><name>svn_wc_conflict_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>

  <comment type="block">/** Only set if this is a property conflict. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>property_name</name></decl>;</decl_stmt>

  <comment type="block">/** The following only apply to file objects:
   *   - Whether svn thinks the object is a binary file.
   *   - If available (non-NULL), the svn:mime-type property of the path */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_binary</name></decl>;</decl_stmt>

  <comment type="block">/** mime-type of the object */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime_type</name></decl>;</decl_stmt>

  <comment type="block">/** If not NULL, an open working copy access baton to either the
   *  path itself (if @c path is a directory), or to the parent
   *  directory (if @c path is a file.) */</comment>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>access</name></decl>;</decl_stmt>

  <comment type="block">/** The action being attempted on @c path. */</comment>
  <decl_stmt><decl><type><name>svn_wc_conflict_action_t</name></type> <name>action</name></decl>;</decl_stmt>

  <comment type="block">/** The reason for the conflict. */</comment>
  <decl_stmt><decl><type><name>svn_wc_conflict_reason_t</name></type> <name>reason</name></decl>;</decl_stmt>

  <comment type="block">/** If this is text-conflict and involves the merging of two files
   * descended from a common ancestor, here are the paths of up to
   * four fulltext files that can be used to interactively resolve the
   * conflict.  All four files will be in repository-normal form -- LF
   * line endings and contracted keywords.  (If any of these files are
   * not available, they default to NULL.)
   *
   * On the other hand, if this is a property-conflict, then these
   * paths represent temporary files that contain the three different
   * property-values in conflict.  The fourth path (@c merged_file)
   * may or may not be NULL;  if set, it represents libsvn_wc's
   * attempt to merge the property values together.  (Remember that
   * property values are technically binary values, and thus can't
   * always be merged.)
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_file</name></decl>;</decl_stmt>     <comment type="block">/* common ancestor of the two files being merged */</comment>

  <comment type="block">/** their version of the file */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>their_file</name></decl>;</decl_stmt>

  <comment type="block">/** my locally-edited version of the file */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>my_file</name></decl>;</decl_stmt>

  <comment type="block">/** merged version; may contain conflict markers */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_file</name></decl>;</decl_stmt>

}</block></struct></type> <name>svn_wc_conflict_description_t</name>;</typedef>


<comment type="block">/** The way in which the conflict callback chooses a course of action.
 *
 * @since New in 1.5.
 */</comment>
<typedef>typedef <type><enum>enum <name>svn_wc_conflict_choice_t</name>
<block>{
  <comment type="block">/* Don't resolve the conflict now.  Let libsvn_wc mark the path
     'conflicted', so user can run 'svn resolved' later. */</comment>
  <decl><name>svn_wc_conflict_choose_postpone</name></decl>,

  <comment type="block">/* If their were files to choose from, select one as a way of
     resolving the conflict here and now.  libsvn_wc will then do the
     work of "installing" the chosen file.
  */</comment>
  <decl><name>svn_wc_conflict_choose_base</name></decl>,            <comment type="block">/* original version */</comment>
  <decl><name>svn_wc_conflict_choose_theirs_full</name></decl>,     <comment type="block">/* incoming version */</comment>
  <decl><name>svn_wc_conflict_choose_mine_full</name></decl>,       <comment type="block">/* own version */</comment>
  <decl><name>svn_wc_conflict_choose_theirs_conflict</name></decl>, <comment type="block">/* incoming (for conflicted hunks) */</comment>
  <decl><name>svn_wc_conflict_choose_mine_conflict</name></decl>,   <comment type="block">/* own (for conflicted hunks) */</comment>
  <decl><name>svn_wc_conflict_choose_merged</name></decl>           <comment type="block">/* merged version */</comment>

}</block></enum></type> <name>svn_wc_conflict_choice_t</name>;</typedef>


<comment type="block">/** The final result returned by @a svn_wc_conflict_resolver_func_t.
 *
 * @note Fields may be added to the end of this structure in future
 * versions.  Therefore, to preserve binary compatibility, users
 * should not directly allocate structures of this type.  Instead,
 * construct this structure using @c svn_wc_create_conflict_result()
 * below.
 *
 * @since New in 1.5.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_conflict_result_t</name>
<block>{
  <comment type="block">/** A choice to either delay the conflict resolution or select a
      particular file to resolve the conflict. */</comment>
  <decl_stmt><decl><type><name>svn_wc_conflict_choice_t</name></type> <name>choice</name></decl>;</decl_stmt>

  <comment type="block">/** If not NULL, this is a path to a file which contains the client's
      (or more likely, the user's) merging of the three values in
      conflict.  libsvn_wc accepts this file if (and only if) @c choice
      is set to @c svn_wc_conflict_choose_merged.*/</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_file</name></decl>;</decl_stmt>

}</block></struct></type> <name>svn_wc_conflict_result_t</name>;</typedef>


<comment type="block">/**
 * Allocate an @c svn_wc_conflict_result_t structure in @a pool,
 * initialize and return it.
 *
 * Set the @c choice field of the structure to @a choice, and @c
 * merged_file to @a merged_file.  Set all other fields to their @c
 * _unknown, @c NULL or invalid value, respectively.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_wc_conflict_result_t</name> *</type>
<name>svn_wc_create_conflict_result</name><parameter_list>(<param><decl><type><name>svn_wc_conflict_choice_t</name></type> <name>choice</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_file</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** A callback used in svn_client_merge3(), svn_client_update3(), and
 * svn_client_switch2() for resolving conflicts during the application
 * of a tree delta to a working copy.
 *
 * @a description describes the exact nature of the conflict, and
 * provides information to help resolve it.  @a baton is a closure
 * object; it should be provided by the implementation, and passed by
 * the caller.  All allocations should be performed in @a pool.  When
 * finished, the callback signals its resolution by returning a
 * structure in @a *result.  (See @c svn_wc_conflict_result_t.)
 *
 * Implementations of this callback are free to present the conflict
 * using any user interface.  This may include simple contextual
 * conflicts in a file's text or properties, or more complex
 * 'tree'-based conflcts related to obstructed additions, deletions,
 * and edits.  The callback implementation is free to decide which
 * sorts of conflicts to handle; it's also free to decide which types
 * of conflicts are automatically resolvable and which require user
 * interaction.
 *
 * @since New in 1.5.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_wc_conflict_resolver_func_t</name>)
    <parameter_list>(<param><decl><type><name>svn_wc_conflict_result_t</name> **</type><name>result</name></decl></param>,
     <param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>description</name></decl></param>,
     <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** @} */</comment>


<escape char="0xc"/>
<comment type="block">/**
 * A callback vtable invoked by our diff-editors, as they receive
 * diffs from the server.  'svn diff' and 'svn merge' both implement
 * their own versions of this table.
 *
 * @since New in 1.2.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_diff_callbacks2_t</name>
<block>{
  <comment type="block">/** A file @a path has changed.  If @a tmpfile2 is non-NULL, the
   * contents have changed and those changes can be seen by comparing
   * @a tmpfile1 and @a tmpfile2, which represent @a rev1 and @a rev2 of
   * the file, respectively.
   *
   * If known, the @c svn:mime-type value of each file is passed into
   * @a mimetype1 and @a mimetype2;  either or both of the values can
   * be NULL.  The implementor can use this information to decide if
   * (or how) to generate differences.
   *
   * @a propchanges is an array of (@c svn_prop_t) structures. If it has
   * any elements, the original list of properties is provided in
   * @a originalprops, which is a hash of @c svn_string_t values, keyed on the
   * property name.
   *
   * @a adm_access will be an access baton for the directory containing
   * @a path, or @c NULL if the diff editor is not using access batons.
   *
   * If @a contentstate is non-NULL, set @a *contentstate to the state of
   * the file contents after the operation has been performed.  The same
   * applies for @a propstate regarding the property changes.  (In
   * practice, this is only useful with merge, not diff; diff callbacks
   * will probably set @a *contentstate and @a *propstate to
   * @c svn_wc_notify_state_unknown, since they do not change the state and
   * therefore do not bother to know the state after the operation.)
   */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>file_changed</name>)<parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                               <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>contentstate</name></decl></param>,
                               <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>propstate</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                               <param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/** A file @a path was added.  The contents can be seen by comparing
   * @a tmpfile1 and @a tmpfile2, which represent @a rev1 and @a rev2
   * of the file, respectively.  (If either file is empty, the rev
   * will be 0.)
   *
   * If known, the @c svn:mime-type value of each file is passed into
   * @a mimetype1 and @a mimetype2;  either or both of the values can
   * be NULL.  The implementor can use this information to decide if
   * (or how) to generate differences.
   *
   * @a propchanges is an array of (@c svn_prop_t) structures.  If it contains
   * any elements, the original list of properties is provided in
   * @a originalprops, which is a hash of @c svn_string_t values, keyed on the
   * property name.
   *
   * @a adm_access will be an access baton for the directory containing
   * @a path, or @c NULL if the diff editor is not using access batons.
   *
   * If @a contentstate is non-NULL, set @a *contentstate to the state of the
   * file contents after the operation has been performed.  The same
   * applies for @a propstate regarding the property changes.  (In practice,
   * this is only useful with merge, not diff; diff callbacks will
   * probably set @a *contentstate and *propstate to
   * @c svn_wc_notify_state_unknown, since they do not change the state
   * and therefore do not bother to know the state after the operation.)
   *
   */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>file_added</name>)<parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                             <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>contentstate</name></decl></param>,
                             <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>propstate</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                             <param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/** A file @a path was deleted.  The [loss of] contents can be seen by
   * comparing @a tmpfile1 and @a tmpfile2.  @a originalprops provides
   * the properties of the file.
   *
   * If known, the @c svn:mime-type value of each file is passed into
   * @a mimetype1 and @a mimetype2;  either or both of the values can
   * be NULL.  The implementor can use this information to decide if
   * (or how) to generate differences.
   *
   * @a adm_access will be an access baton for the directory containing
   * @a path, or @c NULL if the diff editor is not using access batons.
   *
   * If @a state is non-NULL, set @a *state to the state of the item
   * after the delete operation has been performed.  (In practice,
   * this is only useful with merge, not diff; diff callbacks will
   * probably set @a *state to @c svn_wc_notify_state_unknown, since
   * they do not change the state and therefore do not bother to know
   * the state after the operation.)
   */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>file_deleted</name>)<parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                               <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                               <param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/** A directory @a path was added.  @a rev is the revision that the
   * directory came from.
   *
   * @a adm_access will be an access baton for the directory containing
   * @a path, or @c NULL if the diff editor is not using access batons.
   */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>dir_added</name>)<parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/** A directory @a path was deleted.
   *
   * @a adm_access will be an access baton for the directory containing
   * @a path, or @c NULL if the diff editor is not using access batons.
   *
   * If @a state is non-NULL, set @a *state to the state of the item
   * after the delete operation has been performed.  (In practice,
   * this is only useful with merge, not diff; diff callbacks will
   * probably set @a *state to @c svn_wc_notify_state_unknown, since
   * they do not change the state and therefore do not bother to know
   * the state after the operation.)
   */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>dir_deleted</name>)<parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                              <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/** A list of property changes (@a propchanges) was applied to the
   * directory @a path.
   *
   * The array is a list of (@c svn_prop_t) structures.
   *
   * The original list of properties is provided in @a original_props,
   * which is a hash of @c svn_string_t values, keyed on the property
   * name.
   *
   * @a adm_access will be an access baton for the directory containing
   * @a path, or @c NULL if the diff editor is not using access batons.
   *
   * If @a state is non-NULL, set @a *state to the state of the properties
   * after the operation has been performed.  (In practice, this is only
   * useful with merge, not diff; diff callbacks will probably set @a *state
   * to @c svn_wc_notify_state_unknown, since they do not change the state
   * and therefore do not bother to know the state after the operation.)
   */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>dir_props_changed</name>)<parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                    <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                                    <param><decl><type><name>apr_hash_t</name> *</type><name>original_props</name></decl></param>,
                                    <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>;</function_decl>

}</block></struct></type> <name>svn_wc_diff_callbacks2_t</name>;</typedef>

<comment type="block">/**
 * Similar to @c svn_wc_diff_callbacks2_t, but with file additions/content
 * changes and property changes split into different functions.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_diff_callbacks_t</name>
<block>{
  <comment type="block">/** Similar to @c file_changed in @c svn_wc_diff_callbacks2_t, but without
   * property change information.  @a tmpfile2 is never NULL. @a state applies
   * to the file contents. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>file_changed</name>)<parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                               <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/** Similar to @c file_added in @c svn_wc_diff_callbacks2_t, but without
   * property change information.  @a *state applies to the file contents. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>file_added</name>)<parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                             <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/** Similar to @c file_deleted in @c svn_wc_diff_callbacks2_t, but without
   * the properties. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>file_deleted</name>)<parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                               <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/** The same as @c dir_added in @c svn_wc_diff_callbacks2_t. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>dir_added</name>)<parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/** The same as @c dir_deleted in @c svn_wc_diff_callbacks2_t. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>dir_deleted</name>)<parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                              <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/** Similar to @c dir_props_changed in @c svn_wc_diff_callbacks2_t, but this
   * function is called for files as well as directories. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>props_changed</name>)<parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                                <param><decl><type><name>apr_hash_t</name> *</type><name>original_props</name></decl></param>,
                                <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>;</function_decl>

}</block></struct></type> <name>svn_wc_diff_callbacks_t</name>;</typedef>

<escape char="0xc"/>
<comment type="block">/* Asking questions about a working copy. */</comment>

<comment type="block">/** Set @a *wc_format to @a path's working copy format version number if
 * @a path is a valid working copy directory, else set it to 0.
 * Return error @c APR_ENOENT if @a path does not exist at all.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_check_wc</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>int</name> *</type><name>wc_format</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *has_binary_prop to @c TRUE iff @a path has been marked
 * with a property indicating that it is non-text (in other words, binary).
 * @a adm_access is an access baton set that contains @a path.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_has_binary_prop</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>has_binary_prop</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/* Detecting modification. */</comment>

<comment type="block">/** Set @a *modified_p to non-zero if @a filename's text is modified
 * with regard to the base revision, else set @a *modified_p to zero.
 * @a filename is a path to the file, not just a basename. @a adm_access
 * must be an access baton for @a filename.
 *
 * If @a force_comparison is @c TRUE, this function will not allow
 * early return mechanisms that avoid actual content comparison.
 * Instead, if there is a text base, a full byte-by-byte comparison
 * will be done, and the entry checksum verified as well.  (This means
 * that if the text base is much longer than the working file, every
 * byte of the text base will still be examined.)
 *
 * If @a filename does not exist, consider it unmodified.  If it exists
 * but is not under revision control (not even scheduled for
 * addition), return the error @c SVN_ERR_ENTRY_NOT_FOUND.
 *
 * If @a filename is unmodified but has a timestamp variation then this
 * function may "repair" @a filename's text-time by setting it to
 * @a filename's last modification time.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_text_modified_p</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>modified_p</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>force_comparison</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *modified_p to non-zero if @a path's properties are modified
 * with regard to the base revision, else set @a modified_p to zero.
 * @a adm_access must be an access baton for @a path.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_props_modified_p</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>modified_p</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>



<escape char="0xc"/>
<comment type="block">/** Administrative subdir.
 *
 * Ideally, this would be completely private to wc internals (in fact,
 * it used to be that adm_subdir() in adm_files.c was the only function
 * who knew the adm subdir's name).  However, import wants to protect
 * against importing administrative subdirs, so now the name is a
 * matter of public record.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC_ADM_DIR_NAME</name></cpp:macro>   <cpp:value>".svn"</cpp:value></cpp:define>


<escape char="0xc"/>
<comment type="block">/* Entries and status. */</comment>

<comment type="block">/** The schedule states an entry can be in. */</comment>
<typedef>typedef <type><enum>enum <name>svn_wc_schedule_t</name>
<block>{
  <comment type="block">/** Nothing special here */</comment>
  <decl><name>svn_wc_schedule_normal</name></decl>,

  <comment type="block">/** Slated for addition */</comment>
  <decl><name>svn_wc_schedule_add</name></decl>,

  <comment type="block">/** Slated for deletion */</comment>
  <decl><name>svn_wc_schedule_delete</name></decl>,

  <comment type="block">/** Slated for replacement (delete + add) */</comment>
  <decl><name>svn_wc_schedule_replace</name></decl>

}</block></enum></type> <name>svn_wc_schedule_t</name>;</typedef>


<comment type="block">/**
 * Values for the working_size field in svn_wc_entry_t
 * when it isn't set to the actual size value of the unchanged
 * working file.
 *
 * @defgroup svn_wc_entry_working_size_constants Working size constants
 *
 * @{
 */</comment>

<comment type="block">/** The value of the working size is unknown (hasn't been
 *  calculated and stored in the past for whatever reason).
 *
 * @since New in 1.5
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC_ENTRY_WORKING_SIZE_UNKNOWN</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<comment type="block">/** @} */</comment>

<comment type="block">/** A working copy entry -- that is, revision control information about
 * one versioned entity.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_entry_t</name>
<block>{
  <comment type="block">/* IMPORTANT: If you extend this structure, add new fields to the end. */</comment>

  <comment type="block">/* General Attributes */</comment>

  <comment type="block">/** entry's name */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>

  <comment type="block">/** base revision */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>

  <comment type="block">/** url in repository */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>

  <comment type="block">/** canonical repository URL or NULL if not known */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl>;</decl_stmt>

  <comment type="block">/** repository uuid */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl>;</decl_stmt>

  <comment type="block">/** node kind (file, dir, ...) */</comment>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>

  <comment type="block">/* State information */</comment>

  <comment type="block">/** scheduling (add, delete, replace ...) */</comment>
  <decl_stmt><decl><type><name>svn_wc_schedule_t</name></type> <name>schedule</name></decl>;</decl_stmt>

  <comment type="block">/** in a copied state (possibly because the entry is a child of a
      path that is @c svn_wc_schedule_add or @c svn_wc_schedule_replace,
      when the entry itself is @c svn_wc_schedule_normal) */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>copied</name></decl>;</decl_stmt>

  <comment type="block">/** deleted, but parent rev lags behind */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>deleted</name></decl>;</decl_stmt>

  <comment type="block">/** absent -- we know an entry of this name exists, but that's all
      (usually this happens because of authz restrictions)  */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>absent</name></decl>;</decl_stmt>

  <comment type="block">/** for THIS_DIR entry, implies whole entries file is incomplete */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>incomplete</name></decl>;</decl_stmt>

  <comment type="block">/** copyfrom location */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_url</name></decl>;</decl_stmt>

  <comment type="block">/** copyfrom revision */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>

  <comment type="block">/** old version of conflicted file */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_old</name></decl>;</decl_stmt>

  <comment type="block">/** new version of conflicted file */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_new</name></decl>;</decl_stmt>

  <comment type="block">/** working version of conflicted file */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_wrk</name></decl>;</decl_stmt>

  <comment type="block">/** property reject file */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prejfile</name></decl>;</decl_stmt>

  <comment type="block">/** last up-to-date time for text contents (0 means no information available)
   */</comment>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>text_time</name></decl>;</decl_stmt>

  <comment type="block">/** last up-to-date time for properties (0 means no information available) */</comment>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>prop_time</name></decl>;</decl_stmt>

  <comment type="block">/** Hex MD5 checksum for the untranslated text base file,
   * can be @c NULL for backwards compatibility.
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>checksum</name></decl>;</decl_stmt>

  <comment type="block">/* "Entry props" */</comment>

  <comment type="block">/** last revision this was changed */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>cmt_rev</name></decl>;</decl_stmt>

  <comment type="block">/** last date this was changed */</comment>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>cmt_date</name></decl>;</decl_stmt>

  <comment type="block">/** last commit author of this item */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmt_author</name></decl>;</decl_stmt>

  <comment type="block">/** lock token or NULL if path not locked in this WC
   * @since New in 1.2.
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl>;</decl_stmt>
  <comment type="block">/** lock owner, or NULL if not locked in this WC
   * @since New in 1.2.
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_owner</name></decl>;</decl_stmt>
  <comment type="block">/** lock comment or NULL if not locked in this WC or no comment
   * @since New in 1.2.
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_comment</name></decl>;</decl_stmt>
  <comment type="block">/** Lock creation date or 0 if not locked in this WC
   * @since New in 1.2.
   */</comment>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>lock_creation_date</name></decl>;</decl_stmt>

  <comment type="block">/** Whether this entry has any working properties.
   * False if this information is not stored in the entry.
   *
   * @since New in 1.4. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_props</name></decl>;</decl_stmt>

  <comment type="block">/** Whether this entry has property modifications.
   *
   * @note For working copies in older formats, this flag is not valid.
   *
   * @see svn_wc_props_modified_p().
   *
   * @since New in 1.4. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_prop_mods</name></decl>;</decl_stmt>

  <comment type="block">/** A space-separated list of all properties whose presence/absence is cached
   * in this entry.
   *
   * @see @c present_props.
   *
   * @since New in 1.4. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cachable_props</name></decl>;</decl_stmt>

  <comment type="block">/** Cached property existence for this entry.
   * This is a space-separated list of property names.  If a name exists in
   * @c cachable_props but not in this list, this entry does not have that
   * property.  If a name exists in both lists, the property is present on this
   * entry.
   *
   * @since New in 1.4. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>present_props</name></decl>;</decl_stmt>

  <comment type="block">/** which changelist this item is part of, or NULL if not part of any.
   * @since New in 1.5.
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changelist</name></decl>;</decl_stmt>

  <comment type="block">/** Size of the file after being translated into local
   * representation, or @c SVN_WC_ENTRY_WORKING_SIZE_UNKNOWN if
   * unknown.
   *
   * @since New in 1.5.
   */</comment>
  <decl_stmt><decl><type><name>apr_off_t</name></type> <name>working_size</name></decl>;</decl_stmt>

  <comment type="block">/** Whether a local copy of this entry should be kept in the working copy
   * after a deletion has been committed,  Only valid for the this-dir entry
   * when it is scheduled for deletion.
   *
   * @since New in 1.5. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>keep_local</name></decl>;</decl_stmt>

  <comment type="block">/** The depth of this entry.
   *
   * ### It's a bit annoying that we only use this on this_dir
   * ### entries, yet it will exist (with value svn_depth_infinity) on
   * ### all entries.  Maybe some future extensibility would make this
   * ### field meaningful on entries besides this_dir.
   *
   * @since New in 1.5. */</comment>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl>;</decl_stmt>

  <comment type="block">/* IMPORTANT: If you extend this structure, check the following functions in
   * subversion/libsvn_wc/entries.c, to see if you need to extend them as well.
   *
   * svn_wc__atts_to_entry()
   * svn_wc_entry_dup()
   * alloc_entry()
   * read_entry()
   * write_entry()
   * fold_entry()
   *
   */</comment>
}</block></struct></type> <name>svn_wc_entry_t</name>;</typedef>


<comment type="block">/** How an entries file's owner dir is named in the entries file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC_ENTRY_THIS_DIR</name></cpp:macro>  <cpp:value>""</cpp:value></cpp:define>


<comment type="block">/** Set @a *entry to an entry for @a path, allocated in the access baton
 * pool.  If @a show_hidden is TRUE, return the entry even if it's in
 * 'deleted' or 'absent' state.  If @a path is not under revision
 * control, or if entry is hidden, not scheduled for re-addition,
 * and @a show_hidden is @c FALSE, then set @a *entry to @c NULL.
 *
 * @a *entry should not be modified, since doing so modifies the entries
 * cache in @a adm_access without changing the entries file on disk.
 *
 * If @a path is not a directory then @a adm_access must be an access baton
 * for the parent directory of @a path.  To avoid needing to know whether
 * @a path is a directory or not, if @a path is a directory @a adm_access
 * can still be an access baton for the parent of @a path so long as the
 * access baton for @a path itself is in the same access baton set.
 *
 * @a path can be relative or absolute but must share the same base used
 * to open @a adm_access.
 *
 * Note that it is possible for @a path to be absent from disk but still
 * under revision control; and conversely, it is possible for @a path to
 * be present, but not under revision control.
 *
 * Use @a pool only for local processing.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> **</type><name>entry</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
             <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Parse the `entries' file for @a adm_access and return a hash @a entries,
 * whose keys are (&lt;tt&gt;const char *&lt;/tt&gt;) entry names and values are
 * (&lt;tt&gt;svn_wc_entry_t *&lt;/tt&gt;).  The hash @a entries, and its keys and
 * values, are allocated from the pool used to open the @a adm_access
 * baton (that's how the entries caching works).  @a pool is used for
 * transient allocations.
 *
 * Entries that are in a 'deleted' or 'absent' state (and not
 * scheduled for re-addition) are not returned in the hash, unless
 * @a show_hidden is TRUE.
 *
 * @par Important:
 * The @a entries hash is the entries cache in @a adm_access
 * and so usually the hash itself, the keys and the values should be treated
 * as read-only.  If any of these are modified then it is the caller's
 * responsibility to ensure that the entries file on disk is updated.  Treat
 * the hash values as type (&lt;tt&gt;const svn_wc_entry_t *&lt;/tt&gt;) if you wish to
 * avoid accidental modification.  Modifying the schedule member is a
 * particularly bad idea, as the entries writing process relies on having
 * access to the original schedule.  Use a duplicate entry to modify the
 * schedule.
 *
 * @par Important:
 * Only the entry structures representing files and
 * @c SVN_WC_ENTRY_THIS_DIR contain complete information.  The entry
 * structures representing subdirs have only the `kind' and `state'
 * fields filled in.  If you want info on a subdir, you must use this
 * routine to open its @a path and read the @c SVN_WC_ENTRY_THIS_DIR
 * structure, or call svn_wc_entry() on its @a path.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_entries_read</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>entries</name></decl></param>,
                    <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Return a duplicate of @a entry, allocated in @a pool.  No part of the new
 * entry will be shared with @a entry.
 */</comment>
<function_decl><type><name>svn_wc_entry_t</name> *</type>
<name>svn_wc_entry_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Given a @a dir_path under version control, decide if one of its
 * entries (@a entry) is in state of conflict; return the answers in
 * @a text_conflicted_p and @a prop_conflicted_p.
 *
 * (If the entry mentions that a .rej or .prej exist, but they are
 * both removed, assume the conflict has been resolved by the user.)
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_conflicted_p</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>text_conflicted_p</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name> *</type><name>prop_conflicted_p</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir_path</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Set @a *url and @a *rev to the ancestor URL and revision for @a path,
 * allocating in @a pool.  @a adm_access must be an access baton for @a path.
 *
 * If @a url or @a rev is NULL, then ignore it (just don't return the
 * corresponding information).
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_ancestry</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>url</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name> *</type><name>rev</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** A callback vtable invoked by the generic entry-walker function.
 * @since New in 1.5.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_entry_callbacks2_t</name>
<block>{
  <comment type="block">/** An @a entry was found at @a path. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>found_entry</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/** Handle the error @a err encountered while processing @a path.
   * Wrap or squelch @a err as desired, and return an @c svn_error_t
   * *, or @c SVN_NO_ERROR.
   */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>handle_error</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

}</block></struct></type> <name>svn_wc_entry_callbacks2_t</name>;</typedef>

<comment type="block">/** @deprecated Provided for backward compatibility with the 1.4 API. */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_entry_callbacks_t</name>
<block>{
  <comment type="block">/** An @a entry was found at @a path. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>found_entry</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

}</block></struct></type> <name>svn_wc_entry_callbacks_t</name>;</typedef>

<comment type="block">/**
 * A generic entry-walker.
 *
 * Do a potentially recursive depth-first entry-walk beginning on
 * @a path, which can be a file or dir.  Call callbacks in
 * @a walk_callbacks, passing @a walk_baton to each.  Use @a pool for
 * looping, recursion, and to allocate all entries returned.
 * @a adm_access must be an access baton for @a path.
 *
 * If @a depth is @c svn_depth_empty, invoke the callbacks on @a path
 * and return without recursing further.  If @c svn_depth_files, do
 * the same and invoke the callbacks on file children (if any) of
 * @a path, then return.  If @c svn_depth_immediates, do the preceding
 * but also invoke callbacks on immediate subdirectories, then return.
 * If @c svn_depth_infinity, recurse fully starting from @a path.
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton to determine
 * if the client has cancelled the operation.
 *
 * Like our other entries interfaces, entries that are in a 'deleted'
 * or 'absent' state (and not scheduled for re-addition) are not
 * discovered, unless @a show_hidden is TRUE.
 *
 * When a new directory is entered, @c SVN_WC_ENTRY_THIS_DIR will always
 * be returned first.
 *
 * @note Callers should be aware that each directory will be
 * returned *twice*:  first as an entry within its parent, and
 * subsequently as the '.' entry within itself.  The two calls can be
 * distinguished by looking for @c SVN_WC_ENTRY_THIS_DIR in the 'name'
 * field of the entry.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_walk_entries3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_callbacks2_t</name>
                     *</type><name>walk_callbacks</name></decl></param>,
                     <param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
                     <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
                     <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                     <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_walk_entries3(), but without cancellation support
 * or error handling from @a walk_callbacks, and with @a depth always
 * set to @c svn_depth_infinity.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_walk_entries2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_callbacks_t</name>
                     *</type><name>walk_callbacks</name></decl></param>,
                     <param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
                     <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                     <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_walk_entries2(), but without cancellation support.
 *
 * @deprecated Provided for backward compatibility with the 1.0 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_walk_entries</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_callbacks_t</name>
                    *</type><name>walk_callbacks</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Mark missing @a path as 'deleted' in its @a parent's list of entries.
 *
 * Return @c SVN_ERR_WC_PATH_FOUND if @a path isn't actually missing.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_mark_missing_deleted</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Ensure that an administrative area exists for @a path, so that @a
 * path is a working copy subdir based on @a url at @a revision, with
 * depth @a depth, and with repository UUID @a uuid and repository
 * root URL @a repos.
 *
 * @a depth must be a definite depth, it cannot be @c svn_depth_unknown.
 * @a uuid and @a repos may be @c NULL.  If non-@c NULL, @a repos must
 * be a prefix of @a url.
 *
 * If the administrative area does not exist, then create it and
 * initialize it to an unlocked state.
 *
 * If the administrative area already exists then the given @a url
 * must match the URL in the administrative area and the given
 * @a revision must match the BASE of the working copy dir unless
 * the admin directory is scheduled for deletion or the
 * SVN_ERR_WC_OBSTRUCTED_UPDATE error will be returned.
 *
 * Do not ensure existence of @a path itself; if @a path does not
 * exist, return error.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_ensure_adm3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl></param>,
                   <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                   <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Similar to svn_wc_ensure_adm3(), but with @a depth set to
 * @c svn_depth_infinity.
 *
 * @deprecated Provided for backwards compatibility with the 1.4 API.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_ensure_adm2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl></param>,
                   <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Similar to svn_wc_ensure_adm2(), but with @a repos set to @c NULL.
 *
 * @deprecated Provided for backwards compatibility with the 1.2 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_ensure_adm</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set the repository root URL of @a path to @a repos, if possible.
 *
 * @a adm_access must contain @a path and be write-locked, if @a path
 * is versioned.  Return no error if path is missing or unversioned.
 * Use @a pool for temporary allocations.
 *
 * @note In some circumstances, the repository root can't be set
 * without making the working copy corrupt.  In such cases, this
 * function just returns no error, without modifying the @a path entry.
 *
 * @note This function exists to make it possible to try to set the repository
 * root in old working copies; new working copies normally get this set at
 * creation time.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_maybe_set_repos_root</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/**
 * @defgroup svn_wc_status Working copy status.
 * @{
 *
 * We have two functions for getting working copy status: one function
 * for getting the status of exactly one thing, and another for
 * getting the statuses of (potentially) multiple things.
 *
 * The concept of depth, as explained in the documentation for
 * svn_depth_t, may be useful in understanding this.  Suppose we're
 * getting the status of directory D:
 *
 * To offer all three levels, we could have one unified function,
 * taking a `depth' parameter.  Unfortunately, because this function
 * would have to handle multiple return values as well as the single
 * return value case, getting the status of just one entity would
 * become cumbersome: you'd have to roll through a hash to find one
 * lone status.
 *
 * So we have svn_wc_status() for depth-empty (just D itself), and
 * svn_wc_get_status_editor() for depth-immediates and depth-infinity,
 * since the latter two involve multiple return values.
 *
 * @note The status structures may contain a @c NULL -&gt;entry field.
 * This indicates an item that is not versioned in the working copy.
 */</comment>

<comment type="block">/** The type of status for the working copy. */</comment>
<enum>enum <name>svn_wc_status_kind</name>
<block>{
    <comment type="block">/** does not exist */</comment>
    <decl><name>svn_wc_status_none</name> <init>= <expr>1</expr></init></decl>,

    <comment type="block">/** is not a versioned thing in this wc */</comment>
    <decl><name>svn_wc_status_unversioned</name></decl>,

    <comment type="block">/** exists, but uninteresting */</comment>
    <decl><name>svn_wc_status_normal</name></decl>,

    <comment type="block">/** is scheduled for addition */</comment>
    <decl><name>svn_wc_status_added</name></decl>,

    <comment type="block">/** under v.c., but is missing */</comment>
    <decl><name>svn_wc_status_missing</name></decl>,

    <comment type="block">/** scheduled for deletion */</comment>
    <decl><name>svn_wc_status_deleted</name></decl>,

    <comment type="block">/** was deleted and then re-added */</comment>
    <decl><name>svn_wc_status_replaced</name></decl>,

    <comment type="block">/** text or props have been modified */</comment>
    <decl><name>svn_wc_status_modified</name></decl>,

    <comment type="block">/** local mods received repos mods */</comment>
    <decl><name>svn_wc_status_merged</name></decl>,

    <comment type="block">/** local mods received conflicting repos mods */</comment>
    <decl><name>svn_wc_status_conflicted</name></decl>,

    <comment type="block">/** is unversioned but configured to be ignored */</comment>
    <decl><name>svn_wc_status_ignored</name></decl>,

    <comment type="block">/** an unversioned resource is in the way of the versioned resource */</comment>
    <decl><name>svn_wc_status_obstructed</name></decl>,

    <comment type="block">/** an unversioned path populated by an svn:externals property */</comment>
    <decl><name>svn_wc_status_external</name></decl>,

    <comment type="block">/** a directory doesn't contain a complete entries list */</comment>
    <decl><name>svn_wc_status_incomplete</name></decl>
}</block>;</enum>

<comment type="block">/**
 * Structure for holding the "status" of a working copy item.
 *
 * The item's entry data is in @a entry, augmented and possibly shadowed
 * by the other fields.  @a entry is @c NULL if this item is not under
 * version control.
 *
 * @note Fields may be added to the end of this structure in future
 * versions.  Therefore, to preserve binary compatibility, users
 * should not directly allocate structures of this type.
 *
 * @since New in 1.2.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_status2_t</name>
<block>{
  <comment type="block">/** Can be @c NULL if not under version control. */</comment>
  <decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <comment type="block">/** The status of the entries text. */</comment>
  <enum>enum <name>svn_wc_status_kind</name> <name>text_status</name>;</enum>

  <comment type="block">/** The status of the entries properties. */</comment>
  <enum>enum <name>svn_wc_status_kind</name> <name>prop_status</name>;</enum>

  <comment type="block">/** a directory can be 'locked' if a working copy update was interrupted. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>locked</name></decl>;</decl_stmt>

  <comment type="block">/** a file or directory can be 'copied' if it's scheduled for
   * addition-with-history (or part of a subtree that is scheduled as such.).
   */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>copied</name></decl>;</decl_stmt>

  <comment type="block">/** a file or directory can be 'switched' if the switch command has been
   * used.
   */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>switched</name></decl>;</decl_stmt>

  <comment type="block">/** The entry's text status in the repository. */</comment>
  <enum>enum <name>svn_wc_status_kind</name> <name>repos_text_status</name>;</enum>

  <comment type="block">/** The entry's property status in the repository. */</comment>
  <enum>enum <name>svn_wc_status_kind</name> <name>repos_prop_status</name>;</enum>

  <comment type="block">/** The entry's lock in the repository, if any. */</comment>
  <decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>repos_lock</name></decl>;</decl_stmt>

  <comment type="block">/** Set to the URI (actual or expected) of the item.
   * @since New in 1.3
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>

  <comment type="block">/**
   * @defgroup svn_wc_status_ood WC out-of-date info from the repository
   * @{
   *
   * When the working copy item is out-of-date compared to the
   * repository, the following fields represent the state of the
   * youngest revision of the item in the repository.  If the working
   * copy is not out of date, the fields are initialized as described
   * below.
   */</comment>

  <comment type="block">/** Set to the youngest committed revision, or @c SVN_INVALID_REVNUM
   * if not out of date.
   * @since New in 1.3
   */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>ood_last_cmt_rev</name></decl>;</decl_stmt>

  <comment type="block">/** Set to the most recent commit date, or @c 0 if not out of date.
   * @since New in 1.3
   */</comment>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>ood_last_cmt_date</name></decl>;</decl_stmt>

  <comment type="block">/** Set to the node kind of the youngest commit, or @c svn_node_none
   * if not out of date.
   * @since New in 1.3
   */</comment>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>ood_kind</name></decl>;</decl_stmt>

  <comment type="block">/** Set to the user name of the youngest commit, or @c NULL if not
   * out of date or non-existent.  Because a non-existent @c
   * svn:author property has the same behavior as an out-of-date
   * working copy, examine @c ood_last_cmt_rev to determine whether
   * the working copy is out of date.
   * @since New in 1.3
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ood_last_cmt_author</name></decl>;</decl_stmt>

  <comment type="block">/** @} */</comment>

  <comment type="block">/* NOTE! Please update svn_wc_dup_status2() when adding new fields here. */</comment>
}</block></struct></type> <name>svn_wc_status2_t</name>;</typedef>



<comment type="block">/**
 * Same as @c svn_wc_status2_t, but without the svn_lock_t 'repos_lock' field.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_status_t</name>
<block>{
  <comment type="block">/** Can be @c NULL if not under version control. */</comment>
  <decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <comment type="block">/** The status of the entries text. */</comment>
  <enum>enum <name>svn_wc_status_kind</name> <name>text_status</name>;</enum>

  <comment type="block">/** The status of the entries properties. */</comment>
  <enum>enum <name>svn_wc_status_kind</name> <name>prop_status</name>;</enum>

  <comment type="block">/** a directory can be 'locked' if a working copy update was interrupted. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>locked</name></decl>;</decl_stmt>

  <comment type="block">/** a file or directory can be 'copied' if it's scheduled for
   * addition-with-history (or part of a subtree that is scheduled as such.).
   */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>copied</name></decl>;</decl_stmt>

  <comment type="block">/** a file or directory can be 'switched' if the switch command has been
   * used.
   */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>switched</name></decl>;</decl_stmt>

  <comment type="block">/** The entry's text status in the repository. */</comment>
  <enum>enum <name>svn_wc_status_kind</name> <name>repos_text_status</name>;</enum>

  <comment type="block">/** The entry's property status in the repository. */</comment>
  <enum>enum <name>svn_wc_status_kind</name> <name>repos_prop_status</name>;</enum>

}</block></struct></type> <name>svn_wc_status_t</name>;</typedef>



<comment type="block">/**
 * Return a deep copy of the @a orig_stat status structure, allocated
 * in @a pool.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_wc_status2_t</name> *</type>
<name>svn_wc_dup_status2</name><parameter_list>(<param><decl><type><name>svn_wc_status2_t</name> *</type><name>orig_stat</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Same as svn_wc_dup_status2(), but for older svn_wc_status_t structures.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_wc_status_t</name> *</type>
<name>svn_wc_dup_status</name><parameter_list>(<param><decl><type><name>svn_wc_status_t</name> *</type><name>orig_stat</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Fill @a *status for @a path, allocating in @a pool.
 * @a adm_access must be an access baton for @a path.
 *
 * Here are some things to note about the returned structure.  A quick
 * examination of the @c status-&gt;text_status after a successful return of
 * this function can reveal the following things:
 *
 *    - @c svn_wc_status_none : @a path is not versioned, and is either not
 *                              present on disk, or is ignored by svn's
 *                              default ignore regular expressions or the
 *                              svn:ignore property setting for @a path's
 *                              parent directory.
 *
 *    - @c svn_wc_status_missing : @a path is versioned, but is missing from
 *                                 the working copy.
 *
 *    - @c svn_wc_status_unversioned : @a path is not versioned, but is
 *                                     present on disk and not being
 *                                     ignored (see above).
 *
 * The other available results for the @c text_status field are more
 * straightforward in their meanings.  See the comments on the
 * @c svn_wc_status_kind structure for some hints.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_status2</name><parameter_list>(<param><decl><type><name>svn_wc_status2_t</name> **</type><name>status</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 *  Same as svn_wc_status2(), but for older svn_wc_status_t structures.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_status</name><parameter_list>(<param><decl><type><name>svn_wc_status_t</name> **</type><name>status</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>

<comment type="block">/**
 * A callback for reporting a @a status about @a path.
 *
 * @a baton is a closure object; it should be provided by the
 * implementation, and passed by the caller.
 *
 * @since New in 1.2.
 */</comment>
<typedef>typedef <function_decl><type><name>void</name></type> (*<name>svn_wc_status_func2_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                      <param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/**
 *  Same as svn_wc_status_func2_t(), but for older svn_wc_status_t structures.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<typedef>typedef <function_decl><type><name>void</name></type> (*<name>svn_wc_status_func_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                     <param><decl><type><name>svn_wc_status_t</name> *</type><name>status</name></decl></param>)</parameter_list>;</function_decl></typedef>


<comment type="block">/**
 * Set @a *editor and @a *edit_baton to an editor that generates @c
 * svn_wc_status2_t structures and sends them through @a status_func /
 * @a status_baton.  @a anchor is an access baton, with a tree lock,
 * for the local path to the working copy which will be used as the
 * root of our editor.  If @a target is not empty, it represents an
 * entry in the @a anchor path which is the subject of the editor
 * drive (otherwise, the @a anchor is the subject).
 *
 * If @a set_locks_baton is non-@c NULL, it will be set to a baton that can
 * be used in a call to the svn_wc_status_set_repos_locks() function.
 *
 * Callers drive this editor to describe working copy out-of-dateness
 * with respect to the repository.  If this information is not
 * available or not desired, callers should simply call the
 * close_edit() function of the @a editor vtable.
 *
 * If the editor driver calls @a editor's set_target_revision() vtable
 * function, then when the edit drive is completed, @a *edit_revision
 * will contain the revision delivered via that interface.
 *
 * Assuming the target is a directory, then:
 *
 *   - If @a get_all is FALSE, then only locally-modified entries will be
 *     returned.  If TRUE, then all entries will be returned.
 *
 *   - If @a depth is @c svn_depth_empty, a status structure will
 *     be returned for the target only; if @c svn_depth_files, for the
 *     target and its immediate file children; if
 *     @c svn_depth_immediates, for the target and its immediate
 *     children; if @c svn_depth_infinity, for the target and
 *     everything underneath it, fully recursively.
 *
 *     If @a depth is @c svn_depth_unknown, take depths from the
 *     working copy and behave as above in each directory's case.
 *
 *     If the given @a depth is incompatible with the depth found in a
 *     working copy directory, the found depth always governs.
 *
 * If @a no_ignore is set, statuses that would typically be ignored
 * will instead be reported.
 *
 * @a ignore_patterns is an array of file patterns matching
 * unversioned files to ignore for the purposes of status reporting,
 * or @c NULL if the default set of ignorable file patterns should be used.
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton while building
 * the @a statushash to determine if the client has cancelled the operation.
 *
 * If @a traversal_info is non-NULL, then record pre-update traversal
 * state in it.  (Caller should obtain @a traversal_info from
 * svn_wc_init_traversal_info().)
 *
 * Allocate the editor itself in @a pool, but the editor does temporary
 * allocations in a subpool of @a pool.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_status_editor3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>set_locks_baton</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name> *</type><name>edit_revision</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                          <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
                          <param><decl><type><name>apr_array_header_t</name> *</type><name>ignore_patterns</name></decl></param>,
                          <param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                          <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                          <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Like svn_wc_get_status_editor3(), but with @a ignore_patterns
 * provided from the corresponding value in @a config, and @a recurse
 * instead of @a depth.  If @a recurse is TRUE, behave as if for @c
 * svn_depth_infinity; else if @a recurse is FALSE, behave as if for
 * @c svn_depth_immediates.
 *
 * @since New in 1.2.
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_status_editor2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>set_locks_baton</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name> *</type><name>edit_revision</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                          <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
                          <param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                          <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                          <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Same as svn_wc_get_status_editor2(), but with @a set_locks_baton set
 * to @c NULL, and taking a deprecated svn_wc_status_func_t argument.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_status_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                         <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name> *</type><name>edit_revision</name></decl></param>,
                         <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                         <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
                         <param><decl><type><name>svn_wc_status_func_t</name></type> <name>status_func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                         <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                         <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Associate @a locks, a hash table mapping &lt;tt&gt;const char*&lt;/tt&gt;
 * absolute repository paths to &lt;tt&gt;svn_lock_t&lt;/tt&gt; objects, with a
 * @a set_locks_baton returned by an earlier call to
 * svn_wc_get_status_editor3().  @a repos_root is the repository root URL.
 * Perform all allocations in @a pool.
 *
 * @note @a locks will not be copied, so it must be valid throughout the
 * edit.  @a pool must also not be destroyed or cleared before the edit is
 * finished.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_status_set_repos_locks</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>set_locks_baton</name></decl></param>,
                              <param><decl><type><name>apr_hash_t</name> *</type><name>locks</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** @} */</comment>

<escape char="0xc"/>
<comment type="block">/**
 * Copy @a src to @a dst_basename in @a dst_parent, and schedule
 * @a dst_basename for addition to the repository, remembering the copy
 * history.
 *
 * @a src must be a file or directory under version control; @a dst_parent
 * must be a directory under version control in the same working copy;
 * @a dst_basename will be the name of the copied item, and it must not
 * exist already.
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton at
 * various points during the operation.  If it returns an error
 * (typically @c SVN_ERR_CANCELLED), return that error immediately.
 *
 * For each file or directory copied, @a notify_func will be called
 * with its path and the @a notify_baton.  @a notify_func may be @c NULL
 * if you are not interested in this information.
 *
 * @par Important:
 * This is a variant of svn_wc_add().  No changes will happen
 * to the repository until a commit occurs.  This scheduling can be
 * removed with svn_client_revert2().
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_copy2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
             <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dst_parent</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_basename</name></decl></param>,
             <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
             <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_copy2(), but takes an @c svn_wc_notify_func_t instead.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_copy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dst_parent</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_basename</name></decl></param>,
            <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
            <param><decl><type><name>svn_wc_notify_func_t</name></type> <name>notify_func</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Schedule @a path for deletion, it will be deleted from the repository on
 * the next commit.  If @a path refers to a directory, then a recursive
 * deletion will occur.  @a adm_access must hold a write lock for the parent
 * of @a path.
 *
 * If @a keep_local is FALSE, this function immediately deletes all files,
 * modified and unmodified, versioned and unversioned from the working copy.
 * It also immediately deletes unversioned directories and directories that
 * are scheduled to be added.  Only versioned directories will remain in the
 * working copy, these get deleted by the update following the commit.
 *
 * If @a keep_local is TRUE, all files and directories will be kept in the
 * working copy (and will become unversioned on the next commit).
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton at
 * various points during the operation.  If it returns an error
 * (typically @c SVN_ERR_CANCELLED), return that error immediately.
 *
 * For each path marked for deletion, @a notify_func will be called with
 * the @a notify_baton and that path. The @a notify_func callback may be
 * @c NULL if notification is not needed.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_delete3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
               <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
               <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>keep_local</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_delete3(), but with @a keep_local always set to FALSE.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_delete2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
               <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
               <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_delete2(), but takes an @c svn_wc_notify_func_t instead.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_delete</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
              <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
              <param><decl><type><name>svn_wc_notify_func_t</name></type> <name>notify_func</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Put @a path under version control by adding an entry in its parent,
 * and, if @a path is a directory, adding an administrative area.  The
 * new entry and anything under it is scheduled for addition to the
 * repository.  @a parent_access should hold a write lock for the parent
 * directory of @a path.  If @a path is a directory then an access baton
 * for @a path will be added to the set containing @a parent_access.
 *
 * If @a path does not exist, return @c SVN_ERR_WC_PATH_NOT_FOUND.
 *
 * If @a copyfrom_url is non-NULL, it and @a copyfrom_rev are used as
 * `copyfrom' args.  This is for copy operations, where one wants
 * to schedule @a path for addition with a particular history.
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton at
 * various points during the operation.  If it returns an error
 * (typically @c SVN_ERR_CANCELLED), return that error immediately.
 *
 * When the @a path has been added, then @a notify_func will be called
 * (if it is not @c NULL) with the @a notify_baton and the path.
 *
 * Return @c SVN_ERR_WC_NODE_KIND_CHANGE if @a path is both an unversioned
 * directory and a file that is scheduled for deletion or in state deleted.
 *
 *&lt;pre&gt; ### This function currently does double duty -- it is also
 * ### responsible for "switching" a working copy directory over to a
 * ### new copyfrom ancestry and scheduling it for addition.  Here is
 * ### the old doc string from Ben, lightly edited to bring it
 * ### up-to-date, explaining the TRUE, secret life of this function:&lt;/pre&gt;
 *
 * Given a @a path within a working copy of type KIND, follow this algorithm:
 *
 *    - if @a path is not under version control:
 *       - Place it under version control and schedule for addition;
 *         if @a copyfrom_url is non-NULL, use it and @a copyfrom_rev as
 *         'copyfrom' history
 *
 *    - if @a path is already under version control:
 *          (This can only happen when a directory is copied, in which
 *           case ancestry must have been supplied as well.)
 *
 *       -  Schedule the directory itself for addition with copyfrom history.
 *       -  Mark all its children with a 'copied' flag
 *       -  Rewrite all the URLs to what they will be after a commit.
 *       -  ### @todo Remove old wcprops too, see the '###' below.
 *
 *&lt;pre&gt; ### I think possibly the "switchover" functionality should be
 * ### broken out into a separate function, but its all intertwined in
 * ### the code right now.  Ben, thoughts?  Hard?  Easy?  Mauve?&lt;/pre&gt;
 *
 * ### Update: see "###" comment in svn_wc_add_repos_file()'s doc
 * string about this.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_add2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_access</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_url</name></decl></param>,
            <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
            <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
            <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_add2(), but takes an @c svn_wc_notify_func_t instead.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_add</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
           <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_access</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_url</name></decl></param>,
           <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
           <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
           <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
           <param><decl><type><name>svn_wc_notify_func_t</name></type> <name>notify_func</name></decl></param>,
           <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Add a file to a working copy at @a dst_path, obtaining the text-base's
 * contents from @a new_text_base_path, the wc file's content from
 * @a new_text_path, its base properties from @a new_base_props and
 * wc properties from @a new_props.
 * The base text and props normally come from the repository file
 * represented by the copyfrom args, see below.  The new file will
 * be scheduled for addition with history.
 *
 * Automatically remove @a new_text_base_path and @a new_text_path
 * upon successful completion.
 *
 * @a new_text_path and @a new_props may be NULL, in which case
 * the working copy text and props are taken from the base files with
 * appropriate translation of the file's content.
 *
 * @a adm_access, or an access baton in its associated set, must
 * contain a write lock for the parent of @a dst_path.
 *
 * If @a copyfrom_url is non-NULL, then @a copyfrom_rev must be a
 * valid revision number, and together they are the copyfrom history
 * for the new file.
 *
 * Use @a pool for temporary allocations.
 *
 * ### This function is very redundant with svn_wc_add().  Ideally,
 * we'd merge them, so that svn_wc_add() would just take optional
 * new_props and optional copyfrom information.  That way it could be
 * used for both 'svn add somefilesittingonmydisk' and for adding
 * files from repositories, with or without copyfrom history.
 *
 * The problem with this Ideal Plan is that svn_wc_add() also takes
 * care of recursive URL-rewriting.  There's a whole comment in its
 * doc string about how that's really weird, outside its core mission,
 * etc, etc.  So another part of the Ideal Plan is that that
 * functionality of svn_wc_add() would move into a separate function.
 *
 * @since New in 1.4
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_add_repos_file2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_text_base_path</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_text_path</name></decl></param>,
                       <param><decl><type><name>apr_hash_t</name> *</type><name>new_base_props</name></decl></param>,
                       <param><decl><type><name>apr_hash_t</name> *</type><name>new_props</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_url</name></decl></param>,
                       <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Same as svn_wc_add_repos_file2(), except that it doesn't have the
 * new_text_base_path and new_base_props arguments.
 *
 * @deprecated Provided for compatibility with the 1.3 API
 *
 */</comment>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_add_repos_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_text_path</name></decl></param>,
                      <param><decl><type><name>apr_hash_t</name> *</type><name>new_props</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_url</name></decl></param>,
                      <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Remove entry @a name in @a adm_access from revision control.  @a name
 * must be either a file or @c SVN_WC_ENTRY_THIS_DIR.  @a adm_access must
 * hold a write lock.
 *
 * If @a name is a file, all its info will be removed from @a adm_access's
 * administrative directory.  If @a name is @c SVN_WC_ENTRY_THIS_DIR, then
 * @a adm_access's entire administrative area will be deleted, along with
 * *all* the administrative areas anywhere in the tree below @a adm_access.
 *
 * Normally, only administrative data is removed.  However, if
 * @a destroy_wf is TRUE, then all working file(s) and dirs are deleted
 * from disk as well.  When called with @a destroy_wf, any locally
 * modified files will *not* be deleted, and the special error
 * @c SVN_ERR_WC_LEFT_LOCAL_MOD might be returned.  (Callers only need to
 * check for this special return value if @a destroy_wf is TRUE.)
 *
 * If @a instant_error is TRUE, then return @c
 * SVN_ERR_WC_LEFT_LOCAL_MOD the instant a locally modified file is
 * encountered.  Otherwise, leave locally modified files in place and
 * return the error only after all the recursion is complete.
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton at
 * various points during the removal.  If it returns an error
 * (typically @c SVN_ERR_CANCELLED), return that error immediately.
 *
 * WARNING:  This routine is exported for careful, measured use by
 * libsvn_client.  Do *not* call this routine unless you really
 * understand what the heck you're doing.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_remove_from_revision_control</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                    <param><decl><type><name>svn_boolean_t</name></type> <name>destroy_wf</name></decl></param>,
                                    <param><decl><type><name>svn_boolean_t</name></type> <name>instant_error</name></decl></param>,
                                    <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                                    <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Assuming @a path is under version control and in a state of conflict,
 * then take @a path *out* of this state.  If @a resolve_text is TRUE then
 * any text conflict is resolved, if @a resolve_props is TRUE then any
 * property conflicts are resolved.
 *
 * If @a depth is @c svn_depth_empty, act only on @a path; if
 * @c svn_depth_files, resolve @a path and its conflicted file
 * children (if any); if @c svn_depth_immediates, resolve @a path and
 * all its immediate conflicted children (both files and directories,
 * if any); if @c svn_depth_infinity, resolve @a path and every
 * conflicted file or directory anywhere beneath it.
 *
 * If @a conflict_choice is @c svn_wc_conflict_choose_base, resolve the
 * conflict with the old file contents; if
 * @c svn_wc_conflict_choose_mine_full, use the original working contents;
 * if @c svn_wc_conflict_choose_theirs_full, the new contents; and if
 * @c svn_wc_conflict_choose_merged, don't change the contents at all,
 * just remove the conflict status, which is the pre-1.5 behavior.
 *
 * (@c svn_wc_conflict_choose_theirs_conflict and
 * @c svn_wc_conflict_choose_mine_conflict are not yet implemented;
 * the effect of passing one of those values as @a conflict_choice is
 * currently undefined, which may or may not be an underhanded way of
 * allowing real behaviors to be added for them later without revving
 * this interface.)
 *
 * @a adm_access is an access baton, with a write lock, for @a path.
 *
 * Needless to say, this function doesn't touch conflict markers or
 * anything of that sort -- only a human can semantically resolve a
 * conflict.  Instead, this function simply marks a file as "having
 * been resolved", clearing the way for a commit.
 *
 * The implementation details are opaque, as our "conflicted" criteria
 * might change over time.  (At the moment, this routine removes the
 * three fulltext 'backup' files and any .prej file created in a conflict,
 * and modifies @a path's entry.)
 *
 * If @a path is not under version control, return @c SVN_ERR_ENTRY_NOT_FOUND.
 * If @a path isn't in a state of conflict to begin with, do nothing, and
 * return @c SVN_NO_ERROR.
 *
 * If @c path was successfully taken out of a state of conflict, report this
 * information to @c notify_func (if non-@c NULL.)  If only text or only
 * property conflict resolution was requested, and it was successful, then
 * success gets reported.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_resolved_conflict3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>resolve_text</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>resolve_props</name></decl></param>,
                          <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                          <param><decl><type><name>svn_wc_conflict_choice_t</name></type> <name>conflict_choice</name></decl></param>,
                          <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                          <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Similar to svn_wc_resolved_conflict3(), but without automatic conflict
 * resolution support, and with @a depth set according to @a recurse:
 * if @a recurse is TRUE, @a depth is @c svn_depth_infinity, else it is
 * @c svn_depth_files.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_resolved_conflict2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>resolve_text</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>resolve_props</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                          <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                          <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_resolved_conflict2(), but takes an
 * svn_wc_notify_func_t and doesn't have cancellation support.
 *
 * @deprecated Provided for backward compatibility with the 1.0 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_resolved_conflict</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>resolve_text</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>resolve_props</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                         <param><decl><type><name>svn_wc_notify_func_t</name></type> <name>notify_func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/* Commits. */</comment>


<comment type="block">/**
 * Storage type for queued post-commit data.
 *
 * @since New in 1.5.
 */</comment>
<typedef>typedef <type>struct <name>svn_wc_committed_queue_t</name></type> <name>svn_wc_committed_queue_t</name>;</typedef>


<comment type="block">/**
 * Create a queue for use with svn_wc_queue_committed() and
 * svn_wc_process_committed_queue().
 *
 * The returned queue and all further
 * allocations required for queueing new items will also be done
 * from @a pool.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_wc_committed_queue_t</name> *</type>
<name>svn_wc_committed_queue_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>



<comment type="block">/**
 * Queue committed items to be processed later by
 * svn_wc_process_committed_queue().
 *
 * The first time this function is called, @a *queue should
 * be @c NULL to signal that initialization is required.
 *
 * All pointer data passed to this function
 * (@a path, @a adm_access, @a wcprop_changes
 * and @a digest) should remain valid until the queue has been
 * processed by svn_wc_process_committed_queue().
 *
 * The parameters have the same meaning as those
 * for svn_wc_process_committed4().
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_queue_committed</name><parameter_list>(<param><decl><type><name>svn_wc_committed_queue_t</name> **</type><name>queue</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                       <param><decl><type><name>apr_array_header_t</name> *</type><name>wcprop_changes</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>remove_lock</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>remove_changelist</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>digest</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Like svn_wc_process_committed4(), but batch processes
 * items queued with svn_wc_queue_committed().
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_process_committed_queue</name><parameter_list>(<param><decl><type><name>svn_wc_committed_queue_t</name> *</type><name>queue</name></decl></param>,
                               <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>new_revnum</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_date</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_author</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Bump a successfully committed absolute @a path to @a new_revnum after a
 * commit succeeds.  @a rev_date and @a rev_author are the (server-side)
 * date and author of the new revision; one or both may be @c NULL.
 * @a adm_access must hold a write lock appropriate for @a path.
 *
 * If non-NULL, @a wcprop_changes is an array of &lt;tt&gt;svn_prop_t *&lt;/tt&gt;
 * changes to wc properties; if an @c svn_prop_t-&gt;value is NULL, then
 * that property is deleted.
 *
 * If @a remove_lock is @c TRUE, any entryprops related to a repository
 * lock will be removed.
 *
 * If @a remove_changelist is @c TRUE, any association with a
 * changelist will be removed.
 *
 * If @a path is a member of a changelist, remove that association.
 *
 * If @a path is a file and @a digest is non-NULL, use @a digest as
 * the checksum for the new text base.  Else, calculate the checksum
 * if needed.
 *
 * If @a recurse is TRUE and @a path is a directory, then bump every
 * versioned object at or under @a path.  This is usually done for
 * copied trees.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_process_committed4</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>new_revnum</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_date</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_author</name></decl></param>,
                          <param><decl><type><name>apr_array_header_t</name> *</type><name>wcprop_changes</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>remove_lock</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>remove_changelist</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>digest</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Similar to svn_wc_process_committed4(), but with @a
 * remove_changelist set to FALSE.
 *
 * @since New in 1.4.
 *
 * @deprecated Provided for backwards compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_process_committed3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>new_revnum</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_date</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_author</name></decl></param>,
                          <param><decl><type><name>apr_array_header_t</name> *</type><name>wcprop_changes</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>remove_lock</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>digest</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Similar to svn_wc_process_committed3(), but with @a digest set to
 * NULL.
 *
 * @since New in 1.2.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_process_committed2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>new_revnum</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_date</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_author</name></decl></param>,
                          <param><decl><type><name>apr_array_header_t</name> *</type><name>wcprop_changes</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>remove_lock</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_process_committed2(), but with @a remove_lock set to
 * @c FALSE.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_process_committed</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name></type> <name>new_revnum</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_date</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_author</name></decl></param>,
                         <param><decl><type><name>apr_array_header_t</name> *</type><name>wcprop_changes</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>



<escape char="0xc"/>

<comment type="block">/**
 * Do a depth-first crawl in a working copy, beginning at @a path.
 *
 * Communicate the `state' of the working copy's revisions and depths
 * to @a reporter/@a report_baton.  Obviously, if @a path is a file
 * instead of a directory, this depth-first crawl will be a short one.
 *
 * No locks are or logs are created, nor are any animals harmed in the
 * process.  No cleanup is necessary.  @a adm_access must be an access
 * baton for the @a path hierarchy, it does not require a write lock.
 *
 * After all revisions are reported, @a reporter-&gt;finish_report() is
 * called, which immediately causes the RA layer to update the working
 * copy.  Thus the return value may very well reflect the result of
 * the update!
 *
 * If @a depth is @c svn_depth_empty, then report state only for
 * @a path itself.  If @c svn_depth_files, do the same and include
 * immediate file children of @a path.  If @c svn_depth_immediates,
 * then behave as if for @c svn_depth_files but also report the
 * property states of immediate subdirectories.  If @a depth is
 * @c svn_depth_infinity, then report state fully recursively.  All
 * descents are only as deep as @a path's own depth permits, of
 * course.  If @a depth is @c svn_depth_unknown, then just use
 * @c svn_depth_infinity, which in practice means depth of @a path.
 *
 * Iff @a depth_compatibility_trick is TRUE, then set the @c start_empty
 * flag on @a reporter-&gt;set_path() and @a reporter-&gt;link_path() calls
 * as necessary to trick a pre-1.5 (i.e., depth-unaware) server into
 * sending back all the items the client might need to upgrade a
 * working copy from a shallower depth to a deeper one.
 *
 * If @a restore_files is TRUE, then unexpectedly missing working files
 * will be restored from the administrative directory's cache. For each
 * file restored, the @a notify_func function will be called with the
 * @a notify_baton and the path of the restored file. @a notify_func may
 * be @c NULL if this notification is not required.  If @a
 * use_commit_times is TRUE, then set restored files' timestamps to
 * their last-commit-times.
 *
 * If @a traversal_info is non-NULL, then record pre-update traversal
 * state in it.  (Caller should obtain @a traversal_info from
 * svn_wc_init_traversal_info().)
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_crawl_revisions3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>restore_files</name></decl></param>,
                        <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>depth_compatibility_trick</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                        <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                        <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_crawl_revisions3, but taking svn_ra_reporter2_t
 * instead of svn_ra_reporter3_t, and therefore only able to report @c
 * svn_depth_infinity for depths; and taking @a recurse instead of @a
 * depth; and with @a depth_compatibility_trick always false.
 *
 * @deprecated Provided for compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_crawl_revisions2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter2_t</name> *</type><name>reporter</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>restore_files</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                        <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                        <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_crawl_revisions2(), but takes an svn_wc_notify_func_t
 * and a @c svn_reporter_t instead.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_crawl_revisions</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter_t</name> *</type><name>reporter</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>restore_files</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                       <param><decl><type><name>svn_wc_notify_func_t</name></type> <name>notify_func</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                       <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/* Updates. */</comment>

<comment type="block">/** Set @a *wc_root to @c TRUE if @a path represents a "working copy root",
 * @c FALSE otherwise.  Use @a pool for any intermediate allocations.
 *
 * If @a path is not found, return the error @c SVN_ERR_ENTRY_NOT_FOUND.
 *
 * @note Due to the way in which "WC-root-ness" is calculated, passing
 * a @a path of `.' to this function will always return @c TRUE.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_is_wc_root</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>wc_root</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Conditionally split @a path into an @a anchor and @a target for the
 * purpose of updating and committing.
 *
 * @a anchor is the directory at which the update or commit editor
 * should be rooted.
 *
 * @a target is the actual subject (relative to the @a anchor) of the
 * update/commit, or "" if the @a anchor itself is the subject.
 *
 * Allocate @a anchor and @a target in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_actual_target</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>anchor</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>target</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/* Update and update-like functionality. */</comment>

<comment type="block">/**
 * Set @a *editor and @a *edit_baton to an editor and baton for updating a
 * working copy.
 *
 * If @a ti is non-NULL, record traversal info in @a ti, for use by
 * post-traversal accessors such as svn_wc_edited_externals().
 *
 * @a anchor is an access baton, with a write lock, for the local path to the
 * working copy which will be used as the root of our editor.  Further
 * locks will be acquired if the update creates new directories.  All
 * locks, both those in @a anchor and newly acquired ones, will be released
 * when the editor driver calls @c close_edit.
 *
 * @a target is the entry in @a anchor that will actually be updated, or
 * empty if all of @a anchor should be updated.
 *
 * The editor invokes @a notify_func with @a notify_baton as the update
 * progresses, if @a notify_func is non-NULL.
 *
 * If @a cancel_func is non-NULL, the editor will invoke @a cancel_func with
 * @a cancel_baton as the update progresses to see if it should continue.
 *
 * If @a conflict_func is non-NULL, then invoke it with @a
 * conflict_baton whenever a conflict is encountered, giving the
 * callback a chance to resolve the conflict before the editor takes
 * more drastic measures (such as marking a file conflicted, or
 * bailing out of the update).
 *
 * If @a fetch_func is non-NULL, then use it (with @a fetch_baton) as
 * a fallback for retrieving repository files whenever 'copyfrom' args
 * are sent into editor-&gt;add_file().
 *
 * If @a diff3_cmd is non-NULL, then use it as the diff3 command for
 * any merging; otherwise, use the built-in merge code.
 *
 * @a preserved_exts is an array of filename patterns which, when
 * matched against the extensions of versioned files, determine for
 * which such files any related generated conflict files will preserve
 * the original file's extension as their own.  If a file's extension
 * does not match any of the patterns in @a preserved_exts (which is
 * certainly the case if @a preserved_exts is @c NULL or empty),
 * generated conflict files will carry Subversion's custom extensions.
 *
 * @a target_revision is a pointer to a revision location which, after
 * successful completion of the drive of this editor, will be
 * populated with the revision to which the working copy was updated.
 *
 * If @a use_commit_times is TRUE, then all edited/added files will
 * have their working timestamp set to the last-committed-time.  If
 * FALSE, the working files will be touched with the 'now' time.
 *
 * If @a allow_unver_obstructions is TRUE, then allow unversioned
 * obstructions when adding a path.
 *
 * If @a depth is @c svn_depth_infinity, update fully recursively.
 * Else if it is @c svn_depth_immediates, update the uppermost
 * directory, its file entries, and the presence or absence of
 * subdirectories (but do not descend into the subdirectories).
 * Else if it is @c svn_depth_files, update the uppermost directory
 * and its immediate file entries, but not subdirectories.
 * Else if it is @c svn_depth_empty, update exactly the uppermost
 * target, and don't touch its entries.
 *
 * If @a depth_is_sticky is set and @a depth is not @c
 * svn_depth_unknown, then in addition to updating PATHS, also set
 * their sticky ambient depth value to @a depth.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_update_editor3</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                          <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>depth_is_sticky</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>allow_unver_obstructions</name></decl></param>,
                          <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                          <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                          <param><decl><type><name>svn_wc_conflict_resolver_func_t</name></type> <name>conflict_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>conflict_baton</name></decl></param>,
                          <param><decl><type><name>svn_wc_get_file_t</name></type> <name>fetch_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>fetch_baton</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
                          <param><decl><type><name>apr_array_header_t</name> *</type><name>preserved_exts</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                          <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>ti</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Similar to svn_wc_get_update_editor3() but with the @a
 * allow_unver_obstructions parameter always set to FALSE, @a
 * conflict_func and baton set to NULL, @a fetch_func and baton set to
 * NULL, @a preserved_exts set to NULL, @a depth_is_sticky set to
 * FALSE, and @a depth set according to @a recurse: if @a recurse is
 * TRUE, pass @c svn_depth_infinity, if FALSE, pass @c
 * svn_depth_files.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_update_editor2</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                          <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                          <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                          <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>ti</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_get_update_editor2(), but takes an svn_wc_notify_func_t
 * instead.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_update_editor</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
                         <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                         <param><decl><type><name>svn_wc_notify_func_t</name></type> <name>notify_func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                         <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                         <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                         <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>ti</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * A variant of svn_wc_get_update_editor().
 *
 * Set @a *editor and @a *edit_baton to an editor and baton for "switching"
 * a working copy to a new @a switch_url.  (Right now, this URL must be
 * within the same repository that the working copy already comes
 * from.)  @a switch_url must not be @c NULL.
 *
 * If @a ti is non-NULL, record traversal info in @a ti, for use by
 * post-traversal accessors such as svn_wc_edited_externals().
 *
 * @a anchor is an access baton, with a write lock, for the local path to the
 * working copy which will be used as the root of our editor.  Further
 * locks will be acquired if the switch creates new directories.  All
 * locks, both those in @a anchor and newly acquired ones, will be released
 * when the editor driver calls @c close_edit.
 *
 * @a target is the entry in @a anchor that will actually be updated, or
 * empty if all of @a anchor should be updated.
 *
 * The editor invokes @a notify_func with @a notify_baton as the switch
 * progresses, if @a notify_func is non-NULL.
 *
 * If @a cancel_func is non-NULL, it will be called with @a cancel_baton as
 * the switch progresses to determine if it should continue.
 *
 * If @a conflict_func is non-NULL, then invoke it with @a
 * conflict_baton whenever a conflict is encountered, giving the
 * callback a chance to resolve the conflict before the editor takes
 * more drastic measures (such as marking a file conflicted, or
 * bailing out of the switch).
 *
 * If @a diff3_cmd is non-NULL, then use it as the diff3 command for
 * any merging; otherwise, use the built-in merge code.
 *
 * @a preserved_exts is an array of filename patterns which, when
 * matched against the extensions of versioned files, determine for
 * which such files any related generated conflict files will preserve
 * the original file's extension as their own.  If a file's extension
 * does not match any of the patterns in @a preserved_exts (which is
 * certainly the case if @a preserved_exts is @c NULL or empty),
 * generated conflict files will carry Subversion's custom extensions.
 *
 * @a target_revision is a pointer to a revision location which, after
 * successful completion of the drive of this editor, will be
 * populated with the revision to which the working copy was updated.
 *
 * If @a use_commit_times is TRUE, then all edited/added files will
 * have their working timestamp set to the last-committed-time.  If
 * FALSE, the working files will be touched with the 'now' time.
 *
 * @a depth and @a depth_is_sticky behave as for svn_wc_get_update_editor3().
 *
 * If @a allow_unver_obstructions is TRUE, then allow unversioned
 * obstructions when adding a path.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_switch_editor3</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                          <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>depth_is_sticky</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>allow_unver_obstructions</name></decl></param>,
                          <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                          <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                          <param><decl><type><name>svn_wc_conflict_resolver_func_t</name></type> <name>conflict_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>conflict_baton</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
                          <param><decl><type><name>apr_array_header_t</name> *</type><name>preserved_exts</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                          <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>ti</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_get_switch_editor3() but with the
 * @a allow_unver_obstructions parameter always set to FALSE,
 * @a preserved_exts set to NULL, @a conflict_func and baton set to NULL,
 * @a depth_is_sticky set to FALSE, and @a depth set according to @a
 * recurse: if @a recurse is TRUE, pass @c svn_depth_infinity, if
 * FALSE, pass @c svn_depth_files.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_switch_editor2</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                          <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                          <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                          <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>ti</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_get_switch_editor2(), but takes an
 * @c svn_wc_notify_func_t instead.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_switch_editor</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
                         <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                         <param><decl><type><name>svn_wc_notify_func_t</name></type> <name>notify_func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                         <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                         <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                         <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>ti</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/* A word about the implementation of working copy property storage:
 *
 * Since properties are key/val pairs, you'd think we store them in
 * some sort of Berkeley DB-ish format, and even store pending changes
 * to them that way too.
 *
 * However, we already have libsvn_subr/hashdump.c working, and it
 * uses a human-readable format.  That will be very handy when we're
 * debugging, and presumably we will not be dealing with any huge
 * properties or property lists initially.  Therefore, we will
 * continue to use hashdump as the internal mechanism for storing and
 * reading from property lists, but note that the interface here is
 * _not_ dependent on that.  We can swap in a DB-based implementation
 * at any time and users of this library will never know the
 * difference.
 */</comment>

<comment type="block">/** Set @a *props to a hash table mapping &lt;tt&gt;char *&lt;/tt&gt; names onto
 * &lt;tt&gt;svn_string_t *&lt;/tt&gt; values for all the regular properties of
 * @a path.  Allocate the table, names, and values in @a pool.  If
 * the node has no properties, or does not exist in the working copy,
 * then an empty hash is returned.  @a adm_access is an access baton
 * set that contains @a path.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_prop_list</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *value to the value of property @a name for @a path, allocating
 * @a *value in @a pool.  If no such prop, set @a *value to @c NULL.
 * @a name may be a regular or wc property; if it is an entry property,
 * return the error @c SVN_ERR_BAD_PROP_KIND.  @a adm_access is an access
 * baton set that contains @a path.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_prop_get</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>value</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Set property @a name to @a value for @a path, or if @a value is
 * NULL, remove property @a name from @a path.  @a adm_access is an
 * access baton with a write lock for @a path.
 *
 * If @a skip_checks is TRUE, do no validity checking.  But if @a
 * skip_checks is FALSE, and @a name is not a valid property for @a
 * path, return an error, either @c SVN_ERR_ILLEGAL_TARGET (if the
 * property is not appropriate for @a path), or @c
 * SVN_ERR_BAD_MIME_TYPE (if @a name is "svn:mime-type", but @a value
 * is not a valid mime-type).
 *
 * @a name may be a wc property or a regular property; but if it is an
 * entry property, return the error @c SVN_ERR_BAD_PROP_KIND, even if
 * @a skip_checks is TRUE.
 *
 * Use @a pool for temporary allocation.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_prop_set2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>skip_checks</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Like svn_wc_prop_set2(), but with @a skip_checks always FALSE.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_prop_set</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Return TRUE iff @a name is a 'normal' property name.  'Normal' is
 * defined as a user-visible and user-tweakable property that shows up
 * when you fetch a proplist.
 *
 * The function currently parses the namespace like so:
 *
 *   - 'svn:wc:'  ==&gt;  a wcprop, stored/accessed separately via different API.
 *
 *   - 'svn:entry:' ==&gt; an "entry" prop, shunted into the 'entries' file.
 *
 * If these patterns aren't found, then the property is assumed to be
 * Normal.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_wc_is_normal_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>



<comment type="block">/** Return TRUE iff @a name is a 'wc' property name. */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_wc_is_wc_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return TRUE iff @a name is a 'entry' property name. */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_wc_is_entry_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Callback type used by @c svn_wc_canonicalize_svn_prop.
 *
 * If @a mime_type is non-null, it sets @a *mime_type to the value of
 * @a SVN_PROP_MIME_TYPE for the path passed to @c
 * svn_wc_canonicalize_svn_prop (allocated from @a pool).  If @a
 * stream is non-null, it writes the contents of the file to @a
 * stream.
 *
 * (Currently, this is used if you are attempting to set the @a
 * SVN_PROP_EOL_STYLE property, to make sure that the value matches
 * the mime type and contents.)
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_wc_canonicalize_svn_prop_get_file_t</name>)
  <parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>mime_type</name></decl></param>,
   <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
   <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>


<comment type="block">/** Canonicalize the value of an svn:* property @a propname with
 * value @a propval.
 *
 * If the property is not appropriate for a node of kind @a kind, or
 * is otherwise invalid, throw an error.  Otherwise, set @a *propval_p
 * to a canonicalized version of the property value.  If @a
 * skip_some_checks is TRUE, only some validity checks are taken.
 *
 * Some validity checks require access to the contents and MIME type
 * of the target if it is a file; they will call @a prop_getter with @a
 * getter_baton, which then needs to set the MIME type and print the
 * contents of the file to the given stream.
 *
 * @a path should be the path of the file in question; it is only used
 * for error messages.
 *
 * ### This is not actually related to the WC, but it does need to call
 * ### svn_wc_parse_externals_description2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_canonicalize_svn_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>propval_p</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>skip_some_checks</name></decl></param>,
                             <param><decl><type><name>svn_wc_canonicalize_svn_prop_get_file_t</name></type> <name>prop_getter</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>getter_baton</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/* Diffs */</comment>


<comment type="block">/**
 * Return an @a editor/@a edit_baton for diffing a working copy against the
 * repository.
 *
 * @a anchor/@a target represent the base of the hierarchy to be compared.
 *
 * @a callbacks/@a callback_baton is the callback table to use when two
 * files are to be compared.
 *
 * If @a depth is @c svn_depth_empty, just diff exactly @a target or
 * @a anchor if @a target is empty.  If @c svn_depth_files then do the same
 * and for top-level file entries as well (if any).  If
 * @c svn_depth_immediates, do the same as @c svn_depth_files but also diff
 * top-level subdirectories at @c svn_depth_empty.  If @c svn_depth_infinity,
 * then diff fully recursively.  In the latter case, @a anchor should be part
 * of an access baton set for the @a target hierarchy.
 *
 * @a ignore_ancestry determines whether paths that have discontinuous node
 * ancestry are treated as delete/add or as simple modifications.  If
 * @a ignore_ancestry is @c FALSE, then any discontinuous node ancestry will
 * result in the diff given as a full delete followed by an add.
 *
 * If @a use_text_base is TRUE, then compare the repository against
 * the working copy's text-base files, rather than the working files.
 *
 * Normally, the difference from repository-&gt;working_copy is shown.
 * If @a reverse_order is TRUE, then show working_copy-&gt;repository diffs.
 *
 * If @a cancel_func is non-NULL, it will be used along with @a cancel_baton
 * to periodically check if the client has canceled the operation.
 *
 * @a changelists is an array of &lt;tt&gt;const char *&lt;/tt&gt; changelist
 * names, used as a restrictive filter on items whose differences are
 * reported; that is, don't generate diffs about any item unless
 * it's a member of one of those changelists.  If @a changelists is
 * empty (or altogether @c NULL), no changelist filtering occurs.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_diff_editor4</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                        <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>use_text_base</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>reverse_order</name></decl></param>,
                        <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                        <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_get_diff_editor4(), but with @a changelists
 * passed as @c NULL, and @a depth set to @c svn_depth_infinity if @a
 * recurse is TRUE, or @a svn_depth_files if @a recurse is FALSE.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.

 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_diff_editor3</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>use_text_base</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>reverse_order</name></decl></param>,
                        <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                        <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Similar to svn_wc_get_diff_editor3(), but with an
 * @c svn_wc_diff_callbacks_t instead of @c svn_wc_diff_callbacks2_t.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_diff_editor2</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks_t</name> *</type><name>callbacks</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>use_text_base</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>reverse_order</name></decl></param>,
                        <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                        <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Similar to svn_wc_get_diff_editor2(), but with @a ignore_ancestry
 * always set to @c FALSE.
 *
 * @deprecated Provided for backward compatibility with the 1.0 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_diff_editor</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks_t</name> *</type><name>callbacks</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>use_text_base</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>reverse_order</name></decl></param>,
                       <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                       <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Compare working copy against the text-base.
 *
 * @a anchor/@a target represent the base of the hierarchy to be compared.
 *
 * @a callbacks/@a callback_baton is the callback table to use when two
 * files are to be compared.
 *
 * If @a depth is @c svn_depth_empty, just diff exactly @a target or
 * @a anchor if @a target is empty.  If @c svn_depth_files then do the same
 * and for top-level file entries as well (if any).  If
 * @c svn_depth_immediates, do the same as @c svn_depth_files but also diff
 * top-level subdirectories at @c svn_depth_empty.  If @c svn_depth_infinity,
 * then diff fully recursively.  In the latter case, @a anchor should be part
 * of an access baton set for the @a target hierarchy.
 *
 * @a ignore_ancestry determines whether paths that have discontinuous node
 * ancestry are treated as delete/add or as simple modifications.  If
 * @a ignore_ancestry is @c FALSE, then any discontinuous node ancestry will
 * result in the diff given as a full delete followed by an add.
 *
 * @a changelists is an array of &lt;tt&gt;const char *&lt;/tt&gt; changelist
 * names, used as a restrictive filter on items whose differences are
 * reported; that is, don't generate diffs about any item unless
 * it's a member of one of those changelists.  If @a changelists is
 * empty (or altogether @c NULL), no changelist filtering occurs.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_diff4</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
             <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Similar to svn_wc_diff4(), but with @a changelists passed @c NULL,
 * and @a depth set to @c svn_depth_infinity if @a recurse is TRUE, or
 * @a svn_depth_files if @a recurse is FALSE.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_diff3</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_diff3(), but with a @c svn_wc_diff_callbacks_t argument
 * instead of @c svn_wc_diff_callbacks2_t.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_diff2</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks_t</name> *</type><name>callbacks</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_diff2(), but with @a ignore_ancestry always set
 * to @c FALSE.
 *
 * @deprecated Provided for backward compatibility with the 1.0 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_diff</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks_t</name> *</type><name>callbacks</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
            <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Given a @a path to a file or directory under version control, discover
 * any local changes made to properties and/or the set of 'pristine'
 * properties.  @a adm_access is an access baton set for @a path.
 *
 * If @a propchanges is non-@c NULL, return these changes as an array of
 * @c svn_prop_t structures stored in @a *propchanges.  The structures and
 * array will be allocated in @a pool.  If there are no local property
 * modifications on @a path, then set @a *propchanges to @c NULL.
 *
 * If @a original_props is non-@c NULL, then set @a *original_props to
 * hashtable (&lt;tt&gt;const char *name&lt;/tt&gt; -&gt; &lt;tt&gt;const svn_string_t *value&lt;/tt&gt;)
 * that represents the 'pristine' property list of @a path.  This hashtable is
 * allocated in @a pool, and can be used to compare old and new values of
 * properties.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_prop_diffs</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>propchanges</name></decl></param>,
                      <param><decl><type><name>apr_hash_t</name> **</type><name>original_props</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** The outcome of a merge carried out (or tried as a dry-run) by
 * svn_wc_merge()
 */</comment>
<typedef>typedef <type><enum>enum <name>svn_wc_merge_outcome_t</name>
<block>{
   <comment type="block">/** The working copy is (or would be) unchanged.  The changes to be
    * merged were already present in the working copy
    */</comment>
   <decl><name>svn_wc_merge_unchanged</name></decl>,

   <comment type="block">/** The working copy has been (or would be) changed. */</comment>
   <decl><name>svn_wc_merge_merged</name></decl>,

   <comment type="block">/** The working copy has been (or would be) changed, but there was (or
    * would be) a conflict
    */</comment>
   <decl><name>svn_wc_merge_conflict</name></decl>,

   <comment type="block">/** No merge was performed, probably because the target file was
    * either absent or not under version control.
    */</comment>
   <decl><name>svn_wc_merge_no_merge</name></decl>

}</block></enum></type> <name>svn_wc_merge_outcome_t</name>;</typedef>

<comment type="block">/** Given paths to three fulltexts, merge the differences between @a left
 * and @a right into @a merge_target.  (It may help to know that @a left,
 * @a right, and @a merge_target correspond to "OLDER", "YOURS", and "MINE",
 * respectively, in the diff3 documentation.)  Use @a pool for any
 * temporary allocation.
 *
 * @a adm_access is an access baton with a write lock for the directory
 * containing @a merge_target.
 *
 * This function assumes that @a left and @a right are in repository-normal
 * form (linefeeds, with keywords contracted); if necessary,
 * @a merge_target is temporarily converted to this form to receive the
 * changes, then translated back again.
 *
 * If @a merge_target is absent, or present but not under version
 * control, then set @a *merge_outcome to @c svn_wc_merge_no_merge and
 * return success without merging anything.  (The reasoning is that if
 * the file is not versioned, then it is probably unrelated to the
 * changes being considered, so they should not be merged into it.)
 *
 * @a dry_run determines whether the working copy is modified.  When it
 * is @c FALSE the merge will cause @a merge_target to be modified, when it
 * is @c TRUE the merge will be carried out to determine the result but
 * @a merge_target will not be modified.
 *
 * If @a diff3_cmd is non-NULL, then use it as the diff3 command for
 * any merging; otherwise, use the built-in merge code.  If @a
 * merge_options is non-NULL, either pass its elements to @a diff3_cmd or
 * parse it and use as options to the internal merge code (@see
 * svn_diff_file_options_parse()).  @a merge_options must contain
 * &lt;tt&gt;const char *&lt;/tt&gt; elements.
 *
 * The outcome of the merge is returned in @a *merge_outcome. If there
 * is a conflict and @a dry_run is @c FALSE, then attempt to call @a
 * conflict_func with @a conflict_baton (if non-NULL).  If the
 * conflict callback cannot resolve the conflict, then:
 *
 *   * Put conflict markers around the conflicting regions in
 *     @a merge_target, labeled with @a left_label, @a right_label, and
 *     @a target_label.  (If any of these labels are @c NULL, default
 *     values will be used.)
 *
 *   * Copy @a left, @a right, and the original @a merge_target to unique
 *     names in the same directory as @a merge_target, ending with the
 *     suffixes ".LEFT_LABEL", ".RIGHT_LABEL", and ".TARGET_LABEL"
 *     respectively.
 *
 *   * Mark the entry for @a merge_target as "conflicted", and track the
 *     above mentioned backup files in the entry as well.
 *
 * Binary case:
 *
 *  If @a merge_target is a binary file, then no merging is attempted,
 *  the merge is deemed to be a conflict.  If @a dry_run is @c FALSE the
 *  working @a merge_target is untouched, and copies of @a left and
 *  @a right are created next to it using @a left_label and @a right_label.
 *  @a merge_target's entry is marked as "conflicted", and begins
 *  tracking the two backup files.  If @a dry_run is @c TRUE no files are
 *  changed.  The outcome of the merge is returned in @a *merge_outcome.
 *
 * @since New in 1.5.
 */</comment>
<decl_stmt><decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_merge3</name><argument_list>(<argument>enum <expr><name>svn_wc_merge_outcome_t</name> *<name>merge_outcome</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>left</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>right</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>merge_target</name></expr></argument>,
              <argument><expr><name>svn_wc_adm_access_t</name> *<name>adm_access</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>left_label</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>right_label</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>target_label</name></expr></argument>,
              <argument><expr><name>svn_boolean_t</name> <name>dry_run</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>diff3_cmd</name></expr></argument>,
              <argument><expr>const <name>apr_array_header_t</name> *<name>merge_options</name></expr></argument>,
              <argument><expr>const <name>apr_array_header_t</name> *<name>prop_diff</name></expr></argument>,
              <argument><expr><name>svn_wc_conflict_resolver_func_t</name> <name>conflict_func</name></expr></argument>,
              <argument><expr><name>void</name> *<name>conflict_baton</name></expr></argument>,
              <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block">/** Similar to svn_wc_merge3(), but with @a prop_diff, @a
 * conflict_func, @a conflict_baton set to NULL.
 *
 * @deprecated Provided for backwards compatibility with the 1.4 API.
 */</comment>
<decl_stmt><decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_merge2</name><argument_list>(<argument>enum <expr><name>svn_wc_merge_outcome_t</name> *<name>merge_outcome</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>left</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>right</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>merge_target</name></expr></argument>,
              <argument><expr><name>svn_wc_adm_access_t</name> *<name>adm_access</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>left_label</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>right_label</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>target_label</name></expr></argument>,
              <argument><expr><name>svn_boolean_t</name> <name>dry_run</name></expr></argument>,
              <argument><expr>const <name>char</name> *<name>diff3_cmd</name></expr></argument>,
              <argument><expr>const <name>apr_array_header_t</name> *<name>merge_options</name></expr></argument>,
              <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<comment type="block">/** Similar to svn_wc_merge2(), but with @a merge_options set to NULL.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.
 */</comment>
<decl_stmt><decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_merge</name><argument_list>(<argument><expr>const <name>char</name> *<name>left</name></expr></argument>,
             <argument><expr>const <name>char</name> *<name>right</name></expr></argument>,
             <argument><expr>const <name>char</name> *<name>merge_target</name></expr></argument>,
             <argument><expr><name>svn_wc_adm_access_t</name> *<name>adm_access</name></expr></argument>,
             <argument><expr>const <name>char</name> *<name>left_label</name></expr></argument>,
             <argument><expr>const <name>char</name> *<name>right_label</name></expr></argument>,
             <argument><expr>const <name>char</name> *<name>target_label</name></expr></argument>,
             <argument><expr><name>svn_boolean_t</name> <name>dry_run</name></expr></argument>,
             <argument>enum <expr><name>svn_wc_merge_outcome_t</name> *<name>merge_outcome</name></expr></argument>,
             <argument><expr>const <name>char</name> *<name>diff3_cmd</name></expr></argument>,
             <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<comment type="block">/** Given a @a path under version control, merge an array of @a
 * propchanges into the path's existing properties.  @a propchanges is
 * an array of @c svn_prop_t objects, and @a baseprops is a hash
 * representing the original set of properties that @a propchanges is
 * working against.  @a adm_access is an access baton for the directory
 * containing @a path.
 *
 * If @a base_merge is @c FALSE only the working properties will be changed,
 * if it is @c TRUE both the base and working properties will be changed.
 *
 * If @a state is non-NULL, set @a *state to the state of the properties
 * after the merge.
 *
 * If conflicts are found when merging working properties, they are
 * described in a temporary .prej file (or appended to an already-existing
 * .prej file), and the entry is marked "conflicted".  Base properties
 * are changed unconditionally, if @a base_merge is @c TRUE, they never result
 * in a conflict.
 *
 * If @a path is not under version control, return the error
 * SVN_ERR_UNVERSIONED_RESOURCE and don't touch anyone's properties.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_merge_props2</name><parameter_list>(<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                    <param><decl><type><name>apr_hash_t</name> *</type><name>baseprops</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>base_merge</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
                    <param><decl><type><name>svn_wc_conflict_resolver_func_t</name></type> <name>conflict_func</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>conflict_baton</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Same as svn_wc_merge_props2(), but with a @a conflict_func (and
 * baton) of NULL.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.
 *
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_merge_props</name><parameter_list>(<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                   <param><decl><type><name>apr_hash_t</name> *</type><name>baseprops</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>base_merge</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Similar to svn_wc_merge_props(), but no baseprops are given.
 * Instead, it's assumed that the incoming propchanges are based
 * against the working copy's own baseprops.  While this assumption is
 * correct for 'svn update', it's incorrect for 'svn merge', and can
 * cause flawed behavior.  (See issue #2035.)
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_merge_prop_diffs</name><parameter_list>(<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>base_merge</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>



<comment type="block">/** Given a @a path to a wc file, return a @a pristine_path which points to a
 * pristine version of the file.  This is needed so clients can do
 * diffs.  If the WC has no text-base, return a @c NULL instead of a
 * path.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_pristine_copy_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>pristine_path</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Recurse from @a path, cleaning up unfinished log business.  Perform
 * necessary allocations in @a pool.  Any working copy locks under @a path
 * will be taken over and then cleared by this function.  If @a diff3_cmd
 * is non-NULL, then use it as the diff3 command for any merging; otherwise,
 * use the built-in merge code.
 *
 * WARNING: there is no mechanism that will protect locks that are still
 * being used.
 *
 * If @a cancel_func is non-NULL, invoke it with @a cancel_baton at
 * various points during the operation.  If it returns an error
 * (typically @c SVN_ERR_CANCELLED), return that error immediately.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_cleanup2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
                <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_cleanup2(). @a optional_adm_access is an historic
 * relic and not used, it may be NULL.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_cleanup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>optional_adm_access</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
               <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Relocation validation callback typedef.
 *
 * Called for each relocated file/directory.  @a uuid, if non-NULL, contains
 * the expected repository UUID, @a url contains the tentative URL.
 *
 * @a baton is a closure object; it should be provided by the
 * implementation, and passed by the caller.
 *
 * If @a root is TRUE, then the implementation should make sure that @a url
 * is the repository root.  Else, it can be an URL inside the repository.
 * @a pool may be used for temporary allocations.
 *
 * @since New in 1.5.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_wc_relocation_validator3_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
                                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_url</name></decl></param>,
                                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** Similar to @c svn_wc_relocation_validator3_t, but without
 * the @a root_url arguments.
 *
 * @deprecated Provided for backwards compatibility with the 1.4 API.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_wc_relocation_validator2_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
                                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                                       <param><decl><type><name>svn_boolean_t</name></type> <name>root</name></decl></param>,
                                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** Similar to @c svn_wc_relocation_validator2_t, but without
 * the @a root and @a pool arguments.  @a uuid will not be NULL in this version
 * of the function.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_wc_relocation_validator_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
                                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** Change repository references at @a path that begin with @a from
 * to begin with @a to instead.  Perform necessary allocations in @a pool.
 * If @a recurse is TRUE, do so.  @a validator (and its baton,
 * @a validator_baton), will be called for each newly generated URL.
 *
 * @a adm_access is an access baton for the directory containing
 * @a path.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_relocate3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                 <param><decl><type><name>svn_wc_relocation_validator3_t</name></type> <name>validator</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>validator_baton</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Similar to svn_wc_relocate3(), but uses @c svn_wc_relocation_validator2_t.
 *
 * @deprecated Provided for backwards compatibility with the 1.4 API. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_relocate2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                 <param><decl><type><name>svn_wc_relocation_validator2_t</name></type> <name>validator</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>validator_baton</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Similar to svn_wc_relocate2(), but uses @c svn_wc_relocation_validator_t.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_relocate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                <param><decl><type><name>svn_wc_relocation_validator_t</name></type> <name>validator</name></decl></param>,
                <param><decl><type><name>void</name> *</type><name>validator_baton</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Revert changes to @a path.  Perform necessary allocations in @a pool.
 *
 * @a parent_access is an access baton for the directory containing @a
 * path, unless @a path is a working copy root (as determined by @c
 * svn_wc_is_wc_root), in which case @a parent_access refers to @a
 * path itself.
 *
 * If @a depth is @c svn_depth_empty, revert just @a path (if a
 * directory, then revert just the properties on that directory).
 * Else if @c svn_depth_files, revert @a path and any files
 * directly under @a path if it is directory.  Else if
 * @c svn_depth_immediates, revert all of the preceding plus
 * properties on immediate subdirectories; else if @c svn_depth_infinity,
 * revert path and everything under it fully recursively.
 *
 * @a changelists is an array of &lt;tt&gt;const char *&lt;/tt&gt; changelist
 * names, used as a restrictive filter on items reverted; that is,
 * don't revert any item unless it's a member of one of those
 * changelists.  If @a changelists is empty (or altogether @c NULL),
 * no changelist filtering occurs.
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton at
 * various points during the reversion process.  If it returns an
 * error (typically @c SVN_ERR_CANCELLED), return that error
 * immediately.
 *
 * If @a use_commit_times is TRUE, then all reverted working-files
 * will have their timestamp set to the last-committed-time.  If
 * FALSE, the reverted working-files will be touched with the 'now' time.
 *
 * For each item reverted, @a notify_func will be called with @a notify_baton
 * and the path of the reverted item. @a notify_func may be @c NULL if this
 * notification is not needed.
 *
 * If @a path is not under version control, return the error
 * SVN_ERR_UNVERSIONED_RESOURCE.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_revert3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_access</name></decl></param>,
               <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
               <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
               <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_revert3(), but with @a changelists passed as @c
 * NULL, and @a depth set according to @a recursive: if @a recursive
 * is TRUE, @a depth is @c svn_depth_infinity; if FALSE, @a depth is
 * @c svn_depth_empty.
 *
 * @note Most APIs map @a recurse==FALSE to @a depth==svn_depth_files;
 * revert is deliberately different.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_revert2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_access</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>recursive</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
               <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
               <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_wc_revert2(), but takes an @c svn_wc_notify_func_t instead.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_revert</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_access</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>recursive</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
              <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
              <param><decl><type><name>svn_wc_notify_func_t</name></type> <name>notify_func</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/* Tmp files */</comment>

<comment type="block">/** Create a unique temporary file in administrative tmp/ area of
 * directory @a path.  Return a handle in @a *fp and the path
 * in @a *new_name. Either @a fp or @a new_name can be NULL.
 *
 * The flags will be &lt;tt&gt;APR_WRITE | APR_CREATE | APR_EXCL&lt;/tt&gt; and
 * optionally @c APR_DELONCLOSE (if the @a delete_when argument is
 * set to @c svn_io_file_del_on_close).
 *
 * This means that as soon as @a fp is closed, the tmp file will vanish.
 *
 * @since New in 1.4
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_create_tmp_file2</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>fp</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>new_name</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                        <param><decl><type><name>svn_io_file_del_t</name></type> <name>delete_when</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Same as svn_wc_create_tmp_file2(), but with @a new_name set to @c NULL,
 * and without the ability to delete the file on pool cleanup.
 *
 * @deprecated For compatibility with 1.3 API
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_create_tmp_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>fp</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>delete_on_close</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/* EOL conversion and keyword expansion. */</comment>

<comment type="block">/** Set @a xlated_path to a translated copy of @a src
 * or to @a src itself if no translation is necessary.
 * That is, if @a versioned_file's properties indicate newline conversion or
 * keyword expansion, point @a *xlated_path to a copy of @a src
 * whose newlines and keywords are converted using the translation
 * as requested by @a flags.
 *
 * When translating to the normal form, inconsistent eol styles will be
 * repaired when appropriate for the given setting.  When translating
 * from normal form, no EOL repair is performed (consistency is assumed).
 * This behaviour can be overridden by specifying
 * @c SVN_WC_TRANSLATE_FORCE_EOL_REPAIR.
 *
 * The caller can explicitly request a new file to be returned by setting the
 * @c SVN_WC_TRANSLATE_FORCE_COPY flag in @a flags.
 *
 * This function is generally used to get a file that can be compared
 * meaningfully against @a versioned_file's text base, if
 * @c SVN_WC_TRANSLATE_TO_NF is specified, against @a versioned_file itself
 * if @c SVN_WC_TRANSLATE_FROM_NF is specified.
 *
 * Output files are created in the temp file area belonging to
 * @a versioned_file.  By default they will be deleted at pool cleanup.
 *
 * If @c SVN_WC_TRANSLATE_NO_OUTPUT_CLEANUP is specified, the default
 * pool cleanup handler to remove @a *xlated_path is not registered.
 *
 * If an error is returned, the effect on @a *xlated_path is undefined.
 *
 * @since New in 1.4
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_translated_file2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>xlated_path</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versioned_file</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Same as svn_wc_translated_file2, but will never clean up
 * temporary files.
 *
 * @deprecated Provided for compatibility with the 1.3 API
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_translated_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>xlated_p</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vfile</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>force_repair</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Returns a @a stream allocated in @a pool with access to the given
 * @a path taking the file properties from @a versioned_file using
 * @a adm_access.
 *
 * When translation from normal form is requested
 * (@c SVN_WC_TRANSLATE_FROM_NF is specified in @a flags), @a path
 * is used as target path and stream read operations are not supported.
 * Conversely, if translation to normal form is requested
 * (@c SVN_WC_TRANSLATE_TO_NF is specified in @a flags), @a path is
 * used as source path and stream write operations are not supported.
 *
 * The @a flags are the same constants as those used for
 * svn_wc_translated_file().
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_translated_stream</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> **</type><name>stream</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versioned_file</name></decl></param>,
                         <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                         <param><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/* Text/Prop Deltas Using an Editor */</comment>


<comment type="block">/** Send the local modifications for versioned file @a path (with
 * matching @a file_baton) through @a editor, then close @a file_baton
 * afterwards.  Use @a pool for any temporary allocation and
 * @a adm_access as an access baton for @a path.
 *
 * This process creates a copy of @a path with keywords and eol
 * untranslated.  If @a tempfile is non-NULL, set @a *tempfile to the
 * path to this copy.  Do not clean up the copy; caller can do that.
 * If @a digest is non-NULL, put the MD5 checksum of the
 * temporary file into @a digest, which must point to @c APR_MD5_DIGESTSIZE
 * bytes of storage.  (The purpose of handing back the tmp copy is that
 * it is usually about to become the new text base anyway, but the
 * installation of the new text base is outside the scope of this
 * function.)
 *
 * If @a fulltext, send the untranslated copy of @a path through @a editor
 * as full-text; else send it as svndiff against the current text base.
 *
 * If sending a diff, and the recorded checksum for @a path's text-base
 * does not match the current actual checksum, then remove the tmp
 * copy (and set @a *tempfile to NULL if appropriate), and return the
 * error @c SVN_ERR_WC_CORRUPT_TEXT_BASE.
 *
 * @note This is intended for use with both infix and postfix
 * text-delta styled editor drivers.
 *
 * @since New in 1.4.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_transmit_text_deltas2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tempfile</name></decl></param>,
                             <param><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[]</index></name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>fulltext</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Similar to svn_wc_transmit_text_deltas2(), but with @a digest set to NULL.
 *
 * @deprecated Provided for backwards compatibility with the 1.3 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_transmit_text_deltas</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>fulltext</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tempfile</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Given a @a path with its accompanying @a entry, transmit all local
 * property modifications using the appropriate @a editor method (in
 * conjunction with @a baton). @a adm_access is an access baton set
 * that contains @a path.  Use @a pool for all allocations.
 *
 * If a temporary file remains after this function is finished, the
 * path to that file is returned in @a *tempfile (so the caller can
 * clean this up if it wishes to do so).
 *
 * @note Starting version 1.5, no tempfile will ever be returned
 *       anymore.  If @a *tempfile is passed, its value is set to @c NULL.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_transmit_prop_deltas</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tempfile</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Get the run-time configured list of ignore patterns from the
 * @c svn_config_t's in the @a config hash, and store them in @a *patterns.
 * Allocate @a *patterns and its contents in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_default_ignores</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>patterns</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Get the list of ignore patterns from the @c svn_config_t's in the
 * @a config hash and the local ignore patterns from the directory
 * in @a adm_access, and store them in @a *patterns.
 * Allocate @a *patterns and its contents in @a pool.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_ignores</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>patterns</name></decl></param>,
                   <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return TRUE iff @a str matches any of the elements of @a list, a
 * list of zero or more ignore patterns.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type>
<name>svn_wc_match_ignore_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>,
                         <param><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/** Add @a lock to the working copy for @a path.  @a adm_access must contain
 * a write lock for @a path.  If @a path is read-only, due to locking
 * properties, make it writable.  Perform temporary allocations in @a
 * pool. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_add_lock</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Remove any lock from @a path.  @a adm_access must contain a
 * write-lock for @a path.  If @a path has a lock and the locking
 * so specifies, make the file read-only.  Don't return an error if @a
 * path didn't have a lock.  Perform temporary allocations in @a pool. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_remove_lock</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/** A structure to report a summary of a working copy, including the
 * mix of revisions found within it, whether any parts are switched or
 * locally modified, and whether it is a sparse checkout.
 *
 * @note Fields may be added to the end of this structure in future
 * versions.  Therefore, to preserve binary compatibility, users
 * should not directly allocate structures of this type.
 *
 * @since New in 1.4
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc_revision_status_t</name>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>min_rev</name></decl>;</decl_stmt>   <comment type="block">/**&lt; Lowest revision found */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>max_rev</name></decl>;</decl_stmt>   <comment type="block">/**&lt; Highest revision found */</comment>

  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>switched</name></decl>;</decl_stmt> <comment type="block">/**&lt; Is anything switched? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>modified</name></decl>;</decl_stmt> <comment type="block">/**&lt; Is anything modified? */</comment>

  <comment type="block">/** Whether any WC paths are at a depth other than @c svn_depth_infinity.
   * @since New in 1.5.
   */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>sparse_checkout</name></decl>;</decl_stmt>
}</block></struct></type>
<name>svn_wc_revision_status_t</name>;</typedef>

<comment type="block">/** Set @a *result_p to point to a new @c svn_wc_revision_status_t structure
 * containing a summary of the revision range and status of the working copy
 * at @a wc_path (not including "externals").
 *
 * Set @a (*result_p)-&gt;min_rev and @a (*result_p)-&gt;max_rev respectively to the
 * lowest and highest revision numbers in the working copy.  If @a committed
 * is TRUE, summarize the last-changed revisions, else the base revisions.
 *
 * Set @a (*result_p)-&gt;switched to indicate whether any item in the WC is
 * switched relative to its parent.  If @a trail_url is non-NULL, use it to
 * determine if @a wc_path itself is switched.  It should be any trailing
 * portion of @a wc_path's expected URL, long enough to include any parts
 * that the caller considers might be changed by a switch.  If it does not
 * match the end of @a wc_path's actual URL, then report a "switched"
 * status.
 *
 * Set @a (*result_p)-&gt;modified to indicate whether any item is locally
 * modified.
 *
 * If @a cancel_func is non-NULL, call it with @a cancel_baton to determine
 * if the client has cancelled the operation.
 *
 * Allocate *result_p in @a pool.
 *
 * @since New in 1.4
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_revision_status</name><parameter_list>(<param><decl><type><name>svn_wc_revision_status_t</name> **</type><name>result_p</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc_path</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>trail_url</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>committed</name></decl></param>,
                       <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Set @a path's entry's 'changelist' attribute to @a changelist iff
 * @a changelist is not @c NULL; otherwise, remove any current
 * changelist assignment from @a path.  @a adm_access is an access
 * baton set that contains @a path.
 *
 * If @a cancel_func is not @c NULL, call it with @a cancel_baton to
 * determine if the client has cancelled the operation.
 *
 * If @a notify_func is not @c NULL, call it with @a notify_baton to
 * report the change (using notification types @c
 * svn_wc_notify_changelist_set and @c svn_wc_notify_changelist_clear).
 *
 * @note For now, directories are NOT allowed to be associated with
 * changelists; there is confusion about whether they should behave
 * as depth-0 or depth-infinity objects.  If @a path is a directory,
 * return @c SVN_ERR_UNSUPPORTED_FEATURE.
 *
 * @note This metadata is purely a client-side "bookkeeping"
 * convenience, and is entirely managed by the working copy.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc_set_changelist</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changelist</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                      <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                      <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                      <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                      <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** @} */</comment>

<escape char="0xc"/>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* SVN_WC_H */</comment>
</unit>
