<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_utf.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_utf.h
 * @brief UTF-8 conversion routines
 */</comment>


<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_UTF_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_UTF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xlate.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AS400</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_APR_LOCALE_CHARSET</name></cpp:macro> <cpp:value>APR_LOCALE_CHARSET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_APR_DEFAULT_CHARSET</name></cpp:macro> <cpp:value>APR_DEFAULT_CHARSET</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* APR_LOCALE_CHARSET and APR_DEFAULT_CHARSET are defined as ints on
 * OS400. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_APR_LOCALE_CHARSET</name></cpp:macro> <cpp:value>(const char*)APR_LOCALE_CHARSET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_APR_DEFAULT_CHARSET</name></cpp:macro> <cpp:value>(const char*)APR_DEFAULT_CHARSET</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * Initialize the UTF-8 encoding/decoding routines.
 * Allocate cached translation handles in a subpool of @a pool.
 *
 * @note It is optional to call this function, but if it is used, no other
 * svn function may be in use in other threads during the call of this
 * function or when @a pool is cleared or destroyed.
 * Initializing the UTF-8 routines will improve performance.
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_utf_initialize</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Set @a *dest to a utf8-encoded stringbuf from native stringbuf @a src;
 * allocate @a *dest in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_utf_stringbuf_to_utf8</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>dest</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>src</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *dest to a utf8-encoded string from native string @a src; allocate
 * @a *dest in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_utf_string_to_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>dest</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>src</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *dest to a utf8-encoded C string from native C string @a src;
 * allocate @a *dest in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_utf_cstring_to_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *dest to a utf8 encoded C string from @a frompage encoded C
 * string @a src; allocate @a *dest in @a pool.
 *
 * @since New in 1.4.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_utf_cstring_to_utf8_ex2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>frompage</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Like svn_utf_cstring_to_utf8_ex2() but with @a convset_key which is
 * ignored.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_utf_cstring_to_utf8_ex</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>frompage</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>convset_key</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *dest to a natively-encoded stringbuf from utf8 stringbuf @a src;
 * allocate @a *dest in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_utf_stringbuf_from_utf8</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>dest</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>src</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *dest to a natively-encoded string from utf8 string @a src;
 * allocate @a *dest in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_utf_string_from_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>dest</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>src</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *dest to a natively-encoded C string from utf8 C string @a src;
 * allocate @a *dest in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_utf_cstring_from_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *dest to a @a topage encoded C string from utf8 encoded C string
 * @a src; allocate @a *dest in @a pool.
 *
 * @since New in 1.4.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_utf_cstring_from_utf8_ex2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>topage</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Like svn_utf_cstring_from_utf8_ex2() but with @a convset_key which is
 * ignored.
 *
 * @deprecated Provided for backward compatibility with the 1.3 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_utf_cstring_from_utf8_ex</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>topage</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>convset_key</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Return a fuzzily native-encoded C string from utf8 C string @a src,
 * allocated in @a pool.  A fuzzy recoding leaves all 7-bit ascii
 * characters the same, and substitutes "?\\XXX" for others, where XXX
 * is the unsigned decimal code for that character.
 *
 * This function cannot error; it is guaranteed to return something.
 * First it will recode as described above and then attempt to convert
 * the (new) 7-bit UTF-8 string to native encoding.  If that fails, it
 * will return the raw fuzzily recoded string, which may or may not be
 * meaningful in the client's locale, but is (presumably) better than
 * nothing.
 *
 * ### Notes:
 *
 * Improvement is possible, even imminent.  The original problem was
 * that if you converted a UTF-8 string (say, a log message) into a
 * locale that couldn't represent all the characters, you'd just get a
 * static placeholder saying "[unconvertible log message]".  Then
 * Justin Erenkrantz pointed out how on platforms that didn't support
 * conversion at all, "svn log" would still fail completely when it
 * encountered unconvertible data.
 *
 * Now for both cases, the caller can at least fall back on this
 * function, which converts the message as best it can, substituting
 * "?\\XXX" escape codes for the non-ascii characters.
 *
 * Ultimately, some callers may prefer the iconv "//TRANSLIT" option,
 * so when we can detect that at configure time, things will change.
 * Also, this should (?) be moved to apr/apu eventually.
 *
 * See http://subversion.tigris.org/issues/show_bug.cgi?id=807 for
 * details.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_utf_cstring_from_utf8_fuzzy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *dest to a natively-encoded C string from utf8 stringbuf @a src;
 * allocate @a *dest in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_utf_cstring_from_utf8_stringbuf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>src</name></decl></param>,
                                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Set @a *dest to a natively-encoded C string from utf8 string @a src;
 * allocate @a *dest in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_utf_cstring_from_utf8_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
                                              <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>src</name></decl></param>,
                                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_UTF_H */</comment>
</unit>
