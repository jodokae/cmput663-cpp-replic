<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_subst.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_subst.h
 * @brief Data substitution (keywords and EOL style)
 */</comment>


<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_SUBST_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_SUBST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<comment type="block">/* EOL conversion and keyword expansion. */</comment>

<comment type="block">/** Valid states for 'svn:eol-style' property.
 *
 * Property nonexistence is equivalent to 'none'.
 */</comment>
<typedef>typedef <type><enum>enum <name>svn_subst_eol_style</name>
<block>{
  <comment type="block">/** An unrecognized style */</comment>
  <decl><name>svn_subst_eol_style_unknown</name></decl>,

  <comment type="block">/** EOL translation is "off" or ignored value */</comment>
  <decl><name>svn_subst_eol_style_none</name></decl>,

  <comment type="block">/** Translation is set to client's native eol */</comment>
  <decl><name>svn_subst_eol_style_native</name></decl>,

  <comment type="block">/** Translation is set to one of LF, CR, CRLF */</comment>
  <decl><name>svn_subst_eol_style_fixed</name></decl>

}</block></enum></type> <name>svn_subst_eol_style_t</name>;</typedef>

<comment type="block">/** Set @a *style to the appropriate @c svn_subst_eol_style_t and @a *eol to
 * the appropriate cstring for a given svn:eol-style property value.
 *
 * Set @a *eol to
 *
 *    - @c NULL for @c svn_subst_eol_style_none, or
 *
 *    - a NULL-terminated C string containing the native eol marker
 *      for this platform, for @c svn_subst_eol_style_native, or
 *
 *    - a NULL-terminated C string containing the eol marker indicated
 *      by the property value, for @c svn_subst_eol_style_fixed.
 *
 * If @a *style is NULL, it is ignored.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_subst_eol_style_from_value</name><parameter_list>(<param><decl><type><name>svn_subst_eol_style_t</name> *</type><name>style</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>eol</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Indicates whether the working copy and normalized versions of a file
 * with the given the parameters differ.  If @a force_eol_check is TRUE,
 * the routine also accounts for all translations required due to repairing
 * fixed eol styles.
 *
 * @since New in 1.4
 *
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type>
<name>svn_subst_translation_required</name><parameter_list>(<param><decl><type><name>svn_subst_eol_style_t</name></type> <name>style</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol</name></decl></param>,
                               <param><decl><type><name>apr_hash_t</name> *</type><name>keywords</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>force_eol_check</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Values used in keyword expansion.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_subst_keywords_t</name>
<block>{
  <comment type="block">/**
   * @name svn_subst_keywords_t fields
   * String expansion of the like-named keyword, or NULL if the keyword
   * was not selected in the svn:keywords property.
   * @{
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>date</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>author</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>id</name></decl>;</decl_stmt>
  <comment type="block">/** @} */</comment>
}</block></struct></type> <name>svn_subst_keywords_t</name>;</typedef>


<comment type="block">/**
 * Set @a *kw to a new keywords hash filled with the appropriate contents
 * given a @a keywords_string (the contents of the svn:keywords
 * property for the file in question), the revision @a rev, the @a url,
 * the @a date the file was committed on, and the @a author of the last
 * commit.  Any of these can be @c NULL to indicate that the information is
 * not present, or @c 0 for @a date.
 *
 * Hash keys are of type &lt;tt&gt;const char *&lt;/tt&gt;.
 * Hash values are of type &lt;tt&gt;svn_string_t *&lt;/tt&gt;.
 *
 * All memory is allocated out of @a pool.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_build_keywords2</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>kw</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>keywords_string</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                          <param><decl><type><name>apr_time_t</name></type> <name>date</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Similar to svn_subst_build_keywords2() except that it populates
 * an existing structure @a *kw instead of creating a keywords hash.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_build_keywords</name><parameter_list>(<param><decl><type><name>svn_subst_keywords_t</name> *</type><name>kw</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>keywords_string</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                         <param><decl><type><name>apr_time_t</name></type> <name>date</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Return @c TRUE if @a a and @a b do not hold the same keywords.
 *
 * @a a and @a b are hashes of the form produced by
 * svn_subst_build_keywords2().
 *
 * @since New in 1.3.
 *
 * If @a compare_values is @c TRUE, "same" means that the @a a and @a b
 * contain exactly the same set of keywords, and the values of corresponding
 * keywords match as well.  Else if @a compare_values is @c FALSE, then
 * "same" merely means that @a a and @a b hold the same set of keywords,
 * although those keywords' values might differ.
 *
 * @a a and/or @a b may be @c NULL; for purposes of comparison, @c NULL is
 * equivalent to holding no keywords.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type>
<name>svn_subst_keywords_differ2</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>a</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> *</type><name>b</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>compare_values</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Similar to svn_subst_keywords_differ2() except that it compares
 * two @c svn_subst_keywords_t structs instead of keyword hashes.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type>
<name>svn_subst_keywords_differ</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_subst_keywords_t</name> *</type><name>a</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_subst_keywords_t</name> *</type><name>b</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>compare_values</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Copy and translate the data in stream @a src into stream @a dst.  It is
 * assumed that @a src is a readable stream and @a dst is a writable stream.
 *
 * @since New in 1.3.
 *
 * If @a eol_str is non-@c NULL, replace whatever bytestring @a src uses to
 * denote line endings with @a eol_str in the output.  If @a src has an
 * inconsistent line ending style, then: if @a repair is @c FALSE, return
 * @c SVN_ERR_IO_INCONSISTENT_EOL, else if @a repair is @c TRUE, convert any
 * line ending in @a src to @a eol_str in @a dst.  Recognized line endings are:
 * "\n", "\r", and "\r\n".
 *
 * Expand and contract keywords using the contents of @a keywords as the
 * new values.  If @a expand is @c TRUE, expand contracted keywords and
 * re-expand expanded keywords.  If @a expand is @c FALSE, contract expanded
 * keywords and ignore contracted ones.  Keywords not found in the hash are
 * ignored (not contracted or expanded).  If the @a keywords hash
 * itself is @c NULL, keyword substitution will be altogether ignored.
 *
 * Detect only keywords that are no longer than @c SVN_IO_MAX_KEYWORD_LEN
 * bytes, including the delimiters and the keyword itself.
 *
 * Note that a translation request is *required*:  one of @a eol_str or
 * @a keywords must be non-@c NULL.
 *
 * Recommendation: if @a expand is FALSE, then you don't care about the
 * keyword values, so use empty strings as non-NULL signifiers when you
 * build the keywords hash.
 *
 * Notes:
 *
 * See svn_wc__get_keywords() and svn_wc__get_eol_style() for a
 * convenient way to get @a eol_str and @a keywords if in libsvn_wc.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_translate_stream3</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>src</name></decl></param>,
                            <param><decl><type><name>svn_stream_t</name> *</type><name>dst</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>repair</name></decl></param>,
                            <param><decl><type><name>apr_hash_t</name> *</type><name>keywords</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>expand</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return a stream which performs eol translation and keyword
 * expansion when read from or written to.  The stream @a stream
 * is used to read and write all data.  Make sure you call
 * svn_stream_close() on @a stream to make sure all data are flushed
 * and cleaned up.
 *
 * Read operations from and write operations to the stream
 * perform the same operation: if @a expand is @c FALSE, both
 * contract keywords.  One stream supports both read and write
 * operations.  Reads and writes may be mixed.
 *
 * The stream returned is allocated in @a pool.
 *
 * @since New in 1.4.
 */</comment>
<function_decl><type><name>svn_stream_t</name> *</type>
<name>svn_subst_stream_translated</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>repair</name></decl></param>,
                            <param><decl><type><name>apr_hash_t</name> *</type><name>keywords</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>expand</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return a stream which performs eol translation and keyword
 * expansion when read from or written to.  The stream @a stream
 * is used to read and write all data.  Make sure you call
 * svn_stream_close() on @a stream to make sure all data are flushed
 * and cleaned up.
 *
 * Read and write operations perform the same transformation:
 * all data is translated to normal form.
 *
 * @see svn_subst_translate_to_normal_form()
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_stream_translated_to_normal_form</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> **</type><name>stream</name></decl></param>,
                                           <param><decl><type><name>svn_stream_t</name> *</type><name>source</name></decl></param>,
                                           <param><decl><type><name>svn_subst_eol_style_t</name></type> <name>eol_style</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>,
                                           <param><decl><type><name>svn_boolean_t</name></type> <name>always_repair_eols</name></decl></param>,
                                           <param><decl><type><name>apr_hash_t</name> *</type><name>keywords</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Returns a stream which translates the special file at @a path to
 * the internal representation for special files when read from.  When
 * written to, it does the reverse: creating a special file when the
 * stream is closed.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_stream_from_specialfile</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> **</type><name>stream</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Similar to svn_subst_translate_stream3() except relies upon a
 * @c svn_subst_keywords_t struct instead of a hash for the keywords.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_translate_stream2</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>src</name></decl></param>,
                            <param><decl><type><name>svn_stream_t</name> *</type><name>dst</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>repair</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_subst_keywords_t</name> *</type><name>keywords</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>expand</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Same as svn_subst_translate_stream2(), but does not take a @a pool
 * argument, instead creates a temporary subpool of the global pool, and
 * destroys it before returning.
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_translate_stream</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>src</name></decl></param>,
                           <param><decl><type><name>svn_stream_t</name> *</type><name>dst</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>repair</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>svn_subst_keywords_t</name> *</type><name>keywords</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>expand</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Translates the file at path @a src into a file at path @a dst.  The
 * parameters @a *eol_str, @a repair, @a *keywords and @a expand are
 * defined the same as in svn_subst_translate_stream3().
 *
 * In addition, it will create a special file from normal form or
 * translate one to normal form if @a special is @c TRUE.
 *
 * Copy the contents of file-path @a src to file-path @a dst atomically,
 * either creating @a dst (or overwriting @a dst if it exists), possibly
 * performing line ending and keyword translations.
 *
 * If anything goes wrong during the copy, attempt to delete @a dst (if
 * it exists).
 *
 * If @a eol_str and @a keywords are @c NULL, behavior is just a byte-for-byte
 * copy.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_copy_and_translate3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>repair</name></decl></param>,
                              <param><decl><type><name>apr_hash_t</name> *</type><name>keywords</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>expand</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_subst_copy_and_translate3() except that @a keywords is a
 * @c svn_subst_keywords_t struct instead of a keywords hash.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_copy_and_translate2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>repair</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_subst_keywords_t</name> *</type><name>keywords</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>expand</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_subst_copy_and_translate2() except that @a special is
 * always set to @c FALSE.
 *
 * @deprecated Provided for backward compatibility with the 1.0 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_copy_and_translate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>repair</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_subst_keywords_t</name> *</type><name>keywords</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>expand</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Convenience routine: a variant of svn_subst_translate_stream3() which
 * operates on cstrings.
 *
 * @since New in 1.3.
 *
 * Return a new string in @a *dst, allocated in @a pool, by copying the
 * contents of string @a src, possibly performing line ending and keyword
 * translations.
 *
 * If @a eol_str and @a keywords are @c NULL, behavior is just a byte-for-byte
 * copy.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_translate_cstring2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dst</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>repair</name></decl></param>,
                             <param><decl><type><name>apr_hash_t</name> *</type><name>keywords</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>expand</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_subst_translate_cstring2() except that @a keywords is a
 * @c svn_subst_keywords_t struct instead of a keywords hash.
 *
 * @deprecated Provided for backward compatibility with the 1.2 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_translate_cstring</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dst</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>repair</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_subst_keywords_t</name> *</type><name>keywords</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>expand</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Translates a file @a src in working copy form to a file @a dst in
 * normal form.
 *
 * The values specified for @a eol_style, @a *eol_str, @a keywords and
 * @a special, should be the ones used to translate the file to its
 * working copy form.  Usually, these are the values specified by the
 * user in the files' properties.
 *
 * Inconsistent line endings in the file will be automatically repaired
 * (made consistent) for some eol styles.  For all others, an error is
 * returned.  By setting @a always_repair_eols to @c TRUE, eols will be
 * made consistent even for those styles which don't have it by default.
 *
 * @note To translate a file FROM normal form, use
 *       svn_subst_copy_and_translate3().
 *
 * @since New in 1.4
 *
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_translate_to_normal_form</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst</name></decl></param>,
                                   <param><decl><type><name>svn_subst_eol_style_t</name></type> <name>eol_style</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>always_repair_eols</name></decl></param>,
                                   <param><decl><type><name>apr_hash_t</name> *</type><name>keywords</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Set @a *stream_p to a stream that detranslates the file @a src from
 * working copy form to normal form, allocated in @a pool.
 *
 * The values specified for @a eol_style, @a *eol_str, @a keywords and
 * @a special, should be the ones used to translate the file to its
 * working copy form.  Usually, these are the values specified by the
 * user in the files' properties.
 *
 * Inconsistent line endings in the file will be automatically repaired
 * (made consistent) for some eol styles.  For all others, an error is
 * returned.  By setting @a always_repair_eols to @c TRUE, eols will be
 * made consistent even for those styles which don't have it by default.
 *
 * @since New in 1.4.
 *
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_subst_stream_detranslated</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> **</type><name>stream_p</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                              <param><decl><type><name>svn_subst_eol_style_t</name></type> <name>eol_style</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>always_repair_eols</name></decl></param>,
                              <param><decl><type><name>apr_hash_t</name> *</type><name>keywords</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/* EOL conversion and character encodings */</comment>

<comment type="block">/** Translate the data in @a value (assumed to be in encoded in charset
 * @a encoding) to UTF8 and LF line-endings.  If @a encoding is @c NULL,
 * then assume that @a value is in the system-default language encoding.
 * Return the translated data in @a *new_value, allocated in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_subst_translate_string</name><parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>new_value</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Translate the data in @a value from UTF8 and LF line-endings into
 * native locale and native line-endings, or to the output locale if
 * @a for_output is TRUE.  Return the translated data in @a
 * *new_value, allocated in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_subst_detranslate_string</name><parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>new_value</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                          <param><decl><type><name>svn_boolean_t</name></type> <name>for_output</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>



<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_SUBST_H */</comment>
</unit>
