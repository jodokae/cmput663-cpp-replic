<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_hash.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_hash.h
 * @brief Dumping and reading hash tables to/from files.
 */</comment>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_HASH_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_HASH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/** The longest the "K &lt;number&gt;" line can be in one of our hashdump files. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_KEYLINE_MAXLEN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<comment type="block">/**
 * @defgroup svn_hash_support Hash table serialization support
 * @{
 */</comment>

<comment type="block">/*----------------------------------------------------*/</comment>
<escape char="0xc"/>
<comment type="block">/** Reading/writing hashtables to disk
 *
 * @defgroup svn_hash_read_write Reading and writing hashtables to disk
 * @{
 */</comment>

<comment type="block">/**
 * The conventional terminator for hash dumps.
 *
 * @since New in 1.1.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_HASH_TERMINATOR</name></cpp:macro> <cpp:value>"END"</cpp:value></cpp:define>

<comment type="block">/**
 * Read a hash table from @a stream, storing the resultants names and
 * values in @a hash.  Use a @a pool for all allocations.  @a hash will
 * have &lt;tt&gt;const char *&lt;/tt&gt; keys and &lt;tt&gt;svn_string_t *&lt;/tt&gt; values.
 * If @a terminator is NULL, expect the hash to be terminated by the
 * end of the stream; otherwise, expect the hash to be terminated by a
 * line containing @a terminator.  Pass @c SVN_HASH_TERMINATOR to use
 * the conventional terminator "END".
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_hash_read2</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
                            <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>terminator</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Dump @a hash to @a stream.  Use @a pool for all allocations.  @a
 * hash has &lt;tt&gt;const char *&lt;/tt&gt; keys and &lt;tt&gt;svn_string_t *&lt;/tt&gt;
 * values.  If @a terminator is not NULL, terminate the hash with a
 * line containing @a terminator.
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_hash_write2</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
                             <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>terminator</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_hash_read2(), but allows @a stream to contain
 * deletion lines which remove entries from @a hash as well as adding
 * to it.
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_hash_read_incremental</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
                                       <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>terminator</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Similar to svn_hash_write2(), but only writes out entries for
 * keys which differ between @a hash and @a oldhash, and also writes
 * out deletion lines for keys which are present in @a oldhash but not
 * in @a hash.
 *
 * @since New in 1.1.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_hash_write_incremental</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
                                        <param><decl><type><name>apr_hash_t</name> *</type><name>oldhash</name></decl></param>,
                                        <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>terminator</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * This function behaves like svn_hash_read2(), but it only works
 * on an apr_file_t input, empty files are accepted, and the hash is
 * expected to be terminated with a line containing "END" or
 * "PROPS-END".
 *
 * @deprecated Provided for backward compatibility with the 1.0 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_hash_read</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
                           <param><decl><type><name>apr_file_t</name> *</type><name>srcfile</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * This function behaves like svn_hash_write2(), but it only works
 * on an apr_file_t output, and the terminator is always "END".
 *
 * @deprecated Provided for backward compatibility with the 1.0 API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_hash_write</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
                            <param><decl><type><name>apr_file_t</name> *</type><name>destfile</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** @} */</comment>

<escape char="0xc"/>
<comment type="block">/** Taking the "diff" of two hash tables.
 *
 * @defgroup svn_hash_diff Taking the diff of two hash tables.
 * @{
 */</comment>

<comment type="block">/** Hash key status indicator for svn_hash_diff_func_t.  */</comment>
<enum>enum <name>svn_hash_diff_key_status</name>
  <block>{
    <comment type="block">/* Key is present in both hashes. */</comment>
    <decl><name>svn_hash_diff_key_both</name></decl>,

    <comment type="block">/* Key is present in first hash only. */</comment>
    <decl><name>svn_hash_diff_key_a</name></decl>,

    <comment type="block">/* Key is present in second hash only. */</comment>
    <decl><name>svn_hash_diff_key_b</name></decl>
  }</block>;</enum>


<comment type="block">/** Function type for expressing a key's status between two hash tables. */</comment>
<typedef>typedef <macro><name>svn_error_t</name></macro> <expr_stmt><expr>*(*<name>svn_hash_diff_func_t</name>)
  (const <name>void</name> *<name>key</name>, <name>apr_ssize_t</name> <name>klen</name>,
   enum <name>svn_hash_diff_key_status</name> <name>status</name>,
   <name>void</name> *<name>baton</name>)</expr>;</expr_stmt></typedef>


<comment type="block">/** Take the diff of two hashtables.
 *
 * For each key in the union of @a hash_a's and @a hash_b's keys, invoke
 * @a diff_func exactly once, passing the key, the key's length, an enum
 * @c svn_hash_diff_key_status indicating which table(s) the key appears
 * in, and @a diff_func_baton.
 *
 * Process all keys of @a hash_a first, then all remaining keys of @a hash_b.
 *
 * If @a diff_func returns error, return that error immediately, without
 * applying @a diff_func to anything else.
 *
 * @a hash_a or @a hash_b or both may be NULL; treat a null table as though
 * empty.
 *
 * Use @a pool for temporary allocation.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_hash_diff</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash_a</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> *</type><name>hash_b</name></decl></param>,
                           <param><decl><type><name>svn_hash_diff_func_t</name></type> <name>diff_func</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>diff_func_baton</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** @} */</comment>

<escape char="0xc"/>
<comment type="block">/**
 * @defgroup svn_hash_misc Miscellaneous hash APIs
 * @{
 */</comment>

<comment type="block">/**
 * Return the keys to @a hash in @a *array.  The keys are assumed to be
 * (const char *).  The keys are in no particular order.
 *
 * @a *array itself is allocated in @a pool; however, the keys are not
 * copied from the hash.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_hash_keys</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>array</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Set @a *hash to a new hash whose keys come from the items in @a keys
 * (an array of &lt;tt&gt;const char *&lt;/tt&gt; items), and whose values are
 * match their corresponding key.  Use @a pool for all allocations
 * (including @a *hash, its keys, and its values).
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_hash_from_cstring_keys</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>hash</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>keys</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Clear any key/value pairs in the hash table.  A wrapper for a
 * apr_hash_clear(), which isn't available until APR 1.3.0.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_hash__clear</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** @} */</comment>

<comment type="block">/** @} */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_HASH_H */</comment>
</unit>
