<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_config.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_config.h
 * @brief Accessing SVN configuration files.
 */</comment>


<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_CONFIG_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>


<comment type="block">/**************************************************************************
 ***                                                                    ***
 ***  For a description of the SVN configuration file syntax, see       ***
 ***  your ~/.subversion/README, which is written out automatically by  ***
 ***  svn_config_ensure().                                              ***
 ***                                                                    ***
 **************************************************************************/</comment>


<comment type="block">/** Opaque structure describing a set of configuration options. */</comment>
<typedef>typedef <type>struct <name>svn_config_t</name></type> <name>svn_config_t</name>;</typedef>

<escape char="0xc"/>
<comment type="block">/*** Configuration Defines ***/</comment>

<comment type="block">/**
 * @name Client configuration files strings
 * Strings for the names of files, sections, and options in the
 * client configuration files.
 * @{
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_CATEGORY_SERVERS</name></cpp:macro>        <cpp:value>"servers"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_SECTION_GROUPS</name></cpp:macro>               <cpp:value>"groups"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_SECTION_GLOBAL</name></cpp:macro>               <cpp:value>"global"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_HTTP_PROXY_HOST</name></cpp:macro>           <cpp:value>"http-proxy-host"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_HTTP_PROXY_PORT</name></cpp:macro>           <cpp:value>"http-proxy-port"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_HTTP_PROXY_USERNAME</name></cpp:macro>       <cpp:value>"http-proxy-username"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_HTTP_PROXY_PASSWORD</name></cpp:macro>       <cpp:value>"http-proxy-password"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_HTTP_PROXY_EXCEPTIONS</name></cpp:macro>     <cpp:value>"http-proxy-exceptions"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_HTTP_TIMEOUT</name></cpp:macro>              <cpp:value>"http-timeout"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_HTTP_COMPRESSION</name></cpp:macro>          <cpp:value>"http-compression"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_NEON_DEBUG_MASK</name></cpp:macro>           <cpp:value>"neon-debug-mask"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_HTTP_AUTH_TYPES</name></cpp:macro>           <cpp:value>"http-auth-types"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_SSL_AUTHORITY_FILES</name></cpp:macro>       <cpp:value>"ssl-authority-files"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_SSL_TRUST_DEFAULT_CA</name></cpp:macro>      <cpp:value>"ssl-trust-default-ca"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_SSL_CLIENT_CERT_FILE</name></cpp:macro>      <cpp:value>"ssl-client-cert-file"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_SSL_CLIENT_CERT_PASSWORD</name></cpp:macro>  <cpp:value>"ssl-client-cert-password"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_SSL_PKCS11_PROVIDER</name></cpp:macro>       <cpp:value>"ssl-pkcs11-provider"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_HTTP_LIBRARY</name></cpp:macro>              <cpp:value>"http-library"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_CATEGORY_CONFIG</name></cpp:macro>          <cpp:value>"config"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_SECTION_AUTH</name></cpp:macro>                 <cpp:value>"auth"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_STORE_PASSWORDS</name></cpp:macro>           <cpp:value>"store-passwords"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_STORE_AUTH_CREDS</name></cpp:macro>          <cpp:value>"store-auth-creds"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_SECTION_HELPERS</name></cpp:macro>              <cpp:value>"helpers"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_EDITOR_CMD</name></cpp:macro>                <cpp:value>"editor-cmd"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_DIFF_CMD</name></cpp:macro>                  <cpp:value>"diff-cmd"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_DIFF3_CMD</name></cpp:macro>                 <cpp:value>"diff3-cmd"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_DIFF3_HAS_PROGRAM_ARG</name></cpp:macro>     <cpp:value>"diff3-has-program-arg"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_MERGE_TOOL_CMD</name></cpp:macro>            <cpp:value>"merge-tool-cmd"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_SECTION_MISCELLANY</name></cpp:macro>           <cpp:value>"miscellany"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_GLOBAL_IGNORES</name></cpp:macro>            <cpp:value>"global-ignores"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_LOG_ENCODING</name></cpp:macro>              <cpp:value>"log-encoding"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_USE_COMMIT_TIMES</name></cpp:macro>          <cpp:value>"use-commit-times"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_TEMPLATE_ROOT</name></cpp:macro>             <cpp:value>"template-root"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_ENABLE_AUTO_PROPS</name></cpp:macro>         <cpp:value>"enable-auto-props"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_NO_UNLOCK</name></cpp:macro>                 <cpp:value>"no-unlock"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_MIMETYPES_FILE</name></cpp:macro>            <cpp:value>"mime-types-file"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_PRESERVED_CF_EXTS</name></cpp:macro>         <cpp:value>"preserved-conflict-file-exts"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_INTERACTIVE_CONFLICTS</name></cpp:macro>     <cpp:value>"interactive-conflicts"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_SECTION_TUNNELS</name></cpp:macro>              <cpp:value>"tunnels"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_SECTION_AUTO_PROPS</name></cpp:macro>           <cpp:value>"auto-props"</cpp:value></cpp:define>
<comment type="block">/** @} */</comment>

<comment type="block">/** @name Repository conf directory configuration files strings
 * Strings for the names of sections and options in the
 * repository conf directory configuration files.
 * @{
 */</comment>
<comment type="block">/* For repository svnserve.conf files */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_SECTION_GENERAL</name></cpp:macro>              <cpp:value>"general"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_ANON_ACCESS</name></cpp:macro>               <cpp:value>"anon-access"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_AUTH_ACCESS</name></cpp:macro>               <cpp:value>"auth-access"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_PASSWORD_DB</name></cpp:macro>               <cpp:value>"password-db"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_REALM</name></cpp:macro>                     <cpp:value>"realm"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_AUTHZ_DB</name></cpp:macro>                  <cpp:value>"authz-db"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_SECTION_SASL</name></cpp:macro>                 <cpp:value>"sasl"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_USE_SASL</name></cpp:macro>                  <cpp:value>"use-sasl"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_MIN_SSF</name></cpp:macro>                   <cpp:value>"min-encryption"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_OPTION_MAX_SSF</name></cpp:macro>                   <cpp:value>"max-encryption"</cpp:value></cpp:define>

<comment type="block">/* For repository password database */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_SECTION_USERS</name></cpp:macro>                <cpp:value>"users"</cpp:value></cpp:define>
<comment type="block">/** @} */</comment>

<comment type="block">/*** Configuration Default Values ***/</comment>

<comment type="block">/* '*' matches leading dots, e.g. '*.rej' matches '.foo.rej'. */</comment>
<comment type="block">/* We want this to be printed on two lines in the generated config file,
 * but we don't want the # character to end up in the variable.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_1</name></cpp:macro> \
  <cpp:value>"*.o *.lo *.la *.al .libs *.so *.so.[0-9]* *.a *.pyc *.pyo"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_2</name></cpp:macro> \
  <cpp:value>"*.rej *~ #*# .#* .*.swp .DS_Store"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_DEFAULT_GLOBAL_IGNORES</name></cpp:macro> \
  <cpp:value>SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_1 " " \
  SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_TRUE</name></cpp:macro>  <cpp:value>"TRUE"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_FALSE</name></cpp:macro> <cpp:value>"FALSE"</cpp:value></cpp:define>


<comment type="block">/** Read configuration information from the standard sources and merge it
 * into the hash @a *cfg_hash.  If @a config_dir is not NULL it specifies a
 * directory from which to read the configuration files, overriding all
 * other sources.  Otherwise, first read any system-wide configurations
 * (from a file or from the registry), then merge in personal
 * configurations (again from file or registry).  The hash and all its data
 * are allocated in @a pool.
 *
 * @a *cfg_hash is a hash whose keys are @c const char * configuration
 * categories (@c SVN_CONFIG_CATEGORY_SERVERS,
 * @c SVN_CONFIG_CATEGORY_CONFIG, etc.) and whose values are the @c
 * svn_config_t * items representing the configuration values for that
 * category.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_config_get_config</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>cfg_hash</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Read configuration data from @a file (a file or registry path) into
 * @a *cfgp, allocated in @a pool.
 *
 * If @a file does not exist, then if @a must_exist, return an error,
 * otherwise return an empty @c svn_config_t.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_config_read</name><parameter_list>(<param><decl><type><name>svn_config_t</name> **</type><name>cfgp</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>must_exist</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Like svn_config_read(), but merges the configuration data from @a file
 * (a file or registry path) into @a *cfg, which was previously returned
 * from svn_config_read().  This function invalidates all value
 * expansions in @a cfg, so that the next svn_config_get() takes the
 * modifications into account.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_config_merge</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>must_exist</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Find the value of a (@a section, @a option) pair in @a cfg, set @a
 * *valuep to the value.
 *
 * If @a cfg is @c NULL, just sets @a *valuep to @a default_value. If
 * the value does not exist, expand and return @a default_value. @a
 * default_value can be NULL.
 *
 * The returned value will be valid at least until the next call to
 * svn_config_get(), or for the lifetime of @a default_value. It is
 * safest to consume the returned value immediately.
 *
 * This function may change @a cfg by expanding option values.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_config_get</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>valuep</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>option</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>default_value</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Add or replace the value of a (@a section, @a option) pair in @a cfg with
 * @a value.
 *
 * This function invalidates all value expansions in @a cfg.
 *
 * To remove an option, pass NULL for the @c value.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_config_set</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>option</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Like svn_config_get(), but for boolean values.
 *
 * Parses the option as a boolean value. The recognized representations
 * are 'TRUE'/'FALSE', 'yes'/'no', 'on'/'off', '1'/'0'; case does not
 * matter. Returns an error if the option doesn't contain a known string.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_config_get_bool</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><name>svn_boolean_t</name> *</type><name>valuep</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>option</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>default_value</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Like svn_config_set(), but for boolean values.
 *
 * Sets the option to 'TRUE'/'FALSE', depending on @a value.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_config_set_bool</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>option</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Similar to @c svn_config_section_enumerator2_t, but is not
 * provided with a memory pool argument.
 *
 * See svn_config_enumerate_sections() for the details of this type.
 *
 * @deprecated Provided for backwards compatibility with the 1.2 API.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_boolean_t</name></type> (*<name>svn_config_section_enumerator_t</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                                         <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** Similar to svn_config_enumerate_sections2(), but uses a memory pool of
 * @a cfg instead of one that is explicitely provided.
 *
 * @deprecated Provided for backwards compatibility with the 1.2 API.
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_config_enumerate_sections</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
                                  <param><decl><type><name>svn_config_section_enumerator_t</name></type> <name>callback</name></decl></param>,
                                  <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** A callback function used in enumerating config sections.
 *
 * See svn_config_enumerate_sections2() for the details of this type.
 *
 * @since New in 1.3.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_boolean_t</name></type> (*<name>svn_config_section_enumerator2_t</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                                          <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** Enumerate the sections, passing @a baton and the current section's name
 * to @a callback.  Continue the enumeration if @a callback returns @c TRUE.
 * Return the number of times @a callback was called.
 *
 * ### See kff's comment to svn_config_enumerate2().  It applies to this
 * function, too. ###
 *
 * @a callback's @a name parameter is only valid for the duration of the call.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_config_enumerate_sections2</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
                                   <param><decl><type><name>svn_config_section_enumerator2_t</name></type> <name>callback</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Similar to @c svn_config_enumerator2_t, but is not
 * provided with a memory pool argument.
 * See svn_config_enumerate() for the details of this type.
 *
 * @deprecated Provided for backwards compatibility with the 1.2 API.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_boolean_t</name></type> (*<name>svn_config_enumerator_t</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
                                                 <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** Similar to svn_config_enumerate2(), but uses a memory pool of
 * @a cfg instead of one that is explicitely provided.
 *
 * @deprecated Provided for backwards compatibility with the 1.2 API.
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_config_enumerate</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>,
                         <param><decl><type><name>svn_config_enumerator_t</name></type> <name>callback</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** A callback function used in enumerating config options.
 *
 * See svn_config_enumerate2() for the details of this type.
 *
 * @since New in 1.3.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_boolean_t</name></type> (*<name>svn_config_enumerator2_t</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
                                                  <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/** Enumerate the options in @a section, passing @a baton and the current
 * option's name and value to @a callback.  Continue the enumeration if
 * @a callback returns @c TRUE.  Return the number of times @a callback
 * was called.
 *
 * ### kff asks: A more usual interface is to continue enumerating
 *     while @a callback does not return error, and if @a callback does
 *     return error, to return the same error (or a wrapping of it)
 *     from svn_config_enumerate().  What's the use case for
 *     svn_config_enumerate()?  Is it more likely to need to break out
 *     of an enumeration early, with no error, than an invocation of
 *     @a callback is likely to need to return an error? ###
 *
 * @a callback's @a name and @a value parameters are only valid for the
 * duration of the call.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_config_enumerate2</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>,
                          <param><decl><type><name>svn_config_enumerator2_t</name></type> <name>callback</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Return @c TRUE if @a section exists in @a cfg, @c FALSE otherwise.
 *
 * @since New in 1.4.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_config_has_section</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Enumerate the group @a master_section in @a cfg.  Each variable
 * value is interpreted as a list of glob patterns (separated by comma
 * and optional whitespace).  Return the name of the first variable
 * whose value matches @a key, or @c NULL if no variable matches.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_config_find_group</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>master_section</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Retrieve value corresponding to @a option_name for a given
 *  @a server_group in @a cfg , or return @a default_value if none is found.
 *
 *  The config will first be checked for a default, then will be checked for
 *  an override in a server group.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_config_get_server_setting</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>server_group</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>option_name</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>default_value</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Retrieve value into @a result_value corresponding to @a option_name for a
 *  given @a server_group in @a cfg, or return @a default_value if none is
 *  found.
 *
 *  The config will first be checked for a default, then will be checked for
 *  an override in a server group. If the value found is not a valid integer,
 *  a @c svn_error_t* will be returned.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_config_get_server_setting_int</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
                                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>server_group</name></decl></param>,
                                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>option_name</name></decl></param>,
                                               <param><decl><type><name>apr_int64_t</name></type> <name>default_value</name></decl></param>,
                                               <param><decl><type><name>apr_int64_t</name> *</type><name>result_value</name></decl></param>,
                                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/** Try to ensure that the user's ~/.subversion/ area exists, and create
 * no-op template files for any absent config files.  Use @a pool for any
 * temporary allocation.  If @a config_dir is not @c NULL it specifies a
 * directory from which to read the config overriding all other sources.
 *
 * Don't error if something exists but is the wrong kind (for example,
 * ~/.subversion exists but is a file, or ~/.subversion/servers exists
 * but is a directory).
 *
 * Also don't error if trying to create something and failing -- it's
 * okay for the config area or its contents not to be created.
 * However, if creating a config template file succeeds, return an
 * error if unable to initialize its contents.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_config_ensure</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>



<escape char="0xc"/>
<comment type="block">/** Accessing cached authentication data in the user config area.
 *
 * @defgroup cached_authentication_data Cached authentication data
 * @{
 */</comment>


<comment type="block">/** A hash-key pointing to a realmstring.  Every file containing
 * authentication data should have this key.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG_REALMSTRING_KEY</name></cpp:macro>  <cpp:value>"svn:realmstring"</cpp:value></cpp:define>

<comment type="block">/** Use @a cred_kind and @a realmstring to locate a file within the
 * ~/.subversion/auth/ area.  If the file exists, initialize @a *hash
 * and load the file contents into the hash, using @a pool.  If the
 * file doesn't exist, set @a *hash to NULL.
 *
 * If @a config_dir is not NULL it specifies a directory from which to
 * read the config overriding all other sources.
 *
 * Besides containing the original credential fields, the hash will
 * also contain @c SVN_CONFIG_REALMSTRING_KEY.  The caller can examine
 * this value as a sanity-check that the correct file was loaded.
 *
 * The hashtable will contain &lt;tt&gt;const char *&lt;/tt&gt; keys and
 * &lt;tt&gt;svn_string_t *&lt;/tt&gt; values.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type> <name>svn_config_read_auth_data</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>hash</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cred_kind</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Use @a cred_kind and @a realmstring to create or overwrite a file
 * within the ~/.subversion/auth/ area.  Write the contents of @a hash into
 * the file.  If @a config_dir is not NULL it specifies a directory to read
 * the config overriding all other sources.
 *
 * Also, add @a realmstring to the file, with key @c
 * SVN_CONFIG_REALMSTRING_KEY.  This allows programs (or users) to
 * verify exactly which set credentials live within the file.
 *
 * The hashtable must contain &lt;tt&gt;const char *&lt;/tt&gt; keys and
 * &lt;tt&gt;svn_string_t *&lt;/tt&gt; values.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type> <name>svn_config_write_auth_data</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cred_kind</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** @} */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_CONFIG_H */</comment>
</unit>
