<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_ctype.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_ctype.h
 * @brief Character classification routines
 * @since New in 1.2.
 */</comment>

<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_CTYPE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>


<comment type="block">/** Table of flags for character classification. */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>apr_uint32_t</name> *<specifier>const</specifier></type> <name>svn_ctype_table</name></decl>;</decl_stmt>


<comment type="block">/** Check if @a c is in the character class described by @a flags.
 * The @a flags is a bitwise-or combination of @c SVN_CTYPE_*
 * constants. Uses #svn_ctype_table.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_test</name><parameter_list>(<param><type><name>c</name></type></param>, <param><type><name>flags</name></type></param>)</parameter_list></cpp:macro> \
  <cpp:value>(0 != (svn_ctype_table[(unsigned char)(c)] &amp; (flags)))</cpp:value></cpp:define>


<comment type="block">/**
 * @defgroup ctype_basic Basic character classification - 7-bit ASCII only
 * @{
 */</comment>

<comment type="block">/* Basic character classes */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_CNTRL</name></cpp:macro>    <cpp:value>0x0001</cpp:value></cpp:define> <comment type="block">/**&lt; Control character */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_SPACE</name></cpp:macro>    <cpp:value>0x0002</cpp:value></cpp:define> <comment type="block">/**&lt; Whitespace */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_DIGIT</name></cpp:macro>    <cpp:value>0x0004</cpp:value></cpp:define> <comment type="block">/**&lt; Decimal digit */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_UPPER</name></cpp:macro>    <cpp:value>0x0008</cpp:value></cpp:define> <comment type="block">/**&lt; Uppercase letter */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_LOWER</name></cpp:macro>    <cpp:value>0x0010</cpp:value></cpp:define> <comment type="block">/**&lt; Lowercase letter */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_PUNCT</name></cpp:macro>    <cpp:value>0x0020</cpp:value></cpp:define> <comment type="block">/**&lt; Punctuation mark */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_XALPHA</name></cpp:macro>   <cpp:value>0x0040</cpp:value></cpp:define> <comment type="block">/**&lt; Hexadecimal digits A to F */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_ASCII</name></cpp:macro>    <cpp:value>0x0080</cpp:value></cpp:define> <comment type="block">/**&lt; ASCII subset*/</comment>

<comment type="block">/* Derived character classes */</comment>
<comment type="block">/** ASCII letter */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_ALPHA</name></cpp:macro>    <cpp:value>(SVN_CTYPE_LOWER | SVN_CTYPE_UPPER)</cpp:value></cpp:define>
<comment type="block">/** ASCII letter or decimal digit */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_ALNUM</name></cpp:macro>    <cpp:value>(SVN_CTYPE_ALPHA | SVN_CTYPE_DIGIT)</cpp:value></cpp:define>
<comment type="block">/** ASCII hexadecimal digit */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_XDIGIT</name></cpp:macro>   <cpp:value>(SVN_CTYPE_DIGIT | SVN_CTYPE_XALPHA)</cpp:value></cpp:define>
<comment type="block">/** Printable ASCII except space */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_GRAPH</name></cpp:macro>    <cpp:value>(SVN_CTYPE_PUNCT | SVN_CTYPE_ALNUM)</cpp:value></cpp:define>
<comment type="block">/** All printable ASCII */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_PRINT</name></cpp:macro>    <cpp:value>(SVN_CTYPE_GRAPH | SVN_CTYPE_SPACE)</cpp:value></cpp:define>


<comment type="block">/** Check if @a c is an ASCII control character. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_iscntrl</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>svn_ctype_test((c), SVN_CTYPE_CNTRL)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is an ASCII whitespace character. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isspace</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>svn_ctype_test((c), SVN_CTYPE_SPACE)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is an ASCII digit. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isdigit</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>svn_ctype_test((c), SVN_CTYPE_DIGIT)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is an ASCII uppercase letter. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isupper</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>svn_ctype_test((c), SVN_CTYPE_UPPER)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is an ASCII lowercase letter. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_islower</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>svn_ctype_test((c), SVN_CTYPE_LOWER)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is an ASCII punctuation mark. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_ispunct</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>svn_ctype_test((c), SVN_CTYPE_PUNCT)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is an ASCII character. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isascii</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>svn_ctype_test((c), SVN_CTYPE_ASCII)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is an ASCII letter. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isalpha</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>svn_ctype_test((c), SVN_CTYPE_ALPHA)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is an ASCII letter or decimal digit. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isalnum</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>svn_ctype_test((c), SVN_CTYPE_ALNUM)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is an ASCII hexadecimal digit. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isxdigit</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>svn_ctype_test((c), SVN_CTYPE_XDIGIT)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is an ASCII graphical (visible printable) character. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isgraph</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>svn_ctype_test((c), SVN_CTYPE_GRAPH)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is an ASCII printable character. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isprint</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>svn_ctype_test((c), SVN_CTYPE_PRINT)</cpp:value></cpp:define>

<comment type="block">/** @} */</comment>
<escape char="0xc"/>
<comment type="block">/**
 * @defgroup ctype_extra Extended character classification
 * @{
 */</comment>

<comment type="block">/* Basic extended character classes */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_UTF8LEAD</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define> <comment type="block">/**&lt; UTF-8 multibyte lead byte */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_UTF8CONT</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define> <comment type="block">/**&lt; UTF-8 multibyte non-lead byte */</comment>
<comment type="block">/* ### TBD
#define SVN_CTYPE_XMLNAME  0x0400
#define SVN_CTYPE_URISAFE  0x0800
*/</comment>

<comment type="block">/* Derived extended character classes */</comment>
<comment type="block">/** Part of a UTF-8 multibyte character. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_UTF8MBC</name></cpp:macro>  <cpp:value>(SVN_CTYPE_UTF8LEAD | SVN_CTYPE_UTF8CONT)</cpp:value></cpp:define>
<comment type="block">/** All valid UTF-8 bytes. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_UTF8</name></cpp:macro>     <cpp:value>(SVN_CTYPE_ASCII | SVN_CTYPE_UTF8MBC)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is a UTF-8 multibyte lead byte. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isutf8lead</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>svn_ctype_test((c), SVN_CTYPE_UTF8LEAD)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is a UTF-8 multibyte continuation (non-lead) byte. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isutf8cont</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>svn_ctype_test((c), SVN_CTYLE_UTF8CONT)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is part of a UTF-8 multibyte character. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isutf8mbc</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>svn_ctype_test((c), SVN_CTYPE_UTF8MBC)</cpp:value></cpp:define>

<comment type="block">/** Check if @a c is valid in UTF-8. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_ctype_isutf8</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>svn_ctype_test((c), SVN_CTYPE_UTF8)</cpp:value></cpp:define>

<comment type="block">/** @} */</comment>

<comment type="block">/**
 * @defgroup ctype_ascii ASCII character value constants
 * @{
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_ASCII_MINUS</name></cpp:macro>            <cpp:value>45</cpp:value></cpp:define> <comment type="block">/**&lt; ASCII value of '-' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_ASCII_DOT</name></cpp:macro>              <cpp:value>46</cpp:value></cpp:define> <comment type="block">/**&lt; ASCII value of '.' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_ASCII_COLON</name></cpp:macro>            <cpp:value>58</cpp:value></cpp:define> <comment type="block">/**&lt; ASCII value of ':' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_ASCII_UNDERSCORE</name></cpp:macro>       <cpp:value>95</cpp:value></cpp:define> <comment type="block">/**&lt; ASCII value of '_' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_ASCII_TAB</name></cpp:macro>               <cpp:value>9</cpp:value></cpp:define> <comment type="block">/**&lt; ASCII value of a tab */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_ASCII_LINEFEED</name></cpp:macro>         <cpp:value>10</cpp:value></cpp:define> <comment type="block">/**&lt; ASCII value of a line feed */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_ASCII_CARRIAGERETURN</name></cpp:macro>   <cpp:value>13</cpp:value></cpp:define>
  <comment type="block">/**&lt; ASCII value of a carriage return */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CTYPE_ASCII_DELETE</name></cpp:macro>          <cpp:value>127</cpp:value></cpp:define>
  <comment type="block">/**&lt; ASCII value of a delete character */</comment>


<comment type="block">/** @} */</comment>

<comment type="block">/**
 * @defgroup ctype_case ASCII-subset case folding
 * @{
 */</comment>

<comment type="block">/**
 * Compare two characters @a a and @a b, treating case-equivalent
 * unaccented Latin (ASCII subset) letters as equal.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>int</name></type> <name>svn_ctype_casecmp</name><parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>b</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** @} */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_CTYPE_H */</comment>
</unit>
