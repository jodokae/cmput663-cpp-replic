<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_error.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_error.h
 * @brief Common exception handling for Subversion.
 */</comment>


<escape char="0xc"/>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_ERROR_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERROR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_errno.h&gt;</cpp:file></cpp:include>     <comment type="block">/* APR's error system */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DOXYGEN_SHOULD_SKIP_THIS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<comment type="block">/** the best kind of (@c svn_error_t *) ! */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_NO_ERROR</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>

<comment type="block">/* The actual error codes are kept in a separate file; see comments
   there for the reasons why. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>

<comment type="block">/** Set the error location for debug mode. */</comment>
<function_decl><type><name>void</name></type> <name>svn_error__locate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>long</name></type> <name>line</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Put an English description of @a statcode into @a buf and return @a buf,
 * NULL-terminated. @a statcode is either an svn error or apr error.
 */</comment>
<function_decl><type><name>char</name> *</type><name>svn_strerror</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>statcode</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>bufsize</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** If @a err has a custom error message, return that, otherwise
 * store the generic error string associated with @a err-&gt;apr_err into
 * @a buf (terminating with NULL) and return @a buf.
 *
 * @since New in 1.4.
 *
 * @note @a buf and @a bufsize are provided in the interface so that
 * this function is thread-safe and yet does no allocation.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_err_best_message</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
                                 <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>bufsize</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/** SVN error creation and destruction.
 *
 * @defgroup svn_error_error_creation_destroy Error creation and destruction
 * @{
 */</comment>

<comment type="block">/** Create a nested exception structure.
 *
 * Input:  an APR or SVN custom error code,
 *         a "child" error to wrap,
 *         a specific message
 *
 * Returns:  a new error structure (containing the old one).
 *
 * @note Errors are always allocated in a subpool of the global pool,
 *        since an error's lifetime is generally not related to the
 *        lifetime of any convenient pool.  Errors must be freed
 *        with svn_error_clear().  The specific message should be @c NULL
 *        if there is nothing to add to the general message associated
 *        with the error code.
 *
 *        If creating the "bottommost" error in a chain, pass @c NULL for
 *        the child argument.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_error_create</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl></param>,
                              <param><decl><type><name>svn_error_t</name> *</type><name>child</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Wrapper macro to collect file and line information */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_error_create</name></cpp:macro> \
  <cpp:value>(svn_error__locate(__FILE__,__LINE__), (svn_error_create))</cpp:value></cpp:define>

<comment type="block">/** Create an error structure with the given @a apr_err and @a child,
 * with a printf-style error message produced by passing @a fmt, using
 * apr_psprintf().
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_error_createf</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl></param>,
                               <param><decl><type><name>svn_error_t</name> *</type><name>child</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>,
                               <param><decl><type>...</type></decl></param>)</parameter_list>
  __attribute__ <parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>3, 4</function_decl>)</block></extern>))<empty_stmt>;</empty_stmt>

<comment type="block">/** Wrapper macro to collect file and line information */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_error_createf</name></cpp:macro> \
  <cpp:value>(svn_error__locate(__FILE__,__LINE__), (svn_error_createf))</cpp:value></cpp:define>

<comment type="block">/** Wrap a @a status from an APR function.  If @a fmt is NULL, this is
 * equivalent to svn_error_create(status,NULL,NULL).  Otherwise,
 * the error message is constructed by formatting @a fmt and the
 * following arguments according to apr_psprintf(), and then
 * appending ": " and the error message corresponding to @a status.
 * (If UTF-8 translation of the APR error message fails, the ": " and
 * APR error are not appended to the error message.)
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_error_wrap_apr</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>status</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
       __attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>2, 3</function_decl>)))<empty_stmt>;</empty_stmt>

<comment type="block">/** Wrapper macro to collect file and line information */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_error_wrap_apr</name></cpp:macro> \
  <cpp:value>(svn_error__locate(__FILE__,__LINE__), (svn_error_wrap_apr))</cpp:value></cpp:define>

<comment type="block">/** A quick n' easy way to create a wrapped exception with your own
 * message, before throwing it up the stack.  (It uses all of the
 * @a child's fields.)
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_error_quick_wrap</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>child</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Wrapper macro to collect file and line information */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_error_quick_wrap</name></cpp:macro> \
  <cpp:value>(svn_error__locate(__FILE__,__LINE__), (svn_error_quick_wrap))</cpp:value></cpp:define>

<comment type="block">/** Add @a new_err to the end of @a chain's chain of errors.  The @a new_err
 * chain will be copied into @a chain's pool and destroyed, so @a new_err
 * itself becomes invalid after this function.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_error_compose</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>chain</name></decl></param>, <param><decl><type><name>svn_error_t</name> *</type><name>new_err</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return the root cause of @a err by finding the last error in its
 * chain (e.g. it or its children).  @a err may be @c SVN_NO_ERROR, in
 * which case @c SVN_NO_ERROR is returned.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_error_root_cause</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Create a new error that is a deep copy of @a err and return it.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_error_dup</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Free the memory used by @a error, as well as all ancestors and
 * descendants of @a error.
 *
 * Unlike other Subversion objects, errors are managed explicitly; you
 * MUST clear an error if you are ignoring it, or you are leaking memory.
 * For convenience, @a error may be @c NULL, in which case this function does
 * nothing; thus, svn_error_clear(svn_foo(...)) works as an idiom to
 * ignore errors.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_error_clear</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Very basic default error handler: print out error stack @a error to the
 * stdio stream @a stream, with each error prefixed by @a prefix, and quit
 * iff the @a fatal flag is set.  Allocations are performed in the @a error's
 * pool.
 *
 * If you're not sure what prefix to pass, just pass "svn: ".  That's
 * what code that used to call svn_handle_error() and now calls
 * svn_handle_error2() does.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_handle_error2</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>,
                       <param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>fatal</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Like svn_handle_error2() but with @c prefix set to "svn: "
 *
 * @deprecated Provided for backward compatibility with the 1.1 API.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_handle_error</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>,
                      <param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>fatal</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Very basic default warning handler: print out the error @a error to the
 * stdio stream @a stream, prefixed by @a prefix.  Allocations are
 * performed in the error's pool.
 *
 * @since New in 1.2.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_handle_warning2</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Like svn_handle_warning2() but with @c prefix set to "svn: "
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_handle_warning</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** A statement macro for checking error values.
 *
 * Evaluate @a expr.  If it yields an error, return that error from the
 * current function.  Otherwise, continue.
 *
 * The &lt;tt&gt;do { ... } while (0)&lt;/tt&gt; wrapper has no semantic effect,
 * but it makes this macro syntactically equivalent to the expression
 * statement it resembles.  Without it, statements like
 *
 * @code
 *   if (a)
 *     SVN_ERR (some operation);
 *   else
 *     foo;
 * @endcode
 *
 * would not mean what they appear to.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERR</name><parameter_list>(<param><type><name>expr</name></type></param>)</parameter_list></cpp:macro>                           \
  <cpp:value>do {                                          \
    svn_error_t *svn_err__temp = (expr);        \
    if (svn_err__temp)                          \
      return svn_err__temp;                     \
  } while (0)</cpp:value></cpp:define>


<comment type="block">/** A statement macro, very similar to @c SVN_ERR.
 *
 * This macro will wrap the error with the specified text before
 * returning the error.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERR_W</name><parameter_list>(<param><type><name>expr</name></type></param>, <param><type><name>wrap_msg</name></type></param>)</parameter_list></cpp:macro>                           \
  <cpp:value>do {                                                      \
    svn_error_t *svn_err__temp = (expr);                    \
    if (svn_err__temp)                                      \
      return svn_error_quick_wrap(svn_err__temp, wrap_msg); \
  } while (0)</cpp:value></cpp:define>


<comment type="block">/** A statement macro, similar to @c SVN_ERR, but returns an integer.
 *
 * Evaluate @a expr. If it yields an error, handle that error and
 * return @c EXIT_FAILURE.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_INT_ERR</name><parameter_list>(<param><type><name>expr</name></type></param>)</parameter_list></cpp:macro>                                        \
  <cpp:value>do {                                                           \
    svn_error_t *svn_err__temp = (expr);                         \
    if (svn_err__temp) {                                         \
      svn_handle_error2(svn_err__temp, stderr, FALSE, "svn: ");  \
      svn_error_clear(svn_err__temp);                            \
      return EXIT_FAILURE; }                                     \
  } while (0)</cpp:value></cpp:define>

<comment type="block">/** @} */</comment>

<comment type="block">/**
 * Return TRUE if @a err is an error specifically related to locking a
 * path in the repository, FALSE otherwise.
 *
 * SVN_ERR_FS_OUT_OF_DATE is in here because it's a non-fatal error
 * that can be thrown when attempting to lock an item.
 *
 * @since New in 1.2.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERR_IS_LOCK_ERROR</name><parameter_list>(<param><type><name>err</name></type></param>)</parameter_list></cpp:macro>                          \
  <cpp:value>(err-&gt;apr_err == SVN_ERR_FS_PATH_ALREADY_LOCKED ||        \
   err-&gt;apr_err == SVN_ERR_FS_OUT_OF_DATE)</cpp:value></cpp:define>                  \

<comment type="block">/**
 * Return TRUE if @a err is an error specifically related to unlocking
 * a path in the repository, FALSE otherwise.
 *
 * @since New in 1.2.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERR_IS_UNLOCK_ERROR</name><parameter_list>(<param><type><name>err</name></type></param>)</parameter_list></cpp:macro>                        \
  <cpp:value>(err-&gt;apr_err == SVN_ERR_FS_PATH_NOT_LOCKED ||            \
   err-&gt;apr_err == SVN_ERR_FS_BAD_LOCK_TOKEN ||             \
   err-&gt;apr_err == SVN_ERR_FS_LOCK_OWNER_MISMATCH ||        \
   err-&gt;apr_err == SVN_ERR_FS_NO_SUCH_LOCK ||               \
   err-&gt;apr_err == SVN_ERR_RA_NOT_LOCKED ||                 \
   err-&gt;apr_err == SVN_ERR_FS_LOCK_EXPIRED)</cpp:value></cpp:define>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_ERROR_H */</comment>
</unit>
