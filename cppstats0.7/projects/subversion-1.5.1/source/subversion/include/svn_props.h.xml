<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/include/svn_props.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file svn_props.h
 * @brief Subversion properties
 */</comment>

<comment type="block">/* ==================================================================== */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_PROPS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROPS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<comment type="block">/**
 * @defgroup svn_props_support Properties management utilities
 * @{
 */</comment>

<escape char="0xc"/>

<comment type="block">/** A general in-memory representation of a single property.  Most of
 * the time, property lists will be stored completely in hashes.  But
 * sometimes it's useful to have an "ordered" collection of
 * properties, in which case we use an array of these structures.
 *
 * Also: sometimes we want a list that represents a set of property
 * *changes*, and in this case, an @c apr_hash_t won't work -- there's no
 * way to represent a property deletion, because we can't store a @c NULL
 * value in a hash.  So instead, we use these structures.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_prop_t</name>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>           <comment type="block">/**&lt; Property name */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>  <comment type="block">/**&lt; Property value */</comment>
}</block></struct></type> <name>svn_prop_t</name>;</typedef>


<comment type="block">/**
 * Return a duplicate of @a prop, allocated in @a pool. No part of the new
 * structure will be shared with @a prop.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><name>svn_prop_t</name> *</type><name>svn_prop_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>prop</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Duplicate an @a array of svn_prop_t items using @a pool.
 *
 * @since New in 1.3.
 */</comment>
<function_decl><type><name>apr_array_header_t</name> *</type>
<name>svn_prop_array_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>array</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Given a hash (keys &lt;tt&gt;const char *&lt;/tt&gt; and values &lt;tt&gt;const
 * svn_string_t&lt;/tt&gt;) of properties, returns an array of svn_prop_t
 * items using @a pool.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>apr_array_header_t</name> *</type>
<name>svn_prop_hash_to_array</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Subversion distinguishes among several kinds of properties,
 * particularly on the client-side.  There is no "unknown" kind; if
 * there's nothing special about a property name, the default category
 * is @c svn_prop_regular_kind.
 */</comment>
<typedef>typedef <type><enum>enum <name>svn_prop_kind</name>
<block>{
  <comment type="block">/** In .svn/entries, i.e., author, date, etc. */</comment>
  <decl><name>svn_prop_entry_kind</name></decl>,

  <comment type="block">/** Client-side only, stored by specific RA layer. */</comment>
  <decl><name>svn_prop_wc_kind</name></decl>,

  <comment type="block">/** Seen if user does "svn proplist"; note that this includes some "svn:"
   * props and all user props, i.e. ones stored in the repository fs.
   */</comment>
  <decl><name>svn_prop_regular_kind</name></decl>
}</block></enum></type> <name>svn_prop_kind_t</name>;</typedef>

<comment type="block">/** Return the prop kind of a property named @a prop_name, and
 * (if @a prefix_len is non-@c NULL) set @a *prefix_len to the length of
 * the prefix of @a prop_name that was sufficient to distinguish its kind.
 */</comment>
<function_decl><type><name>svn_prop_kind_t</name></type> <name>svn_property_kind</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>prefix_len</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Return @c TRUE iff @a prop_name represents the name of a Subversion
 * property.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_prop_is_svn_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Return @c TRUE iff @a props has at least one property whose name
 * represents the name of a Subversion property.
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_prop_has_svn_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Return @c TRUE iff @a prop_name is a Subversion property whose
 * value is interpreted as a boolean.
 *
 * @since New in 1.5
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_prop_is_boolean</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** If @a prop_name requires that its value be stored as UTF8/LF in the
 * repository, then return @c TRUE.  Else return @c FALSE.  This is for
 * users of libsvn_client or libsvn_fs, since it their responsibility
 * to do this translation in both directions.  (See
 * svn_subst_translate_string()/svn_subst_detranslate_string() for
 * help with this task.)
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_prop_needs_translation</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Given a @a proplist array of @c svn_prop_t structures, allocate
 * three new arrays in @a pool.  Categorize each property and then
 * create new @c svn_prop_t structures in the proper lists.  Each new
 * @c svn_prop_t structure's fields will point to the same data within
 * @a proplist's structures.
 *
 * Callers may pass NULL for each of the property lists in which they
 * are uninterested.  If no props exist in a certain category, and the
 * property list argument for that category is non-NULL, then that
 * array will come back with &lt;tt&gt;-&gt;nelts == 0&lt;/tt&gt;.
 *
 * ### Hmmm, maybe a better future interface is to return an array of
 *     arrays, where the index into the array represents the index
 *     into @c svn_prop_kind_t.  That way we can add more prop kinds
 *     in the future without changing this interface...
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_categorize_props</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>proplist</name></decl></param>,
                                  <param><decl><type><name>apr_array_header_t</name> **</type><name>entry_props</name></decl></param>,
                                  <param><decl><type><name>apr_array_header_t</name> **</type><name>wc_props</name></decl></param>,
                                  <param><decl><type><name>apr_array_header_t</name> **</type><name>regular_props</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/** Given two property hashes (&lt;tt&gt;const char *name&lt;/tt&gt; -&gt; &lt;tt&gt;const
 * svn_string_t *value&lt;/tt&gt;), deduce the differences between them (from
 * @a source_props -&gt; @c target_props).  Return these changes as a series of
 * @c svn_prop_t structures stored in @a propdiffs, allocated from @a pool.
 *
 * For note, here's a quick little table describing the logic of this
 * routine:
 *
 * @verbatim
   basehash        localhash         event
   --------        ---------         -----
   value = foo     value = NULL      Deletion occurred.
   value = foo     value = bar       Set occurred (modification)
   value = NULL    value = baz       Set occurred (creation) @endverbatim
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_prop_diffs</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>propdiffs</name></decl></param>,
                            <param><decl><type><name>apr_hash_t</name> *</type><name>target_props</name></decl></param>,
                            <param><decl><type><name>apr_hash_t</name> *</type><name>source_props</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Return @c TRUE iff @a prop_name is a valid property name.
 *
 * For now, "valid" means the ASCII subset of an XML "Name".
 * XML "Name" is defined at http://www.w3.org/TR/REC-xml#sec-common-syn
 *
 * @since New in 1.5.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_prop_name_is_valid</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/* Defines for reserved ("svn:") property names.  */</comment>

<comment type="block">/** All Subversion property names start with this. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_PREFIX</name></cpp:macro> <cpp:value>"svn:"</cpp:value></cpp:define>


<comment type="block">/** Visible properties
 *
 * These are regular properties that are attached to ordinary files
 * and dirs, and are visible (and tweakable) by svn client programs
 * and users.  Adding these properties causes specific effects.
 *
 * @note the values of these properties are always UTF8-encoded with
 * LF line-endings.  It is the burden of svn library users to enforce
 * this.  Use svn_prop_needs_translation() to discover if a
 * certain property needs translation, and you can use
 * svn_subst_translate_string()/svn_subst_detranslate_string()
 * to do the translation.
 *
 * @defgroup svn_prop_visible_props Visible properties
 * @{
 */</comment>

<comment type="block">/* Properties whose values are interpreted as booleans (such as
 * svn:executable, svn:needs_lock, and svn:special) always fold their
 * value to this.
 *
 * @since New in 1.5.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_BOOLEAN_TRUE</name></cpp:macro> <cpp:value>"*"</cpp:value></cpp:define>

<comment type="block">/** The mime-type of a given file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_MIME_TYPE</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "mime-type"</cpp:value></cpp:define>

<comment type="block">/** The ignore patterns for a given directory. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_IGNORE</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "ignore"</cpp:value></cpp:define>

<comment type="block">/** The line ending style for a given file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_EOL_STYLE</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "eol-style"</cpp:value></cpp:define>

<comment type="block">/** The "activated" keywords (for keyword substitution) for a given file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_KEYWORDS</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "keywords"</cpp:value></cpp:define>

<comment type="block">/** Set to either TRUE or FALSE if we want a file to be executable or not. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_EXECUTABLE</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "executable"</cpp:value></cpp:define>

<comment type="block">/** The value to force the executable property to when set.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 * Use @c SVN_PROP_BOOLEAN_TRUE instead.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_EXECUTABLE_VALUE</name></cpp:macro> <cpp:value>SVN_PROP_BOOLEAN_TRUE</cpp:value></cpp:define>

<comment type="block">/** Set to TRUE ('*') if we want a file to be set to read-only when
 * not locked.  FALSE is indicated by deleting the property. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_NEEDS_LOCK</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "needs-lock"</cpp:value></cpp:define>

<comment type="block">/** The value to force the needs-lock property to when set.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 * Use @c SVN_PROP_BOOLEAN_TRUE instead.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_NEEDS_LOCK_VALUE</name></cpp:macro> <cpp:value>SVN_PROP_BOOLEAN_TRUE</cpp:value></cpp:define>

<comment type="block">/** Set if the file should be treated as a special file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_SPECIAL</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "special"</cpp:value></cpp:define>

<comment type="block">/** The value to force the special property to when set.
 *
 * @deprecated Provided for backward compatibility with the 1.4 API.
 * Use @c SVN_PROP_BOOLEAN_TRUE instead.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_SPECIAL_VALUE</name></cpp:macro> <cpp:value>SVN_PROP_BOOLEAN_TRUE</cpp:value></cpp:define>

<comment type="block">/** Describes external items to check out into this directory.
 *
 * The format is a series of lines, such as:
 *
 *@verbatim
     localdir1           http://url.for.external.source/etc/
     localdir1/foo       http://url.for.external.source/foo
     localdir1/bar       http://blah.blah.blah/repositories/theirproj
     localdir1/bar/baz   http://blorg.blorg.blorg/basement/code
     localdir2           http://another.url/blah/blah/blah
     localdir3           http://and.so.on/and/so/forth @endverbatim
 *
 * The subdir names on the left side are relative to the directory on
 * which this property is set.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_EXTERNALS</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "externals"</cpp:value></cpp:define>

<comment type="block">/** Merge info property used to record a resource's merge history.
 *
 * The format is a series of lines containing merge paths and revision
 * ranges, such as:
 *
 * @verbatim
     /trunk: 1-6,9,37-38
     /trunk/foo: 10 @endverbatim
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_MERGEINFO</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "mergeinfo"</cpp:value></cpp:define>

<comment type="block">/** @} */</comment>

<comment type="block">/** WC props are props that are invisible to users:  they're generated
 * by an RA layer, and stored in secret parts of .svn/.
 *
 * @defgroup svn_prop_invisible_props Invisible properties
 * @{
 */</comment>

<comment type="block">/** The property name *prefix* that makes a property a "WC property".
 *
 * For example, WebDAV RA implementations might store a versioned-resource url as a WC
 * prop like this:
 *
 * @verbatim
      name = svn:wc:dav_url
      val  = http://www.lyra.org/repos/452348/e.289 @endverbatim
 *
 * The client will try to protect WC props by warning users against
 * changing them.  The client will also send them back to the RA layer
 * when committing.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_WC_PREFIX</name></cpp:macro>     <cpp:value>SVN_PROP_PREFIX "wc:"</cpp:value></cpp:define>

<comment type="block">/** Another type of non-user-visible property.  "Entry properties" are
 * stored as fields with the administrative 'entries' file.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_ENTRY_PREFIX</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "entry:"</cpp:value></cpp:define>

<comment type="block">/** The revision this entry was last committed to on. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_ENTRY_COMMITTED_REV</name></cpp:macro>     <cpp:value>SVN_PROP_ENTRY_PREFIX "committed-rev"</cpp:value></cpp:define>

<comment type="block">/** The date this entry was last committed to on. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_ENTRY_COMMITTED_DATE</name></cpp:macro>    <cpp:value>SVN_PROP_ENTRY_PREFIX "committed-date"</cpp:value></cpp:define>

<comment type="block">/** The author who last committed to this entry. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_ENTRY_LAST_AUTHOR</name></cpp:macro>       <cpp:value>SVN_PROP_ENTRY_PREFIX "last-author"</cpp:value></cpp:define>

<comment type="block">/** The UUID of this entry's repository. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_ENTRY_UUID</name></cpp:macro>       <cpp:value>SVN_PROP_ENTRY_PREFIX "uuid"</cpp:value></cpp:define>

<comment type="block">/** The lock token for this entry.
 * @since New in 1.2. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_ENTRY_LOCK_TOKEN</name></cpp:macro> <cpp:value>SVN_PROP_ENTRY_PREFIX "lock-token"</cpp:value></cpp:define>

<comment type="block">/** When custom, user-defined properties are passed over the wire, they will
 * have this prefix added to their name.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_CUSTOM_PREFIX</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "custom:"</cpp:value></cpp:define>

<comment type="block">/** @} */</comment>

<comment type="block">/**
 * These are reserved properties attached to a "revision" object in
 * the repository filesystem.  They can be queried by using
 * svn_fs_revision_prop().
 *
 * @defgroup svn_props_revision_props Revision properties
 * @{
 */</comment>

<comment type="block">/** The fs revision property that stores a commit's author. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_REVISION_AUTHOR</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "author"</cpp:value></cpp:define>

<comment type="block">/** The fs revision property that stores a commit's log message. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_REVISION_LOG</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "log"</cpp:value></cpp:define>

<comment type="block">/** The fs revision property that stores a commit's date. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_REVISION_DATE</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "date"</cpp:value></cpp:define>

<comment type="block">/** The fs revision property that stores a commit's "original" date.
 *
 * The svn:date property must be monotonically increasing, along with
 * the revision number. In certain scenarios, this may pose a problem
 * when the revision represents a commit that occurred at a time which
 * does not fit within the sequencing required for svn:date. This can
 * happen, for instance, when the revision represents a commit to a
 * foreign version control system, or possibly when two Subversion
 * repositories are combined. This property can be used to record the
 * TRUE, original date of the commit.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_REVISION_ORIG_DATE</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "original-date"</cpp:value></cpp:define>

<comment type="block">/** The presence of this fs revision property indicates that the
 * revision was automatically generated by the mod_dav_svn
 * autoversioning feature.  The value is irrelevant.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_REVISION_AUTOVERSIONED</name></cpp:macro>  <cpp:value>SVN_PROP_PREFIX "autoversioned"</cpp:value></cpp:define>


<comment type="block">/* More reserved revision props in the 'svn:' namespace, used by the
   svnsync tool:   */</comment>

<comment type="block">/** Prefix for all svnsync custom properties. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_PROP_PREFIX</name></cpp:macro>             <cpp:value>SVN_PROP_PREFIX "sync-"</cpp:value></cpp:define>

<comment type="block">/* The following revision properties are set on revision 0 of
 * destination repositories by svnsync:
 */</comment>

<comment type="block">/** Used to enforce mutually exclusive destination repository access. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_PROP_LOCK</name></cpp:macro>               <cpp:value>SVNSYNC_PROP_PREFIX "lock"</cpp:value></cpp:define>

<comment type="block">/** Identifies the repository's source URL. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_PROP_FROM_URL</name></cpp:macro>           <cpp:value>SVNSYNC_PROP_PREFIX "from-url"</cpp:value></cpp:define>
<comment type="block">/** Identifies the repository's source UUID. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_PROP_FROM_UUID</name></cpp:macro>          <cpp:value>SVNSYNC_PROP_PREFIX "from-uuid"</cpp:value></cpp:define>

<comment type="block">/** Identifies the last completely mirrored revision. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_PROP_LAST_MERGED_REV</name></cpp:macro>    <cpp:value>SVNSYNC_PROP_PREFIX "last-merged-rev"</cpp:value></cpp:define>

<comment type="block">/** Identifies the revision currently being copied. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_PROP_CURRENTLY_COPYING</name></cpp:macro>  <cpp:value>SVNSYNC_PROP_PREFIX "currently-copying"</cpp:value></cpp:define>


<comment type="block">/**
 * This is a list of all revision properties.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_REVISION_ALL_PROPS</name></cpp:macro> <cpp:value>SVN_PROP_REVISION_AUTHOR, \
                                    SVN_PROP_REVISION_LOG, \
                                    SVN_PROP_REVISION_DATE, \
                                    SVN_PROP_REVISION_AUTOVERSIONED, \
                                    SVN_PROP_REVISION_ORIG_DATE, \
                                    SVNSYNC_PROP_LOCK, \
                                    SVNSYNC_PROP_FROM_URL, \
                                    SVNSYNC_PROP_FROM_UUID, \
                                    SVNSYNC_PROP_LAST_MERGED_REV, \
                                    SVNSYNC_PROP_CURRENTLY_COPYING,</cpp:value></cpp:define>

<comment type="block">/** @} */</comment>

<comment type="block">/** @} */</comment>

<escape char="0xc"/>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_PROPS_H */</comment>
</unit>
