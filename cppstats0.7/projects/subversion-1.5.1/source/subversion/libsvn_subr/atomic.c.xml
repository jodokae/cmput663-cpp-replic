<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_subr/atomic.c"><comment type="block">/* atomic.c : perform atomic initialization
 *
 * ====================================================================
 * Copyright (c) 2000-2005 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_atomic.h"</cpp:file></cpp:include>

<comment type="block">/* Magic values for atomic initialization */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ATOMIC_UNINITIALIZED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ATOMIC_START_INIT</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ATOMIC_INIT_FAILED</name></cpp:macro>   <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ATOMIC_INITIALIZED</name></cpp:macro>   <cpp:value>3</cpp:value></cpp:define>

<function><type><name>svn_error_t</name>*</type>
<name>svn_atomic__init_once</name><parameter_list>(<param><decl><type><specifier>volatile</specifier> <name>svn_atomic_t</name> *</type><name>global_status</name></decl></param>,
                      <param><function_decl><type><name>svn_error_t</name> *</type>(*<name>init_func</name>)<parameter_list>(<param><decl><type><name>apr_pool_t</name>*</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>apr_pool_t</name>*</type> <name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* We have to call init_func exactly once.  Because APR
     doesn't have statically-initialized mutexes, we implement a poor
     man's spinlock using svn_atomic_cas. */</comment>
  <decl_stmt><decl><type><name>svn_atomic_t</name></type> <name>status</name> <init>= <expr><call><name>svn_atomic_cas</name><argument_list>(<argument><expr><name>global_status</name></expr></argument>,
                                       <argument><expr><name>SVN_ATOMIC_START_INIT</name></expr></argument>,
                                       <argument><expr><name>SVN_ATOMIC_UNINITIALIZED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>status</name> == <name>SVN_ATOMIC_UNINITIALIZED</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>init_func</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
          <comment type="block">/* Tell other threads that the initialization failed. */</comment>
          <expr_stmt><expr><call><name>svn_atomic_cas</name><argument_list>(<argument><expr><name>global_status</name></expr></argument>,
                         <argument><expr><name>SVN_ATOMIC_INIT_FAILED</name></expr></argument>,
                         <argument><expr><name>SVN_ATOMIC_START_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <return>return <expr><name>err</name></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr><call><name>svn_atomic_cas</name><argument_list>(<argument><expr><name>global_status</name></expr></argument>,
                     <argument><expr><name>SVN_ATOMIC_INITIALIZED</name></expr></argument>,
                     <argument><expr><name>SVN_ATOMIC_START_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
  <comment type="block">/* Wait for whichever thread is performing initialization to finish. */</comment>
  <comment type="block">/* XXX FIXME: Should we have a maximum wait here, like we have in
                the Windows file IO spinner? */</comment>
  <else>else <while>while <condition>(<expr><name>status</name> != <name>SVN_ATOMIC_INITIALIZED</name></expr>)</condition>
    <block>{
      <if>if <condition>(<expr><name>status</name> == <name>SVN_ATOMIC_INIT_FAILED</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr>"Couldn't perform atomic initialization"</expr></argument>)</argument_list></call></expr>;</return></then></if>

      <expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name>APR_USEC_PER_SEC</name> / 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> = <call><name>svn_atomic_cas</name><argument_list>(<argument><expr><name>global_status</name></expr></argument>,
                              <argument><expr><name>SVN_ATOMIC_UNINITIALIZED</name></expr></argument>,
                              <argument><expr><name>SVN_ATOMIC_UNINITIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* APR_HAS_THREADS */</comment>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
