<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_subr/iter.c"><comment type="block">/* iter.c : iteration drivers
 *
 * ====================================================================
 * Copyright (c) 2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_iter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>svn_error_t</name></type> <name>internal_break_error</name> <init>=
  <expr><block>{
    <expr><name>SVN_ERR_ITER_BREAK</name></expr>, <comment type="block">/* APR status */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* message */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* child error */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* pool */</comment>
    <expr><name>__FILE__</name></expr>, <comment type="block">/* file name */</comment>
    <expr><name>__LINE__</name></expr> <comment type="block">/* line number */</comment>
  }</block></expr></init></decl>;</decl_stmt>

<function><type><name>svn_error_t</name> *</type>
<name>svn_iter_apr_hash</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>completed</name></decl></param>,
                  <param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
                  <param><decl><type><name>svn_iter_apr_hash_cb_t</name></type> <name>func</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</init>
       <condition><expr>! <name>err</name> &amp;&amp; <name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call>(*<name>func</name>)<argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <if>if <condition>(<expr><name>completed</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>completed</name> = ! <name>err</name></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_ITER_BREAK</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>err</name> != &amp;<name>internal_break_error</name></expr>)</condition><then>
        <comment type="block">/* Errors - except those created by svn_iter_break() -
           need to be cleared when not further propagated. */</comment>
        <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Clear iterpool, because callers may clear the error but have no way
     to clear the iterpool with potentially lots of allocated memory */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_iter_apr_array</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>completed</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>array</name></decl></param>,
                   <param><decl><type><name>svn_iter_apr_array_cb_t</name></type> <name>func</name></decl></param>,
                   <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr>(! <name>err</name>) &amp;&amp; <name>i</name> &lt; <name><name>array</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>void</name> *</type><name>item</name> <init>= <expr><name><name>array</name>-&gt;<name>elts</name></name> + <name><name>array</name>-&gt;<name>elt_size</name></name>*<name>i</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>err</name> = <call>(*<name>func</name>)<argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <if>if <condition>(<expr><name>completed</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>completed</name> = ! <name>err</name></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_ITER_BREAK</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>err</name> != &amp;<name>internal_break_error</name></expr>)</condition><then>
        <comment type="block">/* Errors - except those created by svn_iter_break() -
           need to be cleared when not further propagated. */</comment>
        <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Clear iterpool, because callers may clear the error but have no way
     to clear the iterpool with potentially lots of allocated memory */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_iter__break</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <return>return <expr>&amp;<name>internal_break_error</name></expr>;</return>
}</block></function>
</unit>
