<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_subr/win32_crashrpt_dll.h"><comment type="block">/*
 * win32_crashrpt_dll.h : private header file.
 *
 * ====================================================================
 * Copyright (c) 2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_SUBR_WIN32_CRASHRPT_DLL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_SUBR_WIN32_CRASHRPT_DLL_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_USE_WIN32_CRASHHANDLER</name></cpp:ifdef>

<comment type="block">/* public functions in dbghelp.dll */</comment>
<typedef>typedef <function_decl><type><name>BOOL</name></type>  (<name>WINAPI</name> * <name>MINIDUMPWRITEDUMP</name>)<parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>ProcessId</name></decl></param>,
               <param><decl><type><name>HANDLE</name></type> <name>hFile</name></decl></param>, <param><decl><type><name>MINIDUMP_TYPE</name></type> <name>DumpType</name></decl></param>,
               <param><decl><type><name>CONST</name> <name>PMINIDUMP_EXCEPTION_INFORMATION</name></type> <name>ExceptionParam</name></decl></param>,
               <param><decl><type><name>CONST</name> <name>PMINIDUMP_USER_STREAM_INFORMATION</name></type> <name>UserStreamParam</name></decl></param>,
               <param><decl><type><name>CONST</name> <name>PMINIDUMP_CALLBACK_INFORMATION</name></type> <name>CallbackParam</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type>  (<name>WINAPI</name> * <name>SYMINITIALIZE</name>)<parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl></param>, <param><decl><type><name>PSTR</name></type> <name>UserSearchPath</name></decl></param>,
                                    <param><decl><type><name>BOOL</name></type> <name>fInvadeProcess</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> * <name>SYMSETOPTIONS</name>)<parameter_list>(<param><decl><type><name>DWORD</name></type> <name>SymOptions</name></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> * <name>SYMGETOPTIONS</name>)<parameter_list>(<param><decl><type><name>VOID</name></type></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>  (<name>WINAPI</name> * <name>SYMCLEANUP</name>)<parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>  (<name>WINAPI</name> * <name>SYMGETTYPEINFO</name>)<parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl></param>, <param><decl><type><name>DWORD64</name></type> <name>ModBase</name></decl></param>,
                                     <param><decl><type><name>ULONG</name></type> <name>TypeId</name></decl></param>, <param><decl><type><name>IMAGEHLP_SYMBOL_TYPE_INFO</name></type> <name>GetType</name></decl></param>,
                                     <param><decl><type><name>PVOID</name></type> <name>pInfo</name></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>  (<name>WINAPI</name> * <name>SYMGETLINEFROMADDR64</name>)<parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl></param>, <param><decl><type><name>DWORD64</name></type> <name>dwAddr</name></decl></param>,
                                 <param><decl><type><name>PDWORD</name></type> <name>pdwDisplacement</name></decl></param>, <param><decl><type><name>PIMAGEHLP_LINE64</name></type> <name>Line</name></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>  (<name>WINAPI</name> * <name>SYMENUMSYMBOLS</name>)<parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl></param>, <param><decl><type><name>ULONG64</name></type> <name>BaseOfDll</name></decl></param>, <param><decl><type><name>PCSTR</name></type> <name>Mask</name></decl></param>,
                             <param><decl><type><name>PSYM_ENUMERATESYMBOLS_CALLBACK</name></type> <name>EnumSymbolsCallback</name></decl></param>,
                             <param><decl><type><name>PVOID</name></type> <name>UserContext</name></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>  (<name>WINAPI</name> * <name>SYMSETCONTEXT</name>)<parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl></param>, <param><decl><type><name>PIMAGEHLP_STACK_FRAME</name></type> <name>StackFrame</name></decl></param>,
                            <param><decl><type><name>PIMAGEHLP_CONTEXT</name></type> <name>Context</name></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type>  (<name>WINAPI</name> * <name>SYMFROMADDR</name>)<parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl></param>, <param><decl><type><name>DWORD64</name></type> <name>Address</name></decl></param>,
                          <param><decl><type><name>PDWORD64</name></type> <name>Displacement</name></decl></param>, <param><decl><type><name>PSYMBOL_INFO</name></type> <name>Symbol</name></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> * <name>STACKWALK64</name>)<parameter_list>(<param><decl><type><name>DWORD</name></type> <name>MachineType</name></decl></param>, <param><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl></param>, <param><decl><type><name>HANDLE</name></type> <name>hThread</name></decl></param>,
                                <param><decl><type><name>LPSTACKFRAME64</name></type> <name>StackFrame</name></decl></param>, <param><decl><type><name>PVOID</name></type> <name>ContextRecord</name></decl></param>,
                                <param><decl><type><name>PREAD_PROCESS_MEMORY_ROUTINE64</name></type> <name>ReadMemoryRoutine</name></decl></param>,
                                <param><decl><type><name>PFUNCTION_TABLE_ACCESS_ROUTINE64</name></type> <name>FunctionTableAccessRoutine</name></decl></param>,
                                <param><decl><type><name>PGET_MODULE_BASE_ROUTINE64</name></type> <name>GetModuleBaseRoutine</name></decl></param>,
                                <param><decl><type><name>PTRANSLATE_ADDRESS_ROUTINE64</name></type> <name>TranslateAddress</name></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>PVOID</name></type> (<name>WINAPI</name> * <name>SYMFUNCTIONTABLEACCESS64</name>)<parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl></param>, <param><decl><type><name>DWORD64</name></type> <name>AddrBase</name></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>DWORD64</name></type> (<name>WINAPI</name> * <name>SYMGETMODULEBASE64</name>)<parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl></param>, <param><decl><type><name>DWORD64</name></type> <name>dwAddr</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* public functions in version.dll */</comment>
<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>APIENTRY</name> * <name>GETFILEVERSIONINFOSIZE</name>)
                          <parameter_list>(<param><decl><type><name>LPCSTR</name></type> <name>lptstrFilename</name></decl></param>, <param><decl><type><name>LPDWORD</name></type> <name>lpdwHandle</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type>  (<name>APIENTRY</name> * <name>GETFILEVERSIONINFO</name>)
                          <parameter_list>(<param><decl><type><name>LPCSTR</name></type> <name>lptstrFilename</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>dwHandle</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>dwLen</name></decl></param>,
                           <param><decl><type><name>LPVOID</name></type> <name>lpData</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type>  (<name>APIENTRY</name> * <name>VERQUERYVALUE</name>)
                          <parameter_list>(<param><decl><type><specifier>const</specifier> <name>LPVOID</name></type> <name>pBlock</name></decl></param>, <param><decl><type><name>LPSTR</name></type> <name>lpSubBlock</name></decl></param>,
                           <param><decl><type><name>LPVOID</name> *</type> <name>lplpBuffer</name></decl></param>, <param><decl><type><name>PUINT</name></type> <name>puLen</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* public functions in kernel32.dll */</comment>
<typedef>typedef <function_decl><type><name>BOOL</name></type>  (<name>WINAPI</name> * <name>ISDEBUGGERPRESENT</name>)<parameter_list>(<param><decl><type><name>VOID</name></type></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* function pointers */</comment>
<decl_stmt><decl><type><name>MINIDUMPWRITEDUMP</name></type>        <name>MiniDumpWriteDump_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYMINITIALIZE</name></type>            <name>SymInitialize_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYMSETOPTIONS</name></type>            <name>SymSetOptions_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYMGETOPTIONS</name></type>            <name>SymGetOptions_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYMCLEANUP</name></type>               <name>SymCleanup_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYMGETTYPEINFO</name></type>           <name>SymGetTypeInfo_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYMGETLINEFROMADDR64</name></type>     <name>SymGetLineFromAddr64_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYMENUMSYMBOLS</name></type>           <name>SymEnumSymbols_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYMSETCONTEXT</name></type>            <name>SymSetContext_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYMFROMADDR</name></type>              <name>SymFromAddr_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STACKWALK64</name></type>              <name>StackWalk64_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYMFUNCTIONTABLEACCESS64</name></type> <name>SymFunctionTableAccess64_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYMGETMODULEBASE64</name></type>       <name>SymGetModuleBase64_</name></decl>;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_USE_WIN32_CRASHHANDLER */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WIN32 */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></decl_stmt> <comment type="block">/* SVN_LIBSVN_SUBR_WIN32_CRASHRPT_DLL_H */</comment></unit>
