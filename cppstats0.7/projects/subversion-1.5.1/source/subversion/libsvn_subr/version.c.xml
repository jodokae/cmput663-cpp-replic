<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_subr/version.c"><comment type="block">/*
 * version.c:  library version number and utilities
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>svn_version_t</name> *</type>
<name>svn_subr_version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>SVN_VERSION_BODY</name></expr>;</expr_stmt>
}</block></function>


<function><type><name>svn_boolean_t</name></type> <name>svn_ver_compatible</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>my_version</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>lib_version</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>lib_version</name>-&gt;<name>tag</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then>
    <comment type="block">/* Development library; require exact match. */</comment>
    <return>return <expr><call><name>svn_ver_equal</name><argument_list>(<argument><expr><name>my_version</name></expr></argument>, <argument><expr><name>lib_version</name></expr></argument>)</argument_list></call></expr>;</return></then>
  <else>else <if>if <condition>(<expr><name><name>my_version</name>-&gt;<name>tag</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then>
    <comment type="block">/* Development client; must be newer than the library
       and have the same major and minor version. */</comment>
    <return>return <expr>(<name><name>my_version</name>-&gt;<name>major</name></name> == <name><name>lib_version</name>-&gt;<name>major</name></name>
            &amp;&amp; <name><name>my_version</name>-&gt;<name>minor</name></name> == <name><name>lib_version</name>-&gt;<name>minor</name></name>
            &amp;&amp; <name><name>my_version</name>-&gt;<name>patch</name></name> &gt; <name><name>lib_version</name>-&gt;<name>patch</name></name>)</expr>;</return></then>
  <else>else
    <comment type="block">/* General compatibility rules for released versions. */</comment>
    <return>return <expr>(<name><name>my_version</name>-&gt;<name>major</name></name> == <name><name>lib_version</name>-&gt;<name>major</name></name>
            &amp;&amp; <name><name>my_version</name>-&gt;<name>minor</name></name> &lt;= <name><name>lib_version</name>-&gt;<name>minor</name></name>)</expr>;</return></else></if></else></if>
}</block></function>


<function><type><name>svn_boolean_t</name></type> <name>svn_ver_equal</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>my_version</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>lib_version</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr>(<name><name>my_version</name>-&gt;<name>major</name></name> == <name><name>lib_version</name>-&gt;<name>major</name></name>
          &amp;&amp; <name><name>my_version</name>-&gt;<name>minor</name></name> == <name><name>lib_version</name>-&gt;<name>minor</name></name>
          &amp;&amp; <name><name>my_version</name>-&gt;<name>patch</name></name> == <name><name>lib_version</name>-&gt;<name>patch</name></name>
          &amp;&amp; 0 == <call><name>strcmp</name><argument_list>(<argument><expr><name><name>my_version</name>-&gt;<name>tag</name></name></expr></argument>, <argument><expr><name><name>lib_version</name>-&gt;<name>tag</name></name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_ver_check_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>my_version</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>svn_version_checklist_t</name> *</type><name>checklist</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>checklist</name><index>[<expr><name>i</name></expr>]</index></name>.<name>label</name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>lib_version</name> <init>= <expr><name><name>checklist</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>version_query</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<call><name>svn_ver_compatible</name><argument_list>(<argument><expr><name>my_version</name></expr></argument>, <argument><expr><name>lib_version</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_VERSION_MISMATCH</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                                <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Version mismatch in '%s':"
                                  " found %d.%d.%d%s,"
                                  " expected %d.%d.%d%s"</expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name><name>checklist</name><index>[<expr><name>i</name></expr>]</index></name>.<name>label</name></expr></argument>,
                                <argument><expr><name><name>lib_version</name>-&gt;<name>major</name></name></expr></argument>, <argument><expr><name><name>lib_version</name>-&gt;<name>minor</name></name></expr></argument>,
                                <argument><expr><name><name>lib_version</name>-&gt;<name>patch</name></name></expr></argument>, <argument><expr><name><name>lib_version</name>-&gt;<name>tag</name></name></expr></argument>,
                                <argument><expr><name><name>my_version</name>-&gt;<name>major</name></name></expr></argument>, <argument><expr><name><name>my_version</name>-&gt;<name>minor</name></name></expr></argument>,
                                <argument><expr><name><name>my_version</name>-&gt;<name>patch</name></name></expr></argument>, <argument><expr><name><name>my_version</name>-&gt;<name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></for>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>
</unit>
