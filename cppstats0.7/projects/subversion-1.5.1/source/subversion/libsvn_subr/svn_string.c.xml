<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_subr/svn_string.c"><comment type="block">/*
 * svn_string.h:  routines to manipulate counted-length strings
 *                (svn_stringbuf_t and svn_string_t) and C strings.
 *
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>      <comment type="block">/* for memcpy(), memcmp(), strlen() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_lib.h&gt;</cpp:file></cpp:include>     <comment type="block">/* for apr_isspace() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_fnmatch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>  <comment type="block">/* loads "svn_types.h" and &lt;apr_pools.h&gt; */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ctype.h"</cpp:file></cpp:include>


<escape char="0xc"/>
<comment type="block">/* Our own realloc, since APR doesn't have one.  Note: this is a
   generic realloc for memory pools, *not* for strings. */</comment>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>my__realloc</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>oldsize</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>request</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>void</name> *</type><name>new_area</name></decl>;</decl_stmt>

  <comment type="block">/* kff todo: it's a pity APR doesn't give us this -- sometimes it
     could realloc the block merely by extending in place, sparing us
     a memcpy(), but only the pool would know enough to be able to do
     this.  We should add a realloc() to APR if someone hasn't
     already. */</comment>

  <comment type="block">/* malloc new area */</comment>
  <expr_stmt><expr><name>new_area</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* copy data to new area */</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_area</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>oldsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* I'm NOT freeing old area here -- cuz we're using pools, ugh. */</comment>

  <comment type="block">/* return new area */</comment>
  <return>return <expr><name>new_area</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>svn_boolean_t</name></type>
<name>string_compare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str1</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str2</name></decl></param>,
               <param><decl><type><name>apr_size_t</name></type> <name>len1</name></decl></param>,
               <param><decl><type><name>apr_size_t</name></type> <name>len2</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* easy way out :)  */</comment>
  <if>if <condition>(<expr><name>len1</name> != <name>len2</name></expr>)</condition><then>
    <return>return <expr><name>FALSE</name></expr>;</return></then></if>

  <comment type="block">/* now the strings must have identical lenghths */</comment>

  <if>if <condition>(<expr>(<call><name>memcmp</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then>
  <else>else
    <return>return <expr><name>FALSE</name></expr>;</return></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>apr_size_t</name></type>
<name>string_first_non_whitespace</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <if>if <condition>(<expr>! <call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>i</name></expr>;</return></then></if>
    }</block></for>

  <comment type="block">/* if we get here, then the string must be entirely whitespace */</comment>
  <return>return <expr><name>len</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>apr_size_t</name></type>
<name>find_char_backward</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>char</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>i</name> != 0</expr>)</condition>
    <block>{
      <if>if <condition>(<expr><name><name>str</name><index>[<expr>--<name>i</name></expr>]</index></name> == <name>ch</name></expr>)</condition><then>
        <return>return <expr><name>i</name></expr>;</return></then></if>
    }</block></while>

  <comment type="block">/* char was not found, return len */</comment>
  <return>return <expr><name>len</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/* svn_string functions */</comment>

<function><type><specifier>static</specifier> <name>svn_string_t</name> *</type>
<name>create_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>new_string</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>new_string</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_string</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>new_string</name>-&gt;<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new_string</name>-&gt;<name>len</name></name> = <name>size</name></expr>;</expr_stmt>

  <return>return <expr><name>new_string</name></expr>;</return>
}</block></function>

<function><type><name>svn_string_t</name> *</type>
<name>svn_string_ncreate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>data</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Null termination is the convention -- even if we suspect the data
     to be binary, it's not up to us to decide, it's the caller's
     call.  Heck, that's why they call it the caller! */</comment>
  <expr_stmt><expr><name><name>data</name><index>[<expr><name>size</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>

  <comment type="block">/* wrap an svn_string_t around the new data */</comment>
  <return>return <expr><call><name>create_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_string_t</name> *</type>
<name>svn_string_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cstring</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name>cstring</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cstring</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_string_t</name> *</type>
<name>svn_string_create_from_buf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>strbuf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name><name>strbuf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>strbuf</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_string_t</name> *</type>
<name>svn_string_createv</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type><name>va_list</name></type> <name>ap</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>data</name> <init>= <expr><call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* wrap an svn_string_t around the new data */</comment>
  <return>return <expr><call><name>create_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_string_t</name> *</type>
<name>svn_string_createf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>str</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>str</name> = <call><name>svn_string_createv</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>str</name></expr>;</return>
}</block></function>


<function><type><name>svn_boolean_t</name></type>
<name>svn_string_isempty</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr>(<name><name>str</name>-&gt;<name>len</name></name> == 0)</expr>;</return>
}</block></function>


<function><type><name>svn_string_t</name> *</type>
<name>svn_string_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>original_string</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr>(<call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name><name>original_string</name>-&gt;<name>data</name></name></expr></argument>,
                             <argument><expr><name><name>original_string</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>



<function><type><name>svn_boolean_t</name></type>
<name>svn_string_compare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str2</name></decl></param>)</parameter_list>
<block>{
  <return>return
    <expr><call><name>string_compare</name><argument_list>(<argument><expr><name><name>str1</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str2</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str1</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name><name>str2</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>



<function><type><name>apr_size_t</name></type>
<name>svn_string_first_non_whitespace</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
  <return>return
    <expr><call><name>string_first_non_whitespace</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>apr_size_t</name></type>
<name>svn_string_find_char_backward</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>char</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>find_char_backward</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* svn_stringbuf functions */</comment>

<function><type><specifier>static</specifier> <name>svn_stringbuf_t</name> *</type>
<name>create_stringbuf</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>new_string</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>new_string</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_string</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>new_string</name>-&gt;<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new_string</name>-&gt;<name>len</name></name> = <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new_string</name>-&gt;<name>blocksize</name></name> = <name>size</name> + 1</expr>;</expr_stmt> <comment type="block">/* we know there is a null-term */</comment>
  <expr_stmt><expr><name><name>new_string</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

  <return>return <expr><name>new_string</name></expr>;</return>
}</block></function>

<function><type><name>svn_stringbuf_t</name> *</type>
<name>svn_stringbuf_ncreate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>data</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Null termination is the convention -- even if we suspect the data
     to be binary, it's not up to us to decide, it's the caller's
     call.  Heck, that's why they call it the caller! */</comment>
  <expr_stmt><expr><name><name>data</name><index>[<expr><name>size</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>

  <comment type="block">/* wrap an svn_stringbuf_t around the new data */</comment>
  <return>return <expr><call><name>create_stringbuf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_stringbuf_t</name> *</type>
<name>svn_stringbuf_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cstring</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_stringbuf_ncreate</name><argument_list>(<argument><expr><name>cstring</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cstring</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_stringbuf_t</name> *</type>
<name>svn_stringbuf_create_from_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_stringbuf_ncreate</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_stringbuf_t</name> *</type>
<name>svn_stringbuf_createv</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type><name>va_list</name></type> <name>ap</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>data</name> <init>= <expr><call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* wrap an svn_stringbuf_t around the new data */</comment>
  <return>return <expr><call><name>create_stringbuf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_stringbuf_t</name> *</type>
<name>svn_stringbuf_createf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createv</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>str</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type>
<name>svn_stringbuf_fillchar</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>void</name></type>
<name>svn_stringbuf_set</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>amt</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>amt</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>amt</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name>-&gt;<name>len</name></name> = <name>amt</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>svn_stringbuf_setempty</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>str</name>-&gt;<name>len</name></name> &gt; 0</expr>)</condition><then>
    <expr_stmt><expr><name><name>str</name>-&gt;<name>data</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name><name>str</name>-&gt;<name>len</name></name> = 0</expr>;</expr_stmt>
}</block></function>


<function><type><name>void</name></type>
<name>svn_stringbuf_chop</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>nbytes</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>nbytes</name> &gt; <name><name>str</name>-&gt;<name>len</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>str</name>-&gt;<name>len</name></name> = 0</expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name><name>str</name>-&gt;<name>len</name></name> -= <name>nbytes</name></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><name><name>str</name>-&gt;<name>data</name><index>[<expr><name><name>str</name>-&gt;<name>len</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></function>


<function><type><name>svn_boolean_t</name></type>
<name>svn_stringbuf_isempty</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr>(<name><name>str</name>-&gt;<name>len</name></name> == 0)</expr>;</return>
}</block></function>


<function><type><name>void</name></type>
<name>svn_stringbuf_ensure</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>minimum_size</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Keep doubling capacity until have enough. */</comment>
  <if>if <condition>(<expr><name><name>str</name>-&gt;<name>blocksize</name></name> &lt; <name>minimum_size</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>str</name>-&gt;<name>blocksize</name></name> == 0</expr>)</condition><then>
        <expr_stmt><expr><name><name>str</name>-&gt;<name>blocksize</name></name> = <name>minimum_size</name></expr>;</expr_stmt></then>
      <else>else
        <while>while <condition>(<expr><name><name>str</name>-&gt;<name>blocksize</name></name> &lt; <name>minimum_size</name></expr>)</condition>
          <block>{
            <decl_stmt><decl><type><name>apr_size_t</name></type> <name>prev_size</name> <init>= <expr><name><name>str</name>-&gt;<name>blocksize</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>str</name>-&gt;<name>blocksize</name></name> *= 2</expr>;</expr_stmt>
            <comment type="block">/* check for apr_size_t overflow */</comment>
            <if>if <condition>(<expr><name>prev_size</name> &gt; <name><name>str</name>-&gt;<name>blocksize</name></name></expr>)</condition><then>
              <block>{
                <expr_stmt><expr><name><name>str</name>-&gt;<name>blocksize</name></name> = <name>minimum_size</name></expr>;</expr_stmt>
                <break>break;</break>
              }</block></then></if>
          }</block></while></else></if>

      <expr_stmt><expr><name><name>str</name>-&gt;<name>data</name></name> = (<name>char</name> *) <call><name>my__realloc</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>,
                                       <argument><expr><name><name>str</name>-&gt;<name>len</name></name> + 1</expr></argument>,
                                       <comment type="block">/* We need to maintain (and thus copy)
                                          the trailing nul */</comment>
                                       <argument><expr><name><name>str</name>-&gt;<name>blocksize</name></name></expr></argument>,
                                       <argument><expr><name><name>str</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>


<function><type><name>void</name></type>
<name>svn_stringbuf_appendbytes</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name></decl></param>,
                          <param><decl><type><name>apr_size_t</name></type> <name>count</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>total_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>start_address</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>total_len</name> = <name><name>str</name>-&gt;<name>len</name></name> + <name>count</name></expr>;</expr_stmt>  <comment type="block">/* total size needed */</comment>

  <comment type="block">/* +1 for null terminator. */</comment>
  <expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>total_len</name> + 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* get address 1 byte beyond end of original bytestring */</comment>
  <expr_stmt><expr><name>start_address</name> = (<name><name>str</name>-&gt;<name>data</name></name> + <name><name>str</name>-&gt;<name>len</name></name>)</expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>start_address</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name>-&gt;<name>len</name></name> = <name>total_len</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>str</name>-&gt;<name>data</name><index>[<expr><name><name>str</name>-&gt;<name>len</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>  <comment type="block">/* We don't know if this is binary
                                  data or not, but convention is
                                  to null-terminate. */</comment>
}</block></function>


<function><type><name>void</name></type>
<name>svn_stringbuf_appendstr</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>targetstr</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>appendstr</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>targetstr</name></expr></argument>, <argument><expr><name><name>appendstr</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>appendstr</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>void</name></type>
<name>svn_stringbuf_appendcstr</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>targetstr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cstr</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>targetstr</name></expr></argument>, <argument><expr><name>cstr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>




<function><type><name>svn_stringbuf_t</name> *</type>
<name>svn_stringbuf_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>original_string</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr>(<call><name>svn_stringbuf_ncreate</name><argument_list>(<argument><expr><name><name>original_string</name>-&gt;<name>data</name></name></expr></argument>,
                                <argument><expr><name><name>original_string</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>



<function><type><name>svn_boolean_t</name></type>
<name>svn_stringbuf_compare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>str1</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>str2</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>string_compare</name><argument_list>(<argument><expr><name><name>str1</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str2</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str1</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name><name>str2</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>



<function><type><name>apr_size_t</name></type>
<name>svn_stringbuf_first_non_whitespace</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>string_first_non_whitespace</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>void</name></type>
<name>svn_stringbuf_strip_whitespace</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Find first non-whitespace character */</comment>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>offset</name> <init>= <expr><call><name>svn_stringbuf_first_non_whitespace</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Go ahead!  Waste some RAM, we've got pools! :)  */</comment>
  <expr_stmt><expr><name><name>str</name>-&gt;<name>data</name></name> += <name>offset</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name>-&gt;<name>len</name></name> -= <name>offset</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name>-&gt;<name>blocksize</name></name> -= <name>offset</name></expr>;</expr_stmt>

  <comment type="block">/* Now that we've trimmed the front, trim the end, wasting more RAM. */</comment>
  <while>while <condition>(<expr>(<name><name>str</name>-&gt;<name>len</name></name> &gt; 0) &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name><index>[<expr><name><name>str</name>-&gt;<name>len</name></name> - 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <expr_stmt><expr><name><name>str</name>-&gt;<name>len</name></name>--</expr>;</expr_stmt></while>
  <expr_stmt><expr><name><name>str</name>-&gt;<name>data</name><index>[<expr><name><name>str</name>-&gt;<name>len</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></function>


<function><type><name>apr_size_t</name></type>
<name>svn_stringbuf_find_char_backward</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>char</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>find_char_backward</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_boolean_t</name></type>
<name>svn_string_compare_stringbuf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str1</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>str2</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>string_compare</name><argument_list>(<argument><expr><name><name>str1</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str2</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str1</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name><name>str2</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** C string stuff. ***/</comment>

<function><type><name>void</name></type>
<name>svn_cstring_split_append</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>array</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sep_chars</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>chop_whitespace</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>last</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>pats</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pats</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* strtok wants non-const data */</comment>
  <expr_stmt><expr><name>p</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>pats</name></expr></argument>, <argument><expr><name>sep_chars</name></expr></argument>, <argument><expr>&amp;<name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>p</name></expr>)</condition>
    <block>{
      <if>if <condition>(<expr><name>chop_whitespace</name></expr>)</condition><then>
        <block>{
          <while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
            <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt></while>

          <block>{
            <decl_stmt><decl><type><name>char</name> *</type><name>e</name> <init>= <expr><name>p</name> + (<call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> - 1)</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr>(<name>e</name> &gt;= <name>p</name>) &amp;&amp; (<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>e</name></expr></argument>)</argument_list></call>)</expr>)</condition>
              <expr_stmt><expr><name>e</name>--</expr>;</expr_stmt></while>
            <expr_stmt><expr>*(++<name>e</name>) = '\0'</expr>;</expr_stmt>
          }</block>
        }</block></then></if>

      <if>if <condition>(<expr><name><name>p</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then>
        <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>p</name></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name>p</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sep_chars</name></expr></argument>, <argument><expr>&amp;<name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

  <return>return;</return>
}</block></function>


<function><type><name>apr_array_header_t</name> *</type>
<name>svn_cstring_split</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sep_chars</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>chop_whitespace</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>a</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>svn_cstring_split_append</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>sep_chars</name></expr></argument>, <argument><expr><name>chop_whitespace</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>a</name></expr>;</return>
}</block></function>


<function><type><name>svn_boolean_t</name></type> <name>svn_cstring_match_glob_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>,
                                          <param><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this_pattern</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name>apr_fnmatch</name><argument_list>(<argument><expr><name>this_pattern</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then>
        <return>return <expr><name>TRUE</name></expr>;</return></then></if>
    }</block></for>

  <return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>svn_cstring_count_newlines</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>p</name> = <name>msg</name></expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
    <block>{
      <if>if <condition>(<expr>*<name>p</name> == '\n'</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
          <if>if <condition>(<expr>*(<name>p</name> + 1) == '\r'</expr>)</condition><then>
            <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr>*<name>p</name> == '\r'</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
          <if>if <condition>(<expr>*(<name>p</name> + 1) == '\n'</expr>)</condition><then>
            <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt></then></if>
        }</block></then></if></else></if>
    }</block></for>

  <return>return <expr><name>count</name></expr>;</return>
}</block></function>

<function><type><name>char</name> *</type>
<name>svn_cstring_join</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>strings</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>separator</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>new_str</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sep_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>strings</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>strings</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>new_str</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>new_str</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>, <argument><expr><name>sep_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  <return>return <expr><name><name>new_str</name>-&gt;<name>data</name></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>svn_cstring_casecmp</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str2</name></decl></param>)</parameter_list>
<block>{
  <for>for (<init>;</init><condition>;</condition><incr/>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a</name> <init>= <expr>*<name>str1</name>++</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b</name> <init>= <expr>*<name>str2</name>++</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmp</name> <init>= <expr><call><name>svn_ctype_casecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>cmp</name> || !<name>a</name> || !<name>b</name></expr>)</condition><then>
        <return>return <expr><name>cmp</name></expr>;</return></then></if>
    }</block></for>
}</block></function>
</unit>
