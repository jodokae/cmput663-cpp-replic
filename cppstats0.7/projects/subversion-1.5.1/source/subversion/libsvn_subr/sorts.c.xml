<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_subr/sorts.c"><comment type="block">/*
 * sorts.c:   all sorts of sorts
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>       <comment type="block">/* for qsort()   */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>


<escape char="0xc"/>
<comment type="block">/*** svn_sort__hash() ***/</comment>

<comment type="block">/* (Should this be a permanent part of APR?)

   OK, folks, here's what's going on.  APR hash tables hash on
   key/klen objects, and store associated generic values.  They work
   great, but they have no ordering.

   The point of this exercise is to somehow arrange a hash's keys into
   an "ordered list" of some kind -- in this case, a nicely sorted
   one.

   We're using APR arrays, therefore, because that's what they are:
   ordered lists.  However, what "keys" should we put in the array?
   Clearly, (const char *) objects aren't general enough.  Or rather,
   they're not as general as APR's hash implementation, which stores
   (void *)/length as keys.  We don't want to lose this information.

   Therefore, it makes sense to store pointers to {void *, size_t}
   structures in our array.  No such apr object exists... BUT... if we
   can use a new type svn_sort__item_t which contains {char *, size_t, void
   *}.  If store these objects in our array, we get the hash value
   *for free*.  When looping over the final array, we don't need to
   call apr_hash_get().  Major bonus!
 */</comment>


<function><type><name>int</name></type>
<name>svn_sort_compare_items_as_paths</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_sort__item_t</name> *</type><name>a</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>svn_sort__item_t</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>astr</name></decl>, *<decl><type ref="prev"/><name>bstr</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>astr</name> = <name><name>a</name>-&gt;<name>key</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bstr</name> = <name><name>b</name>-&gt;<name>key</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>astr</name><index>[<expr><name><name>a</name>-&gt;<name>klen</name></name></expr>]</index></name> == '\0'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>bstr</name><index>[<expr><name><name>b</name>-&gt;<name>klen</name></name></expr>]</index></name> == '\0'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_path_compare_paths</name><argument_list>(<argument><expr><name>astr</name></expr></argument>, <argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>int</name></type>
<name>svn_sort_compare_items_lexically</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_sort__item_t</name> *</type><name>a</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>svn_sort__item_t</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>

  <comment type="block">/* Compare bytes of a's key and b's key up to the common length. */</comment>
  <expr_stmt><expr><name>len</name> = (<name><name>a</name>-&gt;<name>klen</name></name> &lt; <name><name>b</name>-&gt;<name>klen</name></name>) ? <name><name>a</name>-&gt;<name>klen</name></name> : <name><name>b</name>-&gt;<name>klen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> = <call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>val</name> != 0</expr>)</condition><then>
    <return>return <expr><name>val</name></expr>;</return></then></if>

  <comment type="block">/* They match up until one of them ends; whichever is longer is greater. */</comment>
  <return>return <expr>(<name><name>a</name>-&gt;<name>klen</name></name> &lt; <name><name>b</name>-&gt;<name>klen</name></name>) ? -1 : (<name><name>a</name>-&gt;<name>klen</name></name> &gt; <name><name>b</name>-&gt;<name>klen</name></name>) ? 1 : 0</expr>;</return>
}</block></function>


<function><type><name>int</name></type>
<name>svn_sort_compare_revisions</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>a_rev</name> <init>= <expr>*(const <name>svn_revnum_t</name> *)<name>a</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>b_rev</name> <init>= <expr>*(const <name>svn_revnum_t</name> *)<name>b</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>a_rev</name> == <name>b_rev</name></expr>)</condition><then>
    <return>return <expr>0</expr>;</return></then></if>

  <return>return <expr><name>a_rev</name> &lt; <name>b_rev</name> ? 1 : -1</expr>;</return>
}</block></function>


<function><type><name>int</name></type>
<name>svn_sort_compare_paths</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>item1</name> <init>= <expr>*((const <name>char</name> * const *) <name>a</name>)</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>item2</name> <init>= <expr>*((const <name>char</name> * const *) <name>b</name>)</expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>svn_path_compare_paths</name><argument_list>(<argument><expr><name>item1</name></expr></argument>, <argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>int</name></type>
<name>svn_sort_compare_ranges</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_merge_range_t</name> *</type><name>item1</name> <init>= <expr>*((const <name>svn_merge_range_t</name> * const *) <name>a</name>)</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_merge_range_t</name> *</type><name>item2</name> <init>= <expr>*((const <name>svn_merge_range_t</name> * const *) <name>b</name>)</expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>item1</name>-&gt;<name>start</name></name> == <name><name>item2</name>-&gt;<name>start</name></name>
      &amp;&amp; <name><name>item1</name>-&gt;<name>end</name></name> == <name><name>item2</name>-&gt;<name>end</name></name></expr>)</condition><then>
    <return>return <expr>0</expr>;</return></then></if>

  <if>if <condition>(<expr><name><name>item1</name>-&gt;<name>start</name></name> == <name><name>item2</name>-&gt;<name>start</name></name></expr>)</condition><then>
    <return>return <expr><name><name>item1</name>-&gt;<name>end</name></name> &lt; <name><name>item2</name>-&gt;<name>end</name></name> ? -1 : 1</expr>;</return></then></if>

  <return>return <expr><name><name>item1</name>-&gt;<name>start</name></name> &lt; <name><name>item2</name>-&gt;<name>start</name></name> ? -1 : 1</expr>;</return>
}</block></function>

<function><type><name>apr_array_header_t</name> *</type>
<name>svn_sort__hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>ht</name></decl></param>,
               <param><function_decl><type><name>int</name></type> (*<name>comparison_func</name>)<parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>svn_sort__item_t</name> *</decl></param>,
                                      <param><decl><type><specifier>const</specifier></type> <name>svn_sort__item_t</name> *</decl></param>)</parameter_list></function_decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ary</name></decl>;</decl_stmt>

  <comment type="block">/* allocate an array with enough elements to hold all the keys. */</comment>
  <expr_stmt><expr><name>ary</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_sort__item_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* loop over hash table and push all keys into the array */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_sort__item_t</name> *</type><name>item</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name><name>item</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr>&amp;<name><name>item</name>-&gt;<name>klen</name></name></expr></argument>, <argument><expr>&amp;<name><name>item</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* now quicksort the array.  */</comment>
  <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>ary</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>ary</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><name><name>ary</name>-&gt;<name>elt_size</name></name></expr></argument>,
        <argument><expr>(<call><call><name>int</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr>const <name>void</name> *</expr></argument>, <argument><expr>const <name>void</name> *</expr></argument>)</argument_list></call>)<name>comparison_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ary</name></expr>;</return>
}</block></function>
</unit>
