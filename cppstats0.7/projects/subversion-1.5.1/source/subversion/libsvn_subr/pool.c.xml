<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_subr/pool.c"><comment type="block">/* pool.c:  pool wrappers for Subversion
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_POOL_DEBUG</name></expr></cpp:if>
<comment type="block">/* file_line for the non-debug case. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>SVN_FILE_LINE_UNDEFINED</name><index>[]</index></name> <init>= <expr>"svn:&lt;undefined&gt;"</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* APR_POOL_DEBUG */</comment>


<escape char="0xc"/>
<comment type="block">/*-----------------------------------------------------------------*/</comment>


<comment type="block">/* Pool allocation handler which just aborts, since we aren't generally
   prepared to deal with out-of-memory errors.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>abort_on_pool_failure</name><parameter_list>(<param><decl><type><name>int</name></type> <name>retcode</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Don't translate this string! It requires memory allocation to do so!
     And we don't have any of it... */</comment>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Out of memory - terminating application.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr>-1</expr>;</return> <comment type="block">/* prevent compiler warnings */</comment>
}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_POOL_DEBUG</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>svn_pool_create_ex</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* APR_POOL_DEBUG */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_POOL_DEBUG</name></expr></cpp:if>

<function><type><name>apr_pool_t</name> *</type>
<name>svn_pool_create_ex</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>parent_pool</name></decl></param>, <param><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>apr_pool_create_ex</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>parent_pool</name></expr></argument>, <argument><expr><name>abort_on_pool_failure</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pool</name></expr>;</return>
}</block></function>

<comment type="block">/* Wrapper that ensures binary compatibility */</comment>
<function><type><name>apr_pool_t</name> *</type>
<name>svn_pool_create_ex_debug</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_line</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_pool_create_ex</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* APR_POOL_DEBUG */</comment>

<function><type><name>apr_pool_t</name> *</type>
<name>svn_pool_create_ex_debug</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>parent_pool</name></decl></param>, <param><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_line</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>apr_pool_create_ex_debug</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>parent_pool</name></expr></argument>, <argument><expr><name>abort_on_pool_failure</name></expr></argument>,
                           <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>file_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pool</name></expr>;</return>
}</block></function>

<comment type="block">/* Wrapper that ensures binary compatibility */</comment>
<function><type><name>apr_pool_t</name> *</type>
<name>svn_pool_create_ex</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_pool_create_ex_debug</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>SVN_FILE_LINE_UNDEFINED</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* APR_POOL_DEBUG */</comment>
</unit>
