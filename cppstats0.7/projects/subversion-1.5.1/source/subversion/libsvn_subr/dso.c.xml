<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_subr/dso.c"><comment type="block">/*
 * ====================================================================
 * Copyright (c) 2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_mutex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dso.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<comment type="block">/* A mutex to protect our global pool and cache. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_thread_mutex_t</name> *</type><name>dso_mutex</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Global pool to allocate DSOs in. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>dso_pool</name></decl>;</decl_stmt>

<comment type="block">/* Global cache for storing DSO objects. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>dso_cache</name></decl>;</decl_stmt>

<comment type="block">/* Just an arbitrary location in memory... */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>not_there_sentinel</name></decl>;</decl_stmt>

<comment type="block">/* A specific value we store in the dso_cache to indicate that the
   library wasn't found.  This keeps us from allocating extra memory
   from dso_pool when trying to find libraries we already know aren't
   there.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_THERE</name></cpp:macro> <cpp:value>((void *) &amp;not_there_sentinel)</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>svn_dso_initialize</name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>dso_pool</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><name>dso_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
  <expr_stmt><expr><call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name>dso_mutex</name></expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name>dso_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>dso_cache</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>dso_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_DSO</name></expr></cpp:if>
<function><type><name>svn_error_t</name> *</type>
<name>svn_dso_load</name><parameter_list>(<param><decl><type><name>apr_dso_handle_t</name> **</type><name>dso</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name>dso_pool</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_dso_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
  <expr_stmt><expr><name>status</name> = <call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name>dso_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't grab DSO mutex"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr>*<name>dso</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>dso_cache</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* First check to see if we've been through this before...  We do this
     to avoid calling apr_dso_load multiple times for a given library,
     which would result in wasting small amounts of memory each time. */</comment>
  <if>if <condition>(<expr>*<name>dso</name> == <name>NOT_THERE</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>dso</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
      <expr_stmt><expr><name>status</name> = <call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>dso_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't ungrab DSO mutex"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* If we got nothing back from the cache, try and load the library. */</comment>
  <if>if <condition>(<expr>! *<name>dso</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>status</name> = <call><name>apr_dso_load</name><argument_list>(<argument><expr><name>dso</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>dso_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr>*<name>dso</name> = <name>NULL</name></expr>;</expr_stmt>

          <comment type="block">/* It wasn't found, so set the special "we didn't find it" value. */</comment>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dso_cache</name></expr></argument>,
                       <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>dso_pool</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                       <argument><expr><name>NOT_THERE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
          <expr_stmt><expr><name>status</name> = <call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>dso_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't ungrab DSO mutex"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then></if>

      <comment type="block">/* Stash the dso so we can use it next time. */</comment>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>dso_cache</name></expr></argument>,
                   <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>dso_pool</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                   <argument><expr>*<name>dso</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
  <expr_stmt><expr><name>status</name> = <call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>dso_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't ungrab DSO mutex"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* APR_HAS_DSO */</comment>
</unit>
