<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_subr/properties.c"><comment type="block">/*
 * properties.c:  stuff related to Subversion properties
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>       <comment type="block">/* for strncmp() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ctype.h"</cpp:file></cpp:include>


<function><type><name>svn_boolean_t</name></type>
<name>svn_prop_is_svn_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>SVN_PROP_PREFIX</name></expr></argument>, <argument><expr>(<sizeof>sizeof<argument_list>(<argument><expr><name>SVN_PROP_PREFIX</name></expr></argument>)</argument_list></sizeof> - 1)</expr></argument>)</argument_list></call>
         ? <name>FALSE</name>
         : <name>TRUE</name></expr>;</return>
}</block></function>


<function><type><name>svn_boolean_t</name></type>
<name>svn_prop_has_svn_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_hash_t</name> *</type><name>props</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>prop_name</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name>props</name></expr>)</condition><then>
    <return>return <expr><name>FALSE</name></expr>;</return></then></if>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>(<name>apr_hash_t</name> *)<name>props</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
       <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>prop_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>svn_prop_is_svn_prop</name><argument_list>(<argument><expr>(const <name>char</name> *) <name>prop_name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>TRUE</name></expr>;</return></then></if>
    }</block></for>

  <return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>


<function><type><name>svn_prop_kind_t</name></type>
<name>svn_property_kind</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>prefix_len</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>wc_prefix_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_PROP_WC_PREFIX</name></expr></argument>)</argument_list></sizeof> - 1</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>entry_prefix_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_PROP_ENTRY_PREFIX</name></expr></argument>)</argument_list></sizeof> - 1</expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>SVN_PROP_WC_PREFIX</name></expr></argument>, <argument><expr><name>wc_prefix_len</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>prefix_len</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>prefix_len</name> = <name>wc_prefix_len</name></expr>;</expr_stmt></then></if>
      <return>return <expr><name>svn_prop_wc_kind</name></expr>;</return>
    }</block></then></if>

  <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_PREFIX</name></expr></argument>, <argument><expr><name>entry_prefix_len</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>prefix_len</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>prefix_len</name> = <name>entry_prefix_len</name></expr>;</expr_stmt></then></if>
      <return>return <expr><name>svn_prop_entry_kind</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* else... */</comment>
  <if>if <condition>(<expr><name>prefix_len</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>prefix_len</name> = 0</expr>;</expr_stmt></then></if>
  <return>return <expr><name>svn_prop_regular_kind</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_categorize_props</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>proplist</name></decl></param>,
                     <param><decl><type><name>apr_array_header_t</name> **</type><name>entry_props</name></decl></param>,
                     <param><decl><type><name>apr_array_header_t</name> **</type><name>wc_props</name></decl></param>,
                     <param><decl><type><name>apr_array_header_t</name> **</type><name>regular_props</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>entry_props</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>entry_props</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>wc_props</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>wc_props</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>regular_props</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>regular_props</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>proplist</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>prop</name></decl>, *<decl><type ref="prev"/><name>newprop</name></decl>;</decl_stmt>
      <enum>enum <name>svn_prop_kind</name> <name>kind</name>;</enum>

      <expr_stmt><expr><name>prop</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>kind</name> = <call><name>svn_property_kind</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>newprop</name> = <name>NULL</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>kind</name> == <name>svn_prop_regular_kind</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name>regular_props</name></expr>)</condition><then>
            <expr_stmt><expr><name>newprop</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr>*<name>regular_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_prop_wc_kind</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name>wc_props</name></expr>)</condition><then>
            <expr_stmt><expr><name>newprop</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr>*<name>wc_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_prop_entry_kind</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name>entry_props</name></expr>)</condition><then>
            <expr_stmt><expr><name>newprop</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr>*<name>entry_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else
        <comment type="block">/* Technically this can't happen, but might as well have the
           code ready in case that ever changes. */</comment>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_PROP_KIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr>"Bad property kind for property '%s'"</expr></argument>,
                                 <argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if></else></if>

      <if>if <condition>(<expr><name>newprop</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>newprop</name>-&gt;<name>name</name></name> = <name><name>prop</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>newprop</name>-&gt;<name>value</name></name> = <name><name>prop</name>-&gt;<name>value</name></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_prop_diffs</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>propdiffs</name></decl></param>,
               <param><decl><type><name>apr_hash_t</name> *</type><name>target_props</name></decl></param>,
               <param><decl><type><name>apr_hash_t</name> *</type><name>source_props</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ary</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Note: we will be storing the pointers to the keys (from the hashes)
     into the propdiffs array.  It is acceptable for us to
     reference the same memory as the base/target_props hash. */</comment>

  <comment type="block">/* Loop over SOURCE_PROPS and examine each key.  This will allow us to
     detect any `deletion' events or `set-modification' events.  */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>source_props</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval1</name></decl>, *<decl><type ref="prev"/><name>propval2</name></decl>;</decl_stmt>

      <comment type="block">/* Get next property */</comment>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>propval1</name> = <name>val</name></expr>;</expr_stmt>

      <comment type="block">/* Does property name exist in TARGET_PROPS? */</comment>
      <expr_stmt><expr><name>propval2</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>target_props</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>propval2</name> == <name>NULL</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Add a delete event to the array */</comment>
          <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>p</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>p</name>-&gt;<name>name</name></name> = <name>key</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name>-&gt;<name>value</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr>! <call><name>svn_string_compare</name><argument_list>(<argument><expr><name>propval1</name></expr></argument>, <argument><expr><name>propval2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <comment type="block">/* Add a set (modification) event to the array */</comment>
          <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>p</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>p</name>-&gt;<name>name</name></name> = <name>key</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name>-&gt;<name>value</name></name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>propval2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></for>

  <comment type="block">/* Loop over TARGET_PROPS and examine each key.  This allows us to
     detect `set-creation' events */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>target_props</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>

      <comment type="block">/* Get next property */</comment>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>propval</name> = <name>val</name></expr>;</expr_stmt>

      <comment type="block">/* Does property name exist in SOURCE_PROPS? */</comment>
      <if>if <condition>(<expr><name>NULL</name> == <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>source_props</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <comment type="block">/* Add a set (creation) event to the array */</comment>
          <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>p</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>p</name>-&gt;<name>name</name></name> = <name>key</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name>-&gt;<name>value</name></name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>propval</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

  <comment type="block">/* Done building our array of user events. */</comment>
  <expr_stmt><expr>*<name>propdiffs</name> = <name>ary</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_boolean_t</name></type>
<name>svn_prop_is_boolean</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* If we end up with more than 3 of these, we should probably put
     them in a table and use bsearch.  With only three, it doesn't
     make any speed difference.  */</comment>
  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>SVN_PROP_EXECUTABLE</name></expr></argument>)</argument_list></call> == 0
      || <call><name>strcmp</name><argument_list>(<argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>SVN_PROP_NEEDS_LOCK</name></expr></argument>)</argument_list></call> == 0
      || <call><name>strcmp</name><argument_list>(<argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>SVN_PROP_SPECIAL</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>
  <return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>


<function><type><name>svn_boolean_t</name></type>
<name>svn_prop_needs_translation</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* ### Someday, we may want to be picky and choosy about which
     properties require UTF8 and EOL conversion.  For now, all "svn:"
     props need it.  */</comment>

  <return>return <expr><call><name>svn_prop_is_svn_prop</name><argument_list>(<argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_boolean_t</name></type>
<name>svn_prop_name_is_valid</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name> <init>= <expr><name>prop_name</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* The characters we allow use identical representations in UTF8
     and ASCII, so we can just test for the appropriate ASCII codes.
     But we can't use standard C character notation ('A', 'B', etc)
     because there's no guarantee that this C environment is using
     ASCII. */</comment>

  <if>if <condition>(<expr>!(<call><name>svn_ctype_isalpha</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call>
        || *<name>p</name> == <name>SVN_CTYPE_ASCII_COLON</name>
        || *<name>p</name> == <name>SVN_CTYPE_ASCII_UNDERSCORE</name>)</expr>)</condition><then>
    <return>return <expr><name>FALSE</name></expr>;</return></then></if>
  <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
  <for>for (<init>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
    <block>{
      <if>if <condition>(<expr>!(<call><name>svn_ctype_isalnum</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call>
            || *<name>p</name> == <name>SVN_CTYPE_ASCII_MINUS</name>
            || *<name>p</name> == <name>SVN_CTYPE_ASCII_DOT</name>
            || *<name>p</name> == <name>SVN_CTYPE_ASCII_COLON</name>
            || *<name>p</name> == <name>SVN_CTYPE_ASCII_UNDERSCORE</name>)</expr>)</condition><then>
        <return>return <expr><name>FALSE</name></expr>;</return></then></if>
    }</block></for>
  <return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
</unit>
