<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_subr/config_win.c"><comment type="block">/*
 * config_win.c :  parsing configuration data from the registry
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>APR_HAVE_IPV6</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Wspiapi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_info.h&gt;</cpp:file></cpp:include>
<comment type="block">/* FIXME: We're using an internal APR header here, which means we
   have to build Subversion with APR sources. This being Win32-only,
   that should be fine for now, but a better solution must be found in
   combination with issue #850. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arch/win32/apr_arch_utf8.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>

<function><type><name>svn_error_t</name> *</type>
<name>svn_config__win_config_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>folder</name></decl></param>, <param><decl><type><name>int</name></type> <name>system_path</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* ### Adding CSIDL_FLAG_CREATE here, because those folders really
     must exist.  I'm not too sure about the SHGFP_TYPE_CURRENT
     semancics, though; maybe we should use ..._DEFAULT instead? */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>csidl</name> <init>= <expr>((<name>system_path</name> ? <name>CSIDL_COMMON_APPDATA</name> : <name>CSIDL_APPDATA</name>)
                     | <name>CSIDL_FLAG_CREATE</name>)</expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>style</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name> <init>= <expr><call><name>apr_filepath_encoding</name><argument_list>(<argument><expr>&amp;<name>style</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>,
                              <argument><expr>"Can't determine the native path encoding"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><name>style</name> == <name>APR_FILEPATH_ENCODING_UTF8</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>WCHAR</name></type> <name><name>folder_ucs2</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_size_t</name></type> <name>inwords</name></decl>, <decl><type ref="prev"/><name>outbytes</name></decl>, <decl><type ref="prev"/><name>outlength</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>folder_utf8</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>S_OK</name> != <call><name>SHGetFolderPathW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>csidl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SHGFP_TYPE_CURRENT</name></expr></argument>,
                                   <argument><expr><name>folder_ucs2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>no_folder_path</name>;</goto></then></if>

      <comment type="block">/* ### When mapping from UCS-2 to UTF-8, we need at most 3 bytes
             per wide char, plus extra space for the nul terminator. */</comment>
      <expr_stmt><expr><name>inwords</name> = <call><name>lstrlenW</name><argument_list>(<argument><expr><name>folder_ucs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>outbytes</name> = <name>outlength</name> = 3 * (<name>inwords</name> + 1)</expr>;</expr_stmt>
      <expr_stmt><expr><name>folder_utf8</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>outlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>apr_err</name> = <call><name>apr_conv_ucs2_to_utf8</name><argument_list>(<argument><expr><name>folder_ucs2</name></expr></argument>, <argument><expr>&amp;<name>inwords</name></expr></argument>,
                                      <argument><expr><name>folder_utf8</name></expr></argument>, <argument><expr>&amp;<name>outbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>apr_err</name> &amp;&amp; (<name>inwords</name> &gt; 0 || <name>outbytes</name> == 0)</expr>)</condition><then>
        <expr_stmt><expr><name>apr_err</name> = <name>APR_INCOMPLETE</name></expr>;</expr_stmt></then></if>
      <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>,
                                  <argument><expr>"Can't convert config path to UTF-8"</expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* Note that apr_conv_ucs2_to_utf8 does _not_ terminate the
         outgoing buffer. */</comment>
      <expr_stmt><expr><name><name>folder_utf8</name><index>[<expr><name>outlength</name> - <name>outbytes</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
      <expr_stmt><expr>*<name>folder</name> = <name>folder_utf8</name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>style</name> == <name>APR_FILEPATH_ENCODING_LOCALE</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>char</name></type> <name><name>folder_ansi</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>S_OK</name> != <call><name>SHGetFolderPathA</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>csidl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SHGFP_TYPE_CURRENT</name></expr></argument>,
                                   <argument><expr><name>folder_ansi</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>no_folder_path</name>;</goto></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name>folder_ansi</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* There is no third option on Windows; we should never get here. */</comment>
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr>"Unknown native path encoding (%d)"</expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if></else></if>

  <expr_stmt><expr>*<name>folder</name> = <call><name>svn_path_internal_style</name><argument_list>(<argument><expr>*<name>folder</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>

 <label><name>no_folder_path</name>:</label>
  <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_FILENAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr>(<name>system_path</name>
                           ? "Can't determine the system config path"
                           : "Can't determine the user's config path")</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Convert UTF8, a UTF-8 encoded string, to UCS2, a UCS-2 encoded
   string, using POOL for temporary allocations. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>utf8_to_ucs2</name><parameter_list>(<param><decl><type><name>WCHAR</name> **</type><name>ucs2</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>utf8</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>inbytes</name></decl>, <decl><type ref="prev"/><name>outwords</name></decl>, <decl><type ref="prev"/><name>outlength</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>inbytes</name> = <call><name>lstrlenA</name><argument_list>(<argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>outwords</name> = <name>outlength</name> = <name>inbytes</name> + 1</expr>;</expr_stmt> <comment type="block">/* Include terminating null. */</comment>
  <expr_stmt><expr>*<name>ucs2</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>outwords</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>apr_err</name> = <call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name>utf8</name></expr></argument>, <argument><expr>&amp;<name>inbytes</name></expr></argument>, <argument><expr>*<name>ucs2</name></expr></argument>, <argument><expr>&amp;<name>outwords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>apr_err</name> &amp;&amp; (<name>inbytes</name> &gt; 0 || <name>outwords</name> == 0)</expr>)</condition><then>
    <expr_stmt><expr><name>apr_err</name> = <name>APR_INCOMPLETE</name></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>"Can't convert config path to UCS-2"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Note that apr_conv_utf8_to_ucs2 does _not_ terminate the
     outgoing buffer. */</comment>
  <expr_stmt><expr>(*<name>ucs2</name>)<index>[<expr><name>outlength</name> - <name>outwords</name></expr>]</index> = L'\0'</expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config_impl.h"</cpp:file></cpp:include>

<function><type><name>svn_error_t</name> *</type>
<name>svn_config__open_file</name><parameter_list>(<param><decl><type><name>FILE</name> **</type><name>pfile</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mode</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>style</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name> <init>= <expr><call><name>apr_filepath_encoding</name><argument_list>(<argument><expr>&amp;<name>style</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>,
                              <argument><expr>"Can't determine the native path encoding"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><name>style</name> == <name>APR_FILEPATH_ENCODING_UTF8</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>WCHAR</name> *</type><name>filename_ucs2</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>WCHAR</name> *</type><name>mode_ucs2</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>utf8_to_ucs2</name><argument_list>(<argument><expr>&amp;<name>filename_ucs2</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>utf8_to_ucs2</name><argument_list>(<argument><expr>&amp;<name>mode_ucs2</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>pfile</name> = <call><name>_wfopen</name><argument_list>(<argument><expr><name>filename_ucs2</name></expr></argument>, <argument><expr><name>mode_ucs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>style</name> == <name>APR_FILEPATH_ENCODING_LOCALE</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename_native</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>filename_native</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>pfile</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>filename_native</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* There is no third option on Windows; we should never get here. */</comment>
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr>"Unknown native path encoding (%d)"</expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* ### These constants are insanely large, but (a) we want to avoid
   reallocating strings if possible, and (b) the realloc logic might
   not actually work -- you never know with Win32 ... */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REG_DEFAULT_NAME_SIZE</name></cpp:macro>  <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REG_DEFAULT_VALUE_SIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>parse_section</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><name>HKEY</name></type> <name>hkey</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>,
              <param><decl><type><name>svn_stringbuf_t</name> *</type><name>option</name></decl></param>, <param><decl><type><name>svn_stringbuf_t</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>DWORD</name></type> <name>option_len</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LONG</name></type> <name>err</name></decl>;</decl_stmt>

  <comment type="block">/* Start with a reasonable size for the buffers. */</comment>
  <expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>SVN_REG_DEFAULT_NAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>SVN_REG_DEFAULT_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>index</name> = 0</expr>;</init> <condition>;</condition> <incr><expr>++<name>index</name></expr></incr>)
    <block>{
      <expr_stmt><expr><name>option_len</name> = <name><name>option</name>-&gt;<name>blocksize</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>RegEnumValue</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>option</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>option_len</name></expr></argument>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name> == <name>ERROR_NO_MORE_ITEMS</name></expr>)</condition><then>
          <break>break;</break></then></if>
      <if>if <condition>(<expr><name>err</name> == <name>ERROR_INSUFFICIENT_BUFFER</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>option_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <call><name>RegEnumValue</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>option</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>option_len</name></expr></argument>,
                             <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <if>if <condition>(<expr><name>err</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_MALFORMED_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr>"Can't enumerate registry values"</expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* Ignore option names that start with '#', see
         http://subversion.tigris.org/issues/show_bug.cgi?id=671 */</comment>
      <if>if <condition>(<expr><name>type</name> == <name>REG_SZ</name> &amp;&amp; <name><name>option</name>-&gt;<name>data</name><index>[<expr>0</expr>]</index></name> != '#'</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>DWORD</name></type> <name>value_len</name> <init>= <expr><name><name>value</name>-&gt;<name>blocksize</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>err</name> = <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name><name>option</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name> == <name>ERROR_MORE_DATA</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>err</name> = <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name><name>option</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          <if>if <condition>(<expr><name>err</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_MALFORMED_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr>"Can't read registry value data"</expr></argument>)</argument_list></call></expr>;</return></then></if>

          <expr_stmt><expr><call><name>svn_config_set</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name><name>option</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Exported interface. ***/</comment>

<function><type><name>svn_error_t</name> *</type>
<name>svn_config__parse_registry</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>must_exist</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>section</name></decl>, *<decl><type ref="prev"/><name>option</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>svn_err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HKEY</name></type> <name>base_hkey</name></decl>, <decl><type ref="prev"/><name>hkey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LONG</name></type> <name>err</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>0 == <call><name>strncmp</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>SVN_REGISTRY_HKLM</name></expr></argument>, <argument><expr><name>SVN_REGISTRY_HKLM_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>base_hkey</name> = <name>HKEY_LOCAL_MACHINE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>file</name> += <name>SVN_REGISTRY_HKLM_LEN</name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr>0 == <call><name>strncmp</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>SVN_REGISTRY_HKCU</name></expr></argument>, <argument><expr><name>SVN_REGISTRY_HKCU_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>base_hkey</name> = <name>HKEY_CURRENT_USER</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>file</name> += <name>SVN_REGISTRY_HKCU_LEN</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_FILENAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr>"Unrecognised registry path '%s'"</expr></argument>,
                               <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if></else></if>

  <expr_stmt><expr><name>err</name> = <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>base_hkey</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr>0</expr></argument>,
                     <argument><expr><name>KEY_ENUMERATE_SUB_KEYS</name> | <name>KEY_QUERY_VALUE</name></expr></argument>,
                     <argument><expr>&amp;<name>hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_enoent</name> <init>= <expr><call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>is_enoent</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_FILENAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr>"Can't open registry key '%s'"</expr></argument>,
                                 <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
      <else>else <if>if <condition>(<expr><name>must_exist</name> &amp;&amp; <name>is_enoent</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_FILENAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr>"Can't find registry key '%s'"</expr></argument>,
                                 <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></else></if></else></if>
    }</block></then></if>


  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>section</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>option</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* The top-level values belong to the [DEFAULT] section */</comment>
  <expr_stmt><expr><name>svn_err</name> = <call><name>parse_section</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>SVN_CONFIG__DEFAULT_SECTION</name></expr></argument>,
                          <argument><expr><name>option</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>svn_err</name></expr>)</condition><then>
    <goto>goto <name>cleanup</name>;</goto></then></if>

  <comment type="block">/* Now enumerate the rest of the keys. */</comment>
  <expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>SVN_REG_DEFAULT_NAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>index</name> = 0</expr>;</init> <condition>;</condition> <incr><expr>++<name>index</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>DWORD</name></type> <name>section_len</name> <init>= <expr><name><name>section</name>-&gt;<name>blocksize</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>FILETIME</name></type> <name>last_write_time</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>HKEY</name></type> <name>sub_hkey</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>RegEnumKeyEx</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>section</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>section_len</name></expr></argument>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>last_write_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name> == <name>ERROR_NO_MORE_ITEMS</name></expr>)</condition><then>
          <break>break;</break></then></if>
      <if>if <condition>(<expr><name>err</name> == <name>ERROR_MORE_DATA</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>section_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <call><name>RegEnumKeyEx</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>section</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>section_len</name></expr></argument>,
                             <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>last_write_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <if>if <condition>(<expr><name>err</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>svn_err</name> =  <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_MALFORMED_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr>"Can't enumerate registry keys"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>cleanup</name>;</goto>
        }</block></then></if>

      <expr_stmt><expr><name>err</name> = <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name><name>section</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                         <argument><expr><name>KEY_ENUMERATE_SUB_KEYS</name> | <name>KEY_QUERY_VALUE</name></expr></argument>,
                         <argument><expr>&amp;<name>sub_hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>svn_err</name> =  <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_MALFORMED_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr>"Can't open existing subkey"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>cleanup</name>;</goto>
        }</block></then></if>

      <expr_stmt><expr><name>svn_err</name> = <call><name>parse_section</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>sub_hkey</name></expr></argument>, <argument><expr><name><name>section</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>sub_hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>svn_err</name></expr>)</condition><then>
        <goto>goto <name>cleanup</name>;</goto></then></if>
    }</block></for>

 <label><name>cleanup</name>:</label>
  <expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>svn_err</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WIN32 */</comment>
</unit>
