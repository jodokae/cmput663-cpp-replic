<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_subr/config_impl.h"><comment type="block">/*
 * config_impl.h :  private header for the config file implementation.
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_SUBR_CONFIG_IMPL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_SUBR_CONFIG_IMPL_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* The configuration data. This is a superhash of sections and options. */</comment>
<struct>struct <name>svn_config_t</name>
<block>{
  <comment type="block">/* Table of cfg_section_t's. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>sections</name></decl>;</decl_stmt>

  <comment type="block">/* Pool for hash tables, table entries and unexpanded values */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* Pool for expanded values -- this is separate, so that we can
     clear it when modifying the config data. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>x_pool</name></decl>;</decl_stmt>

  <comment type="block">/* Indicates that some values in the configuration have been expanded. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>x_values</name></decl>;</decl_stmt>

  <comment type="block">/* Temporary string used for lookups.  (Using a stringbuf so that
     frequent resetting is efficient.) */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>tmp_key</name></decl>;</decl_stmt>

  <comment type="block">/* Temporary value used for expanded default values in svn_config_get.
     (Using a stringbuf so that frequent resetting is efficient.) */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>tmp_value</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/* Read sections and options from a file. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_config__parse_file</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
                                    <param><decl><type><name>svn_boolean_t</name></type> <name>must_exist</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* The name of the magic [DEFAULT] section. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__DEFAULT_SECTION</name></cpp:macro> <cpp:value>"DEFAULT"</cpp:value></cpp:define>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<comment type="block">/* Get the common or user-specific AppData folder */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_config__win_config_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>folder</name></decl></param>,
                                         <param><decl><type><name>int</name></type> <name>system_path</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Read sections and options from the Windows Registry. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_config__parse_registry</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
                                        <param><decl><type><name>svn_boolean_t</name></type> <name>must_exist</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* ### It's unclear to me whether this registry stuff should get the
   double underscore or not, and if so, where the extra underscore
   would go.  Thoughts?  -kff */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_PREFIX</name></cpp:macro> <cpp:value>"REGISTRY:"</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_PREFIX_LEN</name></cpp:macro> <cpp:value>((sizeof(SVN_REGISTRY_PREFIX)) - 1)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_HKLM</name></cpp:macro> <cpp:value>"HKLM\\"</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_HKLM_LEN</name></cpp:macro> <cpp:value>((sizeof(SVN_REGISTRY_HKLM)) - 1)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_HKCU</name></cpp:macro> <cpp:value>"HKCU\\"</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_HKCU_LEN</name></cpp:macro> <cpp:value>((sizeof(SVN_REGISTRY_HKCU)) - 1)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_PATH</name></cpp:macro> <cpp:value>"Software\\Tigris.org\\Subversion\\"</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_PATH_LEN</name></cpp:macro> <cpp:value>((sizeof(SVN_REGISTRY_PATH)) - 1)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_SYS_CONFIG_PATH</name></cpp:macro> \
                               <cpp:value>SVN_REGISTRY_PREFIX     \
                               SVN_REGISTRY_HKLM       \
                               SVN_REGISTRY_PATH</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_USR_CONFIG_PATH</name></cpp:macro> \
                               <cpp:value>SVN_REGISTRY_PREFIX     \
                               SVN_REGISTRY_HKCU       \
                               SVN_REGISTRY_PATH</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WIN32 */</comment>

<comment type="block">/* System-wide and configuration subdirectory names.
   NOTE: Don't use these directly; call svn_config__sys_config_path()
   or svn_config__user_config_path() instead. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__SUBDIRECTORY</name></cpp:macro>    <cpp:value>"Subversion"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* ! WIN32 */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__SYS_DIRECTORY</name></cpp:macro>   <cpp:value>"/etc/subversion"</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__USR_DIRECTORY</name></cpp:macro>   <cpp:value>".subversion"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WIN32 */</comment>

<comment type="block">/* The description/instructions file in the config directory. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__USR_README_FILE</name></cpp:macro>    <cpp:value>"README.txt"</cpp:value></cpp:define>

<comment type="block">/* The name of the main authentication subdir in the config directory */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__AUTH_SUBDIR</name></cpp:macro>        <cpp:value>"auth"</cpp:value></cpp:define>

<comment type="block">/* Set *PATH_P to the path to config file FNAME in the system
   configuration area, allocated in POOL.  If FNAME is NULL, set
   *PATH_P to the directory name of the system config area, either
   allocated in POOL or a static constant string.

   If the system configuration area cannot be located (possible under
   Win32), set *PATH_P to NULL regardless of FNAME.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_config__sys_config_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>path_p</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Set *PATH_P to the path to config file FNAME in the user's personal
   configuration area; if FNAME is NULL, set *PATH_P to the directory
   name of the user's config area.  Allocate *PATH_P in POOL.

   If the user's personal configuration area cannot be located (most
   likely under Win32), set *PATH_P to NULL regardless of FNAME.

   CONFIG_DIR overrides this and if set *PATH_P is set to it.
   */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_config__user_config_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>path_p</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Open a config file FILENAME with mode MODE. FILENAME is encoded in
   UTF-8, so use POOL for any temporary storage needed for
   conversions. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_config__open_file</name><parameter_list>(<param><decl><type><name>FILE</name> **</type><name>pfile</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mode</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Stubs for allowing 1.0.x Apache modules to be mixed with 1.1.x libraries. */</comment>
<typedef>typedef <function_decl><type><name>svn_boolean_t</name></type>(*<name>svn_config__section_enumerator_t</name>)
        <parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>int</name></type> <name>svn_config__enumerate_sections</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
                                   <param><decl><type><name>svn_config__section_enumerator_t</name></type> <name>callback</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_SUBR_CONFIG_IMPL_H */</comment>
</unit>
