<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_subr/prompt.c"><comment type="block">/*
 * prompt.c -- ask the user for authentication information.
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<comment type="block">/*** Includes. ***/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_poll.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<escape char="0xc"/>

<comment type="block">/* Wait for input on @a *f.  Doing all allocations
 * in @a pool.  This functions is based on apr_wait_for_io_or_timeout().
 * Note that this will return an EINTR on a signal.
 *
 * ### FIX: When APR gives us a better way of doing this use it. */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>wait_for_input</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>f</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pollfd_t</name></type> <name>pollset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>srv</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<comment type="block">/* APR specs say things that are unimplemented are supposed to return
 * APR_ENOTIMPL.  But when trying to use APR_POLL_FILE with apr_poll
 * on Windows it returns APR_EBADF instead.  So just return APR_ENOTIMPL
 * ourselves here.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
  <return>return <expr><name>APR_ENOTIMPL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WIN32 */</comment>

  <expr_stmt><expr><name><name>pollset</name>.<name>desc_type</name></name> = <name>APR_POLL_FILE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pollset</name>.<name>desc</name>.<name>f</name></name> = <name>f</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pollset</name>.<name>p</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pollset</name>.<name>reqevents</name></name> = <name>APR_POLLIN</name></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AS400</name></cpp:ifndef>
  <expr_stmt><expr><name>srv</name> = <call><name>apr_poll</name><argument_list>(<argument><expr>&amp;<name>pollset</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* OS400 requires a pool argument for apr_poll(). */</comment>
  <expr_stmt><expr><name>srv</name> = <call><name>apr_poll</name><argument_list>(<argument><expr>&amp;<name>pollset</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if>if <condition>(<expr><name>n</name> == 1 &amp;&amp; <name><name>pollset</name>.<name>rtnevents</name></name> &amp; <name>APR_POLLIN</name></expr>)</condition><then>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>

  <return>return <expr><name>srv</name></expr>;</return>
}</block></function>

<comment type="block">/* Set @a *result to the result of prompting the user with @a
 * prompt_msg.  Use @ *pb to get the cancel_func and cancel_baton.
 * Do not call the cancel_func if @a *pb is NULL.
 * Allocate @a *result in @a pool.
 *
 * If @a hide is true, then try to avoid displaying the user's input.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>prompt</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>result</name></decl></param>,
       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prompt_msg</name></decl></param>,
       <param><decl><type><name>svn_boolean_t</name></type> <name>hide</name></decl></param>,
       <param><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>pb</name></decl></param>,
       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>strbuf</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>status</name> = <call><name>apr_file_open_stdin</name><argument_list>(<argument><expr>&amp;<name>fp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't open stdin"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr>! <name>hide</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>saw_first_half_of_eol</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fputs</name><argument_list>(<argument><expr><name>prompt_msg</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr>1</expr>)</condition>
        <block>{
          <comment type="block">/* Hack to allow us to not block for io on the prompt, so
           * we can cancel. */</comment>
          <if>if <condition>(<expr><name>pb</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>pb</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <expr_stmt><expr><name>status</name> = <call><name>wait_for_input</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <continue>continue;</continue></then>
          <else>else <if>if <condition>(<expr><name>status</name> &amp;&amp; <name>status</name> != <name>APR_ENOTIMPL</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't read stdin"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>

          <expr_stmt><expr><name>status</name> = <call><name>apr_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't read stdin"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

          <if>if <condition>(<expr><name>saw_first_half_of_eol</name></expr>)</condition><then>
            <block>{
              <if>if <condition>(<expr><name>c</name> == <name><name>APR_EOL_STR</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then>
                <break>break;</break></then>
              <else>else
                <expr_stmt><expr><name>saw_first_half_of_eol</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
            }</block></then>
          <else>else <if>if <condition>(<expr><name>c</name> == <name><name>APR_EOL_STR</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
            <block>{
              <if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></sizeof> == 3</expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><name>saw_first_half_of_eol</name> = <name>TRUE</name></expr>;</expr_stmt>
                  <continue>continue;</continue>
                }</block></then>
              <else>else <if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></sizeof> == 2</expr>)</condition><then>
                <break>break;</break></then>
              <else>else
                <comment type="block">/* ### APR_EOL_STR holds more than two chars?  Who
                   ever heard of such a thing? */</comment>
                <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if></else></if>
            }</block></then></if></else></if>

          <expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prompt_stdout</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name> <init>= <expr>300</expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>prompt_stdout</name></expr></argument>, <argument><expr><name>prompt_msg</name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>status</name> = <call><name>apr_password_get</name><argument_list>(<argument><expr><name>prompt_stdout</name></expr></argument>, <argument><expr><name><name>strbuf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't get password"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_cstring_to_utf8</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>strbuf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/** Prompt functions for auth providers. **/</comment>

<comment type="block">/* Helper function for auth provider prompters: mention the
 * authentication @a realm on stderr, in a manner appropriate for
 * preceding a prompt; or if @a realm is null, then do nothing.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>maybe_print_realm</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>realm</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                                  <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Authentication realm: %s\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements 'svn_auth_simple_prompt_func_t'. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_auth_simple_prompt</name><parameter_list>(<param><decl><type><name>svn_auth_cred_simple_t</name> **</type><name>cred_p</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_auth_cred_simple_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pass_prompt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>pb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_print_realm</name><argument_list>(<argument><expr><name>realm</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>username</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>ret</name>-&gt;<name>username</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>prompt</name><argument_list>(<argument><expr>&amp;(<name><name>ret</name>-&gt;<name>username</name></name>)</expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Username: "</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><name>pass_prompt</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Password for '%s': "</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ret</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>prompt</name><argument_list>(<argument><expr>&amp;(<name><name>ret</name>-&gt;<name>password</name></name>)</expr></argument>, <argument><expr><name>pass_prompt</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>may_save</name></name> = <name>may_save</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>cred_p</name> = <name>ret</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements 'svn_auth_username_prompt_func_t'. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_auth_username_prompt</name><parameter_list>(<param><decl><type><name>svn_auth_cred_username_t</name> **</type><name>cred_p</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_auth_cred_username_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>pb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_print_realm</name><argument_list>(<argument><expr><name>realm</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>prompt</name><argument_list>(<argument><expr>&amp;(<name><name>ret</name>-&gt;<name>username</name></name>)</expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Username: "</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>may_save</name></name> = <name>may_save</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>cred_p</name> = <name>ret</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements 'svn_auth_ssl_server_trust_prompt_func_t'. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_auth_ssl_server_trust_prompt</name>
  <parameter_list>(<param><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> **</type><name>cred_p</name></decl></param>,
   <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
   <param><decl><type><name>apr_uint32_t</name></type> <name>failures</name></decl></param>,
   <param><decl><type><specifier>const</specifier> <name>svn_auth_ssl_server_cert_info_t</name> *</type><name>cert_info</name></decl></param>,
   <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>choice</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>pb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>buf</name> <init>= <expr><call><name>svn_stringbuf_createf</name>
    <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error validating server certificate for '%s':\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>failures</name> &amp; <name>SVN_AUTH_SSL_UNKNOWNCA</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name>
        <argument_list>(<argument><expr><name>buf</name></expr></argument>,
         <argument><expr><call><name>_</name><argument_list>(<argument><expr>" - The certificate is not issued by a trusted authority. Use the\n"
           "   fingerprint to validate the certificate manually!\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>failures</name> &amp; <name>SVN_AUTH_SSL_CNMISMATCH</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name>
        <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>" - The certificate hostname does not match.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>failures</name> &amp; <name>SVN_AUTH_SSL_NOTYETVALID</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name>
        <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>" - The certificate is not yet valid.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>failures</name> &amp; <name>SVN_AUTH_SSL_EXPIRED</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name>
        <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>" - The certificate has expired.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>failures</name> &amp; <name>SVN_AUTH_SSL_OTHER</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name>
        <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>" - The certificate has an unknown error.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>msg</name> = <call><name>svn_stringbuf_createf</name>
    <argument_list>(<argument><expr><name>pool</name></expr></argument>,
     <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Certificate information:\n"
       " - Hostname: %s\n"
       " - Valid: from %s until %s\n"
       " - Issuer: %s\n"
       " - Fingerprint: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
     <argument><expr><name><name>cert_info</name>-&gt;<name>hostname</name></name></expr></argument>,
     <argument><expr><name><name>cert_info</name>-&gt;<name>valid_from</name></name></expr></argument>,
     <argument><expr><name><name>cert_info</name>-&gt;<name>valid_until</name></name></expr></argument>,
     <argument><expr><name><name>cert_info</name>-&gt;<name>issuer_dname</name></name></expr></argument>,
     <argument><expr><name><name>cert_info</name>-&gt;<name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_stringbuf_appendstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>may_save</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name>
        <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"(R)eject, accept (t)emporarily or accept (p)ermanently? "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"(R)eject or accept (t)emporarily? "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>prompt</name><argument_list>(<argument><expr>&amp;<name>choice</name></expr></argument>, <argument><expr><name><name>buf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>choice</name><index>[<expr>0</expr>]</index></name> == 't' || <name><name>choice</name><index>[<expr>0</expr>]</index></name> == 'T'</expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>cred_p</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>cred_p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>(*<name>cred_p</name>)-&gt;<name>may_save</name></name> = <name>FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>(*<name>cred_p</name>)-&gt;<name>accepted_failures</name></name> = <name>failures</name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>may_save</name> &amp;&amp; (<name><name>choice</name><index>[<expr>0</expr>]</index></name> == 'p' || <name><name>choice</name><index>[<expr>0</expr>]</index></name> == 'P')</expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>cred_p</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>cred_p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>(*<name>cred_p</name>)-&gt;<name>may_save</name></name> = <name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>(*<name>cred_p</name>)-&gt;<name>accepted_failures</name></name> = <name>failures</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr>*<name>cred_p</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements 'svn_auth_ssl_client_cert_prompt_func_t'. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_auth_ssl_client_cert_prompt</name>
  <parameter_list>(<param><decl><type><name>svn_auth_cred_ssl_client_cert_t</name> **</type><name>cred_p</name></decl></param>,
   <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
   <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_t</name> *</type><name>cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cert_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>pb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_print_realm</name><argument_list>(<argument><expr><name>realm</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>prompt</name><argument_list>(<argument><expr>&amp;<name>cert_file</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Client certificate filename: "</expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>cred</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cred</name>-&gt;<name>cert_file</name></name> = <name>cert_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cred</name>-&gt;<name>may_save</name></name> = <name>may_save</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>cred_p</name> = <name>cred</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements 'svn_auth_ssl_client_cert_pw_prompt_func_t'. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_auth_ssl_client_cert_pw_prompt</name>
  <parameter_list>(<param><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> **</type><name>cred_p</name></decl></param>,
   <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
   <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> *</type><name>cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Passphrase for '%s': "</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>pb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>prompt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>cred</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cred</name>-&gt;<name>password</name></name> = <name>result</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cred</name>-&gt;<name>may_save</name></name> = <name>may_save</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>cred_p</name> = <name>cred</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/** Generic prompting. **/</comment>

<function><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_prompt_user2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>result</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prompt_str</name></decl></param>,
                         <param><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>baton</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>prompt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>prompt_str</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> <comment type="block">/* don't hide input */</comment>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_cmdline_prompt_user</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>result</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prompt_str</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_cmdline_prompt_user2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>prompt_str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
