<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_delta/delta.h"><comment type="block">/*
 * delta.h:  private delta library things
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_DELTA_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_DELTA_H</name></cpp:macro></cpp:define>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* Private interface for text deltas. */</comment>

<comment type="block">/* The standard size of one svndiff window. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DELTA_WINDOW_SIZE</name></cpp:macro> <cpp:value>102400</cpp:value></cpp:define>


<comment type="block">/* Context/baton for building an operation sequence. */</comment>

<typedef>typedef <type><struct>struct <name>svn_txdelta__ops_baton_t</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>num_ops</name></decl>;</decl_stmt>                  <comment type="block">/* current number of ops */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>src_ops</name></decl>;</decl_stmt>                  <comment type="block">/* current number of source copy ops */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>ops_size</name></decl>;</decl_stmt>                 <comment type="block">/* number of ops allocated */</comment>
  <decl_stmt><decl><type><name>svn_txdelta_op_t</name> *</type><name>ops</name></decl>;</decl_stmt>        <comment type="block">/* the operations */</comment>

  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>new_data</name></decl>;</decl_stmt>    <comment type="block">/* any new data used by the operations */</comment>
}</block></struct></type> <name>svn_txdelta__ops_baton_t</name>;</typedef>


<comment type="block">/* Insert a delta op into the delta window being built via BUILD_BATON. If
   OPCODE is svn_delta_new, bytes from NEW_DATA are copied into the window
   data and OFFSET is ignored.  Otherwise NEW_DATA is ignored. All
   allocations are performed in POOL. */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>svn_txdelta__insert_op</name><argument_list>(<argument><expr><name>svn_txdelta__ops_baton_t</name> *<name>build_baton</name></expr></argument>,
                            <argument>enum <expr><name>svn_delta_action</name> <name>opcode</name></expr></argument>,
                            <argument><expr><name>apr_size_t</name> <name>offset</name></expr></argument>,
                            <argument><expr><name>apr_size_t</name> <name>length</name></expr></argument>,
                            <argument><expr>const <name>char</name> *<name>new_data</name></expr></argument>,
                            <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<comment type="block">/* Allocate a delta window from POOL. */</comment>
<function_decl><type><name>svn_txdelta_window_t</name> *</type>
<name>svn_txdelta__make_window</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_txdelta__ops_baton_t</name> *</type><name>build_baton</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Create vdelta window data. Allocate temporary data from POOL. */</comment>
<function_decl><type><name>void</name></type> <name>svn_txdelta__vdelta</name><parameter_list>(<param><decl><type><name>svn_txdelta__ops_baton_t</name> *</type><name>build_baton</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name></decl></param>,
                         <param><decl><type><name>apr_size_t</name></type> <name>source_len</name></decl></param>,
                         <param><decl><type><name>apr_size_t</name></type> <name>target_len</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Create xdelta window data. Allocate temporary data from POOL. */</comment>
<function_decl><type><name>void</name></type> <name>svn_txdelta__xdelta</name><parameter_list>(<param><decl><type><name>svn_txdelta__ops_baton_t</name> *</type><name>build_baton</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name></decl></param>,
                         <param><decl><type><name>apr_size_t</name></type> <name>source_len</name></decl></param>,
                         <param><decl><type><name>apr_size_t</name></type> <name>target_len</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* SVN_LIBSVN_DELTA_H */</comment>
</unit>
