<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_repos/fs-wrap.c"><comment type="block">/* fs-wrap.c --- filesystem interface wrappers.
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Commit wrappers ***/</comment>

<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_commit_txn</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>conflict_p</name></decl></param>,
                        <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                        <param><decl><type><name>svn_revnum_t</name> *</type><name>new_rev</name></decl></param>,
                        <param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl>;</decl_stmt>

  <comment type="block">/* Run pre-commit hooks. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>txn_name</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__hooks_pre_commit</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Commit. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>conflict_p</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Run post-commit hooks.   Notice that we're wrapping the error
     with a -specific- errorcode, so that our caller knows not to try
     and abort the transaction. */</comment>
  <if>if <condition>(<expr>(<name>err</name> = <call><name>svn_repos__hooks_post_commit</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr>*<name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_REPOS_POST_COMMIT_HOOK_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Commit succeeded, but post-commit hook failed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Transaction creation wrappers. ***/</comment>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_begin_txn_for_commit2</name><parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> **</type><name>txn_p</name></decl></param>,
                                   <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                   <param><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>author</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>revprop_table</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
                                      <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>revprops</name></decl>;</decl_stmt>

  <comment type="block">/* Run start-commit hooks. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__hooks_start_commit</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>author</name> ? <name><name>author</name>-&gt;<name>data</name></name> : <name>NULL</name></expr></argument>,
                                        <argument><expr><name><name>repos</name>-&gt;<name>client_capabilities</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Begin the transaction, ask for the fs to do on-the-fly lock checks. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn2</name><argument_list>(<argument><expr><name>txn_p</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
                            <argument><expr><name>SVN_FS_TXN_CHECK_LOCKS</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We pass the revision properties to the filesystem by adding them
     as properties on the txn.  Later, when we commit the txn, these
     properties will be copied into the newly created revision. */</comment>
  <expr_stmt><expr><name>revprops</name> = <call><name>svn_prop_hash_to_array</name><argument_list>(<argument><expr><name>revprop_table</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_repos_fs_change_txn_props</name><argument_list>(<argument><expr>*<name>txn_p</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_begin_txn_for_commit</name><parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> **</type><name>txn_p</name></decl></param>,
                                  <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                                  <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_msg</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>author</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>revprop_table</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
                 <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>author</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>log_msg</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>revprop_table</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>,
                 <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>log_msg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><call><name>svn_repos_fs_begin_txn_for_commit2</name><argument_list>(<argument><expr><name>txn_p</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>revprop_table</name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_begin_txn_for_update</name><parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> **</type><name>txn_p</name></decl></param>,
                                  <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                                  <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* ### someday, we might run a read-hook here. */</comment>

  <comment type="block">/* Begin the transaction. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn2</name><argument_list>(<argument><expr><name>txn_p</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We pass the author to the filesystem by adding it as a property
     on the txn. */</comment>

  <comment type="block">/* User (author). */</comment>
  <if>if <condition>(<expr><name>author</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_string_t</name></type> <name>val</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>val</name>.<name>data</name></name> = <name>author</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>val</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>author</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_txn_prop</name><argument_list>(<argument><expr>*<name>txn_p</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
                                     <argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Property wrappers ***/</comment>

<comment type="block">/* Validate that property NAME is valid for use in a Subversion
   repository; return SVN_ERR_REPOS_BAD_ARGS if it isn't.  For some "svn:"
   properties, also validate the value, and return SVN_ERR_BAD_PROPERTY_VALUE
   if it is not valid.

   Use POOL for temporary allocations.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>validate_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_prop_kind_t</name></type> <name>kind</name> <init>= <expr><call><name>svn_property_kind</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Disallow setting non-regular properties. */</comment>
  <if>if <condition>(<expr><name>kind</name> != <name>svn_prop_regular_kind</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_REPOS_BAD_ARGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Storage of non-regular property '%s' is disallowed through the "
         "repository interface, and could indicate a bug in your client"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Validate "svn:" properties. */</comment>
  <if>if <condition>(<expr><call><name>svn_prop_is_svn_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> &amp;&amp; <name>value</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* "svn:date" should be a valid date. */</comment>
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_time_t</name></type> <name>temp</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

          <expr_stmt><expr><name>err</name> = <call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_PROPERTY_VALUE</name></expr></argument>,
                                    <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></then></if>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_change_node_prop</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Validate the property, then call the wrapped function. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_change_txn_props</name><parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
                              <param><decl><type><name>apr_array_header_t</name> *</type><name>txnprops</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>txnprops</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>prop</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>txnprops</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_prop</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <return>return <expr><call><name>svn_fs_change_txn_props</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>txnprops</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_change_txn_prop</name><parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>props</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_prop_t</name></type> <name>prop</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>prop</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>prop</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call> = <name>prop</name></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_repos_fs_change_txn_props</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_change_rev_prop3</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                              <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>new_value</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>use_pre_revprop_change_hook</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>use_post_revprop_change_hook</name></decl></param>,
                              <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>old_value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_repos_revision_access_level_t</name></type> <name>readability</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>action</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_check_revision_access</name><argument_list>(<argument><expr>&amp;<name>readability</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
                                          <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>readability</name> == <name>svn_repos_revision_access_full</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>old_value</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>! <name>new_value</name></expr>)</condition><then>
        <expr_stmt><expr><name>action</name> = 'D'</expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>! <name>old_value</name></expr>)</condition><then>
        <expr_stmt><expr><name>action</name> = 'A'</expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name>action</name> = 'M'</expr>;</expr_stmt></else></if></else></if>

      <if>if <condition>(<expr><name>use_pre_revprop_change_hook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__hooks_pre_revprop_change</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                                    <argument><expr><name>new_value</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_rev_prop</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>use_post_revprop_change_hook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__hooks_post_revprop_change</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>author</name></expr></argument>,  <argument><expr><name>name</name></expr></argument>,
                                                     <argument><expr><name>old_value</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then>
  <else>else  <comment type="block">/* rev is either unreadable or only partially readable */</comment>
    <block>{
      <return>return <expr><call><name>svn_error_createf</name>
        <argument_list>(<argument><expr><name>SVN_ERR_AUTHZ_UNREADABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Write denied:  not authorized to read all of revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_change_rev_prop2</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                              <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>new_value</name></decl></param>,
                              <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_repos_fs_change_rev_prop3</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_value</name></expr></argument>,
                                       <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
                                       <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>



<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_change_rev_prop</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>new_value</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_repos_fs_change_rev_prop2</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>new_value</name></expr></argument>,
                                       <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>



<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_revision_prop</name><parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>value_p</name></decl></param>,
                           <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
                           <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_repos_revision_access_level_t</name></type> <name>readability</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_check_revision_access</name><argument_list>(<argument><expr>&amp;<name>readability</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
                                          <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>readability</name> == <name>svn_repos_revision_access_none</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Property?  What property? */</comment>
      <expr_stmt><expr>*<name>value_p</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>readability</name> == <name>svn_repos_revision_access_partial</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Only svn:author and svn:date are fetchable. */</comment>
      <if>if <condition>(<expr>(<call><name>strncmp</name><argument_list>(<argument><expr><name>propname</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
                   <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != 0)
          &amp;&amp; (<call><name>strncmp</name><argument_list>(<argument><expr><name>propname</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
                      <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
        <expr_stmt><expr>*<name>value_p</name> = <name>NULL</name></expr>;</expr_stmt></then>

      <else>else
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr><name>value_p</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>,
                                     <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then>
  <else>else <comment type="block">/* wholly readable revision */</comment>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr><name>value_p</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_revision_proplist</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>table_p</name></decl></param>,
                               <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                               <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_repos_revision_access_level_t</name></type> <name>readability</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_check_revision_access</name><argument_list>(<argument><expr>&amp;<name>readability</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
                                          <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>readability</name> == <name>svn_repos_revision_access_none</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Return an empty hash. */</comment>
      <expr_stmt><expr>*<name>table_p</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>readability</name> == <name>svn_repos_revision_access_partial</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>tmphash</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>

      <comment type="block">/* Produce two property hashtables, both in POOL. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_proplist</name><argument_list>(<argument><expr>&amp;<name>tmphash</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>table_p</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If they exist, we only copy svn:author and svn:date into the
         'real' hashtable being returned. */</comment>
      <expr_stmt><expr><name>value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>tmphash</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>value</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>table_p</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
                     <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name>value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>tmphash</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>value</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>table_p</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
                     <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then>
  <else>else <comment type="block">/* wholly readable revision */</comment>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_proplist</name><argument_list>(<argument><expr><name>table_p</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_lock</name><parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
                  <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>is_dav_comment</name></decl></param>,
                  <param><decl><type><name>apr_time_t</name></type> <name>expiration_date</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>current_rev</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>steal_lock</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_access_t</name> *</type><name>access_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>paths</name></decl>;</decl_stmt>

  <comment type="block">/* Setup an array of paths in anticipation of the ra layers handling
     multiple locks in one request (1.3 most likely).  This is only
     used by svn_repos__hooks_post_lock. */</comment>
  <expr_stmt><expr><name>paths</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>path</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_access</name><argument_list>(<argument><expr>&amp;<name>access_ctx</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>access_ctx</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_access_get_username</name><argument_list>(<argument><expr>&amp;<name>username</name></expr></argument>, <argument><expr><name>access_ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr>! <name>username</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_NO_USER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"Cannot lock path '%s', no authenticated username available."</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Run pre-lock hook.  This could throw error, preventing
     svn_fs_lock() from happening. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__hooks_pre_lock</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Lock. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_lock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>is_dav_comment</name></expr></argument>,
                      <argument><expr><name>expiration_date</name></expr></argument>, <argument><expr><name>current_rev</name></expr></argument>, <argument><expr><name>steal_lock</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Run post-lock hook. */</comment>
  <if>if <condition>(<expr>(<name>err</name> = <call><name>svn_repos__hooks_post_lock</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_REPOS_POST_LOCK_HOOK_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
       <argument><expr>"Lock succeeded, but post-lock hook failed"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_unlock</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>break_lock</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_access_t</name> *</type><name>access_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Setup an array of paths in anticipation of the ra layers handling
     multiple locks in one request (1.3 most likely).  This is only
     used by svn_repos__hooks_post_lock. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>paths</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>path</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_access</name><argument_list>(<argument><expr>&amp;<name>access_ctx</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>access_ctx</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_access_get_username</name><argument_list>(<argument><expr>&amp;<name>username</name></expr></argument>, <argument><expr><name>access_ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr>! <name>break_lock</name> &amp;&amp; ! <name>username</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_NO_USER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot unlock path '%s', no authenticated username available"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Run pre-unlock hook.  This could throw error, preventing
     svn_fs_unlock() from happening. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__hooks_pre_unlock</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Unlock. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_unlock</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>break_lock</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Run post-unlock hook. */</comment>
  <if>if <condition>(<expr>(<name>err</name> = <call><name>svn_repos__hooks_post_unlock</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_REPOS_POST_UNLOCK_HOOK_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unlock succeeded, but post-unlock hook failed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<struct>struct <name>get_locks_baton_t</name>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>head_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>locks</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/* This implements the svn_fs_get_locks_callback_t interface. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_locks_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                   <param><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>get_locks_baton_t</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>hash_pool</name> <init>= <expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>locks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If there's auth to deal with, deal with it. */</comment>
  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>authz_read_func</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>authz_read_func</name></name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>head_root</name></name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>path</name></name></expr></argument>,
                                 <argument><expr><name><name>b</name>-&gt;<name>authz_read_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* If we can read this lock path, add the lock to the return hash. */</comment>
  <if>if <condition>(<expr><name>readable</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>locks</name></name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>hash_pool</name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><call><name>svn_lock_dup</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>hash_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_get_locks</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>locks</name></decl></param>,
                       <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>all_locks</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>head_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>get_locks_baton_t</name></type> <name>baton</name></decl>;</decl_stmt>

  <comment type="block">/* Locks are always said to apply to HEAD revision, so we'll check
     to see if locked-paths are readable in HEAD as well. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>head_rev</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Populate our callback baton. */</comment>
  <expr_stmt><expr><name><name>baton</name>.<name>fs</name></name> = <name><name>repos</name>-&gt;<name>fs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>.<name>locks</name></name> = <name>all_locks</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>.<name>authz_read_func</name></name> = <name>authz_read_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>.<name>authz_read_baton</name></name> = <name>authz_read_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>head_root</name></name>)</expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>,
                               <argument><expr><name>head_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get all the locks. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_locks</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>get_locks_callback</name></expr></argument>,
                           <argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>locks</name> = <name><name>baton</name>.<name>locks</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_fs_get_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_catalog_t</name> *</type><name>mergeinfo</name></decl></param>,
                           <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                           <param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>include_descendants</name></decl></param>,
                           <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>readable_paths</name> <init>= <expr>(<name>apr_array_header_t</name> *) <name>paths</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Filter out unreadable paths before divining merge tracking info. */</comment>
  <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
    <block>{
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
                                  <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>readable</name> &amp;&amp; <name>readable_paths</name> != <name>paths</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>readable_paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>path</name></expr>;</expr_stmt></then>
          <else>else <if>if <condition>(<expr>!<name>readable</name> &amp;&amp; <name>readable_paths</name> == <name>paths</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* Requested paths differ from readable paths.  Fork
                 list of readable paths from requested paths. */</comment>
              <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>readable_paths</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>paths</name>-&gt;<name>nelts</name></name> - 1</expr></argument>,
                                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>i</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
                <block>{
                  <expr_stmt><expr><name>path</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>readable_paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>path</name></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if></else></if>
        }</block></for>
    }</block></then></if>

  <comment type="block">/* We consciously do not perform authz checks on the paths returned
     in *MERGEINFO, avoiding massive authz overhead which would allow
     us to protect the name of where a change was merged from, but not
     the change itself. */</comment>
  <comment type="block">/* ### TODO(reint): ... but how about descendant merged-to paths? */</comment>
  <if>if <condition>(<expr><name><name>readable_paths</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_mergeinfo</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>readable_paths</name></expr></argument>, <argument><expr><name>inherit</name></expr></argument>,
                                 <argument><expr><name>include_descendants</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<name>mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*
 * vim:ts=4:sw=4:expandtab:tw=80:fo=tcroq
 * vim:isk=a-z,A-Z,48-57,_,.,-,&gt;
 * vim:cino=&gt;1s,e0,n0,f0,{.5s,}0,^-.5s,=.5s,t0,+1s,c3,(0,u0,\:0
 */</comment>
</unit>
