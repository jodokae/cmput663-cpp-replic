<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_repos/repos.h"><comment type="block">/* repos.h : interface to Subversion repository, private to libsvn_repos
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_REPOS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_REPOS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* Repository format number.

   Formats 0, 1 and 2 were pre-1.0.

   Format 3 was current for 1.0 through to 1.3.

   Format 4 was an abortive experiment during the development of the
   locking feature in the lead up to 1.2.

   Format 5 was new in 1.4, and is the first format which may contain
   BDB or FSFS filesystems with a FS format other than 1, since prior
   formats are accepted by some versions of Subversion which do not
   pay attention to the FS format number.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__FORMAT_NUMBER</name></cpp:macro>         <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__FORMAT_NUMBER_LEGACY</name></cpp:macro>  <cpp:value>3</cpp:value></cpp:define>

<escape char="0xc"/>
<comment type="block">/*** Repository layout. ***/</comment>

<comment type="block">/* The top-level repository dir contains a README and various
   subdirectories.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__README</name></cpp:macro>      <cpp:value>"README.txt"</cpp:value></cpp:define> <comment type="block">/* Explanation for trespassers. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__FORMAT</name></cpp:macro>      <cpp:value>"format"</cpp:value></cpp:define>     <comment type="block">/* Stores the current version
                                               of the repository. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__DB_DIR</name></cpp:macro>      <cpp:value>"db"</cpp:value></cpp:define>         <comment type="block">/* Where Berkeley lives. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__DAV_DIR</name></cpp:macro>     <cpp:value>"dav"</cpp:value></cpp:define>        <comment type="block">/* DAV sandbox, for pre-1.5 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__LOCK_DIR</name></cpp:macro>    <cpp:value>"locks"</cpp:value></cpp:define>      <comment type="block">/* Lock files live here. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_DIR</name></cpp:macro>    <cpp:value>"hooks"</cpp:value></cpp:define>      <comment type="block">/* Hook programs. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__CONF_DIR</name></cpp:macro>    <cpp:value>"conf"</cpp:value></cpp:define>       <comment type="block">/* Configuration files. */</comment>

<comment type="block">/* Things for which we keep lockfiles. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__DB_LOCKFILE</name></cpp:macro> <cpp:value>"db.lock"</cpp:value></cpp:define> <comment type="block">/* Our Berkeley lockfile. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__DB_LOGS_LOCKFILE</name></cpp:macro> <cpp:value>"db-logs.lock"</cpp:value></cpp:define> <comment type="block">/* BDB logs lockfile. */</comment>

<comment type="block">/* In the repository hooks directory, look for these files. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_START_COMMIT</name></cpp:macro>    <cpp:value>"start-commit"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_PRE_COMMIT</name></cpp:macro>      <cpp:value>"pre-commit"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_POST_COMMIT</name></cpp:macro>     <cpp:value>"post-commit"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_READ_SENTINEL</name></cpp:macro>   <cpp:value>"read-sentinels"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_WRITE_SENTINEL</name></cpp:macro>  <cpp:value>"write-sentinels"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_PRE_REVPROP_CHANGE</name></cpp:macro>  <cpp:value>"pre-revprop-change"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_POST_REVPROP_CHANGE</name></cpp:macro> <cpp:value>"post-revprop-change"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_PRE_LOCK</name></cpp:macro>        <cpp:value>"pre-lock"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_POST_LOCK</name></cpp:macro>       <cpp:value>"post-lock"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_PRE_UNLOCK</name></cpp:macro>      <cpp:value>"pre-unlock"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_POST_UNLOCK</name></cpp:macro>     <cpp:value>"post-unlock"</cpp:value></cpp:define>


<comment type="block">/* The extension added to the names of example hook scripts. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__HOOK_DESC_EXT</name></cpp:macro>        <cpp:value>".tmpl"</cpp:value></cpp:define>


<comment type="block">/* The configuration file for svnserve, in the repository conf directory. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__CONF_SVNSERVE_CONF</name></cpp:macro> <cpp:value>"svnserve.conf"</cpp:value></cpp:define>

<comment type="block">/* In the svnserve default configuration, these are the suggested
   locations for the passwd and authz files (in the repository conf
   directory), and we put example templates there. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__CONF_PASSWD</name></cpp:macro> <cpp:value>"passwd"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REPOS__CONF_AUTHZ</name></cpp:macro> <cpp:value>"authz"</cpp:value></cpp:define>

<comment type="block">/* The Repository object, created by svn_repos_open() and
   svn_repos_create(). */</comment>
<struct>struct <name>svn_repos_t</name>
<block>{
  <comment type="block">/* A Subversion filesystem object. */</comment>
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>

  <comment type="block">/* The path to the repository's top-level directory. */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* The path to the repository's conf directory. */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>conf_path</name></decl>;</decl_stmt>

  <comment type="block">/* The path to the repository's hooks directory. */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>hook_path</name></decl>;</decl_stmt>

  <comment type="block">/* The path to the repository's locks directory. */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>lock_path</name></decl>;</decl_stmt>

  <comment type="block">/* The path to the Berkeley DB filesystem environment. */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>db_path</name></decl>;</decl_stmt>

  <comment type="block">/* The format number of this repository. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>

  <comment type="block">/* The FS backend in use within this repository. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_type</name></decl>;</decl_stmt>

  <comment type="block">/* If non-null, a list of all the capabilities the client (on the
     current connection) has self-reported.  Each element is a
     'const char *', one of SVN_RA_CAPABILITY_*.

     Note: it is somewhat counterintuitive that we store the client's
     capabilities, which are session-specific, on the repository
     object.  You'd think the capabilities here would represent the
     *repository's* capabilities, but no, they represent the
     client's -- we just don't have any other place to persist them. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>client_capabilities</name></decl>;</decl_stmt>

  <comment type="block">/* Maps SVN_REPOS_CAPABILITY_foo keys to "yes" or "no" values.
     If a capability is not yet discovered, it is absent from the table.
     Most likely the keys and values are constants anyway (and
     sufficiently well-informed internal code may just compare against
     those constants' addresses, therefore). */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>repository_capabilities</name></decl>;</decl_stmt>
}</block>;</struct>

<escape char="0xc"/>
<comment type="block">/*** Hook-running Functions ***/</comment>

<comment type="block">/* Run the start-commit hook for REPOS.  Use POOL for any temporary
   allocations.  If the hook fails, return SVN_ERR_REPOS_HOOK_FAILURE.

   USER is the authenticated name of the user starting the commit.  
   CAPABILITIES is a list of 'const char *' capability names (using
   SVN_RA_CAPABILITY_*) that the client has self-reported.  Note that
   there is no guarantee the client is telling the truth: the hook
   should not make security assumptions based on the capabilities. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_repos__hooks_start_commit</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
                              <param><decl><type><name>apr_array_header_t</name> *</type><name>capabilities</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Run the pre-commit hook for REPOS.  Use POOL for any temporary
   allocations.  If the hook fails, return SVN_ERR_REPOS_HOOK_FAILURE.

   TXN_NAME is the name of the transaction that is being committed.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_repos__hooks_pre_commit</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Run the post-commit hook for REPOS.  Use POOL for any temporary
   allocations.  If the hook fails, run SVN_ERR_REPOS_HOOK_FAILURE.

   REV is the revision that was created as a result of the commit.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_repos__hooks_post_commit</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Run the pre-revprop-change hook for REPOS.  Use POOL for any
   temporary allocations.  If the hook fails, return
   SVN_ERR_REPOS_HOOK_FAILURE.

   REV is the revision whose property is being changed.
   AUTHOR is the authenticated name of the user changing the prop.
   NAME is the name of the property being changed.
   NEW_VALUE is the new value of the property.
   ACTION is indicates if the property is being 'A'dded, 'M'odified,
   or 'D'eleted.

   The pre-revprop-change hook will have the new property value
   written to its stdin.  If the property is being deleted, no data
   will be written. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_repos__hooks_pre_revprop_change</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                                    <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>new_value</name></decl></param>,
                                    <param><decl><type><name>char</name></type> <name>action</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Run the pre-revprop-change hook for REPOS.  Use POOL for any
   temporary allocations.  If the hook fails, return
   SVN_ERR_REPOS_HOOK_FAILURE.

   REV is the revision whose property was changed.
   AUTHOR is the authenticated name of the user who changed the prop.
   NAME is the name of the property that was changed, and OLD_VALUE is
   that property's value immediately before the change, or null if
   none.  ACTION indicates if the property was 'A'dded, 'M'odified,
   or 'D'eleted.

   The old value will be passed to the post-revprop hook on stdin.  If
   the property is being created, no data will be written. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_repos__hooks_post_revprop_change</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                     <param><decl><type><name>svn_string_t</name> *</type><name>old_value</name></decl></param>,
                                     <param><decl><type><name>char</name></type> <name>action</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Run the pre-lock hook for REPOS.  Use POOL for any temporary
   allocations.  If the hook fails, return SVN_ERR_REPOS_HOOK_FAILURE.

   PATH is the path being locked, USERNAME is the person doing it.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_repos__hooks_pre_lock</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Run the post-lock hook for REPOS.  Use POOL for any temporary
   allocations.  If the hook fails, return SVN_ERR_REPOS_HOOK_FAILURE.

   PATHS is an array of paths being locked, USERNAME is the person
   who did it.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_repos__hooks_post_lock</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                           <param><decl><type><name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Run the pre-unlock hook for REPOS.  Use POOL for any temporary
   allocations.  If the hook fails, return SVN_ERR_REPOS_HOOK_FAILURE.

   PATH is the path being unlocked, USERNAME is the person doing it.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_repos__hooks_pre_unlock</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Run the post-unlock hook for REPOS.  Use POOL for any temporary
   allocations.  If the hook fails, return SVN_ERR_REPOS_HOOK_FAILURE.

   PATHS is an array of paths being unlocked, USERNAME is the person
   who did it.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_repos__hooks_post_unlock</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                             <param><decl><type><name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/*** Utility Functions ***/</comment>

<comment type="block">/* Set *CHANGED_P to TRUE if ROOT1/PATH1 and ROOT2/PATH2 have
   different contents, FALSE if they have the same contents.
   Use POOL for temporary allocation. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_repos__compare_files</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>changed_p</name></decl></param>,
                         <param><decl><type><name>svn_fs_root_t</name> *</type><name>root1</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl></param>,
                         <param><decl><type><name>svn_fs_root_t</name> *</type><name>root2</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *PREV_PATH and *PREV_REV to the path and revision which
   represent the location at which PATH in FS was located immediately
   prior to REVISION iff there was a copy operation (to PATH or one of
   its parent directories) between that previous location and
   PATH@REVISION, and set *APPEARED_REV to the first revision in which
   PATH@REVISION appeared at PATH as a result of that copy operation.

   If there was no such copy operation in that portion
   of PATH's history, set *PREV_PATH to NULL, and set *PREV_REV and
   *APPEARED_REV to SVN_INVALID_REVNUM.  

   NOTE: Any of PREV_PATH, PREV_REV, and APPEARED_REV may be NULL to
   if that information is of no interest to the caller.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_repos__prev_location</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>appeared_rev</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>prev_path</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name> *</type><name>prev_rev</name></decl></param>,
                         <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_REPOS_H */</comment>
</unit>
