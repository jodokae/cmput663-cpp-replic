<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_repos/log.c"><comment type="block">/* log.c --- retrieving log messages
 *
 * ====================================================================
 * Copyright (c) 2000-2008 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repos.h"</cpp:file></cpp:include>


<escape char="0xc"/>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_check_revision_access</name><parameter_list>(<param><decl><type><name>svn_repos_revision_access_level_t</name> *</type><name>access_level</name></decl></param>,
                                <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                                <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>rev_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>found_readable</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>found_unreadable</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>

  <comment type="block">/* By default, we'll grant full read access to REVISION. */</comment>
  <expr_stmt><expr>*<name>access_level</name> = <name>svn_repos_revision_access_full</name></expr>;</expr_stmt>

  <comment type="block">/* No auth-checking function?  We're done. */</comment>
  <if>if <condition>(<expr>! <name>authz_read_func</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Fetch the changes associated with REVISION. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_paths_changed</name><argument_list>(<argument><expr>&amp;<name>changes</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* No changed paths?  We're done. */</comment>
  <if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Otherwise, we have to check the readability of each changed
     path, or at least enough to answer the question asked. */</comment>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_fs_path_change_t</name> *</type><name>change</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>change</name> = <name>val</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
                              <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
        <expr_stmt><expr><name>found_unreadable</name> = <name>TRUE</name></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name>found_readable</name> = <name>TRUE</name></expr>;</expr_stmt></else></if>

      <comment type="block">/* If we have at least one of each (readable/unreadable), we
         have our answer. */</comment>
      <if>if <condition>(<expr><name>found_readable</name> &amp;&amp; <name>found_unreadable</name></expr>)</condition><then>
        <goto>goto <name>decision</name>;</goto></then></if>

      <switch>switch <condition>(<expr><name><name>change</name>-&gt;<name>change_kind</name></name></expr>)</condition>
        <block>{
        <case>case <expr><name>svn_fs_path_change_add</name></expr>:
        </case><case>case <expr><name>svn_fs_path_change_replace</name></expr>:
          <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_path</name></expr></argument>,
                                       <argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>copyfrom_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
              <block>{
                <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>copyfrom_root</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>copyfrom_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
                                             <argument><expr><name>copyfrom_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>,
                                        <argument><expr><name>copyfrom_root</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>,
                                        <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
                  <expr_stmt><expr><name>found_unreadable</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>

                <comment type="block">/* If we have at least one of each (readable/unreadable), we
                   have our answer. */</comment>
                <if>if <condition>(<expr><name>found_readable</name> &amp;&amp; <name>found_unreadable</name></expr>)</condition><then>
                  <goto>goto <name>decision</name>;</goto></then></if>
              }</block></then></if>
          }</block>
          <break>break;</break>

        </case><case>case <expr><name>svn_fs_path_change_delete</name></expr>:
        </case><case>case <expr><name>svn_fs_path_change_modify</name></expr>:
        </case><default>default:
          <break>break;</break>
        </default>}</block></switch>
    }</block></for>

 <label><name>decision</name>:</label>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Either every changed path was unreadable... */</comment>
  <if>if <condition>(<expr>! <name>found_readable</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>access_level</name> = <name>svn_repos_revision_access_none</name></expr>;</expr_stmt></then>

  <comment type="block">/* ... or some changed path was unreadable... */</comment>
  <else>else <if>if <condition>(<expr><name>found_unreadable</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>access_level</name> = <name>svn_repos_revision_access_partial</name></expr>;</expr_stmt></then></if></else></if>

  <comment type="block">/* ... or every changed path was readable (the default). */</comment>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Store as keys in CHANGED the paths of all node in ROOT that show a
 * significant change.  "Significant" means that the text or
 * properties of the node were changed, or that the node was added or
 * deleted.
 *
 * The CHANGED hash set and its keys and values are allocated in POOL;
 * keys are const char * paths and values are svn_log_changed_path_t.
 *
 * If optional AUTHZ_READ_FUNC is non-NULL, then use it (with
 * AUTHZ_READ_BATON and FS) to check whether each changed-path (and
 * copyfrom_path) is readable:
 *
 *     - If some paths are readable and some are not, then silently
 *     omit the unreadable paths from the CHANGED hash, and return
 *     SVN_ERR_AUTHZ_PARTIALLY_READABLE.
 *
 *     - If absolutely every changed-path (and copyfrom_path) is
 *     unreadable, then return an empty CHANGED hash and
 *     SVN_ERR_AUTHZ_UNREADABLE.  (This is to distinguish a revision
 *     which truly has no changed paths from a revision in which all
 *     paths are unreadable.)
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>detect_changed</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>changed</name></decl></param>,
               <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
               <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
               <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>found_readable</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>found_unreadable</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>changed</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_paths_changed</name><argument_list>(<argument><expr>&amp;<name>changes</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <comment type="block">/* No paths changed in this revision?  Uh, sure, I guess the
       revision is readable, then.  */</comment>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <comment type="block">/* NOTE:  Much of this loop is going to look quite similar to
         svn_repos_check_revision_access(), but we have to do more things
         here, so we'll live with the duplication. */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_fs_path_change_t</name> *</type><name>change</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name>action</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_log_changed_path_t</name> *</type><name>item</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* KEY will be the path, VAL the change. */</comment>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>path</name> = (const <name>char</name> *) <name>key</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>change</name> = <name>val</name></expr>;</expr_stmt>

      <comment type="block">/* Skip path if unreadable. */</comment>
      <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>,
                                  <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                  <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>found_unreadable</name> = <name>TRUE</name></expr>;</expr_stmt>
              <continue>continue;</continue>
            }</block></then></if>
        }</block></then></if>

      <comment type="block">/* At least one changed-path was readable. */</comment>
      <expr_stmt><expr><name>found_readable</name> = <name>TRUE</name></expr>;</expr_stmt>

      <switch>switch <condition>(<expr><name><name>change</name>-&gt;<name>change_kind</name></name></expr>)</condition>
        <block>{
        <case>case <expr><name>svn_fs_path_change_reset</name></expr>:
          <continue>continue;</continue>

        </case><case>case <expr><name>svn_fs_path_change_add</name></expr>:
          <expr_stmt><expr><name>action</name> = 'A'</expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_fs_path_change_replace</name></expr>:
          <expr_stmt><expr><name>action</name> = 'R'</expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_fs_path_change_delete</name></expr>:
          <expr_stmt><expr><name>action</name> = 'D'</expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_fs_path_change_modify</name></expr>:
        </case><default>default:
          <expr_stmt><expr><name>action</name> = 'M'</expr>;</expr_stmt>
          <break>break;</break>
        </default>}</block></switch>

      <expr_stmt><expr><name>item</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>item</name>-&gt;<name>action</name></name> = <name>action</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>item</name>-&gt;<name>copyfrom_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
      <if>if <condition>(<expr>(<name>action</name> == 'A') || (<name>action</name> == 'R')</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_path</name></expr></argument>,
                                     <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>copyfrom_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

              <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
                <block>{
                  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>copyfrom_root</name></decl>;</decl_stmt>

                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>copyfrom_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
                                               <argument><expr><name>copyfrom_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>,
                                          <argument><expr><name>copyfrom_root</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>,
                                          <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
                    <expr_stmt><expr><name>found_unreadable</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
                }</block></then></if>

              <if>if <condition>(<expr><name>readable</name></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><name><name>item</name>-&gt;<name>copyfrom_path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name><name>item</name>-&gt;<name>copyfrom_rev</name></name> = <name>copyfrom_rev</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>changed</name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <name>found_readable</name></expr>)</condition><then>
    <comment type="block">/* Every changed-path was unreadable. */</comment>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_AUTHZ_UNREADABLE</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><name>found_unreadable</name></expr>)</condition><then>
    <comment type="block">/* At least one changed-path was unreadable. */</comment>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_AUTHZ_PARTIALLY_READABLE</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Every changed-path was readable. */</comment>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* This is used by svn_repos_get_logs to keep track of multiple
 * path history information while working through history.
 *
 * The two pools are swapped after each iteration through history because
 * to get the next history requires the previous one.
 */</comment>
<struct>struct <name>path_info</name>
<block>{
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>history_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>first_time</name></decl>;</decl_stmt>

  <comment type="block">/* If possible, we like to keep open the history object for each path,
     since it avoids needed to open and close it many times as we walk
     backwards in time.  To do so we need two pools, so that we can clear
     one each time through.  If we're not holding the history open for
     this path then these three pointers will be NULL. */</comment>
  <decl_stmt><decl><type><name>svn_fs_history_t</name> *</type><name>hist</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>newpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>oldpool</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Advance to the next history for the path.
 *
 * If INFO-&gt;HIST is not NULL we do this using that existing history object,
 * otherwise we open a new one.
 *
 * If no more history is available or the history revision is less
 * (earlier) than START, or the history is not available due
 * to authorization, then INFO-&gt;DONE is set to TRUE.
 *
 * A STRICT value of FALSE will indicate to follow history across copied
 * paths.
 *
 * If optional AUTHZ_READ_FUNC is non-NULL, then use it (with
 * AUTHZ_READ_BATON and FS) to check whether INFO-&gt;PATH is still readable if
 * we do indeed find more history for the path.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_history</name><parameter_list>(<param><decl><type>struct <name>path_info</name> *</type><name>info</name></decl></param>,
            <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
            <param><decl><type><name>svn_boolean_t</name></type> <name>strict</name></decl></param>,
            <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
            <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>history_root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_history_t</name> *</type><name>hist</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>hist</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>subpool</name> = <name><name>info</name>-&gt;<name>newpool</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>hist</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>hist</name></name></expr></argument>,
                                  <argument><expr><name>strict</name> ? <name>FALSE</name> : <name>TRUE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>hist</name> = <name><name>info</name>-&gt;<name>hist</name></name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Open the history located at the last rev we were at. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>history_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>history_rev</name></name></expr></argument>,
                                   <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_history</name><argument_list>(<argument><expr>&amp;<name>hist</name></expr></argument>, <argument><expr><name>history_root</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>path</name>-&gt;<name>data</name></name></expr></argument>,
                                  <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name>hist</name></expr></argument>, <argument><expr><name>hist</name></expr></argument>, <argument><expr><name>strict</name> ? <name>FALSE</name> : <name>TRUE</name></expr></argument>,
                                  <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>first_time</name></name></expr>)</condition><then>
        <expr_stmt><expr><name><name>info</name>-&gt;<name>first_time</name></name> = <name>FALSE</name></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name>hist</name></expr></argument>, <argument><expr><name>hist</name></expr></argument>, <argument><expr><name>strict</name> ? <name>FALSE</name> : <name>TRUE</name></expr></argument>,
                                    <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></else></if>

  <if>if <condition>(<expr>! <name>hist</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>oldpool</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>oldpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Fetch the location information for this history step. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_location</name><argument_list>(<argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>history_rev</name></name></expr></argument>,
                                  <argument><expr><name>hist</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If this history item predates our START revision then
     don't fetch any more for this path. */</comment>
  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>history_rev</name></name> &lt; <name>start</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>oldpool</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>oldpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Is the history item readable?  If not, done with path. */</comment>
  <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>history_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
                                   <argument><expr><name><name>info</name>-&gt;<name>history_rev</name></name></expr></argument>,
                                   <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>history_root</name></expr></argument>,
                              <argument><expr><name><name>info</name>-&gt;<name>path</name>-&gt;<name>data</name></name></expr></argument>,
                              <argument><expr><name>authz_read_baton</name></expr></argument>,
                              <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>info</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <if>if <condition>(<expr>! <name><name>info</name>-&gt;<name>hist</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>temppool</name> <init>= <expr><name><name>info</name>-&gt;<name>oldpool</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>oldpool</name></name> = <name><name>info</name>-&gt;<name>newpool</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>temppool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>newpool</name></name> = <name>temppool</name></expr>;</expr_stmt>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Set INFO-&gt;HIST to the next history for the path *if* there is history
 * available and INFO-&gt;HISTORY_REV is equal to or greater than CURRENT.
 *
 * *CHANGED is set to TRUE if the path has history in the CURRENT revision,
 * otherwise it is not touched.
 *
 * If we do need to get the next history revision for the path, call
 * get_history to do it -- see it for details.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_history</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>changed</name></decl></param>,
              <param><decl><type>struct <name>path_info</name> *</type><name>info</name></decl></param>,
              <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
              <param><decl><type><name>svn_revnum_t</name></type> <name>current</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>strict</name></decl></param>,
              <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
              <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* If we're already done with histories for this path,
     don't try to fetch any more. */</comment>
  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>done</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* If the last rev we got for this path is less than CURRENT,
     then just return and don't fetch history for this path.
     The caller will get to this rev eventually or else reach
     the limit. */</comment>
  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>history_rev</name></name> &lt; <name>current</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* If the last rev we got for this path is equal to CURRENT
     then set *CHANGED to true and get the next history
     rev where this path was changed. */</comment>
  <expr_stmt><expr>*<name>changed</name> = <name>TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_history</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
                      <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Return the next interesting revision in our list of HISTORIES. */</comment>
<function><type><specifier>static</specifier> <name>svn_revnum_t</name></type>
<name>next_history_rev</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>histories</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>next_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>histories</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type>struct <name>path_info</name> *</type><name>info</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>histories</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                             <argument>struct <expr><name>path_info</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>done</name></name></expr>)</condition><then>
        <continue>continue;</continue></then></if>
      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>history_rev</name></name> &gt; <name>next_rev</name></expr>)</condition><then>
        <expr_stmt><expr><name>next_rev</name> = <name><name>info</name>-&gt;<name>history_rev</name></name></expr>;</expr_stmt></then></if>
    }</block></for>

  <return>return <expr><name>next_rev</name></expr>;</return>
}</block></function>

<comment type="block">/* Set *DELETED_MERGEINFO_CATALOG and *ADDED_MERGEINFO_CATALOG to
   catalogs describing how mergeinfo values on paths (which are the
   keys of those catalogs) were changed in REV. */</comment>
<comment type="block">/* ### TODO: This would make a *great*, useful public function,
   ### svn_repos_fs_mergeinfo_changed()!  -- cmpilato  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fs_mergeinfo_changed</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_catalog_t</name> *</type><name>deleted_mergeinfo_catalog</name></decl></param>,
                     <param><decl><type><name>svn_mergeinfo_catalog_t</name> *</type><name>added_mergeinfo_catalog</name></decl></param>,
                     <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                     <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>

<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><name>NULL</name></expr></init>, *<name>iterpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

  <comment type="block">/* Initialize return variables. */</comment>
  <expr_stmt><expr>*<name>deleted_mergeinfo_catalog</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>added_mergeinfo_catalog</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Revision 0 has no mergeinfo and no mergeinfo changes. */</comment>
  <if>if <condition>(<expr><name>rev</name> == 0</expr>)</condition><then> 
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We're going to use the changed-paths information for REV to
     narrow down our search. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_paths_changed</name><argument_list>(<argument><expr>&amp;<name>changes</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* No changed paths?  We're done. */</comment>
  <if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Loop over changes, looking for anything that might carry an
     svn:mergeinfo change and is one of our paths of interest, or a
     child or [grand]parent directory thereof. */</comment>
  <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_fs_path_change_t</name> *</type><name>change</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changed_path</name></decl>, *<decl><type ref="prev"/><name>base_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>base_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>prev_mergeinfo_value</name> <init>= <expr><name>NULL</name></expr></init>, *<name>mergeinfo_value</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* KEY will be the path, VAL the change. */</comment>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>changed_path</name> = <name>key</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>change</name> = <name>val</name></expr>;</expr_stmt>

      <comment type="block">/* If there was no property change on this item, ignore it. */</comment>
      <if>if <condition>(<expr>! <name><name>change</name>-&gt;<name>prop_mod</name></name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <switch>switch <condition>(<expr><name><name>change</name>-&gt;<name>change_kind</name></name></expr>)</condition>
        <block>{

        <comment type="block">/* ### TODO: Can the add, replace, and modify cases be joined
           ### together to all use svn_repos__prev_location()?  The
           ### difference would be the fallback case (path/rev-1 for
           ### modifies, NULL otherwise).  -- cmpilato  */</comment>

        <comment type="block">/* If the path was added or replaced, see if it was created via
           copy.  If so, that will tell us where its previous location
           was.  If not, there's no previous location to examine.  */</comment>
        <case>case <expr><name>svn_fs_path_change_add</name></expr>:
        </case><case>case <expr><name>svn_fs_path_change_replace</name></expr>:
          <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_path</name></expr></argument>,
                                       <argument><expr><name>root</name></expr></argument>, <argument><expr><name>changed_path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>copyfrom_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
              <block>{
                <expr_stmt><expr><name>base_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>base_rev</name> = <name>copyfrom_rev</name></expr>;</expr_stmt>
              }</block></then></if>
            <break>break;</break>
          }</block>

        <comment type="block">/* If the path was merely modified, see if its previous
           location was affected by a copy which happened in this
           revision before assuming it holds the same path it did the
           previous revision. */</comment>
        </case><case>case <expr><name>svn_fs_path_change_modify</name></expr>:
          <block>{
            <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>appeared_rev</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__prev_location</name><argument_list>(<argument><expr>&amp;<name>appeared_rev</name></expr></argument>, <argument><expr>&amp;<name>base_path</name></expr></argument>, 
                                             <argument><expr>&amp;<name>base_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, 
                                             <argument><expr><name>changed_path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* If this path isn't the result of a copy that occurred
               in this revision, we can find the previous version of
               it in REV - 1 at the same path. */</comment>
            <if>if <condition>(<expr>! (<name>base_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>base_rev</name></expr></argument>)</argument_list></call> 
                   &amp;&amp; (<name>appeared_rev</name> == <name>rev</name>))</expr>)</condition><then>
              <block>{
                <expr_stmt><expr><name>base_path</name> = <name>changed_path</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>base_rev</name> = <name>rev</name> - 1</expr>;</expr_stmt>
              }</block></then></if>
            <break>break;</break>
          }</block>

        <comment type="block">/* We don't care about any of the other cases. */</comment>
        </case><case>case <expr><name>svn_fs_path_change_delete</name></expr>:
        </case><case>case <expr><name>svn_fs_path_change_reset</name></expr>:
        </case><default>default:
          <continue>continue;</continue>
        </default>}</block></switch>

      <comment type="block">/* If there was a base location, fetch its (possibly inherited)
         mergeinfo property value. */</comment>
      <if>if <condition>(<expr><name>base_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>base_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>base_root</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>query_paths</name> <init>=
            <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>base_mergeinfo</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>base_catalog</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>base_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>base_rev</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>query_paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>base_path</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>base_catalog</name></expr></argument>, <argument><expr><name>base_root</name></expr></argument>, <argument><expr><name>query_paths</name></expr></argument>,
                                       <argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                       <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>base_mergeinfo</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>base_catalog</name></expr></argument>, <argument><expr><name>base_path</name></expr></argument>,
                                        <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>base_mergeinfo</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_to_string</name><argument_list>(<argument><expr>&amp;<name>prev_mergeinfo_value</name></expr></argument>,
                                            <argument><expr><name>base_mergeinfo</name></expr></argument>,
                                            <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>

      <comment type="block">/* Now fetch the current (as of REV) mergeinfo property value. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_prop</name><argument_list>(<argument><expr>&amp;<name>mergeinfo_value</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>changed_path</name></expr></argument>,
                               <argument><expr><name>SVN_PROP_MERGEINFO</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If the old and new mergeinfo differ in any way, store the
         before and after mergeinfo values in our return hashes. */</comment>
      <if>if <condition>(<expr>(<name>prev_mergeinfo_value</name> &amp;&amp; (! <name>mergeinfo_value</name>))
          || ((! <name>prev_mergeinfo_value</name>) &amp;&amp; <name>mergeinfo_value</name>)
          || (<name>prev_mergeinfo_value</name> &amp;&amp; <name>mergeinfo_value</name> 
              &amp;&amp; (! <call><name>svn_string_compare</name><argument_list>(<argument><expr><name>mergeinfo_value</name></expr></argument>, 
                                       <argument><expr><name>prev_mergeinfo_value</name></expr></argument>)</argument_list></call>))</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>prev_mergeinfo</name> <init>= <expr><name>NULL</name></expr></init>, <name>mergeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>deleted</name></decl>, <decl><type ref="prev"/><name>added</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hash_path</name></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>mergeinfo_value</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_parse</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, 
                                        <argument><expr><name><name>mergeinfo_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <if>if <condition>(<expr><name>prev_mergeinfo_value</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_parse</name><argument_list>(<argument><expr>&amp;<name>prev_mergeinfo</name></expr></argument>, 
                                        <argument><expr><name><name>prev_mergeinfo_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_diff</name><argument_list>(<argument><expr>&amp;<name>deleted</name></expr></argument>, <argument><expr>&amp;<name>added</name></expr></argument>, <argument><expr><name>prev_mergeinfo</name></expr></argument>,
                                     <argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Toss interesting stuff into our return catalogs. */</comment>
          <expr_stmt><expr><name>hash_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>changed_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>deleted_mergeinfo_catalog</name></expr></argument>, <argument><expr><name>hash_path</name></expr></argument>,
                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>deleted</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>added_mergeinfo_catalog</name></expr></argument>, <argument><expr><name>hash_path</name></expr></argument>,
                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>added</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
  <comment type="block">/* ### UNNECESSARY ###: svn_pool_destroy(iterpool); */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Determine what (if any) mergeinfo for PATHS was modified in
   revision REV, returning the diffs as a single combined rangelist in
   *COMBINED_MERGEINFO.  Use POOL for all allocations. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_combined_mergeinfo_changes</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>combined_mergeinfo</name></decl></param>,
                               <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>added_mergeinfo_catalog</name></decl>, <decl><type ref="prev"/><name>deleted_mergeinfo_catalog</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>, *<decl><type ref="prev"/><name>iterpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Initialize return value. */</comment>
  <expr_stmt><expr>*<name>combined_mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we're asking about revision 0, there's no mergeinfo to be found. */</comment>
  <if>if <condition>(<expr><name>rev</name> == 0</expr>)</condition><then> 
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* No paths?  No mergeinfo. */</comment>
  <if>if <condition>(<expr>! <name><name>paths</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Create a work subpool and get a root for REV. */</comment>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Fetch the mergeinfo changes for REV. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fs_mergeinfo_changed</name><argument_list>(<argument><expr>&amp;<name>deleted_mergeinfo_catalog</name></expr></argument>, 
                               <argument><expr>&amp;<name>added_mergeinfo_catalog</name></expr></argument>,
                               <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check our PATHS for any changes to their inherited mergeinfo.
     (We deal with changes to mergeinfo directly *on* the paths in the
     following loop.)  */</comment>
  <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prev_path</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>appeared_rev</name></decl>, <decl><type ref="prev"/><name>prev_rev</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>prev_root</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>catalog</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>prev_mergeinfo</name></decl>, <decl><type ref="prev"/><name>mergeinfo</name></decl>, <decl><type ref="prev"/><name>deleted</name></decl>, <decl><type ref="prev"/><name>added</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>query_paths</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If this path is represented in the changed-mergeinfo hashes,
         we'll deal with it in the loop below. */</comment>
      <if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>deleted_mergeinfo_catalog</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <comment type="block">/* Figure out what path/rev to compare against.  Ignore
         not-found errors returned by the filesystem.  */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>svn_repos__prev_location</name><argument_list>(<argument><expr>&amp;<name>appeared_rev</name></expr></argument>, <argument><expr>&amp;<name>prev_path</name></expr></argument>, <argument><expr>&amp;<name>prev_rev</name></expr></argument>,
                                     <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
          <continue>continue;</continue>
        }</block></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If this path isn't the result of a copy that occurred in this
         revision, we can find the previous version of it in REV - 1
         at the same path. */</comment>
      <if>if <condition>(<expr>! (<name>prev_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>prev_rev</name></expr></argument>)</argument_list></call> 
             &amp;&amp; (<name>appeared_rev</name> == <name>rev</name>))</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>prev_path</name> = <name>path</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>prev_rev</name> = <name>rev</name> - 1</expr>;</expr_stmt>
        }</block></then></if>

      <comment type="block">/* Fetch the previous mergeinfo (including inherited stuff) for
         this path.  Ignore not-found errors returned by the
         filesystem.  */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>prev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>prev_rev</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>query_paths</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>query_paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>prev_path</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>svn_fs_get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>catalog</name></expr></argument>, <argument><expr><name>prev_root</name></expr></argument>, <argument><expr><name>query_paths</name></expr></argument>,
                                 <argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
      <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
          <continue>continue;</continue>
        }</block></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>prev_mergeinfo</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>prev_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Fetch the current mergeinfo (as of REV, and including
         inherited stuff) for this path. */</comment>
      <expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>query_paths</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>path</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>catalog</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>query_paths</name></expr></argument>,
                                   <argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>mergeinfo</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Compare, constrast, and combine the results. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_diff</name><argument_list>(<argument><expr>&amp;<name>deleted</name></expr></argument>, <argument><expr>&amp;<name>added</name></expr></argument>, <argument><expr><name>prev_mergeinfo</name></expr></argument>,
                                 <argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>mergeinfo</name> = <name>deleted</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>added</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr>*<name>combined_mergeinfo</name></expr></argument>, 
                                  <argument><expr><call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Merge all the mergeinfos which are, or are children of, one or
     our paths of interest into one giant delta mergeinfo.  */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>added_mergeinfo_catalog</name></expr></argument>)</argument_list></call></expr>;</init>
       <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changed_path</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>added_mergeinfo</name></decl>, <decl><type ref="prev"/><name>deleted_mergeinfo</name></decl>;</decl_stmt>

      <comment type="block">/* The path is the key, the mergeinfo delta is the value. */</comment>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>changed_path</name> = <name>key</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>added_mergeinfo</name> = <name>val</name></expr>;</expr_stmt>

      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr>! <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>changed_path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <continue>continue;</continue></then></if>
          <expr_stmt><expr><name>deleted_mergeinfo</name> = 
            <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>deleted_mergeinfo_catalog</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr>*<name>combined_mergeinfo</name></expr></argument>,
                                      <argument><expr><call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>deleted_mergeinfo</name></expr></argument>,
                                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr>*<name>combined_mergeinfo</name></expr></argument>,
                                      <argument><expr><call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>added_mergeinfo</name></expr></argument>, 
                                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        }</block></for>
    }</block></for>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Fill LOG_ENTRY with history information in FS at REV. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fill_log_entry</name><parameter_list>(<param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>,
               <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
               <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
               <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>r_props</name></decl>, *<decl><type ref="prev"/><name>changed_paths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>get_revprops</name> <init>= <expr><name>TRUE</name></expr></init>, <name>censor_revprops</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Discover changed paths if the user requested them
     or if we need to check that they are readable. */</comment>
  <if>if <condition>(<expr>(<name>rev</name> &gt; 0)
      &amp;&amp; (<name>authz_read_func</name> || <name>discover_changed_paths</name>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>newroot</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>patherr</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>newroot</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>patherr</name> = <call><name>detect_changed</name><argument_list>(<argument><expr>&amp;<name>changed_paths</name></expr></argument>,
                               <argument><expr><name>newroot</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
                               <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>patherr</name>
          &amp;&amp; <name><name>patherr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_AUTHZ_UNREADABLE</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* All changed-paths are unreadable, so clear all fields. */</comment>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>patherr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>changed_paths</name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>get_revprops</name> = <name>FALSE</name></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>patherr</name>
               &amp;&amp; <name><name>patherr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_AUTHZ_PARTIALLY_READABLE</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* At least one changed-path was unreadable, so censor all
             but author and date.  (The unreadable paths are already
             missing from the hash.) */</comment>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>patherr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>censor_revprops</name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>patherr</name></expr>)</condition><then>
        <return>return <expr><name>patherr</name></expr>;</return></then></if></else></if></else></if>

      <comment type="block">/* It may be the case that an authz func was passed in, but
         the user still doesn't want to see any changed-paths. */</comment>
      <if>if <condition>(<expr>! <name>discover_changed_paths</name></expr>)</condition><then>
        <expr_stmt><expr><name>changed_paths</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name>get_revprops</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* User is allowed to see at least some revprops. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_proplist</name><argument_list>(<argument><expr>&amp;<name>r_props</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>revprops</name> == <name>NULL</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Requested all revprops... */</comment>
          <if>if <condition>(<expr><name>censor_revprops</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* ... but we can only return author/date. */</comment>
              <expr_stmt><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                           <argument><expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>r_props</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
                                        <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                           <argument><expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>r_props</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
                                        <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <comment type="block">/* ... so return all we got. */</comment>
            <expr_stmt><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name> = <name>r_props</name></expr>;</expr_stmt></else></if>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* Requested only some revprops... */</comment>
          <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
          <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>revprops</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
              <decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>r_props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                                 <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if>if <condition>(<expr><name>censor_revprops</name>
                  &amp;&amp; !(<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>)</argument_list></call> == 0
                       || <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
                <comment type="block">/* ... but we can only return author/date. */</comment>
                <continue>continue;</continue></then></if>
              <if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>revprops</name></name> == <name>NULL</name></expr>)</condition><then>
                <expr_stmt><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>
    }</block></then></if>

  <expr_stmt><expr><name><name>log_entry</name>-&gt;<name>changed_paths</name></name> = <name>changed_paths</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>log_entry</name>-&gt;<name>revision</name></name> = <name>rev</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Send a log message for REV to RECEIVER with its RECEIVER_BATON.
 *
 * FS is used with REV to fetch the interesting history information,
 * such as changed paths, revprops, etc.
 *
 * The detect_changed function is used if either AUTHZ_READ_FUNC is
 * not NULL, or if DISCOVER_CHANGED_PATHS is TRUE.  See it for details.
 *
 * If DESCENDING_ORDER is true, send child messages in descending order.
 *
 * If REVPROPS is NULL, retrieve all revprops; else, retrieve only the
 * revprops named in the array (i.e. retrieve none if the array is empty).
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>send_log</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
         <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
         <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>has_children</name></decl></param>,
         <param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
         <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
         <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
         <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>log_entry</name> = <call><name>svn_log_entry_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fill_log_entry</name><argument_list>(<argument><expr><name>log_entry</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>discover_changed_paths</name></expr></argument>,
                         <argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
                         <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>log_entry</name>-&gt;<name>has_children</name></name> = <name>has_children</name></expr>;</expr_stmt>

  <comment type="block">/* Send the entry to the receiver. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name>receiver</name>)<argument_list>(<argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>log_entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* This controls how many history objects we keep open.  For any targets
   over this number we have to open and close their histories as needed,
   which is CPU intensive, but keeps us from using an unbounded amount of
   memory. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OPEN_HISTORIES</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<comment type="block">/* Get the histories for PATHS, and store them in *HISTORIES. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_path_histories</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>histories</name></decl></param>,
                   <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                   <param><decl><type><name>svn_revnum_t</name></type> <name>hist_start</name></decl></param>,
                   <param><decl><type><name>svn_revnum_t</name></type> <name>hist_end</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
                   <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                   <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Create a history object for each path so we can walk through
     them all at the same time until we have all changes or LIMIT
     is reached.

     There is some pool fun going on due to the fact that we have
     to hold on to the old pool with the history before we can
     get the next history.
  */</comment>
  <expr_stmt><expr>*<name>histories</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>paths</name>-&gt;<name>nelts</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_info</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>hist_end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this_path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type>struct <name>path_info</name> *</type><name>info</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                          <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>,
                                  <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_AUTHZ_UNREADABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></then></if>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>path</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>history_rev</name></name> = <name>hist_end</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>first_time</name></name> = <name>TRUE</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>i</name> &lt; <name>MAX_OPEN_HISTORIES</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_history</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>hist</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>newpool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>oldpool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name><name>info</name>-&gt;<name>hist</name></name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>oldpool</name></name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>newpool</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_history</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
                          <argument><expr><name>strict_node_history</name></expr></argument>,
                          <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
                          <argument><expr><name>hist_start</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>histories</name></expr></argument>, <argument>struct <expr><name>path_info</name> *</expr></argument>)</argument_list></call> = <name>info</name></expr>;</expr_stmt>
    }</block></for>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Remove and return the first item from ARR. */</comment>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>array_pop_front</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>arr</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>void</name> *</type><name>item</name> <init>= <expr><name><name>arr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <expr_stmt><expr><name><name>arr</name>-&gt;<name>elts</name></name> += <name><name>arr</name>-&gt;<name>elt_size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>arr</name>-&gt;<name>nelts</name></name> -= 1</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>arr</name>-&gt;<name>nalloc</name></name> -= 1</expr>;</expr_stmt>
  <return>return <expr><name>item</name></expr>;</return>
}</block></function>

<comment type="block">/* A struct which represents a single revision range, and the paths which
   have mergeinfo in that range. */</comment>
<struct>struct <name>path_list_range</name>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>paths</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_merge_range_t</name></type> <name>range</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* A struct which represents "inverse mergeinfo", that is, instead of having
   a path-&gt;revision_range_list mapping, which is the way mergeinfo is commonly
   represented, this struct enables a revision_range_list,path tuple, where
   the paths can be accessed by revision. */</comment>
<struct>struct <name>rangelist_path</name>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Comparator function for combine_mergeinfo_path_lists().  Sorts 
   rangelist_path structs in increasing order based upon starting revision,
   then ending revision of the first element in the rangelist. 
   
   This does not sort rangelists based upon subsequent elements, only the
   first range.  We'll sort any subsequent ranges in the correct order
   when they get bumped up to the front by removal of earlier ones, so we
   don't really have to sort them here.  See combine_mergeinfo_path_lists()
   for details. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_rangelist_paths</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>rangelist_path</name> *</type><name>rpa</name> <init>= <expr>*((struct <name>rangelist_path</name> **) <name>a</name>)</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>rangelist_path</name> *</type><name>rpb</name> <init>= <expr>*((struct <name>rangelist_path</name> **) <name>b</name>)</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>mra</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rpa</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                         <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>mrb</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rpb</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                         <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>mra</name>-&gt;<name>start</name></name> &lt; <name><name>mrb</name>-&gt;<name>start</name></name></expr>)</condition><then>
    <return>return <expr>-1</expr>;</return></then></if>
  <if>if <condition>(<expr><name><name>mra</name>-&gt;<name>start</name></name> &gt; <name><name>mrb</name>-&gt;<name>start</name></name></expr>)</condition><then>
    <return>return <expr>1</expr>;</return></then></if>
  <if>if <condition>(<expr><name><name>mra</name>-&gt;<name>end</name></name> &lt; <name><name>mrb</name>-&gt;<name>end</name></name></expr>)</condition><then>
    <return>return <expr>-1</expr>;</return></then></if>
  <if>if <condition>(<expr><name><name>mra</name>-&gt;<name>end</name></name> &gt; <name><name>mrb</name>-&gt;<name>end</name></name></expr>)</condition><then>
    <return>return <expr>1</expr>;</return></then></if>

  <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/* From MERGEINFO, return in *COMBINED_LIST, allocated in POOL, a list of
   'struct path_list_range's.  This list represents the rangelists in
   MERGEINFO and each path which has mergeinfo in that range.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>combine_mergeinfo_path_lists</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>combined_list</name></decl></param>,
                             <param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist_paths</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Create a list of (revision range, path) tuples from MERGEINFO. */</comment>
  <expr_stmt><expr><name>rangelist_paths</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
       <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type>struct <name>rangelist_path</name> *</type><name>rp</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name><name>rp</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                    <argument><expr>(<name>void</name> *) &amp;<name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call> = <name>rp</name></expr>;</expr_stmt>

      <comment type="block">/* We need to make local copies of the rangelist, since we will be
         modifying it, below. */</comment>
      <expr_stmt><expr><name><name>rp</name>-&gt;<name>rangelist</name></name> = <call><name>svn_rangelist_dup</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Make all of the rangelists inclusive, both start and end. */</comment>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>rp</name>-&gt;<name>rangelist</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>start</name> += 1</expr>;</expr_stmt></for>
    }</block></for>

  <comment type="block">/* Loop over the (revision range, path) tuples, chopping them into
     (revision range, paths) tuples, and appending those to the output
     list. */</comment>
  <expr_stmt><expr>*<name>combined_list</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_list_range</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>rangelist_paths</name>-&gt;<name>nelts</name></name> &gt; 1</expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest</name></decl>, <decl><type ref="prev"/><name>next_youngest</name></decl>, <decl><type ref="prev"/><name>tail</name></decl>, <decl><type ref="prev"/><name>youngest_end</name></decl>;</decl_stmt>
      <decl_stmt><decl><type>struct <name>path_list_range</name> *</type><name>plr</name></decl>;</decl_stmt>
      <decl_stmt><decl><type>struct <name>rangelist_path</name> *</type><name>rp</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>num_revs</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

      <comment type="block">/* First, sort the list such that the start revision of the first
         revision arrays are sorted. */</comment>
      <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>rangelist_paths</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>rangelist_paths</name>-&gt;<name>nelts</name></name></expr></argument>,
            <argument><expr><name><name>rangelist_paths</name>-&gt;<name>elt_size</name></name></expr></argument>, <argument><expr><name>compare_rangelist_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Next, find the number of revision ranges which start with the same
         revision. */</comment>
      <expr_stmt><expr><name>rp</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument><expr>0</expr></argument>, <argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>youngest</name> =
        <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument>struct <expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>start</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>next_youngest</name> = <name>youngest</name></expr>;</expr_stmt>
      <for>for (<init><expr><name>num_revs</name> = 1</expr>;</init> <condition><expr><name>next_youngest</name> == <name>youngest</name></expr>;</condition> <incr><expr><name>num_revs</name>++</expr></incr>)
        <block>{
          <if>if <condition>(<expr><name>num_revs</name> == <name><name>rangelist_paths</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>num_revs</name> += 1</expr>;</expr_stmt>
              <break>break;</break>
            }</block></then></if>
          <expr_stmt><expr><name>rp</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument><expr><name>num_revs</name></expr></argument>,
                             <argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>next_youngest</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr>0</expr></argument>, 
                                        <argument>struct <expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>start</name></expr>;</expr_stmt>
        }</block></for>
      <expr_stmt><expr><name>num_revs</name> -= 1</expr>;</expr_stmt>

      <comment type="block">/* The start of the new range will be YOUNGEST, and we now find the end
         of the new range, which should be either one less than the next 
         earliest start of a rangelist, or the end of the first rangelist. */</comment>
      <expr_stmt><expr><name>youngest_end</name> = 
        <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument><expr>0</expr></argument>,
                                    <argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call>-&gt;<name>rangelist</name></expr></argument>,
                      <argument><expr>0</expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>end</name></expr>;</expr_stmt>
      <if>if <condition>( <expr>(<name>next_youngest</name> == <name>youngest</name>) || (<name>youngest_end</name> &lt; <name>next_youngest</name>)</expr> )</condition><then>
        <expr_stmt><expr><name>tail</name> = <name>youngest_end</name></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name>tail</name> = <name>next_youngest</name> - 1</expr>;</expr_stmt></else></if>

      <comment type="block">/* Insert the (earliest, tail) tuple into the output list, along with
         a list of paths which match it. */</comment>
      <expr_stmt><expr><name>plr</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>plr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>plr</name>-&gt;<name>range</name>.<name>start</name></name> = <name>youngest</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>plr</name>-&gt;<name>range</name>.<name>end</name></name> = <name>tail</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>plr</name>-&gt;<name>paths</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>num_revs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_revs</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>plr</name>-&gt;<name>paths</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = 
          <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call>-&gt;<name>path</name></expr>;</expr_stmt></for>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>combined_list</name></expr></argument>, <argument>struct <expr><name>path_list_range</name> *</expr></argument>)</argument_list></call> = <name>plr</name></expr>;</expr_stmt>

      <comment type="block">/* Now, check to see which (rangelist path) combinations we can remove,
         and do so. */</comment>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_revs</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>rp</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>range</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Set the start of the range to beyond the end of the range we
             just built.  If the range is now "inverted", we can get pop it
             off the list. */</comment>
          <expr_stmt><expr><name><name>range</name>-&gt;<name>start</name></name> = <name>tail</name> + 1</expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>range</name>-&gt;<name>start</name></name> &gt; <name><name>range</name>-&gt;<name>end</name></name></expr>)</condition><then>
            <block>{
              <if>if <condition>(<expr><name><name>rp</name>-&gt;<name>rangelist</name>-&gt;<name>nelts</name></name> == 1</expr>)</condition><then>
                <block>{
                  <comment type="block">/* The range is the only on its list, so we should remove
                     the entire rangelist_path, adjusting our loop control
                     variables appropriately. */</comment>
                  <expr_stmt><expr><call><name>array_pop_front</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>i</name>--</expr>;</expr_stmt>
                  <expr_stmt><expr><name>num_revs</name>--</expr>;</expr_stmt>
                }</block></then>
              <else>else
                <block>{
                  <comment type="block">/* We have more than one range on the list, so just remove
                     the first one. */</comment>
                  <expr_stmt><expr><call><name>array_pop_front</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></for>
    }</block></while>

  <comment type="block">/* Finally, add the last remaining (revision range, path) to the output
     list. */</comment>
  <if>if <condition>(<expr><name><name>rangelist_paths</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type>struct <name>rangelist_path</name> *</type><name>first_rp</name> <init>= 
        <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument><expr>0</expr></argument>, <argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name><name>first_rp</name>-&gt;<name>rangelist</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition>
        <block>{
          <decl_stmt><decl><type>struct <name>path_list_range</name> *</type><name>plr</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>plr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name><name>plr</name>-&gt;<name>paths</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>plr</name>-&gt;<name>paths</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name><name>first_rp</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>plr</name>-&gt;<name>range</name></name> = *<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>first_rp</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                      <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>array_pop_front</name><argument_list>(<argument><expr><name><name>first_rp</name>-&gt;<name>rangelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>combined_list</name></expr></argument>, <argument>struct <expr><name>path_list_range</name> *</expr></argument>)</argument_list></call> = <name>plr</name></expr>;</expr_stmt>
        }</block></while>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Pity that C is so ... linear. */</comment>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>do_logs</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>hist_start</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>hist_end</name></decl></param>,
                            <param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>descending_order</name></decl></param>,
                            <param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                            <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Examine the combined mergeinfo for revision REV in FS (as collected
   by examining paths of interest to a log operation), and determine
   which revisions to report as having been merged via the commit
   resulting in REV.

   Other parameters are as described by do_logs(), around which this
   is a recursion wrapper. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>handle_merged_revisions</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                        <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                        <param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
                        <param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                        <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>combined_list</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_log_entry_t</name> *</type><name>empty_log_entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>combine_mergeinfo_path_lists</name><argument_list>(<argument><expr>&amp;<name>combined_list</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Because the combined_lists are ordered youngest to oldest,
     iterate over them in reverse. */</comment>
  <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = <name><name>combined_list</name>-&gt;<name>nelts</name></name> - 1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
      <decl_stmt><decl><type>struct <name>path_list_range</name> *</type><name>pl_range</name> 
        <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>combined_list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument>struct <expr><name>path_list_range</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>do_logs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>pl_range</name>-&gt;<name>paths</name></name></expr></argument>, <argument><expr><name><name>pl_range</name>-&gt;<name>range</name>.<name>start</name></name></expr></argument>, 
                    <argument><expr><name><name>pl_range</name>-&gt;<name>range</name>.<name>end</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>discover_changed_paths</name></expr></argument>,
                    <argument><expr><name>strict_node_history</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                    <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>, 
                    <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name> ||
                  <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NO_SUCH_REVISION</name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        }</block></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Send the empty revision.  */</comment>
  <expr_stmt><expr><name>empty_log_entry</name> = <call><name>svn_log_entry_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>empty_log_entry</name>-&gt;<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name>receiver</name>)<argument_list>(<argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>empty_log_entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Find logs for PATHS from HIST_START to HIST_END in FS, and invoke
   RECEIVER with RECEIVER_BATON on them.  If DESCENDING_ORDER is TRUE, send
   the logs back as we find them, else buffer the logs and send them back
   in youngest-&gt;oldest order.

   Other parameters are the same as svn_repos_get_logs4().
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_logs</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
        <param><decl><type><name>svn_revnum_t</name></type> <name>hist_start</name></decl></param>,
        <param><decl><type><name>svn_revnum_t</name></type> <name>hist_end</name></decl></param>,
        <param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
        <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
        <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
        <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
        <param><decl><type><name>svn_boolean_t</name></type> <name>descending_order</name></decl></param>,
        <param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
        <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
        <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
        <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>revs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>rev_mergeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>current</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>histories</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>any_histories_left</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>send_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* We have a list of paths and a revision range.  But we don't care
     about all the revisions in the range -- only the ones in which
     one of our paths was changed.  So let's go figure out which
     revisions contain real changes to at least one of our paths.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_path_histories</name><argument_list>(<argument><expr>&amp;<name>histories</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>hist_start</name></expr></argument>, <argument><expr><name>hist_end</name></expr></argument>,
                             <argument><expr><name>strict_node_history</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>, 
                             <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Loop through all the revisions in the range and add any
     where a path was changed to the array, or if they wanted
     history in reverse order just send it to them right away. */</comment>
  <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>current</name> = <name>hist_end</name></expr>;</init> 
       <condition><expr><name>any_histories_left</name></expr>;</condition>
       <incr><expr><name>current</name> = <call><name>next_history_rev</name><argument_list>(<argument><expr><name>histories</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>any_histories_left</name> = <name>FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>histories</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type>struct <name>path_info</name> *</type><name>info</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>histories</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                 <argument>struct <expr><name>path_info</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <comment type="block">/* Check history for this path in current rev. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_history</name><argument_list>(<argument><expr>&amp;<name>changed</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>current</name></expr></argument>,
                                <argument><expr><name>strict_node_history</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>, 
                                <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>hist_start</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! <name><name>info</name>-&gt;<name>done</name></name></expr>)</condition><then>
            <expr_stmt><expr><name>any_histories_left</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
        }</block></for>

      <comment type="block">/* If any of the paths changed in this rev then add or send it. */</comment>
      <if>if <condition>(<expr><name>changed</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_children</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

          <comment type="block">/* If we're including merged revisions, we need to calculate
             the mergeinfo deltas committed in this revision to our
             various paths. */</comment>
          <if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>cur_paths</name> <init>= 
                <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr><name><name>paths</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <comment type="block">/* Get the current paths of our history objects so we can
                 query mergeinfo. */</comment>
              <comment type="block">/* ### TODO: Should this be ignoring depleted history items? */</comment>
              <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>histories</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <block>{
                  <decl_stmt><decl><type>struct <name>path_info</name> *</type><name>info</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>histories</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                         <argument>struct <expr><name>path_info</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>cur_paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name><name>info</name>-&gt;<name>path</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
                }</block></for>
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_combined_mergeinfo_changes</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>cur_paths</name></expr></argument>,
                                                     <argument><expr><name>current</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>has_children</name> = (<call><name>apr_hash_count</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call> &gt; 0)</expr>;</expr_stmt>
            }</block></then></if>

          <comment type="block">/* If our caller wants logs in descending order, we can send
             'em now (because that's the order we're crawling history
             in anyway). */</comment>
          <if>if <condition>(<expr><name>descending_order</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_log</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>discover_changed_paths</name></expr></argument>,
                               <argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>has_children</name></expr></argument>, <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
                               <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>has_children</name></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_merged_revisions</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>,
                                                  <argument><expr><name>discover_changed_paths</name></expr></argument>,
                                                  <argument><expr><name>strict_node_history</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>,
                                                  <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
                                                  <argument><expr><name>authz_read_func</name></expr></argument>, 
                                                  <argument><expr><name>authz_read_baton</name></expr></argument>,
                                                  <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
              <if>if <condition>(<expr><name>limit</name> &amp;&amp; ++<name>send_count</name> &gt;= <name>limit</name></expr>)</condition><then>
                <break>break;</break></then></if>
            }</block></then>
          <comment type="block">/* Otherwise, the caller wanted logs in ascending order, so
             we have to buffer up a list of revs and (if doing
             mergeinfo) a hash of related mergeinfo deltas, and
             process them later. */</comment>
          <else>else
            <block>{
              <if>if <condition>(<expr>! <name>revs</name></expr>)</condition><then>
                <expr_stmt><expr><name>revs</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>64</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
              <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call> = <name>current</name></expr>;</expr_stmt>

              <if>if <condition>(<expr><name>mergeinfo</name></expr>)</condition><then>
                <block>{
                  <decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>cur_rev</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cur_rev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr>*<name>cur_rev</name> = <name>current</name></expr>;</expr_stmt>
                  <if>if <condition>(<expr>! <name>rev_mergeinfo</name></expr>)</condition><then>
                    <expr_stmt><expr><name>rev_mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>rev_mergeinfo</name></expr></argument>, <argument><expr><name>cur_rev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cur_rev</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
                               <argument><expr><call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></then></if>
    }</block></for>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>revs</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Work loop for processing the revisions we found since they wanted
         history in forward order. */</comment>
      <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>revs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_children</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>current</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>revs</name>-&gt;<name>nelts</name></name> - <name>i</name> - 1</expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* If we've got a hash of revision mergeinfo (which can only
             happen if INCLUDE_MERGED_REVISIONS was set), we check to
             see if this revision is one which merged in other
             revisions we need to handle recursively. */</comment>
          <if>if <condition>(<expr><name>rev_mergeinfo</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>mergeinfo</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>rev_mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>current</name></expr></argument>, 
                                       <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>          
              <expr_stmt><expr><name>has_children</name> = (<call><name>apr_hash_count</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call> &gt; 0)</expr>;</expr_stmt>
            }</block></then></if>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_log</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, 
                           <argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>has_children</name></expr></argument>,
                           <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
                           <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>has_children</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_merged_revisions</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>,
                                              <argument><expr><name>discover_changed_paths</name></expr></argument>,
                                              <argument><expr><name>strict_node_history</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>, 
                                              <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
                                              <argument><expr><name>authz_read_func</name></expr></argument>, 
                                              <argument><expr><name>authz_read_baton</name></expr></argument>,
                                              <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          <if>if <condition>(<expr><name>limit</name> &amp;&amp; <name>i</name> + 1 &gt;= <name>limit</name></expr>)</condition><then>
            <break>break;</break></then></if>
        }</block></for>
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_logs4</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                    <param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
                    <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                    <param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>head</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>descending_order</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>hist_start</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>hist_end</name> <init>= <expr><name>end</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Setup log range. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>head</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name>start</name> = <name>head</name></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name>end</name> = <name>head</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Check that revisions are sane before ever invoking receiver. */</comment>
  <if>if <condition>(<expr><name>start</name> &gt; <name>head</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"No such revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <if>if <condition>(<expr><name>end</name> &gt; <name>head</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"No such revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><name>descending_order</name> = <name>start</name> &gt;= <name>end</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>descending_order</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>hist_start</name> = <name>end</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>hist_end</name> = <name>start</name></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr>! <name>paths</name></expr>)</condition><then>
    <expr_stmt><expr><name>paths</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* If we're not including merged revisions, and we were given no
     paths or a single empty (or "/") path, then we can bypass a bunch
     of complexity because we already know in which revisions the root
     directory was changed -- all of them.  */</comment>
  <if>if <condition>(<expr>(! <name>include_merged_revisions</name>)
      &amp;&amp; ((! <name><name>paths</name>-&gt;<name>nelts</name></name>)
          || ((<name><name>paths</name>-&gt;<name>nelts</name></name> == 1)
              &amp;&amp; (<call><name>svn_path_is_empty</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> 
                  || (<call><name>strcmp</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>, 
                             <argument><expr>"/"</expr></argument>)</argument_list></call> == 0))))</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>send_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>send_count</name> = <name>hist_end</name> - <name>hist_start</name> + 1</expr>;</expr_stmt>
      <if>if <condition>(<expr><name>limit</name> &amp;&amp; <name>send_count</name> &gt; <name>limit</name></expr>)</condition><then>
        <expr_stmt><expr><name>send_count</name> = <name>limit</name></expr>;</expr_stmt></then></if>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>send_count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr><name>hist_start</name> + <name>i</name></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>descending_order</name></expr>)</condition><then>
            <expr_stmt><expr><name>rev</name> = <name>hist_end</name> - <name>i</name></expr>;</expr_stmt></then></if>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_log</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                           <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
                           <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <return>return <expr><call><name>do_logs</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>hist_start</name></expr></argument>, <argument><expr><name>hist_end</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>,
                 <argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>,
                 <argument><expr><name>include_merged_revisions</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>descending_order</name></expr></argument>, 
                 <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
                 <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_logs3</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                    <param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
                    <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                    <param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>receiver2_baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_compat_wrap_log_receiver</name><argument_list>(<argument><expr>&amp;<name>receiver2</name></expr></argument>, <argument><expr>&amp;<name>receiver2_baton</name></expr></argument>,
                               <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_repos_get_logs4</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>,
                             <argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>,
                             <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>svn_compat_log_revprops_in</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
                             <argument><expr><name>receiver2</name></expr></argument>, <argument><expr><name>receiver2_baton</name></expr></argument>,
                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_logs2</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
                    <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                    <param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_repos_get_logs3</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>,
                             <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>receiver</name></expr></argument>,
                             <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_logs</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                   <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                   <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
                   <param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
                   <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_repos_get_logs3</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>,
                             <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* no authz stuff */</comment>
                             <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
