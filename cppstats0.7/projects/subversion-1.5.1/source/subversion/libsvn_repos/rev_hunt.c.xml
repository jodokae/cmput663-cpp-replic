<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_repos/rev_hunt.c"><comment type="block">/* rev_hunt.c --- routines to hunt down particular fs revisions and
 *                their properties.
 *
 * ====================================================================
 * Copyright (c) 2000-2008 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repos.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/* Note:  this binary search assumes that the datestamp properties on
   each revision are in chronological order.  That is if revision A &gt;
   revision B, then A's datestamp is younger then B's datestamp.

   If someone comes along and sets a bogus datestamp, this routine
   might not work right.

   ### todo:  you know, we *could* have svn_fs_change_rev_prop() do
   some semantic checking when it's asked to change special reserved
   svn: properties.  It could prevent such a problem. */</comment>


<comment type="block">/* helper for svn_repos_dated_revision().

   Set *TM to the apr_time_t datestamp on revision REV in FS. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_time</name><parameter_list>(<param><decl><type><name>apr_time_t</name> *</type><name>tm</name></decl></param>,
         <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
         <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>date_str</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>date_str</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name>date_str</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to find time on revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name><name>date_str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_dated_revision</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl></param>,
                         <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                         <param><decl><type><name>apr_time_t</name></type> <name>tm</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev_mid</name></decl>, <decl><type ref="prev"/><name>rev_top</name></decl>, <decl><type ref="prev"/><name>rev_bot</name></decl>, <decl><type ref="prev"/><name>rev_latest</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>this_time</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Initialize top and bottom values of binary search. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>rev_latest</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rev_bot</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>rev_top</name> = <name>rev_latest</name></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>rev_bot</name> &lt;= <name>rev_top</name></expr>)</condition>
    <block>{
      <expr_stmt><expr><name>rev_mid</name> = (<name>rev_top</name> + <name>rev_bot</name>) / 2</expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_time</name><argument_list>(<argument><expr>&amp;<name>this_time</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev_mid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>this_time</name> &gt; <name>tm</name></expr>)</condition><then><comment type="block">/* we've overshot */</comment>
        <block>{
          <decl_stmt><decl><type><name>apr_time_t</name></type> <name>previous_time</name></decl>;</decl_stmt>

          <if>if <condition>(<expr>(<name>rev_mid</name> - 1) &lt; 0</expr>)</condition><then>
            <block>{
              <expr_stmt><expr>*<name>revision</name> = 0</expr>;</expr_stmt>
              <break>break;</break>
            }</block></then></if>

          <comment type="block">/* see if time falls between rev_mid and rev_mid-1: */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_time</name><argument_list>(<argument><expr>&amp;<name>previous_time</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev_mid</name> - 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>previous_time</name> &lt;= <name>tm</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr>*<name>revision</name> = <name>rev_mid</name> - 1</expr>;</expr_stmt>
              <break>break;</break>
            }</block></then></if>

          <expr_stmt><expr><name>rev_top</name> = <name>rev_mid</name> - 1</expr>;</expr_stmt>
        }</block></then>

      <else>else <if>if <condition>(<expr><name>this_time</name> &lt; <name>tm</name></expr>)</condition><then> <comment type="block">/* we've undershot */</comment>
        <block>{
          <decl_stmt><decl><type><name>apr_time_t</name></type> <name>next_time</name></decl>;</decl_stmt>

          <if>if <condition>(<expr>(<name>rev_mid</name> + 1) &gt; <name>rev_latest</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr>*<name>revision</name> = <name>rev_latest</name></expr>;</expr_stmt>
              <break>break;</break>
            }</block></then></if>

          <comment type="block">/* see if time falls between rev_mid and rev_mid+1: */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_time</name><argument_list>(<argument><expr>&amp;<name>next_time</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev_mid</name> + 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>next_time</name> &gt; <name>tm</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr>*<name>revision</name> = <name>rev_mid</name></expr>;</expr_stmt>
              <break>break;</break>
            }</block></then></if>

          <expr_stmt><expr><name>rev_bot</name> = <name>rev_mid</name> + 1</expr>;</expr_stmt>
        }</block></then>

      <else>else
        <block>{
          <expr_stmt><expr>*<name>revision</name> = <name>rev_mid</name></expr>;</expr_stmt>  <comment type="block">/* exact match! */</comment>
          <break>break;</break>
        }</block></else></if></else></if>
    }</block></while>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_committed_info</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>committed_rev</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>committed_date</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>last_author</name></decl></param>,
                             <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><call><name>svn_fs_root_fs</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* ### It might be simpler just to declare that revision
     properties have char * (i.e., UTF-8) values, not arbitrary
     binary values, hmmm. */</comment>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>committed_date_s</name></decl>, *<decl><type ref="prev"/><name>last_author_s</name></decl>;</decl_stmt>

  <comment type="block">/* Get the CR field out of the node's skel. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_created_rev</name><argument_list>(<argument><expr><name>committed_rev</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the date property of this revision. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>committed_date_s</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>*<name>committed_rev</name></expr></argument>,
                               <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the author property of this revision. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>last_author_s</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>*<name>committed_rev</name></expr></argument>,
                               <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>committed_date</name> = <name>committed_date_s</name> ? <name><name>committed_date_s</name>-&gt;<name>data</name></name> : <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>last_author</name> = <name>last_author_s</name> ? <name><name>last_author_s</name>-&gt;<name>data</name></name> : <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Deprecated. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_history</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><name>svn_repos_history_func_t</name></type> <name>history_func</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>history_baton</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>cross_copies</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_repos_history2</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>history_func</name></expr></argument>, <argument><expr><name>history_baton</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>cross_copies</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>



<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_history2</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><name>svn_repos_history_func_t</name></type> <name>history_func</name></decl></param>,
                   <param><decl><type><name>void</name> *</type><name>history_baton</name></decl></param>,
                   <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                   <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                   <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                   <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>cross_copies</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_history_t</name> *</type><name>history</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>oldpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>newpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>history_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>history_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>

  <comment type="block">/* Validate the revisions. */</comment>
  <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid start revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid end revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Ensure that the input is ordered. */</comment>
  <if>if <condition>(<expr><name>start</name> &gt; <name>end</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>tmprev</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>start</name> = <name>end</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>end</name> = <name>tmprev</name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Get a revision root for END, and an initial HISTORY baton.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                              <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_AUTHZ_UNREADABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_history</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>oldpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now, we loop over the history items, calling svn_fs_history_prev(). */</comment>
  <do>do
    <block>{
      <comment type="block">/* Note that we have to do some crazy pool work here.  We can't
         get rid of the old history until we use it to get the new, so
         we alternate back and forth between our subpools.  */</comment>
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmppool</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>history</name></expr></argument>, <argument><expr><name>cross_copies</name></expr></argument>, <argument><expr><name>newpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Only continue if there is further history to deal with. */</comment>
      <if>if <condition>(<expr>! <name>history</name></expr>)</condition><then>
        <break>break;</break></then></if>

      <comment type="block">/* Fetch the location information for this history step. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_location</name><argument_list>(<argument><expr>&amp;<name>history_path</name></expr></argument>, <argument><expr>&amp;<name>history_rev</name></expr></argument>,
                                      <argument><expr><name>history</name></expr></argument>, <argument><expr><name>newpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If this history item predates our START revision, quit
         here. */</comment>
      <if>if <condition>(<expr><name>history_rev</name> &lt; <name>start</name></expr>)</condition><then>
        <break>break;</break></then></if>

      <comment type="block">/* Is the history item readable?  If not, quit. */</comment>
      <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>history_root</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>history_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
                                       <argument><expr><name>history_rev</name></expr></argument>, <argument><expr><name>newpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>history_root</name></expr></argument>, <argument><expr><name>history_path</name></expr></argument>,
                                  <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>newpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
            <break>break;</break></then></if>
        }</block></then></if>

      <comment type="block">/* Call the user-provided callback function. */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>history_func</name><argument_list>(<argument><expr><name>history_baton</name></expr></argument>, <argument><expr><name>history_path</name></expr></argument>, <argument><expr><name>history_rev</name></expr></argument>, <argument><expr><name>newpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CEASE_INVOCATION</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <goto>goto <name>cleanup</name>;</goto>
            }</block></then>
          <else>else
            <block>{
              <return>return <expr><name>err</name></expr>;</return>
            }</block></else></if>
        }</block></then></if>

      <comment type="block">/* We're done with the old history item, so we can clear its
         pool, and then toggle our notion of "the old pool". */</comment>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>oldpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmppool</name> = <name>oldpool</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>oldpool</name> = <name>newpool</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>newpool</name> = <name>tmppool</name></expr>;</expr_stmt>
    }</block>
  while <condition>(<expr><name>history</name></expr>)</condition>;</do> <comment type="block">/* shouldn't hit this */</comment>

 <label><name>cleanup</name>:</label>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>oldpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>newpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_deleted_rev</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                      <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                      <param><decl><type><name>svn_revnum_t</name> *</type><name>deleted</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>, *<decl><type ref="prev"/><name>copy_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>mid_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>start_node_id</name></decl>, *<decl><type ref="prev"/><name>curr_node_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <comment type="block">/* Validate the revision range. */</comment>
  <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid start revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid end revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Ensure that the input is ordered. */</comment>
  <if>if <condition>(<expr><name>start</name> &gt; <name>end</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>tmprev</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>start</name> = <name>end</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>end</name> = <name>tmprev</name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Ensure path exists in fs at start revision. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>start_node_id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Path must exist in fs at start rev. */</comment>
          <expr_stmt><expr>*<name>deleted</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then></if>
      <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Ensure path was deleted at or before end revision. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>curr_node_id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <return>return <expr><name>err</name></expr>;</return>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* path exists in the end node and the end node is equivalent
         or otherwise equivalent to the start node.  This can mean
         a few things:

           1) The end node *is* simply the start node, uncopied
              and unmodified in the start to end range.

           2) The start node was modified, but never copied.

           3) The start node was copied, but this copy occurred at
              start or some rev *previous* to start, this is
              effectively the same situation as 1 if the node was
              never modified or 2 if it was.

         In the first three cases the path was not deleted in
         the specified range and we are done, but in the following
         cases the start node must have been deleted at least once:

           4) The start node was deleted and replaced by a copy of
              itself at some rev between start and end.  This copy
              may itself have been replaced with copies of itself.

           5) The start node was deleted and replaced by a node which
              it does not share any history with.
      */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>curr_node_id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>svn_fs_compare_ids</name><argument_list>(<argument><expr><name>start_node_id</name></expr></argument>, <argument><expr><name>curr_node_id</name></expr></argument>)</argument_list></call> != -1</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>copy_root</name></expr></argument>, <argument><expr>&amp;<name>copy_path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>,
                                      <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>!<name>copy_root</name> ||
              (<call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>copy_root</name></expr></argument>)</argument_list></call> &lt;= <name>start</name>)</expr>)</condition><then>
            <block>{
              <comment type="block">/* Case 1,2 or 3, nothing more to do. */</comment>
              <expr_stmt><expr>*<name>deleted</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
              <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
    }</block></else></if></else></if>

  <comment type="block">/* If we get here we know that path exists in rev start and was deleted
     at least once before rev end.  To find the revision path was first
     deleted we use a binary search.  The rules for the determining if
     the deletion comes before or after a given median revision are
     described by this matrix:

                   |             Most recent copy event that
                   |               caused mid node to exist.
                   |-----------------------------------------------------
     Compare path  |                   |                |               |
     at start and  |   Copied at       |  Copied at     | Never copied  |
     mid nodes.    |   rev &gt; start     |  rev &lt;= start  |               |
                   |                   |                |               |
     -------------------------------------------------------------------|
     Mid node is   |  A) Start node    |                                |
     equivalent to |     replaced with |  E) Mid node == start node,    |
     start node    |     an unmodified |     look HIGHER.               |
                   |     copy of       |                                |
                   |     itself,       |                                |
                   |     look LOWER.   |                                |
     -------------------------------------------------------------------|
     Mid node is   |  B) Start node    |                                |
     otherwise     |     replaced with |  F) Mid node is a modified     |
     related to    |     a modified    |     version of start node,     |
     start node    |     copy of       |     look HIGHER.               |
                   |     itself,       |                                |
                   |     look LOWER.   |                                |
     -------------------------------------------------------------------|
     Mid node is   |                                                    |
     unrelated to  |  C) Start node replaced with unrelated mid node,   |
     start node    |     look LOWER.                                    |
                   |                                                    |
     -------------------------------------------------------------------|
     Path doesn't  |                                                    |
     exist at mid  |  D) Start node deleted before mid node,            |
     node          |     look LOWER                                     |
                   |                                                    |
     --------------------------------------------------------------------
  */</comment>

  <expr_stmt><expr><name>mid_rev</name> = (<name>start</name> + <name>end</name>) / 2</expr>;</expr_stmt>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr>1</expr>)</condition>
    <block>{
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get revision root and node id for mid_rev at that revision. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>mid_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>curr_node_id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* Case D: Look lower in the range. */</comment>
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>end</name> = <name>mid_rev</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>mid_rev</name> = (<name>start</name> + <name>mid_rev</name>) / 2</expr>;</expr_stmt>
            }</block></then>
          <else>else
            <return>return <expr><name>err</name></expr>;</return></else></if>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* Determine the relationship between the start node
             and the current node. */</comment>
          <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>svn_fs_compare_ids</name><argument_list>(<argument><expr><name>start_node_id</name></expr></argument>, <argument><expr><name>curr_node_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>copy_root</name></expr></argument>, <argument><expr>&amp;<name>copy_path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>,
                                      <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>cmp</name> == -1 ||
              (<name>copy_root</name> &amp;&amp;
               (<call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>copy_root</name></expr></argument>)</argument_list></call> &gt; <name>start</name>))</expr>)</condition><then>
            <block>{
              <comment type="block">/* Cases A, B, C: Look at lower revs. */</comment>
              <expr_stmt><expr><name>end</name> = <name>mid_rev</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>mid_rev</name> = (<name>start</name> + <name>mid_rev</name>) / 2</expr>;</expr_stmt>
            }</block></then>
          <else>else <if>if <condition>(<expr><name>end</name> - <name>mid_rev</name> == 1</expr>)</condition><then>
            <block>{
              <comment type="block">/* Found the node path was deleted. */</comment>
              <expr_stmt><expr>*<name>deleted</name> = <name>end</name></expr>;</expr_stmt>
              <break>break;</break>
            }</block></then>
          <else>else
            <block>{
              <comment type="block">/* Cases E, F: Look at higher revs. */</comment>
              <expr_stmt><expr><name>start</name> = <name>mid_rev</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>mid_rev</name> = (<name>start</name> + <name>end</name>) / 2</expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></else></if>
    }</block></while>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Helper func:  return SVN_ERR_AUTHZ_UNREADABLE if ROOT/PATH is
   unreadable. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_readability</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_AUTHZ_UNREADABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unreadable path encountered; access denied"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* The purpose of this function is to discover if fs_path@future_rev
 * is derived from fs_path@peg_rev.  The return is placed in *is_ancestor. */</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_ancestry_of_peg_path</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>is_ancestor</name></decl></param>,
                           <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_path</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>future_revision</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_history_t</name> *</type><name>history</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>lastpool</name></decl>, *<decl><type ref="prev"/><name>currpool</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>lastpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>currpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>future_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_history</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>lastpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Since paths that are different according to strcmp may still be
     equivalent (due to number of consecutive slashes and the fact that
     "" is the same as "/"), we get the "canonical" path in the first
     iteration below so that the comparison after the loop will work
     correctly. */</comment>
  <expr_stmt><expr><name>fs_path</name> = <name>NULL</name></expr>;</expr_stmt>

  <while>while <condition>(<expr>1</expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmppool</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>history</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>history</name></expr>)</condition><then>
        <break>break;</break></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_location</name><argument_list>(<argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>revision</name></expr></argument>, <argument><expr><name>history</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>fs_path</name></expr>)</condition><then>
        <expr_stmt><expr><name>fs_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name>revision</name> &lt;= <name>peg_revision</name></expr>)</condition><then>
        <break>break;</break></then></if>

      <comment type="block">/* Clear old pool and flip. */</comment>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>lastpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmppool</name> = <name>lastpool</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastpool</name> = <name>currpool</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>currpool</name> = <name>tmppool</name></expr>;</expr_stmt>
    }</block></while>

  <comment type="block">/* We must have had at least one iteration above where we
     reassigned fs_path. Else, the path wouldn't have existed at
     future_revision and svn_fs_history would have thrown. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fs_path</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>is_ancestor</name> = (<name>history</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>)</argument_list></call> == 0)</expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos__prev_location</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>appeared_rev</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>prev_path</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name> *</type><name>prev_rev</name></decl></param>,
                         <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>, *<decl><type ref="prev"/><name>copy_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_path</name></decl>, *<decl><type ref="prev"/><name>copy_src_path</name></decl>, *<decl><type ref="prev"/><name>remainder</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copy_src_rev</name></decl>;</decl_stmt>

  <comment type="block">/* Initialize return variables. */</comment>
  <if>if <condition>(<expr><name>appeared_rev</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>appeared_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>prev_rev</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>prev_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>prev_path</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>prev_path</name> = <name>NULL</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Ask about the most recent copy which affected PATH@REVISION.  If
     there was no such copy, we're done.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>copy_root</name></expr></argument>, <argument><expr>&amp;<name>copy_path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name>copy_root</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Ultimately, it's not the path of the closest copy's source that
     we care about -- it's our own path's location in the copy source
     revision.  So we'll tack the relative path that expresses the
     difference between the copy destination and our path in the copy
     revision onto the copy source path to determine this information.

     In other words, if our path is "/branches/my-branch/foo/bar", and
     we know that the closest relevant copy was a copy of "/trunk" to
     "/branches/my-branch", then that relative path under the copy
     destination is "/foo/bar".  Tacking that onto the copy source
     path tells us that our path was located at "/trunk/foo/bar"
     before the copy.
  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>copy_src_rev</name></expr></argument>, <argument><expr>&amp;<name>copy_src_path</name></expr></argument>,
                             <argument><expr><name>copy_root</name></expr></argument>, <argument><expr><name>copy_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>copy_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>remainder</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>copy_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>prev_path</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>prev_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>copy_src_path</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>appeared_rev</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>appeared_rev</name> = <call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>copy_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>prev_rev</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>prev_rev</name> = <name>copy_src_rev</name></expr>;</expr_stmt></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_trace_node_locations</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                               <param><decl><type><name>apr_hash_t</name> **</type><name>locations</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_path</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                               <param><decl><type><name>apr_array_header_t</name> *</type><name>location_revisions_orig</name></decl></param>,
                               <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>location_revisions</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>revision_ptr</name></decl>, *<decl><type ref="prev"/><name>revision_ptr_end</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_ancestor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>lastpool</name></decl>, *<decl><type ref="prev"/><name>currpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl>;</decl_stmt>

  <comment type="block">/* Sanity check. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>location_revisions_orig</name>-&gt;<name>elt_size</name></name> == <sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Ensure that FS_PATH is absolute, because our path-math below will
     depend on that being the case.  */</comment>
  <if>if <condition>(<expr>*<name>fs_path</name> != '/'</expr>)</condition><then>
    <expr_stmt><expr><name>fs_path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Another sanity check. */</comment>
  <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>peg_root</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>peg_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_readability</name><argument_list>(<argument><expr><name>peg_root</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>,
                                <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr>*<name>locations</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We flip between two pools in the second loop below. */</comment>
  <expr_stmt><expr><name>lastpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>currpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* First - let's sort the array of the revisions from the greatest revision
   * downward, so it will be easier to search on. */</comment>
  <expr_stmt><expr><name>location_revisions</name> = <call><name>apr_array_copy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>location_revisions_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>location_revisions</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>location_revisions</name>-&gt;<name>nelts</name></name></expr></argument>,
        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>revision_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>svn_sort_compare_revisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>revision_ptr</name> = (<name>svn_revnum_t</name> *)<name><name>location_revisions</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>revision_ptr_end</name> = <name>revision_ptr</name> + <name><name>location_revisions</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>

  <comment type="block">/* Ignore revisions R that are younger than the peg_revisions where
     path@peg_revision is not an ancestor of path@R. */</comment>
  <expr_stmt><expr><name>is_ancestor</name> = <name>FALSE</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>revision_ptr</name> &lt; <name>revision_ptr_end</name> &amp;&amp; *<name>revision_ptr</name> &gt; <name>peg_revision</name></expr>)</condition>
    <block>{
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_ancestry_of_peg_path</name><argument_list>(<argument><expr>&amp;<name>is_ancestor</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>,
                                         <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr>*<name>revision_ptr</name></expr></argument>,
                                         <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>is_ancestor</name></expr>)</condition><then>
        <break>break;</break></then></if>
      <expr_stmt><expr>++<name>revision_ptr</name></expr>;</expr_stmt>
    }</block></while>

  <expr_stmt><expr><name>revision</name> = <name>is_ancestor</name> ? *<name>revision_ptr</name> : <name>peg_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>path</name> = <name>fs_path</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_readability</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
                                <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <while>while <condition>(<expr><name>revision_ptr</name> &lt; <name>revision_ptr_end</name></expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmppool</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>appeared_rev</name></decl>, <decl><type ref="prev"/><name>prev_rev</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prev_path</name></decl>;</decl_stmt>

      <comment type="block">/* Find the target of the innermost copy relevant to path@revision.
         The copy may be of path itself, or of a parent directory. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__prev_location</name><argument_list>(<argument><expr>&amp;<name>appeared_rev</name></expr></argument>, <argument><expr>&amp;<name>prev_path</name></expr></argument>, <argument><expr>&amp;<name>prev_rev</name></expr></argument>,
                                       <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>prev_path</name></expr>)</condition><then>
        <break>break;</break></then></if>

      <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>tmp_root</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>tmp_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>tmp_root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                  <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
            <block>{
              <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

      <comment type="block">/* Assign the current path to all younger revisions until we reach
         the copy target rev. */</comment>
      <while>while <condition>(<expr>(<name>revision_ptr</name> &lt; <name>revision_ptr_end</name>)
             &amp;&amp; (*<name>revision_ptr</name> &gt;= <name>appeared_rev</name>)</expr>)</condition>
        <block>{
          <comment type="block">/* *revision_ptr is allocated out of pool, so we can point
             to in the hash table. */</comment>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>locations</name></expr></argument>, <argument><expr><name>revision_ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>revision_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                       <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>revision_ptr</name>++</expr>;</expr_stmt>
        }</block></while>

      <comment type="block">/* Ignore all revs between the copy target rev and the copy
         source rev (non-inclusive). */</comment>
      <while>while <condition>(<expr>(<name>revision_ptr</name> &lt; <name>revision_ptr_end</name>)
             &amp;&amp; (*<name>revision_ptr</name> &gt; <name>prev_rev</name>)</expr>)</condition>
        <expr_stmt><expr><name>revision_ptr</name>++</expr>;</expr_stmt></while>

      <comment type="block">/* State update. */</comment>
      <expr_stmt><expr><name>path</name> = <name>prev_path</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>revision</name> = <name>prev_rev</name></expr>;</expr_stmt>

      <comment type="block">/* Clear last pool and switch. */</comment>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>lastpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmppool</name> = <name>lastpool</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastpool</name> = <name>currpool</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>currpool</name> = <name>tmppool</name></expr>;</expr_stmt>
    }</block></while>

  <comment type="block">/* There are no copies relevant to path@revision.  So any remaining
     revisions either predate the creation of path@revision or have
     the node existing at the same path.  We will look up path@lrev
     for each remaining location-revision and make sure it is related
     to path@revision. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>revision_ptr</name> &lt; <name>revision_ptr_end</name></expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>lrev_id</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>*<name>revision_ptr</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_check_path</name><argument_list>(<argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
        <break>break;</break></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>lrev_id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <call><name>svn_fs_check_related</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>lrev_id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <break>break;</break></then></if>

      <comment type="block">/* The node exists at the same path; record that and advance. */</comment>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>locations</name></expr></argument>, <argument><expr><name>revision_ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>revision_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                   <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>revision_ptr</name>++</expr>;</expr_stmt>
    }</block></while>

  <comment type="block">/* Ignore any remaining location-revisions; they predate the
     creation of path@revision. */</comment>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>lastpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Transmit SEGMENT through RECEIVER/RECEIVER_BATON iff a portion of
   its revision range fits between END_REV and START_REV, possibly
   cropping the range so that it fits *entirely* in that range. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>maybe_crop_and_send_segment</name><parameter_list>(<param><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
                            <param><decl><type><name>svn_location_segment_receiver_t</name></type> <name>receiver</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* We only want to transmit this segment if some portion of it
     is between our END_REV and START_REV. */</comment>
  <if>if <condition>(<expr>! ((<name><name>segment</name>-&gt;<name>range_start</name></name> &gt; <name>start_rev</name>)
         || (<name><name>segment</name>-&gt;<name>range_end</name></name> &lt; <name>end_rev</name>))</expr>)</condition><then>
    <block>{
      <comment type="block">/* Correct our segment range when the range straddles one of
         our requested revision boundaries. */</comment>
      <if>if <condition>(<expr><name><name>segment</name>-&gt;<name>range_start</name></name> &lt; <name>end_rev</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>segment</name>-&gt;<name>range_start</name></name> = <name>end_rev</name></expr>;</expr_stmt></then></if>
      <if>if <condition>(<expr><name><name>segment</name>-&gt;<name>range_end</name></name> &gt; <name>start_rev</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>segment</name>-&gt;<name>range_end</name></name> = <name>start_rev</name></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>receiver</name><argument_list>(<argument><expr><name>segment</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_node_location_segments</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                 <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                                 <param><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl></param>,
                                 <param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
                                 <param><decl><type><name>svn_location_segment_receiver_t</name></type> <name>receiver</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                                 <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>current_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init>, <name>current_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>

  <comment type="block">/* No PEG_REVISION?  We'll use HEAD. */</comment>
  <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>peg_revision</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>peg_revision</name> = <name>youngest_rev</name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* No START_REV?  We'll use HEAD (which we may have already fetched). */</comment>
  <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>start_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>youngest_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>start_rev</name> = <name>youngest_rev</name></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>start_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>

  <comment type="block">/* No END_REV?  We'll use 0. */</comment>
  <expr_stmt><expr><name>end_rev</name> = <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>end_rev</name></expr></argument>)</argument_list></call> ? <name>end_rev</name> : 0</expr>;</expr_stmt>

  <comment type="block">/* Are the revision properly ordered?  They better be -- the API
     demands it. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end_rev</name> &lt;= <name>start_rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start_rev</name> &lt;= <name>peg_revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Ensure that PATH is absolute, because our path-math will depend
     on that being the case.  */</comment>
  <if>if <condition>(<expr>*<name>path</name> != '/'</expr>)</condition><then>
    <expr_stmt><expr><name>path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Auth check. */</comment>
  <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>peg_root</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>peg_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_readability</name><argument_list>(<argument><expr><name>peg_root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Okay, let's get searching! */</comment>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>current_rev</name> = <name>peg_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>current_path</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>current_rev</name> &gt;= <name>end_rev</name></expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>appeared_rev</name></decl>, <decl><type ref="prev"/><name>prev_rev</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cur_path</name></decl>, *<decl><type ref="prev"/><name>prev_path</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>cur_path</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>current_path</name>-&gt;<name>data</name></name></expr></argument>,
                                <argument><expr><name><name>current_path</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>segment</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>segment</name>-&gt;<name>range_end</name></name> = <name>current_rev</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>segment</name>-&gt;<name>range_start</name></name> = <name>end_rev</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>segment</name>-&gt;<name>path</name></name> = <name>cur_path</name> + 1</expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__prev_location</name><argument_list>(<argument><expr>&amp;<name>appeared_rev</name></expr></argument>, <argument><expr>&amp;<name>prev_path</name></expr></argument>, <argument><expr>&amp;<name>prev_rev</name></expr></argument>,
                                       <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>current_rev</name></expr></argument>, <argument><expr><name>cur_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If there are no previous locations for this thing (meaning,
         it originated at the current path), then we simply need to
         find its revision of origin to populate our final segment.
         Otherwise, the APPEARED_REV is the start of current segment's
         range. */</comment>
      <if>if <condition>(<expr>! <name>prev_path</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>revroot</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revroot</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>current_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_origin_rev</name><argument_list>(<argument><expr>&amp;(<name><name>segment</name>-&gt;<name>range_start</name></name>)</expr></argument>, <argument><expr><name>revroot</name></expr></argument>,
                                         <argument><expr><name>cur_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>segment</name>-&gt;<name>range_start</name></name> &lt; <name>end_rev</name></expr>)</condition><then>
            <expr_stmt><expr><name><name>segment</name>-&gt;<name>range_start</name></name> = <name>end_rev</name></expr>;</expr_stmt></then></if>
          <expr_stmt><expr><name>current_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name><name>segment</name>-&gt;<name>range_start</name></name> = <name>appeared_rev</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name>current_path</name></expr></argument>, <argument><expr><name>prev_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>current_rev</name> = <name>prev_rev</name></expr>;</expr_stmt>
        }</block></else></if>

      <comment type="block">/* Report our segment, providing it passes authz muster. */</comment>
      <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>cur_rev_root</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>cur_rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
                                       <argument><expr><name><name>segment</name>-&gt;<name>range_end</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>cur_rev_root</name></expr></argument>, <argument><expr><name><name>segment</name>-&gt;<name>path</name></name></expr></argument>,
                                  <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
            <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
        }</block></then></if>

      <comment type="block">/* Transmit the segment (if it's within the scope of our concern). */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_crop_and_send_segment</name><argument_list>(<argument><expr><name>segment</name></expr></argument>, <argument><expr><name>start_rev</name></expr></argument>, <argument><expr><name>end_rev</name></expr></argument>,
                                          <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If we've set CURRENT_REV to SVN_INVALID_REVNUM, we're done
         (and didn't ever reach END_REV).  */</comment>
      <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>current_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <break>break;</break></then></if>

      <comment type="block">/* If there's a gap in the history, we need to report as much
         (if the gap is within the scope of our concern). */</comment>
      <if>if <condition>(<expr><name><name>segment</name>-&gt;<name>range_start</name></name> - <name>current_rev</name> &gt; 1</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>gap_segment</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>gap_segment</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>gap_segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>gap_segment</name>-&gt;<name>range_end</name></name> = <name><name>segment</name>-&gt;<name>range_start</name></name> - 1</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>gap_segment</name>-&gt;<name>range_start</name></name> = <name>current_rev</name> + 1</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>gap_segment</name>-&gt;<name>path</name></name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_crop_and_send_segment</name><argument_list>(<argument><expr><name>gap_segment</name></expr></argument>, <argument><expr><name>start_rev</name></expr></argument>, <argument><expr><name>end_rev</name></expr></argument>,
                                              <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
                                              <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Get the mergeinfo for PATH in REPOS at REVNUM and store it in MERGEINFO. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_path_mergeinfo</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>mergeinfo</name></decl></param>,
                   <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>tmp_catalog</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>paths</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>1</expr></argument>,
                                             <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>path</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* We do not need to call svn_repos_fs_get_mergeinfo() (which performs authz)
     because we will filter out unreadable revisions in 
     find_interesting_revision(), above */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>tmp_catalog</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>,
                               <argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>mergeinfo</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>tmp_catalog</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>*<name>mergeinfo</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>mergeinfo</name> = <call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr>*<name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<name>mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>svn_boolean_t</name></type>
<name>is_path_in_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>duplicate_path_revs</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s:%ld"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ptr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>duplicate_path_revs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ptr</name> != <name>NULL</name></expr>;</return>
}</block></function>

<struct>struct <name>path_revision</name>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* Does this path_rev have merges to also be included?  */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>merged_mergeinfo</name></decl>;</decl_stmt>

  <comment type="block">/* Is this a merged revision? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>merged</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Check for merges in OLD_PATH_REV-&gt;PATH at OLD_PATH_REV-&gt;REVNUM.  Store
   the mergeinfo difference in MERGED_MERGEINFO, allocated in POOL. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_merged_mergeinfo</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>merged_mergeinfo</name></decl></param>,
                     <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                     <param><decl><type>struct <name>path_revision</name> *</type><name>old_path_rev</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>curr_mergeinfo</name></decl>, *<decl><type ref="prev"/><name>prev_mergeinfo</name></decl>, *<decl><type ref="prev"/><name>deleted</name></decl>, *<decl><type ref="prev"/><name>changed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <comment type="block">/* First, find the mergeinfo difference for old_path_rev-&gt;revnum, and
     old_path_rev-&gt;revnum - 1. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_path_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>curr_mergeinfo</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>old_path_rev</name>-&gt;<name>path</name></name></expr></argument>,
                             <argument><expr><name><name>old_path_rev</name>-&gt;<name>revnum</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name>get_path_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>prev_mergeinfo</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>old_path_rev</name>-&gt;<name>path</name></name></expr></argument>,
                           <argument><expr><name><name>old_path_rev</name>-&gt;<name>revnum</name></name> - 1</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* If the path doesn't exist in the previous revision, assume empty
         mergeinfo. */</comment>
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>prev_mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <comment type="block">/* Then calculate and merge the differences. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_diff</name><argument_list>(<argument><expr>&amp;<name>deleted</name></expr></argument>, <argument><expr>&amp;<name>changed</name></expr></argument>, <argument><expr><name>prev_mergeinfo</name></expr></argument>, <argument><expr><name>curr_mergeinfo</name></expr></argument>,
                             <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr><name>changed</name></expr></argument>, <argument><expr><name>deleted</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Store the result. */</comment>
  <expr_stmt><expr>*<name>merged_mergeinfo</name> = <call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>changed</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>find_interesting_revisions</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>path_revisions</name></decl></param>,
                           <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>mark_as_merged</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> *</type><name>duplicate_path_revs</name></decl></param>,
                           <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iter_pool</name></decl>, *<decl><type ref="prev"/><name>last_pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_history_t</name> *</type><name>history</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>

  <comment type="block">/* We switch betwwen two pools while looping, since we need information from
     the last iteration to be available. */</comment>
  <expr_stmt><expr><name>iter_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>last_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* The path had better be a file in this revision. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>last_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_check_path</name><argument_list>(<argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>kind</name> != <name>svn_node_file</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_NOT_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not a file in revision %ld"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><name>path</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Open a history object. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_history</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>last_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr>1</expr>)</condition>
    <block>{
      <decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>path_rev</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>path_rev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmp_pool</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Fetch the history object to walk through. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>history</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>history</name></expr>)</condition><then>
        <break>break;</break></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_location</name><argument_list>(<argument><expr>&amp;<name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>&amp;<name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>,
                                      <argument><expr><name>history</name></expr></argument>, <argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Check to see if we already saw this path (and it's ancestors) */</comment>
      <if>if <condition>(<expr><name>include_merged_revisions</name>
          &amp;&amp; <call><name>is_path_in_hash</name><argument_list>(<argument><expr><name>duplicate_path_revs</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>,
                             <argument><expr><name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>, <argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
         <break>break;</break></then></if>

      <comment type="block">/* Check authorization. */</comment>
      <if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>tmp_root</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>tmp_root</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>,
                                       <argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>tmp_root</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>,
                                  <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
            <break>break;</break></then></if>
        }</block></then></if>

      <expr_stmt><expr><name><name>path_rev</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>path_rev</name>-&gt;<name>merged</name></name> = <name>mark_as_merged</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>path_revisions</name></expr></argument>, <argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></call> = <name>path_rev</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_merged_mergeinfo</name><argument_list>(<argument><expr>&amp;<name><name>path_rev</name>-&gt;<name>merged_mergeinfo</name></name></expr></argument>, <argument><expr><name>repos</name></expr></argument>,
                                     <argument><expr><name>path_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name><name>path_rev</name>-&gt;<name>merged_mergeinfo</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>

      <comment type="block">/* Add the path/rev pair to the hash, so we can filter out future
         occurrences of it.  We only care about this if including merged
         revisions, 'cause that's the only time we can have duplicates. */</comment>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>duplicate_path_revs</name></expr></argument>,
                   <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s:%ld"</expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>,
                                <argument><expr><name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>(<name>void</name> *)0xdeadbeef</expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>path_rev</name>-&gt;<name>revnum</name></name> &lt;= <name>start</name></expr>)</condition><then>
        <break>break;</break></then></if>

      <comment type="block">/* Swap pools. */</comment>
      <expr_stmt><expr><name>tmp_pool</name> = <name>iter_pool</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>iter_pool</name> = <name>last_pool</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>last_pool</name> = <name>tmp_pool</name></expr>;</expr_stmt>
    }</block></while>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Comparison function to sort path/revisions in increasing order */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_path_revisions</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>a_pr</name> <init>= <expr>*(struct <name>path_revision</name> **)<name>a</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>b_pr</name> <init>= <expr>*(struct <name>path_revision</name> **)<name>b</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>a_pr</name>-&gt;<name>revnum</name></name> == <name><name>b_pr</name>-&gt;<name>revnum</name></name></expr>)</condition><then>
    <return>return <expr>0</expr>;</return></then></if>

  <return>return <expr><name><name>a_pr</name>-&gt;<name>revnum</name></name> &lt; <name><name>b_pr</name>-&gt;<name>revnum</name></name> ? 1 : -1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>find_merged_revisions</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>merged_path_revisions_out</name></decl></param>,
                      <param><decl><type><name>apr_array_header_t</name> *</type><name>mainline_path_revisions</name></decl></param>,
                      <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                      <param><decl><type><name>apr_hash_t</name> *</type><name>duplicate_path_revs</name></decl></param>,
                      <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                      <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>old</name></decl>, *<decl><type ref="prev"/><name>new</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iter_pool</name></decl>, *<decl><type ref="prev"/><name>last_pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>merged_path_revisions</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>,
                                                <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>old</name> = <name>mainline_path_revisions</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>iter_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>last_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <do>do
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>temp_pool</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>new</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Iterate over OLD, checking for non-empty mergeinfo.  If found, gather
         path_revisions for any merged revisions, and store those in NEW. */</comment>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>old</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
          <decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>old_pr</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                       <argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr>!<name><name>old_pr</name>-&gt;<name>merged_mergeinfo</name></name></expr>)</condition><then>
            <continue>continue;</continue></then></if>

          <comment type="block">/* Determine and trace the merge sources. */</comment>
          <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>, <argument><expr><name><name>old_pr</name>-&gt;<name>merged_mergeinfo</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
               <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
            <block>{
              <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

              <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>rangelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>rangelist</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
                <block>{
                  <decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist</name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
                                                           <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>

                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>,
                                               <argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_check_path</name><argument_list>(<argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if>if <condition>(<expr><name>kind</name> != <name>svn_node_file</name></expr>)</condition><then>
                    <continue>continue;</continue></then></if>

                  <comment type="block">/* Search and find revisions to add to the NEW list. */</comment>
                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>find_interesting_revisions</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                                     <argument><expr><name><name>range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>,
                                                     <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                                     <argument><expr><name>duplicate_path_revs</name></expr></argument>,
                                                     <argument><expr><name>authz_read_func</name></expr></argument>,
                                                     <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></for>

      <comment type="block">/* Append the newly found path revisions with the old ones. */</comment>
      <expr_stmt><expr><name>merged_path_revisions</name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>, <argument><expr><name>merged_path_revisions</name></expr></argument>,
                                               <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Swap data structures */</comment>
      <expr_stmt><expr><name>old</name> = <name>new</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>temp_pool</name> = <name>last_pool</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>last_pool</name> = <name>iter_pool</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>iter_pool</name> = <name>temp_pool</name></expr>;</expr_stmt>
    }</block>
  while <condition>(<expr><name><name>new</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition>;</do>

  <comment type="block">/* Sort MERGED_PATH_REVISIONS in increasing order by REVNUM. */</comment>
  <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>merged_path_revisions</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>merged_path_revisions</name>-&gt;<name>nelts</name></name></expr></argument>,
        <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare_path_revisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy to the output array. */</comment>
  <expr_stmt><expr>*<name>merged_path_revisions_out</name> = <call><name>apr_array_copy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>merged_path_revisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>last_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<struct>struct <name>send_baton</name>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iter_pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>last_pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>last_props</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>last_root</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Send PATH_REV to HANDLER and HANDLER_BATON, using information provided by
   SB. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>send_path_revision</name><parameter_list>(<param><decl><type>struct <name>path_revision</name> *</type><name>path_rev</name></decl></param>,
                   <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                   <param><decl><type>struct <name>send_baton</name> *</type><name>sb</name></decl></param>,
                   <param><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
                   <param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>rev_props</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>prop_diffs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_txdelta_stream_t</name> *</type><name>delta_stream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>delta_handler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>delta_baton</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmp_pool</name></decl>;</decl_stmt>  <comment type="block">/* For swapping */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>contents_changed</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the revision properties. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_proplist</name><argument_list>(<argument><expr>&amp;<name>rev_props</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>,
                                   <argument><expr><name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open the revision root. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>,
                               <argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the file's properties for this revision and compute the diffs. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_proplist</name><argument_list>(<argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>,
                                   <argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_prop_diffs</name><argument_list>(<argument><expr>&amp;<name>prop_diffs</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>last_props</name></name></expr></argument>,
                         <argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check if the contents changed. */</comment>
  <comment type="block">/* Special case: In the first revision, we always provide a delta. */</comment>
  <if>if <condition>(<expr><name><name>sb</name>-&gt;<name>last_root</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_contents_changed</name><argument_list>(<argument><expr>&amp;<name>contents_changed</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>last_root</name></name></expr></argument>,
                                    <argument><expr><name><name>sb</name>-&gt;<name>last_path</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>,
                                    <argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>contents_changed</name> = <name>TRUE</name></expr>;</expr_stmt></else></if>

  <comment type="block">/* We have all we need, give to the handler. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handler</name><argument_list>(<argument><expr><name>handler_baton</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>,
                  <argument><expr><name>rev_props</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>merged</name></name></expr></argument>,
                  <argument><expr><name>contents_changed</name> ? &amp;<name>delta_handler</name> : <name>NULL</name></expr></argument>,
                  <argument><expr><name>contents_changed</name> ? &amp;<name>delta_baton</name> : <name>NULL</name></expr></argument>,
                  <argument><expr><name>prop_diffs</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Compute and send delta if client asked for it.
     Note that this was initialized to NULL, so if !contents_changed,
     no deltas will be computed. */</comment>
  <if>if <condition>(<expr><name>delta_handler</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Get the content delta. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_file_delta_stream</name><argument_list>(<argument><expr>&amp;<name>delta_stream</name></expr></argument>,
                                           <argument><expr><name><name>sb</name>-&gt;<name>last_root</name></name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>last_path</name></name></expr></argument>,
                                           <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>,
                                           <argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* And send. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_txstream</name><argument_list>(<argument><expr><name>delta_stream</name></expr></argument>,
                                        <argument><expr><name>delta_handler</name></expr></argument>, <argument><expr><name>delta_baton</name></expr></argument>,
                                        <argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Remember root, path and props for next iteration. */</comment>
  <expr_stmt><expr><name><name>sb</name>-&gt;<name>last_root</name></name> = <name>root</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb</name>-&gt;<name>last_path</name></name> = <name><name>path_rev</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb</name>-&gt;<name>last_props</name></name> = <name>props</name></expr>;</expr_stmt>

  <comment type="block">/* Swap the pools. */</comment>
  <expr_stmt><expr><name>tmp_pool</name> = <name><name>sb</name>-&gt;<name>iter_pool</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name> = <name><name>sb</name>-&gt;<name>last_pool</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb</name>-&gt;<name>last_pool</name></name> = <name>tmp_pool</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* We don't yet support sending revisions in reverse order; the caller wait
 * until we've traced back through the entire history, and then accept
 * them from oldest to youngest.  Someday this may change, but in the meantime,
 * the general algorithm is thus:
 *
 *  1) Trace back through the history of an object, adding each revision
 *     found to the MAINLINE_PATH_REVISIONS array, marking any which were
 *     merges.
 *  2) If INCLUDE_MERGED_REVISIONS is TRUE, we repeat Step 1 on each of the
 *     merged revisions, including them in the MERGED_PATH_REVISIONS, and using
 *     DUPLICATE_PATH_REVS to avoid tracing the same paths of history multiple
 *     times.
 *  3) Send both MAINLINE_PATH_REVISIONS and MERGED_PATH_REVISIONS from 
 *     youngest to oldest, interleaving as appropriate.  This is implemented
 *     similar to an insertion sort, but instead of inserting into another
 *     array, we just call the appropriate handler.
 */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_file_revs2</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
                         <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                         <param><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>mainline_path_revisions</name></decl>, *<decl><type ref="prev"/><name>merged_path_revisions</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>duplicate_path_revs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>send_baton</name></type> <name>sb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>mainline_pos</name></decl>, <decl><type ref="prev"/><name>merged_pos</name></decl>;</decl_stmt>

  <comment type="block">/* Get the revisions we are interested in. */</comment>
  <expr_stmt><expr><name>duplicate_path_revs</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mainline_path_revisions</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>,
                                           <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>find_interesting_revisions</name><argument_list>(<argument><expr><name>mainline_path_revisions</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                     <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>include_merged_revisions</name></expr></argument>,
                                     <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>duplicate_path_revs</name></expr></argument>,
                                     <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we are including merged revisions, go get those, too. */</comment>
  <if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>find_merged_revisions</name><argument_list>(<argument><expr>&amp;<name>merged_path_revisions</name></expr></argument>,
                                  <argument><expr><name>mainline_path_revisions</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>,
                                  <argument><expr><name>duplicate_path_revs</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
                                  <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>merged_path_revisions</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>,
                                           <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <comment type="block">/* We must have at least one revision to get. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mainline_path_revisions</name>-&gt;<name>nelts</name></name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We switch betwwen two pools while looping, since we need information from
     the last iteration to be available. */</comment>
  <expr_stmt><expr><name><name>sb</name>.<name>iter_pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb</name>.<name>last_pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We want the first txdelta to be against the empty file. */</comment>
  <expr_stmt><expr><name><name>sb</name>.<name>last_root</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb</name>.<name>last_path</name></name> = <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Create an empty hash table for the first property diff. */</comment>
  <expr_stmt><expr><name><name>sb</name>.<name>last_props</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>sb</name>.<name>last_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Walk through both mainline and merged revisions, and send them in
     reverse chronological order, interleaving as appropriate. */</comment>
  <expr_stmt><expr><name>mainline_pos</name> = <name><name>mainline_path_revisions</name>-&gt;<name>nelts</name></name> - 1</expr>;</expr_stmt>
  <expr_stmt><expr><name>merged_pos</name> = <name><name>merged_path_revisions</name>-&gt;<name>nelts</name></name> - 1</expr>;</expr_stmt>
  <while>while <condition>(<expr><name>mainline_pos</name> &gt;= 0 &amp;&amp; <name>merged_pos</name> &gt;= 0</expr>)</condition>
    <block>{
      <decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>main_pr</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>mainline_path_revisions</name></expr></argument>,
                                                    <argument><expr><name>mainline_pos</name></expr></argument>,
                                                    <argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>merged_pr</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>merged_path_revisions</name></expr></argument>,
                                                      <argument><expr><name>merged_pos</name></expr></argument>,
                                                      <argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
      <if>if <condition>(<expr><name><name>main_pr</name>-&gt;<name>revnum</name></name> &lt;= <name><name>merged_pr</name>-&gt;<name>revnum</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_path_revision</name><argument_list>(<argument><expr><name>main_pr</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
                                     <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>mainline_pos</name> -= 1</expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_path_revision</name><argument_list>(<argument><expr><name>merged_pr</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
                                     <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>merged_pos</name> -= 1</expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>

  <comment type="block">/* Send any remaining revisions from the mainline list. */</comment>
  <for>for (<init>;</init> <condition><expr><name>mainline_pos</name> &gt;= 0</expr>;</condition> <incr><expr><name>mainline_pos</name> -= 1</expr></incr>)
    <block>{
      <decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>main_pr</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>mainline_path_revisions</name></expr></argument>,
                                                    <argument><expr><name>mainline_pos</name></expr></argument>,
                                                    <argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_path_revision</name><argument_list>(<argument><expr><name>main_pr</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* Ditto for the merged list. */</comment>
  <for>for (<init>;</init> <condition><expr><name>merged_pos</name> &gt;= 0</expr>;</condition> <incr><expr><name>merged_pos</name> -= 1</expr></incr>)
    <block>{
      <decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>merged_pr</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>merged_path_revisions</name></expr></argument>,
                                                      <argument><expr><name>merged_pos</name></expr></argument>,
                                                      <argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_path_revision</name><argument_list>(<argument><expr><name>merged_pr</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
                                 <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>sb</name>.<name>last_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>sb</name>.<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_file_revs</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                        <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                        <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                        <param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
                        <param><decl><type><name>svn_repos_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>handler2_baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_compat_wrap_file_rev_handler</name><argument_list>(<argument><expr>&amp;<name>handler2</name></expr></argument>, <argument><expr>&amp;<name>handler2_baton</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
                                   <argument><expr><name>handler_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_repos_get_file_revs2</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                  <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
                                  <argument><expr><name>handler2</name></expr></argument>, <argument><expr><name>handler2_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
