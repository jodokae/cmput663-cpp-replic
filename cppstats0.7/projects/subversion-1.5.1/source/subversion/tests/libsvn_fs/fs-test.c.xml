<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/tests/libsvn_fs/fs-test.c"><comment type="block">/* fs-test.c --- tests for the filesystem
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test_fs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_delta/delta.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_STR</name><parameter_list>(<param><type><name>ps</name></type></param>, <param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((ps)-&gt;data = (s), (ps)-&gt;len = strlen(s))</cpp:value></cpp:define>


<comment type="block">/*-----------------------------------------------------------------*/</comment>
<escape char="0xc"/>
<comment type="block">/** The actual fs-tests called by `make check` **/</comment>

<comment type="block">/* Helper:  commit TXN, expecting either success or failure:
 *
 * If EXPECTED_CONFLICT is null, then the commit is expected to
 * succeed.  If it does succeed, set *NEW_REV to the new revision;
 * else return error.
 *
 * If EXPECTED_CONFLICT is non-null, it is either the empty string or
 * the expected path of the conflict.  If it is the empty string, any
 * conflict is acceptable.  If it is a non-empty string, the commit
 * must fail due to conflict, and the conflict path must match
 * EXPECTED_CONFLICT.  If they don't match, return error.
 *
 * If a conflict is expected but the commit succeeds anyway, return
 * error.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_commit_txn</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>new_rev</name></decl></param>,
                <param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expected_conflict</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr>&amp;<name>conflict</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_CONFLICT</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>expected_conflict</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"commit conflicted at '%s', but no conflict expected"</expr></argument>,
             <argument><expr><name>conflict</name> ? <name>conflict</name> : "(missing conflict info!)"</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>conflict</name> == <name>NULL</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"commit conflicted as expected, "
             "but no conflict path was returned ('%s' expected)"</expr></argument>,
             <argument><expr><name>expected_conflict</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
      <else>else <if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>expected_conflict</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call> != 0)
               &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>conflict</name></expr></argument>, <argument><expr><name>expected_conflict</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"commit conflicted at '%s', but expected conflict at '%s')"</expr></argument>,
             <argument><expr><name>conflict</name></expr></argument>, <argument><expr><name>expected_conflict</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></else></if></else></if>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>   <comment type="block">/* commit failed, but not due to conflict */</comment>
    <block>{
      <return>return <expr><call><name>svn_error_quick_wrap</name>
        <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"commit failed due to something other than a conflict"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
  <else>else            <comment type="block">/* err == NULL, so commit succeeded */</comment>
    <block>{
      <if>if <condition>(<expr><name>expected_conflict</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"commit succeeded that was expected to fail at '%s'"</expr></argument>,
             <argument><expr><name>expected_conflict</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<comment type="block">/* Begin a txn, check its name, then close it */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>trivial_transaction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                    <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>is_invalid_char</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "begin a txn, check its name, then close it"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-trivial-txn"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Begin a new transaction that is based on revision 0.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Test that the txn name is non-null. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>txn_name</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <name>txn_name</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr>"Got a NULL txn name."</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Test that the txn name contains only valid characters.  See
     svn_fs.h for the list of valid characters. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>is_invalid_char</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr>*<name>is_invalid_char</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <expr_stmt><expr><name><name>is_invalid_char</name><index>[<expr><name>i</name></expr>]</index></name> = 1</expr>;</expr_stmt></for>
  <for>for (<init><expr><name>i</name> = '0'</expr>;</init> <condition><expr><name>i</name> &lt;= '9'</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <expr_stmt><expr><name><name>is_invalid_char</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>
  <for>for (<init><expr><name>i</name> = 'a'</expr>;</init> <condition><expr><name>i</name> &lt;= 'z'</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <expr_stmt><expr><name><name>is_invalid_char</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>
  <for>for (<init><expr><name>i</name> = 'A'</expr>;</init> <condition><expr><name>i</name> &lt;= 'Z'</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <expr_stmt><expr><name><name>is_invalid_char</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>
  <for>for (<init><expr><name>p</name> = "-."</expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr>++<name>p</name></expr></incr>)
    <expr_stmt><expr><name><name>is_invalid_char</name><index>[<expr>(<name>unsigned</name> <name>char</name>) *<name>p</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>

  <for>for (<init><expr><name>p</name> = <name>txn_name</name></expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr>++<name>p</name></expr></incr>)
    <block>{
      <if>if <condition>(<expr><name><name>is_invalid_char</name><index>[<expr>(<name>unsigned</name> <name>char</name>) *<name>p</name></expr>]</index></name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr>"The txn name '%s' contains an illegal '%c' "
                                 "character"</expr></argument>, <argument><expr><name>txn_name</name></expr></argument>, <argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<comment type="block">/* Open an existing transaction by name. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>reopen_trivial_transaction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                           <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "open an existing transaction by name"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-reopen-trivial-txn"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Begin a new transaction that is based on revision 0.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Don't use the subpool, txn_name must persist beyond the current txn */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>txn_name</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Close the transaction. */</comment>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reopen the transaction by name */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_open_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Close the transaction ... again. */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<comment type="block">/* Create a file! */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_file_transaction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                        <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "begin a txn, get the txn root, and add a file"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-create-file-txn"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Begin a new transaction that is based on revision 0.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the txn root */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create a new file in the root directory. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"beer.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Make sure we get txn lists correctly. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>verify_txn_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn1</name></decl>, *<decl><type ref="prev"/><name>txn2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name1</name></decl>, *<decl><type ref="prev"/><name>name2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>txn_list</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "create 2 txns, list them, and verify the list"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-verify-txn-list"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Begin a new transaction, get its name (in the top pool), close it.  */</comment>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn1</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>name1</name></expr></argument>, <argument><expr><name>txn1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Begin *another* transaction, get its name (in the top pool), close it.  */</comment>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn2</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>name2</name></expr></argument>, <argument><expr><name>txn2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the list of active transactions from the fs. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_list_transactions</name><argument_list>(<argument><expr>&amp;<name>txn_list</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the list. It should have *exactly* two entries. */</comment>
  <if>if <condition>(<expr><name><name>txn_list</name>-&gt;<name>nelts</name></name> != 2</expr>)</condition><then>
    <goto>goto <name>all_bad</name>;</goto></then></if>

  <comment type="block">/* We should be able to find our 2 txn names in the list, in some
     order. */</comment>
  <if>if <condition>(<expr>(! <call><name>strcmp</name><argument_list>(<argument><expr><name>name1</name></expr></argument>, <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>txn_list</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)
      &amp;&amp; (! <call><name>strcmp</name><argument_list>(<argument><expr><name>name2</name></expr></argument>, <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>txn_list</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <goto>goto <name>all_good</name>;</goto></then>

  <else>else <if>if <condition>(<expr>(! <call><name>strcmp</name><argument_list>(<argument><expr><name>name2</name></expr></argument>, <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>txn_list</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)
           &amp;&amp; (! <call><name>strcmp</name><argument_list>(<argument><expr><name>name1</name></expr></argument>, <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>txn_list</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <goto>goto <name>all_good</name>;</goto></then></if></else></if>

 <label><name>all_bad</name>:</label>

  <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr>"Got a bogus txn list."</expr></argument>)</argument_list></call></expr>;</return>
 <label><name>all_good</name>:</label>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Generate N consecutive transactions, then abort them all.  Return
   the list of transaction names. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_names_are_not_reused_helper1</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>txn_names</name></decl></param>,
                                 <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr>10</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>txn_names</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create the transactions and store in a hash table the transaction
     name as the key and the svn_fs_txn_t * as the value. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>N</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr>*<name>txn_names</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr>"beginning a new transaction used an "
                                 "existing transaction name '%s'"</expr></argument>,
                                 <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>txn_names</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>txn_names</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr>(<name>svn_fs_txn_t</name> *)<name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
    }</block></for>

  <if>if <condition>(<expr><name>i</name> != <name>N</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr>"created %d transactions, but only aborted %d"</expr></argument>,
                             <argument><expr><name>N</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Compare two hash tables and ensure that no keys in the first hash
   table appear in the second hash table. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_names_are_not_reused_helper2</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>ht1</name></decl></param>,
                                 <param><decl><type><name>apr_hash_t</name> *</type><name>ht2</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ht1</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key_string</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>key_string</name> = <name>key</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ht2</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr>"the transaction name '%s' was reused"</expr></argument>,
                                 <argument><expr><name>key_string</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Make sure that transaction names are not reused. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_names_are_not_reused</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                         <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>txn_names1</name></decl>, *<decl><type ref="prev"/><name>txn_names2</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "check that transaction names are not reused"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-txn-names-are-not-reused"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create N transactions, abort them all, and collect the generated
     transaction names.  Do this twice. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>txn_names_are_not_reused_helper1</name><argument_list>(<argument><expr>&amp;<name>txn_names1</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>txn_names_are_not_reused_helper1</name><argument_list>(<argument><expr>&amp;<name>txn_names2</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check that no transaction names appear in both hash tables. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>txn_names_are_not_reused_helper2</name><argument_list>(<argument><expr><name>txn_names1</name></expr></argument>, <argument><expr><name>txn_names2</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>txn_names_are_not_reused_helper2</name><argument_list>(<argument><expr><name>txn_names2</name></expr></argument>, <argument><expr><name>txn_names1</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<comment type="block">/* Test writing &amp; reading a file's contents. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>write_and_read_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                    <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>rstream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>rstring</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>wstring</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "write and read a file's contents"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>wstring</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"Wicki wild, wicki wicki wild."</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-read-and-write-file"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Add an empty file. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"beer.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* And write some data into this file. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"beer.txt"</expr></argument>,
                                      <argument><expr><name><name>wstring</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now let's read the data back from the file. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_file_contents</name><argument_list>(<argument><expr>&amp;<name>rstream</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"beer.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__stream_to_string</name><argument_list>(<argument><expr>&amp;<name>rstring</name></expr></argument>, <argument><expr><name>rstream</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Compare what was read to what was written. */</comment>
  <if>if <condition>(<expr>! <call><name>svn_stringbuf_compare</name><argument_list>(<argument><expr><name>rstring</name></expr></argument>, <argument><expr><name>wstring</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr>"data read != data written."</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<comment type="block">/* Create a file, a directory, and a file in that directory! */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_mini_tree_transaction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                             <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "test basic file and subdirectory creation"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-create-mini-tree-txn"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Begin a new transaction that is based on revision 0.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the txn root */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create a new file in the root directory. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"wine.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create a new directory in the root directory. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"keg"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now, create a file in our new directory. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"keg/beer.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Create a file, a directory, and a file in that directory! */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_greek_tree_transaction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                              <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "make The Official Subversion Test Tree"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Prepare a txn to receive the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-create-greek-tree-txn"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create and verify the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Verify that entry KEY is present in ENTRIES, and that its value is
   an svn_fs_dirent_t whose name and id are not null. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>verify_entry</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_dirent_t</name> *</type><name>ent</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
                                      <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>ent</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"didn't find dir entry for \"%s\""</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr>(<name><name>ent</name>-&gt;<name>name</name></name> == <name>NULL</name>) &amp;&amp; (<name><name>ent</name>-&gt;<name>id</name></name> == <name>NULL</name>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"dir entry for \"%s\" has null name and null id"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><name><name>ent</name>-&gt;<name>name</name></name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"dir entry for \"%s\" has null name"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><name><name>ent</name>-&gt;<name>id</name></name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"dir entry for \"%s\" has null id"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ent</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
     <return>return <expr><call><name>svn_error_createf</name>
     <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
      <argument><expr>"dir entry for \"%s\" contains wrong name (\"%s\")"</expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ent</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>list_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
               <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "fill a directory, then list it"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-list-dir"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We create this tree
   *
   *         /q
   *         /A/x
   *         /A/y
   *         /A/z
   *         /B/m
   *         /B/n
   *         /B/o
   *
   * then list dir A.  It should have 3 files: "x", "y", and "z", no
   * more, no less.
   */</comment>

  <comment type="block">/* Create the tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"q"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/x"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/y"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/z"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B/m"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B/n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B/o"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get A's entries. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_dir_entries</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Make sure exactly the right set of entries is present. */</comment>
  <if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call> != 3</expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr>"unexpected number of entries in dir"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_entry</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr>"x"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_entry</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr>"y"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_entry</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr>"z"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>revision_props</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
               <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name></type> <name>s1</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>initial_props</name><index>[<expr>4</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr>"color"</expr>, <expr>"red"</expr> }</block></expr>,
    <expr><block>{ <expr>"size"</expr>, <expr>"XXL"</expr> }</block></expr>,
    <expr><block>{ <expr>"favorite saturday morning cartoon"</expr>, <expr>"looney tunes"</expr> }</block></expr>,
    <expr><block>{ <expr>"auto"</expr>, <expr>"Green 1997 Saturn SL1"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>final_props</name><index>[<expr>4</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr>"color"</expr>, <expr>"violet"</expr> }</block></expr>,
    <expr><block>{ <expr>"flower"</expr>, <expr>"violet"</expr> }</block></expr>,
    <expr><block>{ <expr>"favorite saturday morning cartoon"</expr>, <expr>"looney tunes"</expr> }</block></expr>,
    <expr><block>{ <expr>"auto"</expr>, <expr>"Red 2000 Chevrolet Blazer"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "set and get some revision properties"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Open the fs */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-rev-props"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set some properties on the revision. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name><name>initial_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_rev_prop</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>initial_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* Change some of the above properties. */</comment>
  <expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>"violet"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_rev_prop</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"color"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>"Red 2000 Chevrolet Blazer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_rev_prop</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"auto"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Remove a property altogether */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_rev_prop</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"size"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy a property's value into a new property. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"color"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>s1</name>.<name>data</name></name> = <name><name>value</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s1</name>.<name>len</name></name> = <name><name>value</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_rev_prop</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"flower"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Obtain a list of all current properties, and make sure it matches
     the expected values. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_proplist</name><argument_list>(<argument><expr>&amp;<name>proplist</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{
    <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>prop_value</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>)</argument_list></call> &lt; 4</expr> )</condition><then>
      <return>return <expr><call><name>svn_error_createf</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"too few revision properties found"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* Loop through our list of expected revision property name/value
       pairs. */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
      <block>{
        <comment type="block">/* For each expected property: */</comment>

        <comment type="block">/* Step 1.  Find it by name in the hash of all rev. props
           returned to us by svn_fs_revision_proplist.  If it can't be
           found, return an error. */</comment>
        <expr_stmt><expr><name>prop_value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>,
                                  <argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>,
                                  <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>! <name>prop_value</name></expr>)</condition><then>
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"unable to find expected revision property"</expr></argument>)</argument_list></call></expr>;</return></then></if>

        <comment type="block">/* Step 2.  Make sure the value associated with it is the same
           as what was expected, else return an error. */</comment>
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"revision property had an unexpected value"</expr></argument>)</argument_list></call></expr>;</return></then></if>
      }</block></for>
  }</block>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>transaction_props</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                  <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>after_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name></type> <name>s1</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>initial_props</name><index>[<expr>4</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr>"color"</expr>, <expr>"red"</expr> }</block></expr>,
    <expr><block>{ <expr>"size"</expr>, <expr>"XXL"</expr> }</block></expr>,
    <expr><block>{ <expr>"favorite saturday morning cartoon"</expr>, <expr>"looney tunes"</expr> }</block></expr>,
    <expr><block>{ <expr>"auto"</expr>, <expr>"Green 1997 Saturn SL1"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>final_props</name><index>[<expr>5</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr>"color"</expr>, <expr>"violet"</expr> }</block></expr>,
    <expr><block>{ <expr>"flower"</expr>, <expr>"violet"</expr> }</block></expr>,
    <expr><block>{ <expr>"favorite saturday morning cartoon"</expr>, <expr>"looney tunes"</expr> }</block></expr>,
    <expr><block>{ <expr>"auto"</expr>, <expr>"Red 2000 Chevrolet Blazer"</expr> }</block></expr>,
    <expr><block>{ <expr><name>SVN_PROP_REVISION_DATE</name></expr>, <expr>"&lt;some datestamp value&gt;"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "set/get txn props, commit, validate new rev props"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Open the fs */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-txn-props"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set some properties on the revision. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name><name>initial_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_txn_prop</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name><name>initial_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* Change some of the above properties. */</comment>
  <expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>"violet"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_txn_prop</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr>"color"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>"Red 2000 Chevrolet Blazer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_txn_prop</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr>"auto"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Remove a property altogether */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_txn_prop</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr>"size"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy a property's value into a new property. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_prop</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"color"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>s1</name>.<name>data</name></name> = <name><name>value</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s1</name>.<name>len</name></name> = <name><name>value</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_txn_prop</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr>"flower"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Obtain a list of all current properties, and make sure it matches
     the expected values. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_proplist</name><argument_list>(<argument><expr>&amp;<name>proplist</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{
    <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>prop_value</name></decl>;</decl_stmt>

    <comment type="block">/* All transactions get a datestamp property at their inception,
       so we expect *5*, not 4 properties. */</comment>
    <if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>)</argument_list></call> != 5</expr> )</condition><then>
      <return>return <expr><call><name>svn_error_createf</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"unexpected number of transaction properties were found"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* Loop through our list of expected revision property name/value
       pairs. */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
      <block>{
        <comment type="block">/* For each expected property: */</comment>

        <comment type="block">/* Step 1.  Find it by name in the hash of all rev. props
           returned to us by svn_fs_revision_proplist.  If it can't be
           found, return an error. */</comment>
        <expr_stmt><expr><name>prop_value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>,
                                  <argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>,
                                  <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>! <name>prop_value</name></expr>)</condition><then>
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"unable to find expected transaction property"</expr></argument>)</argument_list></call></expr>;</return></then></if>

        <comment type="block">/* Step 2.  Make sure the value associated with it is the same
           as what was expected, else return an error. */</comment>
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name>
              <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr>"transaction property had an unexpected value"</expr></argument>)</argument_list></call></expr>;</return></then></if></then></if>
      }</block></for>
  }</block>

  <comment type="block">/* Commit the transaction. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>after_rev</name> != 1</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"committed transaction got wrong revision number"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Obtain a list of all properties on the new revision, and make
     sure it matches the expected values.  If you're wondering, the
     expected values should be the exact same set of properties that
     existed on the transaction just prior to its being committed. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_proplist</name><argument_list>(<argument><expr>&amp;<name>proplist</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{
    <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>prop_value</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>)</argument_list></call> &lt; 5</expr> )</condition><then>
      <return>return <expr><call><name>svn_error_createf</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"unexpected number of revision properties were found"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* Loop through our list of expected revision property name/value
       pairs. */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
      <block>{
        <comment type="block">/* For each expected property: */</comment>

        <comment type="block">/* Step 1.  Find it by name in the hash of all rev. props
           returned to us by svn_fs_revision_proplist.  If it can't be
           found, return an error. */</comment>
        <expr_stmt><expr><name>prop_value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>,
                                  <argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>,
                                  <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>! <name>prop_value</name></expr>)</condition><then>
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"unable to find expected revision property"</expr></argument>)</argument_list></call></expr>;</return></then></if>

        <comment type="block">/* Step 2.  Make sure the value associated with it is the same
           as what was expected, else return an error. */</comment>
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name>
              <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr>"revision property had an unexpected value"</expr></argument>)</argument_list></call></expr>;</return></then></if></then></if>
      }</block></for>
  }</block>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>node_props</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
           <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
           <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name></type> <name>s1</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>initial_props</name><index>[<expr>4</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr>"Best Rock Artist"</expr>, <expr>"Creed"</expr> }</block></expr>,
    <expr><block>{ <expr>"Best Rap Artist"</expr>, <expr>"Eminem"</expr> }</block></expr>,
    <expr><block>{ <expr>"Best Country Artist"</expr>, <expr>"(null)"</expr> }</block></expr>,
    <expr><block>{ <expr>"Best Sound Designer"</expr>, <expr>"Pluessman"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>final_props</name><index>[<expr>4</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr>"Best Rock Artist"</expr>, <expr>"P.O.D."</expr> }</block></expr>,
    <expr><block>{ <expr>"Best Rap Artist"</expr>, <expr>"Busta Rhymes"</expr> }</block></expr>,
    <expr><block>{ <expr>"Best Sound Designer"</expr>, <expr>"Pluessman"</expr> }</block></expr>,
    <expr><block>{ <expr>"Biggest Cakewalk Fanatic"</expr>, <expr>"Pluessman"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "set and get some node properties"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Open the fs and transaction */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-node-props"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Make a node to put some properties into */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set some properties on the nodes. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name><name>initial_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name>
              <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>, <argument><expr><name><name>initial_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* Change some of the above properties. */</comment>
  <expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>"P.O.D."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>, <argument><expr>"Best Rock Artist"</expr></argument>,
                                  <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>"Busta Rhymes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>, <argument><expr>"Best Rap Artist"</expr></argument>,
                                  <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Remove a property altogether */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>,
                                  <argument><expr>"Best Country Artist"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy a property's value into a new property. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_prop</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>,
                           <argument><expr>"Best Sound Designer"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>s1</name>.<name>data</name></name> = <name><name>value</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s1</name>.<name>len</name></name> = <name><name>value</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>,
                                  <argument><expr>"Biggest Cakewalk Fanatic"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Obtain a list of all current properties, and make sure it matches
     the expected values. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_proplist</name><argument_list>(<argument><expr>&amp;<name>proplist</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{
    <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>prop_value</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>)</argument_list></call> != 4</expr> )</condition><then>
      <return>return <expr><call><name>svn_error_createf</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"unexpected number of node properties were found"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* Loop through our list of expected node property name/value
       pairs. */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
      <block>{
        <comment type="block">/* For each expected property: */</comment>

        <comment type="block">/* Step 1.  Find it by name in the hash of all node props
           returned to us by svn_fs_node_proplist.  If it can't be
           found, return an error. */</comment>
        <expr_stmt><expr><name>prop_value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>,
                                  <argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>,
                                  <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>! <name>prop_value</name></expr>)</condition><then>
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"unable to find expected node property"</expr></argument>)</argument_list></call></expr>;</return></then></if>

        <comment type="block">/* Step 2.  Make sure the value associated with it is the same
           as what was expected, else return an error. */</comment>
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"node property had an unexpected value"</expr></argument>)</argument_list></call></expr>;</return></then></if>
      }</block></for>
  }</block>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<comment type="block">/* Set *PRESENT to true if entry NAME is present in directory PATH
   under ROOT, else set *PRESENT to false. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_entry</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
            <param><decl><type><name>svn_boolean_t</name> *</type><name>present</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_dirent_t</name> *</type><name>ent</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_dir_entries</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ent</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>ent</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>present</name> = <name>TRUE</name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<name>present</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Return an error if entry NAME is absent in directory PATH under ROOT. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_entry_present</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>present</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>present</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <name>present</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"entry \"%s\" absent when it should be present"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Return an error if entry NAME is present in directory PATH under ROOT. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_entry_absent</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>present</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>present</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>present</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"entry \"%s\" present when it should be absent"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Fetch the youngest revision from a repos. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fetch_youngest_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                   <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>new_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>, <decl><type ref="prev"/><name>new_youngest_rev</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "fetch the youngest revision from a filesystem"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-youngest-rev"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get youngest revision of brand spankin' new filesystem. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Prepare a txn to receive the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Commit it. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>new_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the new youngest revision. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>new_youngest_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>youngest_rev</name> == <name>new_rev</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr>"commit didn't bump up revision number"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><name>new_youngest_rev</name> != <name>new_rev</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr>"couldn't fetch youngest revision"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Test committing against an empty repository.
   todo: also test committing against youngest? */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>basic_commit</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
             <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>revision_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>before_rev</name></decl>, <decl><type ref="prev"/><name>after_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "basic commit"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Prepare a filesystem. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-basic-commit"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Save the current youngest revision. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>before_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Prepare a txn to receive the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Paranoidly check that the current youngest rev is unchanged. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>after_rev</name> != <name>before_rev</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"youngest revision changed unexpectedly"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Create the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Commit it. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr>&amp;<name>conflict</name></expr></argument>, <argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Make sure it's a different revision than before. */</comment>
  <if>if <condition>(<expr><name>after_rev</name> == <name>before_rev</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"youngest revision failed to change"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Get root of the revision */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__check_greek_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_tree_node_validation</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                          <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>revision_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>after_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "testing tree validation helper"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Prepare a filesystem. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-validate-tree-entries"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In a txn, create the greek tree. */</comment>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"iota"</expr>,        <expr>"This is the file 'iota'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Carefully validate that tree in the transaction. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>,
                                    <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Go ahead and commit the tree, and destroy the txn object.  */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr>&amp;<name>conflict</name></expr></argument>, <argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Carefully validate that tree in the new revision, now. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>,
                                    <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In a new txn, modify the greek tree. */</comment>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"iota"</expr>,          <expr>"This is a new version of 'iota'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A"</expr>,             <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,    <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>,   <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,    <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C/kappa"</expr>,     <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,     <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/chi"</expr>,     <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/psi"</expr>,     <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/omega"</expr>,   <expr>"This is the file 'omega'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I/delta"</expr>,   <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr>"This is a new version of 'iota'.\n"</expr></argument>,
             <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/delta"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/delta"</expr></argument>, <argument><expr>"This is the file 'delta'.\n"</expr></argument>,
             <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/epsilon"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/epsilon"</expr></argument>, <argument><expr>"This is the file 'epsilon'.\n"</expr></argument>,
             <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C/kappa"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C/kappa"</expr></argument>, <argument><expr>"This is the file 'kappa'.\n"</expr></argument>,
             <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Carefully validate that tree in the transaction. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>19</expr></argument>,
                                    <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Go ahead and commit the tree, and destroy the txn object.  */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr>&amp;<name>conflict</name></expr></argument>, <argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Carefully validate that tree in the new revision, now. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
                                    <argument><expr>19</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Commit with merging (committing against non-youngest). */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merging_commit</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
               <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>revision_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>after_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name><name>revisions</name><index>[<expr>24</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision_count</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "merging commit"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Prepare a filesystem. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-merging-commit"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize our revision number stuffs. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init>
       <condition><expr><name>i</name> &lt; ((<sizeof>sizeof<argument_list>(<argument><expr><name>revisions</name></expr></argument>)</argument_list></sizeof>) / (<sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof>))</expr>;</condition>
       <incr><expr><name>i</name>++</expr></incr>)
    <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>i</name></expr>]</index></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></for>
  <expr_stmt><expr><name>revision_count</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = 0</expr>;</expr_stmt> <comment type="block">/* the brand spankin' new revision */</comment>

  <comment type="block">/***********************************************************************/</comment>
  <comment type="block">/* REVISION 0 */</comment>
  <comment type="block">/***********************************************************************/</comment>

  <comment type="block">/* In one txn, create and commit the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/***********************************************************************/</comment>
  <comment type="block">/* REVISION 1 */</comment>
  <comment type="block">/***********************************************************************/</comment>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"iota"</expr>,        <expr>"This is the file 'iota'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
                                    <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>

  <comment type="block">/* Let's add a directory and some files to the tree, and delete
     'iota' */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/delta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
          <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/delta"</expr></argument>, <argument><expr>"This is the file 'delta'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/epsilon"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
          <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/epsilon"</expr></argument>, <argument><expr>"This is the file 'epsilon'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C/kappa"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
          <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C/kappa"</expr></argument>, <argument><expr>"This is the file 'kappa'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/***********************************************************************/</comment>
  <comment type="block">/* REVISION 2 */</comment>
  <comment type="block">/***********************************************************************/</comment>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"A"</expr>,             <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/mu"</expr>,          <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,    <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>,   <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,    <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C/kappa"</expr>,     <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,     <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,      <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,     <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/tau"</expr>,     <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/chi"</expr>,     <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/psi"</expr>,     <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/omega"</expr>,   <expr>"This is the file 'omega'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I/delta"</expr>,   <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
                                    <argument><expr>23</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>

  <comment type="block">/* We don't think the A/D/H directory is pulling its weight...let's
     knock it off.  Oh, and let's re-add iota, too. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
          <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr>"This is the new file 'iota'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/***********************************************************************/</comment>
  <comment type="block">/* REVISION 3 */</comment>
  <comment type="block">/***********************************************************************/</comment>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"iota"</expr>,          <expr>"This is the new file 'iota'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A"</expr>,             <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/mu"</expr>,          <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,    <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>,   <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,    <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C/kappa"</expr>,     <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,     <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,      <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,     <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/tau"</expr>,     <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I/delta"</expr>,   <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
                                    <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>

  <comment type="block">/* Delete iota (yet again). */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/***********************************************************************/</comment>
  <comment type="block">/* REVISION 4 */</comment>
  <comment type="block">/***********************************************************************/</comment>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"A"</expr>,             <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/mu"</expr>,          <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,    <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>,   <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,    <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C/kappa"</expr>,     <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,     <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,      <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,     <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/tau"</expr>,     <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I/delta"</expr>,   <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
                                    <argument><expr>19</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>

  <comment type="block">/***********************************************************************/</comment>
  <comment type="block">/* GIVEN:  A and B, with common ancestor ANCESTOR, where A and B
     directories, and E, an entry in either A, B, or ANCESTOR.

     For every E, the following cases exist:
      - E exists in neither ANCESTOR nor A.
      - E doesn't exist in ANCESTOR, and has been added to A.
      - E exists in ANCESTOR, but has been deleted from A.
      - E exists in both ANCESTOR and A ...
        - but refers to different node revisions.
        - and refers to the same node revision.

     The same set of possible relationships with ANCESTOR holds for B,
     so there are thirty-six combinations.  The matrix is symmetrical
     with A and B reversed, so we only have to describe one triangular
     half, including the diagonal --- 21 combinations.

     Our goal here is to test all the possible scenarios that can
     occur given the above boolean logic table, and to make sure that
     the results we get are as expected.

     The test cases below have the following features:

     - They run straight through the scenarios as described in the
       `structure' document at this time.

     - In each case, a txn is begun based on some revision (ANCESTOR),
       is modified into a new tree (B), and then is attempted to be
       committed (which happens against the head of the tree, A).

     - If the commit is successful (and is *expected* to be such),
       that new revision (which exists now as a result of the
       successful commit) is thoroughly tested for accuracy of tree
       entries, and in the case of files, for their contents.  It is
       important to realize that these successful commits are
       advancing the head of the tree, and each one effective becomes
       the new `A' described in further test cases.
  */</comment>
  <comment type="block">/***********************************************************************/</comment>

  <comment type="block">/* (6) E exists in neither ANCESTOR nor A. */</comment>
  <block>{
    <comment type="block">/* (1) E exists in neither ANCESTOR nor B.  Can't occur, by
       assumption that E exists in either A, B, or ancestor. */</comment>

    <comment type="block">/* (1) E has been added to B.  Add E in the merged result. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"theta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"theta"</expr></argument>, <argument><expr>"This is the file 'theta'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*********************************************************************/</comment>
    <comment type="block">/* REVISION 5 */</comment>
    <comment type="block">/*********************************************************************/</comment>
    <block>{
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"theta"</expr>,         <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A"</expr>,             <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/mu"</expr>,          <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/lambda"</expr>,    <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/alpha"</expr>,   <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/beta"</expr>,    <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/F"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C/kappa"</expr>,     <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/gamma"</expr>,     <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/pi"</expr>,      <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/rho"</expr>,     <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/tau"</expr>,     <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/I"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/I/delta"</expr>,   <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
                                      <argument><expr><name>expected_entries</name></expr></argument>,
                                      <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>

    <comment type="block">/* (1) E has been deleted from B.  Can't occur, by assumption that
       E doesn't exist in ANCESTOR. */</comment>

    <comment type="block">/* (3) E exists in both ANCESTOR and B.  Can't occur, by
       assumption that E doesn't exist in ancestor. */</comment>
  }</block>

  <comment type="block">/* (5) E doesn't exist in ANCESTOR, and has been added to A. */</comment>
  <block>{
    <comment type="block">/* (1) E doesn't exist in ANCESTOR, and has been added to B.
       Conflict. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"theta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"theta"</expr></argument>, <argument><expr>"This is another file 'theta'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/theta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* (1) E exists in ANCESTOR, but has been deleted from B.  Can't
       occur, by assumption that E doesn't exist in ANCESTOR. */</comment>

    <comment type="block">/* (3) E exists in both ANCESTOR and B.  Can't occur, by assumption
       that E doesn't exist in ANCESTOR. */</comment>
  }</block>

  <comment type="block">/* (4) E exists in ANCESTOR, but has been deleted from A */</comment>
  <block>{
    <comment type="block">/* (1) E exists in ANCESTOR, but has been deleted from B.  If
       neither delete was a result of a rename, then omit E from the
       merged tree.  Otherwise, conflict. */</comment>
    <comment type="block">/* ### cmpilato todo: the rename case isn't actually handled by
       merge yet, so we know we won't get a conflict here. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*********************************************************************/</comment>
    <comment type="block">/* REVISION 6 */</comment>
    <comment type="block">/*********************************************************************/</comment>
    <block>{
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"theta"</expr>,         <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A"</expr>,             <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/mu"</expr>,          <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/lambda"</expr>,    <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/alpha"</expr>,   <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/beta"</expr>,    <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/F"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C/kappa"</expr>,     <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/gamma"</expr>,     <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/pi"</expr>,      <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/rho"</expr>,     <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/tau"</expr>,     <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/I"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/I/delta"</expr>,   <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
                                      <argument><expr><name>expected_entries</name></expr></argument>,
                                      <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>

    <comment type="block">/* Try deleting a file F inside a subtree S where S does not exist
       in the most recent revision, but does exist in the ancestor
       tree.  This should conflict. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* E exists in both ANCESTOR and B ... */</comment>
    <block>{
      <comment type="block">/* (1) but refers to different nodes.  Conflict. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>

      <comment type="block">/*********************************************************************/</comment>
      <comment type="block">/* REVISION 7 */</comment>
      <comment type="block">/*********************************************************************/</comment>

      <comment type="block">/* Re-remove A/D/H because future tests expect it to be absent. */</comment>
      <block>{
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name>
                <argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr><name>revision_count</name> - 1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
      }</block>

      <comment type="block">/*********************************************************************/</comment>
      <comment type="block">/* REVISION 8 (looks exactly like revision 6, we hope) */</comment>
      <comment type="block">/*********************************************************************/</comment>

      <comment type="block">/* (1) but refers to different revisions of the same node.
         Conflict. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/zeta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* (1) and refers to the same node revision.  Omit E from the
         merged tree.  This is already tested in Merge-Test 3
         (A/D/H/chi, A/D/H/psi, e.g.), but we'll test it here again
         anyway.  A little paranoia never hurt anyone.  */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* unrelated change */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/*********************************************************************/</comment>
      <comment type="block">/* REVISION 9 */</comment>
      <comment type="block">/*********************************************************************/</comment>
      <block>{
        <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
          <comment type="block">/* path, contents (0 = dir) */</comment>
          <expr><block>{ <expr>"theta"</expr>,         <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A"</expr>,             <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B"</expr>,           <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/lambda"</expr>,    <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/E"</expr>,         <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/E/alpha"</expr>,   <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/E/beta"</expr>,    <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/F"</expr>,         <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/C"</expr>,           <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/C/kappa"</expr>,     <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D"</expr>,           <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/gamma"</expr>,     <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G"</expr>,         <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G/pi"</expr>,      <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G/rho"</expr>,     <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G/tau"</expr>,     <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/I"</expr>,         <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/I/delta"</expr>,   <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
                                        <argument><expr><name>expected_entries</name></expr></argument>,
                                        <argument><expr>19</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
      <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
    }</block>
  }</block>

  <comment type="block">/* Preparation for upcoming tests.
     We make a new head revision, with A/mu restored, but containing
     slightly different contents than its first incarnation. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
          <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr>"A new file 'mu'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/xi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
          <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/xi"</expr></argument>, <argument><expr>"This is the file 'xi'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*********************************************************************/</comment>
  <comment type="block">/* REVISION 10 */</comment>
  <comment type="block">/*********************************************************************/</comment>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"theta"</expr>,         <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A"</expr>,             <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/mu"</expr>,          <expr>"A new file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,    <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>,   <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,    <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C/kappa"</expr>,     <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,     <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,      <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,     <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/tau"</expr>,     <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/xi"</expr>,      <expr>"This is the file 'xi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I/delta"</expr>,   <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
                                    <argument><expr>21</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>

  <comment type="block">/* (3) E exists in both ANCESTOR and A, but refers to different
     nodes. */</comment>
  <block>{
    <comment type="block">/* (1) E exists in both ANCESTOR and B, but refers to different
       nodes, and not all nodes are directories.  Conflict. */</comment>

    <comment type="block">/* ### kff todo: A/mu's contents will be exactly the same.
       If the fs ever starts optimizing this case, these tests may
       start to fail. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr>"This is the file 'mu'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* (1) E exists in both ANCESTOR and B, but refers to different
       revisions of the same node.  Conflict. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr>"A change to file 'mu'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* (1) E exists in both ANCESTOR and B, and refers to the same
       node revision.  Replace E with A's node revision.  */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>old_mu_contents</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__get_file_contents</name>
              <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr>&amp;<name>old_mu_contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>(! <name>old_mu_contents</name>) || (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>old_mu_contents</name>-&gt;<name>data</name></name></expr></argument>,
                                         <argument><expr>"This is the file 'mu'.\n"</expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"got wrong contents from an old revision tree"</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/sigma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>  <comment type="block">/* unrelated change */</comment>
              <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/sigma"</expr></argument>, <argument><expr>"This is the file 'sigma'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*********************************************************************/</comment>
      <comment type="block">/* REVISION 11 */</comment>
      <comment type="block">/*********************************************************************/</comment>
      <block>{
        <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
          <comment type="block">/* path, contents (0 = dir) */</comment>
          <expr><block>{ <expr>"theta"</expr>,         <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A"</expr>,             <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/mu"</expr>,          <expr>"A new file 'mu'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/sigma"</expr>,       <expr>"This is the file 'sigma'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B"</expr>,           <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/lambda"</expr>,    <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/E"</expr>,         <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/E/alpha"</expr>,   <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/E/beta"</expr>,    <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/F"</expr>,         <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/C"</expr>,           <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/C/kappa"</expr>,     <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D"</expr>,           <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/gamma"</expr>,     <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G"</expr>,         <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G/pi"</expr>,      <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G/rho"</expr>,     <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G/tau"</expr>,     <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G/xi"</expr>,      <expr>"This is the file 'xi'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/I"</expr>,         <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/I/delta"</expr>,   <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
                                        <argument><expr><name>expected_entries</name></expr></argument>,
                                        <argument><expr>22</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
      <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
    }</block>
  }</block>

  <comment type="block">/* Preparation for upcoming tests.
     We make a new head revision.  There are two changes in the new
     revision: A/B/lambda has been modified.  We will also use the
     recent addition of A/D/G/xi, treated as a modification to
     A/D/G. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
          <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/lambda"</expr></argument>, <argument><expr>"Change to file 'lambda'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*********************************************************************/</comment>
  <comment type="block">/* REVISION 12 */</comment>
  <comment type="block">/*********************************************************************/</comment>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"theta"</expr>,         <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A"</expr>,             <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/mu"</expr>,          <expr>"A new file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/sigma"</expr>,       <expr>"This is the file 'sigma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,    <expr>"Change to file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>,   <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,    <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C/kappa"</expr>,     <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,     <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,      <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,     <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/tau"</expr>,     <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/xi"</expr>,      <expr>"This is the file 'xi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I/delta"</expr>,   <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
                                    <argument><expr>22</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>

  <comment type="block">/* (2) E exists in both ANCESTOR and A, but refers to different
     revisions of the same node. */</comment>
  <block>{
    <comment type="block">/* (1a) E exists in both ANCESTOR and B, but refers to different
       revisions of the same file node.  Conflict. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/lambda"</expr></argument>, <argument><expr>"A different change to 'lambda'.\n"</expr></argument>,
             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/B/lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* (1b) E exists in both ANCESTOR and B, but refers to different
       revisions of the same directory node.  Merge A/E and B/E,
       recursively.  Succeed, because no conflict beneath E. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/nu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/nu"</expr></argument>, <argument><expr>"This is the file 'nu'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*********************************************************************/</comment>
    <comment type="block">/* REVISION 13 */</comment>
    <comment type="block">/*********************************************************************/</comment>
    <block>{
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"theta"</expr>,         <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A"</expr>,             <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/mu"</expr>,          <expr>"A new file 'mu'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/sigma"</expr>,       <expr>"This is the file 'sigma'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/lambda"</expr>,    <expr>"Change to file 'lambda'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/alpha"</expr>,   <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/beta"</expr>,    <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/F"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C/kappa"</expr>,     <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/gamma"</expr>,     <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/pi"</expr>,      <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/rho"</expr>,     <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/tau"</expr>,     <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/xi"</expr>,      <expr>"This is the file 'xi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/nu"</expr>,      <expr>"This is the file 'nu'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/I"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/I/delta"</expr>,   <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
                                      <argument><expr><name>expected_entries</name></expr></argument>,
                                      <argument><expr>23</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>

    <comment type="block">/* (1c) E exists in both ANCESTOR and B, but refers to different
       revisions of the same directory node.  Merge A/E and B/E,
       recursively.  Fail, because conflict beneath E. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/xi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/xi"</expr></argument>, <argument><expr>"This is a different file 'xi'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/D/G/xi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* (1) E exists in both ANCESTOR and B, and refers to the same node
       revision.  Replace E with A's node revision.  */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>old_lambda_ctnts</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__get_file_contents</name>
              <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/lambda"</expr></argument>, <argument><expr>&amp;<name>old_lambda_ctnts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>(! <name>old_lambda_ctnts</name>)
          || (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>old_lambda_ctnts</name>-&gt;<name>data</name></name></expr></argument>,
                     <argument><expr>"This is the file 'lambda'.\n"</expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"got wrong contents from an old revision tree"</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
              <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho"</expr></argument>,
               <argument><expr>"This is an irrelevant change to 'rho'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*********************************************************************/</comment>
      <comment type="block">/* REVISION 14 */</comment>
      <comment type="block">/*********************************************************************/</comment>
      <block>{
        <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
          <comment type="block">/* path, contents (0 = dir) */</comment>
          <expr><block>{ <expr>"theta"</expr>,         <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A"</expr>,             <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/mu"</expr>,          <expr>"A new file 'mu'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/sigma"</expr>,       <expr>"This is the file 'sigma'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B"</expr>,           <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/lambda"</expr>,    <expr>"Change to file 'lambda'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/E"</expr>,         <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/E/alpha"</expr>,   <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/E/beta"</expr>,    <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/B/F"</expr>,         <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/C"</expr>,           <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/C/kappa"</expr>,     <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D"</expr>,           <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/gamma"</expr>,     <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G"</expr>,         <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G/pi"</expr>,      <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G/rho"</expr>,     <expr>"This is an irrelevant change to 'rho'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G/tau"</expr>,     <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G/xi"</expr>,      <expr>"This is the file 'xi'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/G/nu"</expr>,      <expr>"This is the file 'nu'.\n"</expr>}</block></expr>,
          <expr><block>{ <expr>"A/D/I"</expr>,         <expr>0</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/I/delta"</expr>,   <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
          <expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
                                        <argument><expr><name>expected_entries</name></expr></argument>,
                                        <argument><expr>23</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
      <expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
    }</block>
  }</block>

  <comment type="block">/* (1) E exists in both ANCESTOR and A, and refers to the same node
     revision. */</comment>
  <block>{
    <comment type="block">/* (1) E exists in both ANCESTOR and B, and refers to the same
       node revision.  Nothing has happened to ANCESTOR/E, so no
       change is necessary. */</comment>

    <comment type="block">/* This has now been tested about fifty-four trillion times.  We
       don't need to test it again here. */</comment>
  }</block>

  <comment type="block">/* E exists in ANCESTOR, but has been deleted from A.  E exists in
     both ANCESTOR and B but refers to different revisions of the same
     node.  Conflict.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
          <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr>"New contents for 'iota'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copy_test</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
          <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
          <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>after_rev</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "copying and tracking copy history"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Prepare a filesystem. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-copy-test"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In first txn, create and commit the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In second txn, copy the file A/D/G/pi into the subtree A/D/H as
     pi2.  Change that file's contents to state its new name.  Along
     the way, test that the copy history was preserved both during the
     transaction and after the commit. */</comment>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/G/pi"</expr></argument>,
                      <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/pi2"</expr></argument>,
                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{ <comment type="block">/* Check that copy history was preserved. */</comment>
    <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>,
                               <argument><expr>"A/D/H/pi2"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rev</name> != <name>after_rev</name></expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"pre-commit copy history not preserved (rev lost) for A/D/H/pi2"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/D/G/pi"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"pre-commit copy history not preserved (path lost) for A/D/H/pi2"</expr></argument>)</argument_list></call></expr>;</return></then></if>
  }</block>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
          <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/pi2"</expr></argument>, <argument><expr>"This is the file 'pi2'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{ <comment type="block">/* Check that copy history is still preserved _after_ the commit. */</comment>
    <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D/H/pi2"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rev</name> != (<name>after_rev</name> - 1)</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"post-commit copy history wrong (rev) for A/D/H/pi2"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/D/G/pi"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"post-commit copy history wrong (path) for A/D/H/pi2"</expr></argument>)</argument_list></call></expr>;</return></then></if>
  }</block>

  <comment type="block">/* Let's copy the copy we just made, to make sure copy history gets
     chained correctly. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/H/pi2"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/pi3"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{ <comment type="block">/* Check the copy history. */</comment>
    <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

    <comment type="block">/* Check that the original copy still has its old history. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>after_rev</name> - 1)</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D/H/pi2"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rev</name> != (<name>after_rev</name> - 2)</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"first copy history wrong (rev) for A/D/H/pi2"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/D/G/pi"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"first copy history wrong (path) for A/D/H/pi2"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* Check that the copy of the copy has the right history. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D/H/pi3"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rev</name> != (<name>after_rev</name> - 1)</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"second copy history wrong (rev) for A/D/H/pi3"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/D/H/pi2"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"second copy history wrong (path) for A/D/H/pi3"</expr></argument>)</argument_list></call></expr>;</return></then></if>
  }</block>

  <comment type="block">/* Commit a regular change to a copy, make sure the copy history
     isn't inherited. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
          <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/pi3"</expr></argument>, <argument><expr>"This is the file 'pi3'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{ <comment type="block">/* Check the copy history. */</comment>
    <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

    <comment type="block">/* Check that the copy still has its history. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>after_rev</name> - 1)</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D/H/pi3"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rev</name> != (<name>after_rev</name> - 2)</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"copy history wrong (rev) for A/D/H/pi3"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/D/H/pi2"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"copy history wrong (path) for A/D/H/pi3"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* Check that the next revision after the copy has no copy history. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D/H/pi3"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rev</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"copy history wrong (rev) for A/D/H/pi3"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><name>path</name> != <name>NULL</name></expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"copy history wrong (path) for A/D/H/pi3"</expr></argument>)</argument_list></call></expr>;</return></then></if>
  }</block>

  <comment type="block">/* Then, as if that wasn't fun enough, copy the whole subtree A/D/H
     into the root directory as H2! */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"H2"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{ <comment type="block">/* Check the copy history. */</comment>
    <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

    <comment type="block">/* Check that the top of the copy has history. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"H2"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rev</name> != (<name>after_rev</name> - 1)</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"copy history wrong (rev) for H2"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/D/H"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"copy history wrong (path) for H2"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* Check that a random file under H2 reports no copy history. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"H2/omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rev</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"copy history wrong (rev) for H2/omega"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><name>path</name> != <name>NULL</name></expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"copy history wrong (path) for H2/omega"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* Note that H2/pi2 still has copy history, though.  See the doc
       string for svn_fs_copied_from() for more on this. */</comment>
  }</block>

  <comment type="block">/* Let's live dangerously.  What happens if we copy a path into one
     of its own children.  Looping filesystem?  Cyclic ancestry?
     Another West Virginia family tree with no branches?  We certainly
     hope that's not the case. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{ <comment type="block">/* Check the copy history. */</comment>
    <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

    <comment type="block">/* Check that the copy has history. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/B/E/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rev</name> != (<name>after_rev</name> - 1)</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"copy history wrong (rev) for A/B/E/B"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"copy history wrong (path) for A/B/E/B"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* Check that the original does not have copy history. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rev</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"copy history wrong (rev) for A/B"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><name>path</name> != <name>NULL</name></expr>)</condition><then>
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr>"copy history wrong (path) for A/B"</expr></argument>)</argument_list></call></expr>;</return></then></if>
  }</block>

  <comment type="block">/* After all these changes, let's see if the filesystem looks as we
     would expect it to. */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"iota"</expr>,        <expr>"This is the file 'iota'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"H2"</expr>,          <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"H2/chi"</expr>,      <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"H2/pi2"</expr>,      <expr>"This is the file 'pi2'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"H2/pi3"</expr>,      <expr>"This is the file 'pi3'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"H2/psi"</expr>,      <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"H2/omega"</expr>,    <expr>"This is the file 'omega'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/B"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/B/E"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/B/F"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/pi2"</expr>,   <expr>"This is the file 'pi2'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/pi3"</expr>,   <expr>"This is the file 'pi3'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
                                    <argument><expr>34</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This tests deleting of mutable nodes.  We build a tree in a
 * transaction, then try to delete various items in the tree.  We
 * never commit the tree, so every entry being deleted points to a
 * mutable node.
 *
 * ### todo: this test was written before commits worked.  It might
 * now be worthwhile to combine it with delete().
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_mutables</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "delete mutable nodes from directories"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Prepare a txn to receive the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-del-from-dir"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Baby, it's time to test like you've never tested before.  We do
   * the following, in this order:
   *
   *    1. Delete a single file somewhere, succeed.
   *    2. Delete two files of three, then make sure the third remains.
   *    3. Delete the third and last file.
   *    4. Try again to delete the dir, succeed.
   *    5. Delete one of the natively empty dirs, succeed.
   *    6. Try to delete root, fail.
   *    7. Try to delete a top-level file, succeed.
   *
   * Specifically, that's:
   *
   *    1. Delete A/D/gamma.
   *    2. Delete A/D/G/pi, A/D/G/rho.
   *    3. Delete A/D/G/tau.
   *    4. Try again to delete A/D/G, succeed.
   *    5. Delete A/C.
   *    6. Try to delete /, fail.
   *    7. Try to delete iota, succeed.
   *
   * Before and after each deletion or attempted deletion, we probe
   * the affected directory, to make sure everything is as it should
   * be.
   */</comment>

  <comment type="block">/* 1 */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>gamma_id</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>gamma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <comment type="block">/* 2 */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>pi_id</name></decl>, *<decl><type ref="prev"/><name>rho_id</name></decl>, *<decl><type ref="prev"/><name>tau_id</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>pi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>rho_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>tau_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <comment type="block">/* 3 */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>tau_id</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>tau_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <comment type="block">/* 4 */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>G_id</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>G_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* succeed */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <comment type="block">/* 5 */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>C_id</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>C_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <comment type="block">/* 6 */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>root_id</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>root_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> = <call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_FS_ROOT_DIR</name>)</expr>)</condition><then>
      <block>{
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr>"deleting root directory got wrong error"</expr></argument>)</argument_list></call></expr>;</return>
      }</block></then>
    <else>else <if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
      <block>{
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr>"deleting root directory failed to get error"</expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if></else></if>
    <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  }</block>

  <comment type="block">/* 7 */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>iota_id</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>iota_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This tests deleting in general.
 *
 * ### todo: this test was written after (and independently of)
 * delete_mutables().  It might be worthwhile to combine them.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
       <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
       <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>new_rev</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "delete nodes tree"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* This function tests 5 cases:
   *
   * 1. Delete mutable file.
   * 2. Delete mutable directory.
   * 3. Delete mutable directory with immutable nodes.
   * 4. Delete immutable file.
   * 5. Delete immutable directory.
   */</comment>

  <comment type="block">/* Prepare a txn to receive the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-del-tree"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* 1. Delete mutable file. */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>iota_id</name></decl>, *<decl><type ref="prev"/><name>gamma_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Check nodes revision ID is gone.  */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>iota_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>gamma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Try deleting mutable files. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Validate the tree.  */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>18</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <comment type="block">/* Abort transaction.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* 2. Delete mutable directory. */</comment>

  <comment type="block">/* Prepare a txn to receive the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>A_id</name></decl>, *<decl><type ref="prev"/><name>mu_id</name></decl>, *<decl><type ref="prev"/><name>B_id</name></decl>, *<decl><type ref="prev"/><name>lambda_id</name></decl>, *<decl><type ref="prev"/><name>E_id</name></decl>, *<decl><type ref="prev"/><name>alpha_id</name></decl>,
      *<decl><type ref="prev"/><name>beta_id</name></decl>, *<decl><type ref="prev"/><name>F_id</name></decl>, *<decl><type ref="prev"/><name>C_id</name></decl>, *<decl><type ref="prev"/><name>D_id</name></decl>, *<decl><type ref="prev"/><name>gamma_id</name></decl>, *<decl><type ref="prev"/><name>H_id</name></decl>, *<decl><type ref="prev"/><name>chi_id</name></decl>,
      *<decl><type ref="prev"/><name>psi_id</name></decl>, *<decl><type ref="prev"/><name>omega_id</name></decl>, *<decl><type ref="prev"/><name>G_id</name></decl>, *<decl><type ref="prev"/><name>pi_id</name></decl>, *<decl><type ref="prev"/><name>rho_id</name></decl>, *<decl><type ref="prev"/><name>tau_id</name></decl>;</decl_stmt>

    <comment type="block">/* Check nodes revision ID is gone.  */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>A_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>mu_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>B_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>lambda_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>E_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>alpha_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/alpha"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E"</expr></argument>, <argument><expr>"alpha"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>beta_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/beta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E"</expr></argument>, <argument><expr>"beta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>F_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>C_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>D_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>gamma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>H_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>chi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/chi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"chi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>psi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/psi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"psi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>omega_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>G_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>pi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>rho_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>tau_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Try deleting a mutable empty dir. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Now delete a mutable non-empty dir. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Validate the tree.  */</comment>
    <block>{
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"iota"</expr>,        <expr>"This is the file 'iota'.\n"</expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
  }</block>

  <comment type="block">/* Abort transaction.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* 3. Delete mutable directory with immutable nodes. */</comment>

  <comment type="block">/* Prepare a txn to receive the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Commit the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>new_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create new transaction. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>A_id</name></decl>, *<decl><type ref="prev"/><name>mu_id</name></decl>, *<decl><type ref="prev"/><name>B_id</name></decl>, *<decl><type ref="prev"/><name>lambda_id</name></decl>, *<decl><type ref="prev"/><name>E_id</name></decl>, *<decl><type ref="prev"/><name>alpha_id</name></decl>,
      *<decl><type ref="prev"/><name>beta_id</name></decl>, *<decl><type ref="prev"/><name>F_id</name></decl>, *<decl><type ref="prev"/><name>C_id</name></decl>, *<decl><type ref="prev"/><name>D_id</name></decl>, *<decl><type ref="prev"/><name>gamma_id</name></decl>, *<decl><type ref="prev"/><name>H_id</name></decl>, *<decl><type ref="prev"/><name>chi_id</name></decl>,
      *<decl><type ref="prev"/><name>psi_id</name></decl>, *<decl><type ref="prev"/><name>omega_id</name></decl>, *<decl><type ref="prev"/><name>G_id</name></decl>, *<decl><type ref="prev"/><name>pi_id</name></decl>, *<decl><type ref="prev"/><name>rho_id</name></decl>, *<decl><type ref="prev"/><name>tau_id</name></decl>, *<decl><type ref="prev"/><name>sigma_id</name></decl>;</decl_stmt>

    <comment type="block">/* Create A/D/G/sigma.  This makes all components of A/D/G
       mutable.  */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/sigma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/sigma"</expr></argument>,
                                        <argument><expr>"This is another file 'sigma'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check that mutable node-revision-IDs are removed and immutable
       ones still exist.  */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>A_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>mu_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>B_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>lambda_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>E_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>alpha_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/alpha"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E"</expr></argument>, <argument><expr>"alpha"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>beta_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/beta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E"</expr></argument>, <argument><expr>"beta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>F_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>C_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>D_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>gamma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>H_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>chi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/chi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"chi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>psi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/psi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"psi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>omega_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>G_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>pi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>rho_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>tau_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>sigma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/sigma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"sigma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Delete "A" */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Validate the tree.  */</comment>
    <block>{
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"iota"</expr>,        <expr>"This is the file 'iota'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
  }</block>

  <comment type="block">/* Abort transaction.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* 4. Delete immutable file. */</comment>

  <comment type="block">/* Create new transaction. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>iota_id</name></decl>, *<decl><type ref="prev"/><name>gamma_id</name></decl>;</decl_stmt>

    <comment type="block">/* Check nodes revision ID is present.  */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>iota_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>gamma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Delete some files. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Validate the tree.  */</comment>
    <block>{
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>18</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
  }</block>

  <comment type="block">/* Abort transaction.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* 5. Delete immutable directory. */</comment>

  <comment type="block">/* Create new transaction. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>A_id</name></decl>, *<decl><type ref="prev"/><name>mu_id</name></decl>, *<decl><type ref="prev"/><name>B_id</name></decl>, *<decl><type ref="prev"/><name>lambda_id</name></decl>, *<decl><type ref="prev"/><name>E_id</name></decl>, *<decl><type ref="prev"/><name>alpha_id</name></decl>,
      *<decl><type ref="prev"/><name>beta_id</name></decl>, *<decl><type ref="prev"/><name>F_id</name></decl>, *<decl><type ref="prev"/><name>C_id</name></decl>, *<decl><type ref="prev"/><name>D_id</name></decl>, *<decl><type ref="prev"/><name>gamma_id</name></decl>, *<decl><type ref="prev"/><name>H_id</name></decl>, *<decl><type ref="prev"/><name>chi_id</name></decl>,
      *<decl><type ref="prev"/><name>psi_id</name></decl>, *<decl><type ref="prev"/><name>omega_id</name></decl>, *<decl><type ref="prev"/><name>G_id</name></decl>, *<decl><type ref="prev"/><name>pi_id</name></decl>, *<decl><type ref="prev"/><name>rho_id</name></decl>, *<decl><type ref="prev"/><name>tau_id</name></decl>;</decl_stmt>

    <comment type="block">/* Check nodes revision ID is present.  */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>A_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>mu_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>B_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>lambda_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>E_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>alpha_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/alpha"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E"</expr></argument>, <argument><expr>"alpha"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>beta_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/beta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E"</expr></argument>, <argument><expr>"beta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>F_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>C_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>D_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>gamma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>H_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>chi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/chi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"chi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>psi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/psi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"psi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>omega_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>G_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>pi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>rho_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>tau_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Delete "A" */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Validate the tree.  */</comment>
    <block>{
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"iota"</expr>,        <expr>"This is the file 'iota'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
  }</block>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<comment type="block">/* Test the datestamps on commits. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>commit_date</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
            <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
            <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>datestamp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>before_commit</name></decl>, <decl><type ref="prev"/><name>at_commit</name></decl>, <decl><type ref="prev"/><name>after_commit</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "commit datestamps"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Prepare a filesystem. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-commit-date"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>before_commit</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Commit a greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>after_commit</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the datestamp of the commit. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>datestamp</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>datestamp</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"failed to get datestamp of committed revision"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>at_commit</name></expr></argument>, <argument><expr><name><name>datestamp</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>at_commit</name> &lt; <name>before_commit</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"datestamp too early"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><name>at_commit</name> &gt; <name>after_commit</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"datestamp too late"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_old_revisions</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                    <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "check old revisions"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Prepare a filesystem. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-check-old-revisions"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Commit a greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Modify and commit iota a few times, then test to see if we can
     retrieve all the committed revisions. */</comment>
  <block>{
    <comment type="block">/* right-side numbers match revision numbers */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_1</name></cpp:macro> <cpp:value>"This is the file 'iota'.\n"</cpp:value></cpp:define>

    <comment type="block">/* Add a char to the front. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_2</name></cpp:macro> <cpp:value>"XThis is the file 'iota'.\n"</cpp:value></cpp:define>

    <comment type="block">/* Add a char to the end. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_3</name></cpp:macro> <cpp:value>"XThis is the file 'iota'.\nX"</cpp:value></cpp:define>

    <comment type="block">/* Add a couple of chars in the middle. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_4</name></cpp:macro> <cpp:value>"XThis is the X file 'iota'.\nX"</cpp:value></cpp:define>

    <comment type="block">/* Randomly add and delete chars all over. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_5</name></cpp:macro> \
    <cpp:value>"XTYhQis is ACK, PHHHT! no longer 'ioZZZZZta'.blarf\nbye"</cpp:value></cpp:define>

    <comment type="block">/* Reassure iota that it will live for quite some time. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_6</name></cpp:macro> <cpp:value>"Matthew 5:18 (Revised Standard Version) --\n\
For truly, I say to you, till heaven and earth pass away, not an iota,\n\
not a dot, will pass from the law until all is accomplished."</cpp:value></cpp:define>

    <comment type="block">/* Revert to the original contents. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_7</name></cpp:macro> <cpp:value>"This is the file 'iota'.\n"</cpp:value></cpp:define>

    <comment type="block">/* Revision 2. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>iota_contents_2</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Revision 3. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>iota_contents_3</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Revision 4. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>iota_contents_4</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Revision 5. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>iota_contents_5</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Revision 6. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>iota_contents_6</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Revision 7. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
            <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>iota_contents_7</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/** Now check the full Greek Tree in all of those revisions,
        adjusting `iota' for each one. ***/</comment>

    <comment type="block">/* Validate revision 1.  */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"iota"</expr>,        <expr><name>iota_contents_1</name></expr> }</block></expr>,
        <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <comment type="block">/* Validate revision 2.  */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"iota"</expr>,        <expr><name>iota_contents_2</name></expr> }</block></expr>,
        <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <comment type="block">/* Validate revision 3.  */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"iota"</expr>,        <expr><name>iota_contents_3</name></expr> }</block></expr>,
        <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <comment type="block">/* Validate revision 4.  */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"iota"</expr>,        <expr><name>iota_contents_4</name></expr> }</block></expr>,
        <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <comment type="block">/* Validate revision 5.  */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"iota"</expr>,        <expr><name>iota_contents_5</name></expr> }</block></expr>,
        <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <comment type="block">/* Validate revision 6.  */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"iota"</expr>,        <expr><name>iota_contents_6</name></expr> }</block></expr>,
        <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <comment type="block">/* Validate revision 7.  */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* path, contents (0 = dir) */</comment>
        <expr><block>{ <expr>"iota"</expr>,        <expr><name>iota_contents_7</name></expr> }</block></expr>,
        <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
        <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
      }</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
  }</block>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* For each revision R in FS, from 0 to MAX_REV, check that it
   matches the tree in EXPECTED_TREES[R].  Use POOL for any
   allocations.  This is a helper function for check_all_revisions. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>validate_revisions</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                   <param><decl><type><name>svn_test__tree_t</name> *</type><name>expected_trees</name></decl></param>,
                   <param><decl><type><name>svn_revnum_t</name></type> <name>max_rev</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>revision_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Validate all revisions up to the current one. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name>max_rev</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
                                   <argument><expr>(<name>svn_revnum_t</name>)<name>i</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
                                    <argument><expr><name><name>expected_trees</name><index>[<expr><name>i</name></expr>]</index></name>.<name>entries</name></expr></argument>,
                                    <argument><expr><name><name>expected_trees</name><index>[<expr><name>i</name></expr>]</index></name>.<name>num_entries</name></expr></argument>,
                                    <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
           <argument><expr>"Error validating revision %ld (youngest is %ld)"</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>max_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_all_revisions</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                    <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_test__tree_t</name></type> <name><name>expected_trees</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* one tree per commit, please */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "after each commit, check all revisions"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Create a filesystem and repository. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-check-all-revisions"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/***********************************************************************/</comment>
  <comment type="block">/* REVISION 0 */</comment>
  <comment type="block">/***********************************************************************/</comment>
  <block>{
    <expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_revisions</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>expected_trees</name></expr></argument>, <argument><expr><name>revision_count</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create and commit the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/***********************************************************************/</comment>
  <comment type="block">/* REVISION 1 */</comment>
  <comment type="block">/***********************************************************************/</comment>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"iota"</expr>,        <expr>"This is the file 'iota'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/mu"</expr>,        <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/tau"</expr>,   <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = <name>expected_entries</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 20</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_revisions</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>expected_trees</name></expr></argument>, <argument><expr><name>revision_count</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Make a new txn based on the youngest revision, make some changes,
     and commit those changes (which makes a new youngest
     revision). */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{ <expr>'a'</expr>, <expr>"A/delta"</expr>,     <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>'a'</expr>, <expr>"A/epsilon"</expr>,   <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>'a'</expr>, <expr>"A/B/Z"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>'a'</expr>, <expr>"A/B/Z/zeta"</expr>,  <expr>"This is the file 'zeta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>'d'</expr>, <expr>"A/C"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>'d'</expr>, <expr>"A/mu"</expr>,        <expr>""</expr> }</block></expr>,
      <expr><block>{ <expr>'d'</expr>, <expr>"A/D/G/tau"</expr>,   <expr>""</expr> }</block></expr>,
      <expr><block>{ <expr>'d'</expr>, <expr>"A/D/H/omega"</expr>, <expr>""</expr> }</block></expr>,
      <expr><block>{ <expr>'e'</expr>, <expr>"iota"</expr>,        <expr>"Changed file 'iota'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>'e'</expr>, <expr>"A/D/G/rho"</expr>,   <expr>"Changed file 'rho'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>script_entries</name></expr></argument>, <argument><expr>10</expr></argument>,
                                      <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/***********************************************************************/</comment>
  <comment type="block">/* REVISION 2 */</comment>
  <comment type="block">/***********************************************************************/</comment>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"iota"</expr>,        <expr>"Changed file 'iota'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/delta"</expr>,     <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/epsilon"</expr>,   <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/Z"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/Z/zeta"</expr>,  <expr>"This is the file 'zeta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"Changed file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = <name>expected_entries</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 20</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_revisions</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>expected_trees</name></expr></argument>, <argument><expr><name>revision_count</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Make a new txn based on the youngest revision, make some changes,
     and commit those changes (which makes a new youngest
     revision). */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{ <expr>'a'</expr>, <expr>"A/mu"</expr>,        <expr>"Re-added file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>'a'</expr>, <expr>"A/D/H/omega"</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* re-add omega as directory! */</comment>
      <expr><block>{ <expr>'d'</expr>, <expr>"iota"</expr>,        <expr>""</expr> }</block></expr>,
      <expr><block>{ <expr>'e'</expr>, <expr>"A/delta"</expr>,     <expr>"This is the file 'delta'.\nLine 2.\n"</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>script_entries</name></expr></argument>, <argument><expr>4</expr></argument>,
                                      <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/***********************************************************************/</comment>
  <comment type="block">/* REVISION 3 */</comment>
  <comment type="block">/***********************************************************************/</comment>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/delta"</expr>,     <expr>"This is the file 'delta'.\nLine 2.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/epsilon"</expr>,   <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/mu"</expr>,        <expr>"Re-added file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/Z"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/Z/zeta"</expr>,  <expr>"This is the file 'zeta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"Changed file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>0</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = <name>expected_entries</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 21</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_revisions</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>expected_trees</name></expr></argument>, <argument><expr><name>revision_count</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Make a new txn based on the youngest revision, make some changes,
     and commit those changes (which makes a new youngest
     revision). */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{ <expr>'c'</expr>, <expr>"A/D/G"</expr>,        <expr>"A/D/G2"</expr> }</block></expr>,
      <expr><block>{ <expr>'c'</expr>, <expr>"A/epsilon"</expr>,    <expr>"A/B/epsilon"</expr> }</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>script_entries</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/***********************************************************************/</comment>
  <comment type="block">/* REVISION 4 */</comment>
  <comment type="block">/***********************************************************************/</comment>
  <block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* path, contents (0 = dir) */</comment>
      <expr><block>{ <expr>"A"</expr>,           <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/delta"</expr>,     <expr>"This is the file 'delta'.\nLine 2.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/epsilon"</expr>,   <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/mu"</expr>,        <expr>"Re-added file 'mu'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/lambda"</expr>,  <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/E/beta"</expr>,  <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/F"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/Z"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/B/Z/zeta"</expr>,  <expr>"This is the file 'zeta'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D"</expr>,         <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/gamma"</expr>,   <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/pi"</expr>,    <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G/rho"</expr>,   <expr>"Changed file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G2"</expr>,      <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G2/pi"</expr>,   <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/G2/rho"</expr>,  <expr>"Changed file 'rho'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H"</expr>,       <expr>0</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/chi"</expr>,   <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/psi"</expr>,   <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
      <expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>0</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = <name>expected_entries</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 25</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_revisions</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>expected_trees</name></expr></argument>, <argument><expr><name>revision_count</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Helper function for large_file_integrity().  Given a ROOT and PATH
   to a file, calculate and return the MD5 digest for the contents of
   the file. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_file_digest</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl></param>,
                <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>apr_size_t</name></type> <name>buf_size</name> <init>= <expr>100000</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_md5_ctx_t</name></type> <name>context</name></decl>;</decl_stmt>

  <comment type="block">/* ### todo:  Pool usage in svndiff is currently really, really
     crappy.  We need to keep this buffer fairly large so we don't run
     out of memory doing undeltification of large files into tiny
     buffers.  Issue #465.  */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>buf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Get a stream for the file contents. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_file_contents</name><argument_list>(<argument><expr>&amp;<name>stream</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize APR MD5 context. */</comment>
  <expr_stmt><expr><call><name>apr_md5_init</name><argument_list>(<argument><expr>&amp;<name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <do>do
    <block>{
      <comment type="block">/* "please fill the buf with bytes" */</comment>
      <expr_stmt><expr><name>len</name> = <name>buf_size</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Update the MD5 calculation with the data we just read.  */</comment>
      <expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;<name>context</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block> while <condition>(<expr><name>len</name> == <name>buf_size</name></expr>)</condition>;</do>  <comment type="block">/* Continue until a short read. */</comment>

  <comment type="block">/* Finalize MD5 calculation. */</comment>
  <expr_stmt><expr><call><name>apr_md5_final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>&amp;<name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Return a pseudo-random number in the range [0,SCALAR) i.e. return
   a number N such that 0 &lt;= N &lt; SCALAR */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>my_rand</name><parameter_list>(<param><decl><type><name>int</name></type> <name>scalar</name></decl></param>, <param><decl><type><name>apr_uint32_t</name> *</type><name>seed</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>apr_uint32_t</name></type> <name>TEST_RAND_MAX</name> <init>= <expr>0xffffffffUL</expr></init></decl>;</decl_stmt>
  <comment type="block">/* Assumes TEST_RAND_MAX+1 can be exactly represented in a double */</comment>
  <return>return <expr><call>(<name>int</name>)<argument_list>(<argument><expr>((<name>double</name>)<call><name>svn_test_rand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call>
                / ((<name>double</name>)<name>TEST_RAND_MAX</name>+1.0))
               * (<name>double</name>)<name>scalar</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Put pseudo-random bytes in buffer BUF (which is LEN bytes long).
   If FULL is TRUE, simply replace every byte in BUF with a
   pseudo-random byte, else, replace a pseudo-random collection of
   bytes with pseudo-random data. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>random_data_to_buffer</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
                      <param><decl><type><name>apr_size_t</name></type> <name>buf_len</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>full</name></decl></param>,
                      <param><decl><type><name>apr_uint32_t</name> *</type><name>seed</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>num_bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>offset</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ds_off</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dataset</name> <init>= <expr>"0123456789"</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>dataset_size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>full</name></expr>)</condition><then>
    <block>{
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>buf_len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <expr_stmt><expr><name>ds_off</name> = <call><name>my_rand</name><argument_list>(<argument><expr><name>dataset_size</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>dataset</name><index>[<expr><name>ds_off</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>

      <return>return;</return>
    }</block></then></if>

  <expr_stmt><expr><name>num_bytes</name> = <call><name>my_rand</name><argument_list>(<argument><expr><name>buf_len</name> / 100</expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_bytes</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><name>offset</name> = <call><name>my_rand</name><argument_list>(<argument><expr><name>buf_len</name> - 1</expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ds_off</name> = <call><name>my_rand</name><argument_list>(<argument><expr><name>dataset_size</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name></expr>]</index></name> = <name><name>dataset</name><index>[<expr><name>ds_off</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

  <return>return;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>file_integrity_helper</name><parameter_list>(<param><decl><type><name>apr_size_t</name></type> <name>filesize</name></decl></param>, <param><decl><type><name>apr_uint32_t</name> *</type><name>seed</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_type</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_name</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name></type> <name>contents</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>content_buffer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest_list</name><index>[<expr>100</expr>]</index><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>wh_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>wh_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>j</name></decl>;</decl_stmt>

  <comment type="block">/* Create a filesystem and repository. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr><name>fs_name</name></expr></argument>, <argument><expr><name>fs_type</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set up our file contents string buffer. */</comment>
  <expr_stmt><expr><name>content_buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>contents</name>.<name>data</name></name> = <name>content_buffer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>contents</name>.<name>len</name></name> = <name>filesize</name></expr>;</expr_stmt>

  <comment type="block">/* THE PLAN:

     The plan here is simple.  We have a very large file (FILESIZE
     bytes) that we initialize with pseudo-random data and commit.
     Then we make pseudo-random modifications to that file's contents,
     committing after each mod.  Prior to each commit, we generate an
     MD5 checksum for the contents of the file, storing each of those
     checksums in an array.  After we've made a whole bunch of edits
     and commits, we'll re-check that file's contents as of each
     revision in the repository, recalculate a checksum for those
     contents, and make sure the "before" and "after" checksums
     match.  */</comment>

  <comment type="block">/* Create a big, ugly, pseudo-random-filled file and commit it.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>random_data_to_buffer</name><argument_list>(<argument><expr><name>content_buffer</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>contents</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>contents</name>.<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_apply_textdelta</name>
          <argument_list>(<argument><expr>&amp;<name>wh_func</name></expr></argument>, <argument><expr>&amp;<name>wh_baton</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_string</name><argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>wh_func</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_deltify_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>digest_list</name><index>[<expr><name>youngest_rev</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now, let's make some edits to the beginning of our file, and
     commit those. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>random_data_to_buffer</name><argument_list>(<argument><expr><name>content_buffer</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>contents</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>contents</name>.<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_apply_textdelta</name>
          <argument_list>(<argument><expr>&amp;<name>wh_func</name></expr></argument>, <argument><expr>&amp;<name>wh_baton</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_string</name><argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>wh_func</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_deltify_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>digest_list</name><index>[<expr><name>youngest_rev</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now, let's make some edits to the end of our file. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>random_data_to_buffer</name><argument_list>(<argument><expr><name>content_buffer</name> + (<name>filesize</name> - 20)</expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>contents</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>contents</name>.<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_apply_textdelta</name>
          <argument_list>(<argument><expr>&amp;<name>wh_func</name></expr></argument>, <argument><expr>&amp;<name>wh_baton</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_string</name><argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>wh_func</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_deltify_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>digest_list</name><index>[<expr><name>youngest_rev</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* How about some edits to both the beginning and the end of the
     file? */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>random_data_to_buffer</name><argument_list>(<argument><expr><name>content_buffer</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>random_data_to_buffer</name><argument_list>(<argument><expr><name>content_buffer</name> + (<name>filesize</name> - 20)</expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>contents</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>contents</name>.<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_apply_textdelta</name>
          <argument_list>(<argument><expr>&amp;<name>wh_func</name></expr></argument>, <argument><expr>&amp;<name>wh_baton</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_string</name><argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>wh_func</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_deltify_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>digest_list</name><index>[<expr><name>youngest_rev</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Alright, now we're just going to go crazy.  Let's make many more
     edits -- pseudo-random numbers and offsets of bytes changed to
     more pseudo-random values.  */</comment>
  <for>for (<init><expr><name>j</name> = <name>youngest_rev</name></expr>;</init> <condition><expr><name>j</name> &lt; 30</expr>;</condition> <incr><expr><name>j</name> = <name>youngest_rev</name></expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>random_data_to_buffer</name><argument_list>(<argument><expr><name>content_buffer</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>contents</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>contents</name>.<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_apply_textdelta</name><argument_list>(<argument><expr>&amp;<name>wh_func</name></expr></argument>, <argument><expr>&amp;<name>wh_baton</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>,
                                     <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_string</name>
              <argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>wh_func</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_deltify_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>digest_list</name><index>[<expr><name>youngest_rev</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* Now, calculate an MD5 digest for the contents of our big ugly
     file in each revision currently in existence, and make the sure
     the checksum matches the checksum of the data prior to its
     commit. */</comment>
  <for>for (<init><expr><name>j</name> = <name>youngest_rev</name></expr>;</init> <condition><expr><name>j</name> &gt; 0</expr>;</condition> <incr><expr><name>j</name>--</expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_file_digest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>digest_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr>"MD5 checksum failure, revision %ld"</expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>medium_file_integrity</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                      <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>seed</name> <init>= <expr>(<name>apr_uint32_t</name>) <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>*<name>msg</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                      <argument><expr>"create and modify medium file (seed=%lu)"</expr></argument>,
                      <argument><expr>(<name>unsigned</name> <name>long</name>) <name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Being no larger than the standard delta window size affects
     deltification internally, so test that. */</comment>
  <return>return <expr><call><name>file_integrity_helper</name><argument_list>(<argument><expr><name>SVN_DELTA_WINDOW_SIZE</name></expr></argument>, <argument><expr>&amp;<name>seed</name></expr></argument>, <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>,
                               <argument><expr>"test-repo-medium-file-integrity"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>large_file_integrity</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                     <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>seed</name> <init>= <expr>(<name>apr_uint32_t</name>) <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>*<name>msg</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                      <argument><expr>"create and modify large file (seed=%lu)"</expr></argument>,
                      <argument><expr>(<name>unsigned</name> <name>long</name>) <name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Being larger than the standard delta window size affects
     deltification internally, so test that. */</comment>
  <return>return <expr><call><name>file_integrity_helper</name><argument_list>(<argument><expr><name>SVN_DELTA_WINDOW_SIZE</name> + 1</expr></argument>, <argument><expr>&amp;<name>seed</name></expr></argument>, <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>,
                               <argument><expr>"test-repo-large-file-integrity"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_root_revision</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                    <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>, <decl><type ref="prev"/><name>test_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "ensure accurate storage of root node"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Create a filesystem and repository. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-check-root-revision"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create and commit the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Root node's revision should be the same as YOUNGEST_REV. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_created_rev</name><argument_list>(<argument><expr>&amp;<name>test_rev</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>test_rev</name> != <name>youngest_rev</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"Root node in revision %ld has unexpected stored revision %ld"</expr></argument>,
       <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>test_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 10</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <comment type="block">/* Create and commit the greek tree. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
              <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>,
               <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>"iota version %d"</expr></argument>, <argument><expr><name>i</name> + 2</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Root node's revision should be the same as YOUNGEST_REV. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_created_rev</name><argument_list>(<argument><expr>&amp;<name>test_rev</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>test_rev</name> != <name>youngest_rev</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr>"Root node in revision %ld has unexpected stored revision %ld"</expr></argument>,
           <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>test_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<struct>struct <name>node_created_rev_args</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>verify_path_revs</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                 <param><decl><type>struct <name>node_created_rev_args</name> *</type><name>args</name></decl></param>,
                 <param><decl><type><name>int</name></type> <name>num_path_revs</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_path_revs</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_created_rev</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>rev</name> != <name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rev</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr>"verify_path_revs: '%s' has created rev '%ld' "
           "(expected '%ld')"</expr></argument>,
           <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_node_created_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                      <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>node_created_rev_args</name></type> <name><name>path_revs</name><index>[<expr>21</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>greek_paths</name><index>[<expr>21</expr>]</index></name> <init>= <expr><block>{
    <comment type="block">/*  0 */</comment> <expr>""</expr>,
    <comment type="block">/*  1 */</comment> <expr>"iota"</expr>,
    <comment type="block">/*  2 */</comment> <expr>"A"</expr>,
    <comment type="block">/*  3 */</comment> <expr>"A/mu"</expr>,
    <comment type="block">/*  4 */</comment> <expr>"A/B"</expr>,
    <comment type="block">/*  5 */</comment> <expr>"A/B/lambda"</expr>,
    <comment type="block">/*  6 */</comment> <expr>"A/B/E"</expr>,
    <comment type="block">/*  7 */</comment> <expr>"A/B/E/alpha"</expr>,
    <comment type="block">/*  8 */</comment> <expr>"A/B/E/beta"</expr>,
    <comment type="block">/*  9 */</comment> <expr>"A/B/F"</expr>,
    <comment type="block">/* 10 */</comment> <expr>"A/C"</expr>,
    <comment type="block">/* 11 */</comment> <expr>"A/D"</expr>,
    <comment type="block">/* 12 */</comment> <expr>"A/D/gamma"</expr>,
    <comment type="block">/* 13 */</comment> <expr>"A/D/G"</expr>,
    <comment type="block">/* 14 */</comment> <expr>"A/D/G/pi"</expr>,
    <comment type="block">/* 15 */</comment> <expr>"A/D/G/rho"</expr>,
    <comment type="block">/* 16 */</comment> <expr>"A/D/G/tau"</expr>,
    <comment type="block">/* 17 */</comment> <expr>"A/D/H"</expr>,
    <comment type="block">/* 18 */</comment> <expr>"A/D/H/chi"</expr>,
    <comment type="block">/* 19 */</comment> <expr>"A/D/H/psi"</expr>,
    <comment type="block">/* 20 */</comment> <expr>"A/D/H/omega"</expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "svn_fs_node_created_rev test"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Initialize the paths in our args list. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 20</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <expr_stmt><expr><name><name>path_revs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name> = <name><name>greek_paths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>

  <comment type="block">/* Create a filesystem and repository. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-node-created-rev"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Created the greek tree in revision 1. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now, prior to committing, all these nodes should have an invalid
     created rev.  After all, the rev has been created yet.  Verify
     this. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 20</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <expr_stmt><expr><name><name>path_revs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></for>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now commit the transaction. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now, we have a new revision, and all paths in it should have a
     created rev of 1.  Verify this. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 20</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <expr_stmt><expr><name><name>path_revs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rev</name> = 1</expr>;</expr_stmt></for>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*** Let's make some changes/commits here and there, and make sure
       we can keep this whole created rev thing in good standing.  The
       general rule here is that prior to commit, mutable things have
       an invalid created rev, immutable things have their original
       created rev.  After the commit, those things which had invalid
       created revs in the transaction now have the youngest revision
       as their created rev.

       ### NOTE: Bubble-up currently affect the created revisions for
       directory nodes.  I'm not sure if this is the behavior we've
       settled on as desired.
  */</comment>

  <comment type="block">/*** clear the per-commit pool */</comment>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* begin a new transaction */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* The created revs on a txn root should be the same as on the rev
     root it came from, if we haven't made changes yet.  (See issue
     #2608.) */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* make mods */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
          <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr>"pointless mod here"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* verify created revs */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>0</expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt> <comment type="block">/* (root) */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>1</expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt> <comment type="block">/* iota */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* commit transaction */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* get a revision root for the new revision */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* verify created revs */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>0</expr>]</index></name>.<name>rev</name> = 2</expr>;</expr_stmt> <comment type="block">/* (root) */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>1</expr>]</index></name>.<name>rev</name> = 2</expr>;</expr_stmt> <comment type="block">/* iota */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*** clear the per-commit pool */</comment>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* begin a new transaction */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* make mods */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
          <argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/omega"</expr></argument>, <argument><expr>"pointless mod here"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* verify created revs */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>0</expr>]</index></name>.<name>rev</name>  = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt> <comment type="block">/* (root) */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>2</expr>]</index></name>.<name>rev</name>  = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt> <comment type="block">/* A */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>11</expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt> <comment type="block">/* D */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>17</expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt> <comment type="block">/* H */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>20</expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt> <comment type="block">/* omega */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* commit transaction */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* get a revision root for the new revision */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* verify created revs */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>0</expr>]</index></name>.<name>rev</name>  = 3</expr>;</expr_stmt> <comment type="block">/* (root) */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>2</expr>]</index></name>.<name>rev</name>  = 3</expr>;</expr_stmt> <comment type="block">/* A */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>11</expr>]</index></name>.<name>rev</name> = 3</expr>;</expr_stmt> <comment type="block">/* D */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>17</expr>]</index></name>.<name>rev</name> = 3</expr>;</expr_stmt> <comment type="block">/* H */</comment>
  <expr_stmt><expr><name><name>path_revs</name><index>[<expr>20</expr>]</index></name>.<name>rev</name> = 3</expr>;</expr_stmt> <comment type="block">/* omega */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Destroy the per-commit subpool. */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_related</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
              <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "test svn_fs_check_related"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Create a filesystem and repository. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-check-related"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*** Step I: Build up some state in our repository through a series
       of commits */</comment>

  <comment type="block">/* Using files because bubble-up complicates the testing.  However,
     the algorithm itself is ambivalent about what type of node is
     being examined.

     - New files show up in this order (through time): A,B,C,D,E,F
     - Number following filename is the revision.
     - Vertical motion shows revision history
     - Horizontal motion show copy history.

     A1---------C4         E7
     |          |          |
     A2         C5         E8---F9
     |          |               |
     A3---B4    C6              F10
     |    |
     A4   B5----------D6
          |           |
          B6          D7
  */</comment>
  <comment type="block">/* Revision 1 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"1"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Revision 2 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Revision 3 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"3"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Revision 4 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Revision 5 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr>"5"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr>"5"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Revision 6 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr>"6"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr>"6"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr>"5"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Revision 7 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr>"7"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr>"7"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Revision 8 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr>"8"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Revision 9 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr>"9"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Revision 10 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr>"10"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*** Step II: Exhaustively verify relationship between all nodes in
       existence. */</comment>
  <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <struct>struct <name>path_rev_t</name>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
    }</block>;</struct>

    <comment type="block">/* Our 16 existing files/revisions. */</comment>
    <decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name><name>path_revs</name><index>[<expr>16</expr>]</index></name> <init>= <expr><block>{
      <expr><block>{ <expr>"A"</expr>, <expr>1</expr> }</block></expr>, <expr><block>{ <expr>"A"</expr>, <expr>2</expr> }</block></expr>, <expr><block>{ <expr>"A"</expr>, <expr>3</expr> }</block></expr>, <expr><block>{ <expr>"A"</expr>, <expr>4</expr> }</block></expr>,
      <expr><block>{ <expr>"B"</expr>, <expr>4</expr> }</block></expr>, <expr><block>{ <expr>"B"</expr>, <expr>5</expr> }</block></expr>, <expr><block>{ <expr>"B"</expr>, <expr>6</expr> }</block></expr>, <expr><block>{ <expr>"C"</expr>, <expr>4</expr> }</block></expr>,
      <expr><block>{ <expr>"C"</expr>, <expr>5</expr> }</block></expr>, <expr><block>{ <expr>"C"</expr>, <expr>6</expr> }</block></expr>, <expr><block>{ <expr>"D"</expr>, <expr>6</expr> }</block></expr>, <expr><block>{ <expr>"D"</expr>, <expr>7</expr> }</block></expr>,
      <expr><block>{ <expr>"E"</expr>, <expr>7</expr> }</block></expr>, <expr><block>{ <expr>"E"</expr>, <expr>8</expr> }</block></expr>, <expr><block>{ <expr>"F"</expr>, <expr>9</expr> }</block></expr>, <expr><block>{ <expr>"F"</expr>, <expr>10</expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name><name>related_matrix</name><index>[<expr>16</expr>]</index><index>[<expr>16</expr>]</index></name> <init>= <expr><block>{
      <comment type="block">/* A1 ... F10 across the top here*/</comment>
      <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* A1 */</comment>
      <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* A2 */</comment>
      <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* A3 */</comment>
      <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* A4 */</comment>
      <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* B4 */</comment>
      <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* B5 */</comment>
      <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* B6 */</comment>
      <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* C4 */</comment>
      <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* C5 */</comment>
      <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* C6 */</comment>
      <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* D6 */</comment>
      <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>, <comment type="block">/* D7 */</comment>
      <expr><block>{ <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr> }</block></expr>, <comment type="block">/* E7 */</comment>
      <expr><block>{ <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr> }</block></expr>, <comment type="block">/* E8 */</comment>
      <expr><block>{ <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr> }</block></expr>, <comment type="block">/* F9 */</comment>
      <expr><block>{ <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr> }</block></expr>  <comment type="block">/* F10 */</comment>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Here's the fun part.  Running the tests. */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 16</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
      <block>{
        <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; 16</expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
          <block>{
            <decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name>pr1</name> <init>= <expr><name><name>path_revs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name>pr2</name> <init>= <expr><name><name>path_revs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id1</name></decl>, *<decl><type ref="prev"/><name>id2</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>related</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

            <comment type="block">/* Get the ID for the first path/revision combination. */</comment>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>pr1</name>.<name>rev</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>id1</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name><name>pr1</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Get the ID for the second path/revision combination. */</comment>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>pr2</name>.<name>rev</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>id2</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name><name>pr2</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* &lt;exciting&gt; Now, run the relationship check! &lt;/exciting&gt; */</comment>
            <expr_stmt><expr><name>related</name> = <call><name>svn_fs_check_related</name><argument_list>(<argument><expr><name>id1</name></expr></argument>, <argument><expr><name>id2</name></expr></argument>)</argument_list></call> ? 1 : 0</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>related</name> == <name><name>related_matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
              <block>{
                <comment type="block">/* xlnt! */</comment>
              }</block></then>
            <else>else <if>if <condition>(<expr><name>related</name> &amp;&amp; (! <name><name>related_matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name>)</expr>)</condition><then>
              <block>{
                <return>return <expr><call><name>svn_error_createf</name>
                  <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                   <argument><expr>"expected '%s:%d' to be related to '%s:%d'; it was not"</expr></argument>,
                   <argument><expr><name><name>pr1</name>.<name>path</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>pr1</name>.<name>rev</name></name></expr></argument>, <argument><expr><name><name>pr2</name>.<name>path</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>pr2</name>.<name>rev</name></name></expr></argument>)</argument_list></call></expr>;</return>
              }</block></then>
            <else>else <if>if <condition>(<expr>(! <name>related</name>) &amp;&amp; <name><name>related_matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
              <block>{
                <return>return <expr><call><name>svn_error_createf</name>
                  <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                   <argument><expr>"expected '%s:%d' to not be related to '%s:%d'; it was"</expr></argument>,
                   <argument><expr><name><name>pr1</name>.<name>path</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>pr1</name>.<name>rev</name></name></expr></argument>, <argument><expr><name><name>pr2</name>.<name>path</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>pr2</name>.<name>rev</name></name></expr></argument>)</argument_list></call></expr>;</return>
              }</block></then></if></else></if></else></if>

            <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></for> <comment type="block">/* for ... */</comment>
      }</block></for> <comment type="block">/* for ... */</comment>
  }</block>

  <comment type="block">/* Destroy the subpool. */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>branch_test</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
            <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
            <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>spool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "test complex copies (branches)"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Create a filesystem and repository. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-branch-test"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*** Revision 1:  Create the greek tree in revision.  ***/</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*** Revision 2:  Copy A/D/G/rho to A/D/G/rho2.  ***/</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/G/rho"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*** Revision 3:  Copy A/D/G to A/D/G2.  ***/</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*** Revision 4:  Copy A/D to A/D2.  ***/</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*** Revision 5:  Edit all the rho's! ***/</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho"</expr></argument>,
                                      <argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho2"</expr></argument>,
                                      <argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G2/rho"</expr></argument>,
                                      <argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G2/rho2"</expr></argument>,
                                      <argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G/rho"</expr></argument>,
                                      <argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G/rho2"</expr></argument>,
                                      <argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G2/rho"</expr></argument>,
                                      <argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G2/rho2"</expr></argument>,
                                      <argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>verify_checksum</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>expected_digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>actual_digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Write a file, compare the repository's idea of its checksum
     against our idea of its checksum.  They should be the same. */</comment>

  <expr_stmt><expr>*<name>msg</name> = "test checksums"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"My text editor charges me rent."</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>expected_digest</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-verify-checksum"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"fact"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"fact"</expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_file_md5_checksum</name><argument_list>(<argument><expr><name>actual_digest</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"fact"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>expected_digest</name></expr></argument>, <argument><expr><name>actual_digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"verify-checksum: checksum mismatch:\n"
       "   expected:  %s\n"
       "     actual:  %s\n"</expr></argument>,
       <argument><expr><call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name>expected_digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name>actual_digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Helper for closest_copy_test().  Verify that CLOSEST_PATH and the
   revision associated with CLOSEST_ROOT match the EXPECTED_PATH and
   EXPECTED_REVISION, respectively. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_closest_copy_pair</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>closest_root</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>closest_path</name></decl></param>,
                       <param><decl><type><name>svn_revnum_t</name></type> <name>expected_revision</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expected_path</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>closest_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Callers must pass valid -- EXPECTED_PATH and EXPECTED_REVISION
     come as a both-or-nothing pair. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>((! <name>expected_path</name>) &amp;&amp; (! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>expected_revision</name></expr></argument>)</argument_list></call>))
         || (<name>expected_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>expected_revision</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* CLOSEST_PATH and CLOSEST_ROOT come as a both-or-nothing pair, too. */</comment>
  <if>if <condition>(<expr><name>closest_path</name> &amp;&amp; (! <name>closest_root</name>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr>"got closest path but no closest root"</expr></argument>)</argument_list></call></expr>;</return></then></if>
  <if>if <condition>(<expr>(! <name>closest_path</name>) &amp;&amp; <name>closest_root</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr>"got closest root but no closest path"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Now that our pairs are known sane, we can compare them. */</comment>
  <if>if <condition>(<expr><name>closest_path</name> &amp;&amp; (! <name>expected_path</name>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr>"got closest path ('%s') when none expected"</expr></argument>,
                             <argument><expr><name>closest_path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <if>if <condition>(<expr>(! <name>closest_path</name>) &amp;&amp; <name>expected_path</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr>"got no closest path; expected '%s'"</expr></argument>,
                             <argument><expr><name>expected_path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <if>if <condition>(<expr><name>closest_path</name> &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>closest_path</name></expr></argument>, <argument><expr><name>expected_path</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr>"got a different closest path than expected:\n"
                             "   expected:  %s\n"
                             "     actual:  %s"</expr></argument>,
                             <argument><expr><name>expected_path</name></expr></argument>, <argument><expr><name>closest_path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <if>if <condition>(<expr><name>closest_root</name></expr>)</condition><then>
    <expr_stmt><expr><name>closest_rev</name> = <call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>closest_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>closest_rev</name> != <name>expected_revision</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr>"got a different closest rev than expected:\n"
                             "   expected:  %ld\n"
                             "     actual:  %ld"</expr></argument>,
                             <argument><expr><name>expected_revision</name></expr></argument>, <argument><expr><name>closest_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>closest_copy_test</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                  <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>, *<decl><type ref="prev"/><name>croot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>after_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cpath</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>spool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "calculating closest history-affecting copies"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Prepare a filesystem. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-closest-copy"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In first txn, create and commit the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy A to Z, and commit. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Anything under Z should have a closest copy pair of ("/Z", 2), so
     we'll pick some spots to test.  Stuff under A should have no
     relevant closest copy. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"/Z"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z/D/G"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"/Z"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z/mu"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"/Z"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z/B/E/beta"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"/Z"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/B/E/beta"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Okay, so let's do some more stuff.  We'll edit Z/mu, copy A to
     Z2, copy A/D/H to Z2/D/H2, and edit Z2/D/H2/chi.  We'll also make
     new Z/t and Z2/D/H2/t files. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z/mu"</expr></argument>,
                                      <argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z2/D/H2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z2/D/H2/chi"</expr></argument>,
                                      <argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z/t"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z2/D/H2/t"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Okay, just for kicks, let's modify Z2/D/H2/t.  Shouldn't affect
     its closest-copy-ness, right?  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z2/D/H2/t"</expr></argument>,
                                      <argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now, we expect Z2/D/H2 to have a closest copy of ("/Z2/D/H2", 3)
     because of the deepest path rule.  We expected Z2/D to have a
     closest copy of ("/Z2", 3).  Z/mu should still have a closest
     copy of ("/Z", 2).  As for the two new files (Z/t and Z2/D/H2/t),
     neither should have a closest copy. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z/mu"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"/Z"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z2/D/H2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"/Z2/D/H2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z2/D"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"/Z2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z/t"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z2/D/H2/t"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>root_revisions</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
               <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>after_rev</name></decl>, <decl><type ref="prev"/><name>fetched_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>spool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "svn_fs_root_t (base) revisions"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Prepare a filesystem. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-root-revisions"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In first txn, create and commit the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* First, verify that a revision root based on our new revision
     reports the correct associated revision. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>fetched_rev</name> = <call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>after_rev</name> != <name>fetched_rev</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"expected revision '%d'; "
       "got '%d' from svn_fs_revision_root_revision(rev_root)"</expr></argument>,
       <argument><expr>(<name>int</name>)<name>after_rev</name></expr></argument>, <argument><expr>(<name>int</name>)<name>fetched_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Then verify that we can't ask about the txn-base-rev from a
     revision root. */</comment>
  <expr_stmt><expr><name>fetched_rev</name> = <call><name>svn_fs_txn_root_base_revision</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>fetched_rev</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"expected SVN_INVALID_REVNUM; "
       "got '%d' from svn_fs_txn_root_base_revision(rev_root)"</expr></argument>,
       <argument><expr>(<name>int</name>)<name>fetched_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Now, create a second txn based on AFTER_REV. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Verify that it reports the right base revision. */</comment>
  <expr_stmt><expr><name>fetched_rev</name> = <call><name>svn_fs_txn_root_base_revision</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>after_rev</name> != <name>fetched_rev</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"expected '%d'; "
       "got '%d' from svn_fs_txn_root_base_revision(txn_root)"</expr></argument>,
       <argument><expr>(<name>int</name>)<name>after_rev</name></expr></argument>, <argument><expr>(<name>int</name>)<name>fetched_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Then verify that we can't ask about the rev-root-rev from a
     txn root. */</comment>
  <expr_stmt><expr><name>fetched_rev</name> = <call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>fetched_rev</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"expected SVN_INVALID_REVNUM; "
       "got '%d' from svn_fs_revision_root_revision(txn_root)"</expr></argument>,
       <argument><expr>(<name>int</name>)<name>fetched_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>unordered_txn_dirprops</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                       <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>, *<decl><type ref="prev"/><name>txn2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>txn_root2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name></type> <name>pval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>new_rev</name></decl>, <decl><type ref="prev"/><name>not_rev</name></decl>;</decl_stmt>

  <comment type="block">/* This is a regression test for issue #2751. */</comment>
  <expr_stmt><expr>*<name>msg</name> = "test dir prop preservation in unordered txns"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Prepare a filesystem. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-unordered-txn-dirprops"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create and commit the greek tree. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>new_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open two transactions */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn2</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root2</name></expr></argument>, <argument><expr><name>txn2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change a child file in one. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/alpha"</expr></argument>,
                                      <argument><expr>"New contents"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change dir props in the other.  (We're using svn:mergeinfo
     property just to make sure special handling logic for that
     property doesn't croak.) */</comment>
  <expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>pval</name></expr></argument>, <argument><expr>"/A/C:1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>txn_root2</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr>"svn:mergeinfo"</expr></argument>, 
                                  <argument><expr>&amp;<name>pval</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Commit the second one first. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>new_rev</name></expr></argument>, <argument><expr><name>txn2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Then commit the first -- but expect a conflict due to the
     propchanges made by the other txn. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>not_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now, let's try those in reverse.  Open two transactions */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn2</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root2</name></expr></argument>, <argument><expr><name>txn2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change a child file in one. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/alpha"</expr></argument>,
                                      <argument><expr>"New contents"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Change dir props in the other. */</comment>
  <expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>pval</name></expr></argument>, <argument><expr>"/A/C:1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>txn_root2</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr>"svn:mergeinfo"</expr></argument>, 
                                  <argument><expr>&amp;<name>pval</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Commit the first one first. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>new_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Then commit the second -- but expect an conflict because the
     directory wasn't up-to-date, which is required for propchanges. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>not_rev</name></expr></argument>, <argument><expr><name>txn2</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_uuid</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
         <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fixed_uuid</name> <init>= <expr><call><name>svn_uuid_generate</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fetched_uuid</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "test svn_fs_set_uuid"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Prepare a filesystem. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-set-uuid"</expr></argument>,
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the repository UUID to something fixed. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_set_uuid</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>fixed_uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Make sure we get back what we set. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_uuid</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name>fetched_uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fixed_uuid</name></expr></argument>, <argument><expr><name>fetched_uuid</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"expected UUID '%s'; got '%s'"</expr></argument>,
       <argument><expr><name>fixed_uuid</name></expr></argument>, <argument><expr><name>fetched_uuid</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Set the repository UUID to something new (and unknown). */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_set_uuid</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Make sure we *don't* get back what we previously set (after all,
     this stuff is supposed to be universally unique!). */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_uuid</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name>fetched_uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fixed_uuid</name></expr></argument>, <argument><expr><name>fetched_uuid</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"expected something other than UUID '%s', but got that one"</expr></argument>,
       <argument><expr><name>fixed_uuid</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>node_origin_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <struct>struct <name>path_rev_t</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
  }</block>;</struct>

  <expr_stmt><expr>*<name>msg</name> = "test svn_fs_node_origin_rev"</expr>;</expr_stmt>
  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Create the repository. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-node-origin-rev"</expr></argument>, 
                              <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Revision 1: Create the Greek tree.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Revision 2: Modify A/D/H/chi and A/B/E/alpha.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/chi"</expr></argument>, <argument><expr>"2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E/alpha"</expr></argument>, <argument><expr>"2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Revision 3: Copy A/D to A/D2, and create A/D2/floop new.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/floop"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Revision 4: Modify A/D/H/chi and A/D2/H/chi.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/chi"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/H/chi"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Revision 5: Delete A/D2/G, add A/B/E/alfalfa.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E/alfalfa"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Revision 6: Restore A/D2/G (from version 4).  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D2/G"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Revision 7: Move A/D2 to A/D (replacing it), and tweak A/D/floop.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D2"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/floop"</expr></argument>, <argument><expr>"7"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now test some origin revisions. */</comment>
  <block>{
    <decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name><name>pathrevs</name><index>[<expr>4</expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr>"A/D"</expr>,             <expr>1</expr> }</block></expr>,
                                      <expr><block>{ <expr>"A/D/floop"</expr>,       <expr>3</expr> }</block></expr>,
                                      <expr><block>{ <expr>"iota"</expr>,            <expr>1</expr> }</block></expr>,
                                      <expr><block>{ <expr>"A/B/E/alfalfa"</expr>,   <expr>5</expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name>pathrevs</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_rev_t</name></expr></argument>)</argument_list></sizeof>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
      <block>{
        <decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name>path_rev</name> <init>= <expr><name><name>pathrevs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_origin_rev</name><argument_list>(<argument><expr>&amp;<name>revision</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>path_rev</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>path_rev</name>.<name>rev</name></name> != <name>revision</name></expr>)</condition><then>
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"expected origin revision of '%ld' for '%s'; got '%ld'"</expr></argument>,
             <argument><expr><name><name>path_rev</name>.<name>rev</name></name></expr></argument>, <argument><expr><name><name>path_rev</name>.<name>path</name></name></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
      }</block></for>
  }</block>

  <comment type="block">/* Also, we'll check a couple of queries into a transaction root. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"bloop"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/blarp"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{
    <decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name><name>pathrevs</name><index>[<expr>6</expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr>"A/D"</expr>,             <expr>1</expr> }</block></expr>,
                                      <expr><block>{ <expr>"A/D/floop"</expr>,       <expr>3</expr> }</block></expr>,
                                      <expr><block>{ <expr>"bloop"</expr>,          <expr>-1</expr> }</block></expr>,
                                      <expr><block>{ <expr>"A/D/blarp"</expr>,      <expr>-1</expr> }</block></expr>,
                                      <expr><block>{ <expr>"iota"</expr>,            <expr>1</expr> }</block></expr>,
                                      <expr><block>{ <expr>"A/B/E/alfalfa"</expr>,   <expr>5</expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>root</name> = <name>txn_root</name></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name>pathrevs</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_rev_t</name></expr></argument>)</argument_list></sizeof>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
      <block>{
        <decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name>path_rev</name> <init>= <expr><name><name>pathrevs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_origin_rev</name><argument_list>(<argument><expr>&amp;<name>revision</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>path_rev</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <expr_stmt><expr><name>revision</name> = -1</expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name><name>path_rev</name>.<name>rev</name></name> != <name>revision</name></expr>)</condition><then>
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"expected origin revision of '%ld' for '%s'; got '%ld'"</expr></argument>,
             <argument><expr><name><name>path_rev</name>.<name>rev</name></name></expr></argument>, <argument><expr><name><name>path_rev</name>.<name>path</name></name></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
      }</block></for>
  }</block>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>
<escape char="0xc"/>
<comment type="block">/* The test table.  */</comment>

<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>=
  <expr><block>{
    <expr><name>SVN_TEST_NULL</name></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>trivial_transaction</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>reopen_trivial_transaction</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>create_file_transaction</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>verify_txn_list</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>txn_names_are_not_reused</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>write_and_read_file</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>create_mini_tree_transaction</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>create_greek_tree_transaction</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>list_directory</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>revision_props</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>transaction_props</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>node_props</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>delete_mutables</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>delete</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>fetch_youngest_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>basic_commit</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_tree_node_validation</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_XFAIL</name><argument_list>(<argument><expr><name>merging_commit</name></expr></argument>)</argument_list></call></expr>, <comment type="block">/* Needs to be written to match new
                                        merge() algorithm expectations */</comment>
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>copy_test</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>commit_date</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>check_old_revisions</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>check_all_revisions</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>medium_file_integrity</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>large_file_integrity</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>check_root_revision</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_node_created_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>check_related</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>branch_test</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>verify_checksum</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>closest_copy_test</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>root_revisions</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>unordered_txn_dirprops</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>set_uuid</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>node_origin_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>SVN_TEST_NULL</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
</unit>
