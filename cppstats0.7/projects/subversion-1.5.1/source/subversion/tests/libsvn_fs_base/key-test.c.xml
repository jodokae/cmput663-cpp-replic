<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/tests/libsvn_fs_base/key-test.c"><comment type="block">/* key-test.c --- tests for the key gen functions
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs_base/key-gen.h"</cpp:file></cpp:include>

<escape char="0xc"/>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>key_test</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
         <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>keys</name><index>[<expr>9</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr>"0"</expr>, <expr>"1"</expr> }</block></expr>,
    <expr><block>{ <expr>"9"</expr>, <expr>"a"</expr> }</block></expr>,
    <expr><block>{ <expr>"zzzzz"</expr>, <expr>"100000"</expr> }</block></expr>,
    <expr><block>{ <expr>"z000000zzzzzz"</expr>, <expr>"z000001000000"</expr> }</block></expr>,
    <expr><block>{ <expr>"97hnq33jx2a"</expr>, <expr>"97hnq33jx2b"</expr> }</block></expr>,
    <expr><block>{ <expr>"97hnq33jx2z"</expr>, <expr>"97hnq33jx30"</expr> }</block></expr>,
    <expr><block>{ <expr>"999"</expr>, <expr>"99a"</expr> }</block></expr>,
    <expr><block>{ <expr>"a9z"</expr>, <expr>"aa0"</expr> }</block></expr>,
    <expr><block>{ <expr>"z"</expr>, <expr>"10"</expr> }</block></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "testing sequential alphanumeric key generation"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 9</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>char</name></type> <name><name>gen_key</name><index>[<expr><name>MAX_KEY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>orig_key</name> <init>= <expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>next_key</name> <init>= <expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>orig_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>olen</name> = <name>len</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>svn_fs_base__next_key</name><argument_list>(<argument><expr><name>orig_key</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>gen_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! (((<name>len</name> == <name>olen</name>) || (<name>len</name> == (<name>olen</name> + 1)))
             &amp;&amp; (<call><name>strlen</name><argument_list>(<argument><expr><name>next_key</name></expr></argument>)</argument_list></call> == <name>len</name>)
             &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>next_key</name></expr></argument>, <argument><expr><name>gen_key</name></expr></argument>)</argument_list></call> == 0))</expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"failed to increment key \"%s\" correctly\n"
             "  expected: %s\n"
             "    actual: %s"</expr></argument>,
             <argument><expr><name>orig_key</name></expr></argument>, <argument><expr><name>next_key</name></expr></argument>, <argument><expr><name>gen_key</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/* The test table.  */</comment>

<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>=
  <expr><block>{
    <expr><name>SVN_TEST_NULL</name></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>key_test</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>SVN_TEST_NULL</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
</unit>
