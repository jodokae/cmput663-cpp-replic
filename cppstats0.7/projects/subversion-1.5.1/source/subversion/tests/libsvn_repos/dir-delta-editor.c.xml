<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/tests/libsvn_repos/dir-delta-editor.c"><comment type="block">/*
 * svn_tests_editor.c:  a `dummy' editor implementation for testing
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>



<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir-delta-editor.h"</cpp:file></cpp:include>

<struct>struct <name>edit_baton</name>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dir_baton</name>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>file_baton</name>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
}</block>;</struct>



<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Construct the full path of this entry and delete it from the txn. */</comment>
  <return>return <expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>txn_root</name></name></expr></argument>, 
                       <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>root_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
               <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
               <param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>db</name>-&gt;<name>full_path</name></name> = <name><name>eb</name>-&gt;<name>root_path</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name>-&gt;<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>root_baton</name> = <name>db</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
                    <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>rev_root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Construct the full path of the new directory */</comment>
  <expr_stmt><expr><name><name>db</name>-&gt;<name>full_path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>root_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_link</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>txn_root</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>full_path</name></name></expr></argument>, 
                               <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>child_baton</name> = <name>db</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
                   <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
                   <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Construct the full path of the new directory */</comment>
  <expr_stmt><expr><name><name>db</name>-&gt;<name>full_path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>root_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>copyfrom_path</name></expr>)</condition><then>  <comment type="block">/* add with history */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>rev_root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>,
                                   <argument><expr><name><name>eb</name>-&gt;<name>fs</name></name></expr></argument>,
                                   <argument><expr><name>copyfrom_revision</name></expr></argument>,
                                   <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>,
                          <argument><expr><name>copyfrom_path</name></expr></argument>,
                          <argument><expr><name><name>eb</name>-&gt;<name>txn_root</name></name></expr></argument>,
                          <argument><expr><name><name>db</name>-&gt;<name>full_path</name></name></expr></argument>,
                          <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else  <comment type="block">/* add without history */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>txn_root</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>full_path</name></name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <expr_stmt><expr>*<name>child_baton</name> = <name>db</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
               <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
               <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>fb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>rev_root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Fill in the file baton. */</comment>
  <expr_stmt><expr><name><name>fb</name>-&gt;<name>path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>root_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fb</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_link</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>txn_root</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>file_baton</name> = <name>fb</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
              <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
              <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>fb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Fill in the file baton. */</comment>
  <expr_stmt><expr><name><name>fb</name>-&gt;<name>path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>root_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fb</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>copyfrom_path</name></expr>)</condition><then>  <comment type="block">/* add with history */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>rev_root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>,
                                   <argument><expr><name><name>eb</name>-&gt;<name>fs</name></name></expr></argument>,
                                   <argument><expr><name>copyfrom_revision</name></expr></argument>,
                                   <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>,
                          <argument><expr><name>copyfrom_path</name></expr></argument>,
                          <argument><expr><name><name>eb</name>-&gt;<name>txn_root</name></name></expr></argument>,
                          <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
                          <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else  <comment type="block">/* add without history */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>txn_root</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <expr_stmt><expr>*<name>file_baton</name> = <name>fb</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                     <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
                     <param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>svn_fs_apply_textdelta</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>,
                                <argument><expr><name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>txn_root</name></name></expr></argument>,
                                <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
                                <argument><expr><name>base_checksum</name></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>txn_root</name></name></expr></argument>,
                                 <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Construct the full path of this entry and change the property. */</comment>
  <return>return <expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>txn_root</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>full_path</name></name></expr></argument>, 
                                 <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/*---------------------------------------------------------------*/</comment>
<escape char="0xc"/>


<function><type><name>svn_error_t</name> *</type>
<name>dir_delta_get_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                     <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                     <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                     <param><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>my_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>my_edit_baton</name></decl>;</decl_stmt>

  <comment type="block">/* Wondering why we don't include test_close_directory,
     test_close_file, test_absent_directory, and test_absent_file
     here...?  -kfogel, 3 Nov 2003 */</comment>

  <comment type="block">/* Set up the editor. */</comment>
  <expr_stmt><expr><name>my_editor</name> = <call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_editor</name>-&gt;<name>open_root</name></name>           = <name>test_open_root</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_editor</name>-&gt;<name>delete_entry</name></name>        = <name>test_delete_entry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_editor</name>-&gt;<name>add_directory</name></name>       = <name>test_add_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_editor</name>-&gt;<name>open_directory</name></name>      = <name>test_open_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_editor</name>-&gt;<name>add_file</name></name>            = <name>test_add_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_editor</name>-&gt;<name>open_file</name></name>           = <name>test_open_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_editor</name>-&gt;<name>apply_textdelta</name></name>     = <name>test_apply_textdelta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_editor</name>-&gt;<name>change_file_prop</name></name>    = <name>test_change_file_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_editor</name>-&gt;<name>change_dir_prop</name></name>     = <name>test_change_dir_prop</name></expr>;</expr_stmt>

  <comment type="block">/* Set up the edit baton. */</comment>
  <expr_stmt><expr><name>my_edit_baton</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>my_edit_baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_edit_baton</name>-&gt;<name>root_path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_edit_baton</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_edit_baton</name>-&gt;<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>my_edit_baton</name>-&gt;<name>txn_root</name></name> = <name>txn_root</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>editor</name> = <name>my_editor</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>edit_baton</name> = <name>my_edit_baton</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
