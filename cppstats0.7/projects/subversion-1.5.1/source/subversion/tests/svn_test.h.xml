<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/tests/svn_test.h"><comment type="block">/*
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_TEST_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* Baton for any arguments that need to be passed from main() to svn
 * test functions.
 */</comment>
<typedef>typedef <type><struct>struct <name>svn_test_opts_t</name>
<block>{
  <comment type="block">/* Description of the fs backend that should be used for testing. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_type</name></decl>;</decl_stmt>
  <comment type="block">/* Add future "arguments" here. */</comment>
}</block></struct></type> <name>svn_test_opts_t</name>;</typedef>

<comment type="block">/* Prototype for test driver functions. */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name>*</type> (*<name>svn_test_driver_t</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                                          <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                                          <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* Test modes. */</comment>
<enum>enum <name>svn_test_mode_t</name>
  <block>{
    <decl><name>svn_test_pass</name></decl>,
    <decl><name>svn_test_xfail</name></decl>,
    <decl><name>svn_test_skip</name></decl>
  }</block>;</enum>

<comment type="block">/* Each test gets a test descriptor, holding the function and other
 * associated data.
 */</comment>
<struct>struct <name>svn_test_descriptor_t</name>
<block>{
  <comment type="block">/* A pointer to the test driver function. */</comment>
  <decl_stmt><decl><type><name>svn_test_driver_t</name></type> <name>func</name></decl>;</decl_stmt>

  <comment type="block">/* Is the test marked XFAIL? */</comment>
  <enum>enum <name>svn_test_mode_t</name> <name>mode</name>;</enum>
}</block>;</struct>

<comment type="block">/* All Subversion test programs include an array of svn_test_descriptor_t's
 * (all of our sub-tests) that begins and ends with a SVN_TEST_NULL entry.
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name></decl>;</decl_stmt>

<comment type="block">/* A null initializer for the test descriptor. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST_NULL</name></cpp:macro>  <cpp:value>{NULL, 0}</cpp:value></cpp:define>

<comment type="block">/* Initializer for PASS tests */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST_PASS</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>{func, svn_test_pass}</cpp:value></cpp:define>

<comment type="block">/* Initializer for XFAIL tests */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST_XFAIL</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{func, svn_test_xfail}</cpp:value></cpp:define>

<comment type="block">/* Initializer for conditional XFAIL tests */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST_XFAIL_COND</name><parameter_list>(<param><type><name>func</name></type></param>, <param><type><name>p</name></type></param>)</parameter_list></cpp:macro>\
                                <cpp:value>{func, (p) ? svn_test_xfail : svn_test_pass}</cpp:value></cpp:define>

<comment type="block">/* Initializer for SKIP tests */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST_SKIP</name><parameter_list>(<param><type><name>func</name></type></param>, <param><type><name>p</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{func, ((p) ? svn_test_skip : svn_test_pass)}</cpp:value></cpp:define>

<escape char="0xc"/>
<comment type="block">/* Return a pseudo-random number based on SEED, and modify SEED.
 *
 * This is a "good" pseudo-random number generator, intended to replace
 * all those "bad" rand() implementations out there.
 */</comment>
<function_decl><type><name>apr_uint32_t</name></type> <name>svn_test_rand</name><parameter_list>(<param><decl><type><name>apr_uint32_t</name> *</type><name>seed</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Add PATH to the test cleanup list.  */</comment>
<function_decl><type><name>void</name></type> <name>svn_test_add_dir_cleanup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/* Set *EDITOR and *EDIT_BATON to an editor that prints its
 * arguments to OUT_STREAM.  The edit starts at PATH, that is,
 * PATH will be prepended to the appropriate paths in the output.
 * Allocate the editor in POOL.
 *
 * EDITOR_NAME is a name for the editor, a string that will be
 * prepended to the editor output as shown below.  EDITOR_NAME may
 * be the empty string (but it may not be null).
 *
 * VERBOSE is a flag for specifying whether or not your want all the
 * nitty gritty details displayed.  When VERBOSE is FALSE, each
 * editor function will print only a one-line summary.
 *
 * INDENTATION is the number of spaces to indent by at each level; use
 * 0 for no indentation.  The indent level is always the same for a
 * given call (i.e, stack frame).
 *
 * SOME EXAMPLES
 *
 * With an indentation of 3, editor name of "COMMIT-TEST" and with
 * VERBOSE = TRUE
 *
 * [COMMIT-TEST] open_root (wc)
 * base_revision: 1
 *    [COMMIT-TEST] open_directory (wc/A)
 *    parent: wc
 *    base_revision: 1
 *       [COMMIT-TEST] delete_entry (wc/A/B)
 *       [COMMIT-TEST] open_file (wc/A/mu)
 *       parent: wc/A
 *       base_revision: 1
 *          [COMMIT-TEST] change_file_prop (wc/A/mu)
 *          name: foo
 *          value: bar
 *       [COMMIT-TEST] close_file (wc/A/mu)
 *    [COMMIT-TEST] close_directory (wc/A)
 *    [COMMIT-TEST] add_file (wc/zeta)
 *    parent: wc
 *    copyfrom_path:
 *    copyfrom_revision: 0
 *    [COMMIT-TEST] open_file (wc/iota)
 *    parent: wc
 *    base_revision: 1
 * [COMMIT-TEST] close_directory (wc)
 *       [COMMIT-TEST] apply_textdelta (wc/iota)
 *          [COMMIT-TEST] window_handler (2 ops)
 *          (1) new text: length 11
 *          (2) source text: offset 0, length 0
 *          [COMMIT-TEST] window_handler (EOT)
 *    [COMMIT-TEST] close_file (wc/iota)
 *       [COMMIT-TEST] apply_textdelta (wc/zeta)
 *          [COMMIT-TEST] window_handler (1 ops)
 *          (1) new text: length 11
 *          [COMMIT-TEST] window_handler (EOT)
 *    [COMMIT-TEST] close_file (wc/zeta)
 * [COMMIT-TEST] close_edit
 *
 * The same example as above, but with verbose = FALSE
 *
 * [COMMIT-TEST] open_root (wc)
 *    [COMMIT-TEST] open_directory (wc/A)
 *       [COMMIT-TEST] delete_entry (wc/A/B)
 *       [COMMIT-TEST] open_file (wc/A/mu)
 *          [COMMIT-TEST] change_file_prop (wc/A/mu)
 *       [COMMIT-TEST] close_file (wc/A/mu)
 *    [COMMIT-TEST] close_directory (wc/A)
 *    [COMMIT-TEST] add_file (wc/zeta)
 *    [COMMIT-TEST] open_file (wc/iota)
 * [COMMIT-TEST] close_directory (wc)
 *       [COMMIT-TEST] apply_textdelta (wc/iota)
 *    [COMMIT-TEST] close_file (wc/iota)
 *       [COMMIT-TEST] apply_textdelta (wc/zeta)
 *    [COMMIT-TEST] close_file (wc/zeta)
 * [COMMIT-TEST] close_edit
 *
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_test_get_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                                 <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_name</name></decl></param>,
                                 <param><decl><type><name>svn_stream_t</name> *</type><name>out_stream</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>indentation</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>verbose</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_TEST_H */</comment>
</unit>
