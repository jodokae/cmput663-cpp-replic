<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/tests/svn_test_fs.h"><comment type="block">/* fs-helpers.c --- tests for the filesystem
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_TEST__FS_HELPERS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST__FS_HELPERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_test.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>


<comment type="block">/*-------------------------------------------------------------------*/</comment>
<escape char="0xc"/>
<comment type="block">/** Helper routines for filesystem functionality. **/</comment>


<comment type="block">/* Set *FS_P to a fresh, unopened FS object, with the right warning
   handling function set.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_test__fs_new</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> **</type><name>fs_p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Create a filesystem of FS_TYPE in a subdir NAME and return a new FS
   object which points to it.  FS_TYPE should be either "bdb" or
   "fsfs".  Filesystem tests that are backend-specific should use
   svn_test__create_fs instead of this. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_test__create_fs</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> **</type><name>fs_p</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_type</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Create a repository with a filesystem of FS_TYPE in a subdir NAME
   and return a new REPOS object which points to it.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_test__create_repos</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> **</type><name>repos_p</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_type</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Read all data from a generic read STREAM, and return it in STRING.
   Allocate the svn_stringbuf_t in APRPOOL.  (All data in STRING will be
   dup'ed from STREAM using APRPOOL too.) */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_test__stream_to_string</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>string</name></decl></param>,
                           <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Set the contents of file in PATH under ROOT to CONTENTS.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_test__set_file_contents</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Get the contents of file in PATH under ROOT, and copy them into
   STR.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_test__get_file_contents</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>svn_stringbuf_t</name> **</type><name>str</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/* The Helper Functions to End All Helper Functions */</comment>

<comment type="block">/* Structure used for testing integrity of the filesystem's revision
   using validate_tree(). */</comment>
<typedef>typedef <type><struct>struct <name>svn_test__tree_entry_t</name>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>     <comment type="block">/* full path of this node */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents</name></decl>;</decl_stmt> <comment type="block">/* text contents (NULL for directories) */</comment>
}</block></struct></type>
<name>svn_test__tree_entry_t</name>;</typedef>


<comment type="block">/* Wrapper for an array of the above svn_test__tree_entry_t's.  */</comment>
<typedef>typedef <type><struct>struct <name>svn_test__tree_t</name>
<block>{
  <decl_stmt><decl><type><name>svn_test__tree_entry_t</name> *</type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>num_entries</name></decl>;</decl_stmt>
}</block></struct></type>
<name>svn_test__tree_t</name>;</typedef>


<comment type="block">/* Given a transaction or revision root (ROOT), check to see if the
   tree that grows from that root has all the path entries, and only
   those entries, passed in the array ENTRIES (which is an array of
   NUM_ENTRIES tree_test_entry_t's).  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_test__validate_tree</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                        <param><decl><type><name>svn_test__tree_entry_t</name> *</type><name>entries</name></decl></param>,
                        <param><decl><type><name>int</name></type> <name>num_entries</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Structure for describing script-ish commands to perform on a
   transaction using svn_test__txn_script_exec().  */</comment>
<typedef>typedef <type><struct>struct <name>svn_test__txn_script_command_t</name>
<block>{
  <comment type="block">/* command:

     'a' -- add (PARAM1 is file contents, or NULL for directories)
     'c' -- copy (PARAM1 is target path, copy source is youngest rev)
     'd' -- delete
     'e' -- edit (PARAM1 is new file contents)
  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>cmd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt> <comment type="block">/* path to resource in the filesystem */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>param1</name></decl>;</decl_stmt> <comment type="block">/* command parameter (see above) */</comment>
}</block></struct></type>
<name>svn_test__txn_script_command_t</name>;</typedef>


<comment type="block">/* Execute a "script" SCRIPT on items under TXN_ROOT.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_test__txn_script_exec</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl></param>,
                          <param><decl><type><name>svn_test__txn_script_command_t</name> *</type><name>script</name></decl></param>,
                          <param><decl><type><name>int</name></type> <name>num_edits</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Verify that the tree that exists under ROOT is exactly the Greek
   Tree. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_test__check_greek_tree</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Create the Greek Tree under TXN_ROOT.  See ./greek-tree.txt.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_test__create_greek_tree</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* SVN_TEST__FS_HELPERS_H */</comment>
</unit>
