<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/tests/libsvn_subr/translate-test.c"><comment type="block">/*
 * translate-test.c -- test the eol and keyword translation subroutine
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<comment type="block">/* Advice to those adding new tests to this file:
 * ==============================================
 *
 * Read the doc string for substitute_and_verify(), then read the
 * test functions themselves -- they're small, and they'll be very
 * easy to understand once you know substitute_and_verify().
 */</comment>

<escape char="0xc"/>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_subst.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Helpers ***/</comment>

<comment type="block">/* (Almost) all the tests share the same test data. */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>lines</name><index>[]</index></name> <init>=
  <expr><block>{
    <expr>"Line 1: fairly boring subst test data... blah blah"</expr>,
    <expr>"Line 2: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 3: Valid $LastChangedRevision$, started unexpanded."</expr>,
    <expr>"Line 4: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 5: Valid $Rev$, started unexpanded."</expr>,
    <expr>"Line 6: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 7: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 8: Valid $LastChangedBy$, started unexpanded."</expr>,
    <expr>"Line 9: Valid $Author$, started unexpanded."</expr>,
    <expr>"Line 10: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 11: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 12: Valid $LastChangedDate$, started unexpanded."</expr>,
    <expr>"Line 13: Valid $Date$, started unexpanded."</expr>,
    <expr>"Line 14: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 15: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 16: Valid $HeadURL$, started unexpanded."</expr>,
    <expr>"Line 17: Valid $URL$, started unexpanded."</expr>,
    <expr>"Line 18: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 19: Invalid expanded keyword spanning two lines: $Author: "</expr>,
    <comment type="block">/* The idea here is that, were it not broken across two lines,
       "$Author: Line 20: jrandom$" would be a valid if odd, keyword. */</comment>
    <expr>"Line 20: jrandom$ remainder of invalid keyword spanning two lines."</expr>,
    <expr>"Line 21: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 22: an unknown keyword $LastChangedSocks$."</expr>,
    <expr>"Line 23: fairly boring subst test data... blah blah."</expr>,
    <comment type="block">/* In line 24, the third dollar sign terminates the first, and the
       fourth should therefore remain a literal dollar sign. */</comment>
    <expr>"Line 24: keyword in a keyword: $Author: $Date$ $"</expr>,
    <expr>"Line 25: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 26: Emptily expanded keyword $Rev: $."</expr>,
    <expr>"Line 27: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 28: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 29: Valid $LastChangedRevision: 1729 $, started expanded."</expr>,
    <expr>"Line 30: Valid $Rev: 1729 $, started expanded."</expr>,
    <expr>"Line 31: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 32: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 33: Valid $LastChangedDate: 2002-01-01 $, started expanded."</expr>,
    <expr>"Line 34: Valid $Date: 2002-01-01 $, started expanded."</expr>,
    <expr>"Line 35: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 36: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 37: Valid $LastChangedBy: jrandom $, started expanded."</expr>,
    <expr>"Line 38: Valid $Author: jrandom $, started expanded."</expr>,
    <expr>"Line 39: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 40: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 41: Valid $HeadURL: http://tomato/mauve $, started expanded."</expr>,
    <expr>"Line 42: Valid $URL: http://tomato/mauve $, started expanded."</expr>,
    <expr>"Line 43: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 44: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 45: Invalid $LastChangedRevisionWithSuffix$, started unexpanded."</expr>,
    <expr>"Line 46: Empty $Author:$, started expanded."</expr>,
    <expr>"Line 47: fairly boring subst test data... blah blah."</expr>,
    <expr>"Line 48: Two keywords back to back: $Author$$Rev$."</expr>,
    <expr>"Line 49: One keyword, one not, back to back: $Author$Rev$."</expr>,
    <expr>"Line 50: a series of dollar signs $$$$$$$$$$$$$$$$$$$$$$$$$$$$."</expr>,
    <expr>"Line 51: same, but with embedded keyword $$$$$$$$Date$$$$$$$$$$."</expr>,
    <expr>"Line 52: same, with expanded, empty keyword $$$$$$Date: $$$$$$."</expr>,
    <expr>"Line 53: $This is a lengthy line designed to test a bug that was "
    "reported about keyword expansion.  The problem was that a line "
    "had more than SVN_KEYWORD_MAX_LEN (255 at the time) characters "
    "after an initial dollar sign, which triggered a buglet in our "
    "svn_subst_copy_and_translate() function and resulted in, in some cases "
    "a SEGFAULT, and in others a filthy corrupt commit. "</expr>,
    <expr>""</expr>, <comment type="block">/* Lines 54-69 are blank to test consecutive newlines */</comment>
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>""</expr>,
    <expr>"$Author$Rev$."</expr>, <comment type="block">/* Line 70-73 test places where '$' abuts a newline. */</comment>
    <expr>".$veR$Author$"</expr>,
    <expr>"$"</expr>,
    <expr>"$$"</expr>,
    <comment type="block">/* Line 74-75 test for keywords containing '$', issue #1780 */</comment>
    <expr>"Line 74: Valid $Author: jran$dom $, started expanded."</expr>,
    <expr>"Line 75: Valid $URL: http://tomato/mau$ve $, started expanded."</expr>,
    <comment type="block">/* Line 76-78 tests for a string with an unknown keyword of 252-254 bytes
       long */</comment>
    <expr>"$                                                                       "
    "                                                                        "
    "                                                                        "
    "                                      $$"</expr>,
    <expr>"$                                                                       "
    "                                                                        "
    "                                                                        "
    "                                       $$"</expr>,
    <expr>"$                                                                       "
    "                                                                        "
    "                                                                        "
    "                                        $$"</expr>,
    <comment type="block">/* Testing border cases, line 79-82 test for valid keywords, keywords on
       line 83-84 are too long */</comment>
    <expr>"Line 79: Valid $Author: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaa$aaaaaaaaaaaaaaaaaaaaaa$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa $, started expanded."</expr>,
    <expr>"Line 80: Valid $Author: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$aaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$aaaaaaaaaaaaaaaaaa"
    "aaaaaaa$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$aaaaaaa $, started "
    "expanded."</expr>,
    <comment type="block">/* keyword from first dollar sign to last = 254 chars */</comment>
    <expr>"Line 81: Valid $Author: aaaaaaaaaaaaaaaaaaaa$aaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaa$aaaaaaaaaaaaaaaaaaaa$$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$$aaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$$aaaaaa$$$ $, started "
    "expanded."</expr>,
    <comment type="block">/* keyword from first dollar sign to last = 255 chars */</comment>
    <expr>"Line 82: Valid $Author: aaaaaaaaaaa$$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaa$$$$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$$aaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaa$$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$$$ $, started "
    "expanded."</expr>,
    <comment type="block">/* keyword from first dollar sign to last = 256 chars */</comment>
    <expr>"Line 83: Invalid $Author: aaaaaaaaaaa$$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaa$$$$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$$aaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaa$$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$$$ $, started "
    "expanded."</expr>,
    <expr>"Line 84: Invalid $Author: aaaaaaaaaaa$$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaa$$$$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$$aaaaaaaaaaaaaaaaaaaaaaaaaaa"
    "aaaaaaaaaaaaaa$$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$$$ $, started "
    "expanded."</expr>,
    <expr>"Line 85: end of subst test data."</expr>
  }</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Return a randomly selected eol sequence. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>random_eol_marker</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Select a random eol marker from this set. */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seeded</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

  <comment type="block">/* ### todo: allowing '\r' to be in this list of possible random
     eol_markers causes problems for the current testing framework
     which expects a 1:1 ratio of input-line-count to output-line-count.
     Problems occur when there are two consecutive line ending markers
     where the first is '\r' and the second is '\n' -- our
     translation routine reads that as a single '\r\n' which throws
     off the linecount on the output side, and fouls up substitute_and_verify.
  */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>eol_markers</name><index>[]</index></name> <init>= <expr><block>{ <expr>"\n"</expr>, <expr>"\r\n"</expr> }</block></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name>seeded</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr>1729</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* we want errors to be reproducible */</comment>
      <expr_stmt><expr><name>seeded</name> = 1</expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name><name>eol_markers</name><index>[<expr><call><name>rand</name><argument_list>()</argument_list></call>
                     % ((<sizeof>sizeof<argument_list>(<argument><expr><name>eol_markers</name></expr></argument>)</argument_list></sizeof>) / (<sizeof>sizeof<argument_list>(<argument><expr>*<name>eol_markers</name></expr></argument>)</argument_list></sizeof>))</expr>]</index></name></expr>;</return>
}</block></function>


<comment type="block">/* Create FNAME with global `lines' as initial data.  Use EOL_STR as
 * the end-of-line marker between lines, or if EOL_STR is NULL, choose
 * a random marker at each opportunity.  Use POOL for any temporary
 * allocation.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol_str</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>apr_err</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>,
                          <argument><expr>(<name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_EXCL</name> | <name>APR_BINARY</name>)</expr></argument>,
                          <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr>*<name>lines</name></expr></argument>)</argument_list></sizeof>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this_eol_str</name> <init>= <expr><name>eol_str</name> ? <name>eol_str</name> : <call><name>random_eol_marker</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>apr_err</name> = <call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Is it overly paranoid to use putc(), because of worry about
         fprintf() doing a newline conversion? */</comment>
      <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name><name>this_eol_str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
        <block>{
          <expr_stmt><expr><name>apr_err</name> = <call><name>apr_file_putc</name><argument_list>(<argument><expr><name><name>this_eol_str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></for>
    }</block></for>

  <expr_stmt><expr><name>apr_err</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* If FNAME is a regular file, remove it; if it doesn't exist at all,
   return success.  Otherwise, return error. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>remove_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_FINFO_TYPE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>finfo</name>.<name>filetype</name></name> == <name>APR_REG</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>apr_err</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></then>
      <else>else
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr>"non-file '%s' is in the way"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Set up, run, and verify the results of a substitution.
 *
 * Create a file TEST_NAME.src using global `lines' as the initial
 * data, with SRC_EOL as the line separator, then convert it to file
 * TEST_NAME.dst (using DST_EOL, REPAIR, EXPAND, REV, AUTHOR, DATE,
 * and URL as svn_subst_copy_and_translate() does), and verify that the
 * conversion worked.  Null SRC_EOL means create a mixed eol src
 * file.
 *
 * If the verification succeeds, remove both files and return
 * SVN_NO_ERROR.
 *
 * If the verification fails, leave the files for post-mortem.  If the
 * failure is due to non-eol data being wrong, return
 * SVN_ERR_MALFORMED_FILE.  If the problem is an incorrect eol marker,
 * return SVN_ERR_IO_UNKNOWN_EOL.  If the problem is that a mixed eol
 * style was repaired even though no repair flag was passed, return
 * SVN_ERR_TEST_FAILED.
 *
 * Use POOL for temporary allocation.
 *
 * Note: as with svn_subst_copy_and_translate(), if any of DST_EOL, REV,
 * AUTHOR, DATE, and/or URL is null, then that substitution is not
 * performed.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>substitute_and_verify</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>test_name</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_eol</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_eol</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>repair</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>expand</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>contents</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>keywords</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>idx</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>expect</name><index>[<expr>(<sizeof>sizeof<argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr>*<name>lines</name></expr></argument>)</argument_list></sizeof>)</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_fname</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>test_name</name></expr></argument>, <argument><expr>".src"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_fname</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>test_name</name></expr></argument>, <argument><expr>".dst"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/** Clean up from previous tests, set up src data, and convert. **/</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remove_file</name><argument_list>(<argument><expr><name>src_fname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remove_file</name><argument_list>(<argument><expr><name>dst_fname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_file</name><argument_list>(<argument><expr><name>src_fname</name></expr></argument>, <argument><expr><name>src_eol</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>rev</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>val</name> = <call><name>svn_string_create</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>SVN_KEYWORD_REVISION_LONG</name></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>SVN_KEYWORD_REVISION_MEDIUM</name></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>SVN_KEYWORD_REVISION_SHORT</name></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <if>if <condition>(<expr><name>date</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>val</name> = <call><name>svn_string_create</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>SVN_KEYWORD_DATE_LONG</name></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>SVN_KEYWORD_DATE_SHORT</name></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <if>if <condition>(<expr><name>author</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>val</name> = <call><name>svn_string_create</name><argument_list>(<argument><expr><name>author</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>SVN_KEYWORD_AUTHOR_LONG</name></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>SVN_KEYWORD_AUTHOR_SHORT</name></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <if>if <condition>(<expr><name>url</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>val</name> = <call><name>svn_string_create</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>SVN_KEYWORD_URL_LONG</name></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>SVN_KEYWORD_URL_SHORT</name></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>err</name> = <call><name>svn_subst_copy_and_translate3</name><argument_list>(<argument><expr><name>src_fname</name></expr></argument>, <argument><expr><name>dst_fname</name></expr></argument>, <argument><expr><name>dst_eol</name></expr></argument>, <argument><expr><name>repair</name></expr></argument>,
                                      <argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>expand</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Conversion should have failed, if src has mixed eol, and the
     repair flag was not set, and we requested eol translation. */</comment>
  <if>if <condition>(<expr>(! <name>src_eol</name>) &amp;&amp; <name>dst_eol</name> &amp;&amp; (! <name>repair</name>)</expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"translation of '%s' should have failed, but didn't"</expr></argument>, <argument><expr><name>src_fname</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
      <else>else <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_IO_INCONSISTENT_EOL</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
             <argument><expr>"translation of '%s' should fail, but not with this error"</expr></argument>,
             <argument><expr><name>src_fname</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remove_file</name><argument_list>(<argument><expr><name>src_fname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></else></if></else></if>

    }</block></then>
  <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><name>err</name></expr>;</return></then></if></else></if>


  <comment type="block">/** Verify that the conversion worked. **/</comment>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name>expect</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr>*<name>expect</name></expr></argument>)</argument_list></sizeof>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <expr_stmt><expr><name><name>expect</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>

  <comment type="block">/* Certain lines contain keywords; expect their expansions. */</comment>
  <if>if <condition>(<expr><name>rev</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>expand</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>expect</name><index>[<expr>3 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 3: "</expr></argument>,
                        <argument><expr>"Valid $LastChangedRevision: "</expr></argument>,
                        <argument><expr><name>rev</name></expr></argument>,
                        <argument><expr>" $, started unexpanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>5 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 5: "</expr></argument>,
                        <argument><expr>"Valid $Rev: "</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>" $, started unexpanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>26 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 26: "</expr></argument>,
                        <argument><expr>"Emptily expanded keyword $Rev: "</expr></argument>, <argument><expr><name>rev</name></expr></argument>,<argument><expr>" $."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>29 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 29: "</expr></argument>,
                        <argument><expr>"Valid $LastChangedRevision: "</expr></argument>,
                        <argument><expr><name>rev</name></expr></argument>,
                        <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>30 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 30: "</expr></argument>,
                        <argument><expr>"Valid $Rev: "</expr></argument>,
                        <argument><expr><name>rev</name></expr></argument>,
                        <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else  <comment type="block">/* unexpand */</comment>
        <block>{
          <comment type="block">/* Lines 3 and 5 remain unchanged. */</comment>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>26 - 1</expr>]</index></name> =
            "Line 26: Emptily expanded keyword $Rev$."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>29 - 1</expr>]</index></name> =
            "Line 29: Valid $LastChangedRevision$, started expanded."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>30 - 1</expr>]</index></name> =
            "Line 30: Valid $Rev$, started expanded."</expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

  <if>if <condition>(<expr><name>date</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>expand</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>expect</name><index>[<expr>12 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 12: "</expr></argument>,
                        <argument><expr>"Valid $LastChangedDate: "</expr></argument>,
                        <argument><expr><name>date</name></expr></argument>,
                        <argument><expr>" $, started unexpanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>13 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 13: "</expr></argument>,
                        <argument><expr>"Valid $Date: "</expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr>" $, started unexpanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>33 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 33: "</expr></argument>,
                        <argument><expr>"Valid $LastChangedDate: "</expr></argument>,
                        <argument><expr><name>date</name></expr></argument>,
                        <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>34 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 34: "</expr></argument>,
                        <argument><expr>"Valid $Date: "</expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>51 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 51: "</expr></argument>,
                        <argument><expr>"same, but with embedded keyword "</expr></argument>,
                        <argument><expr>"$$$$$$$$Date: "</expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr>" $$$$$$$$$$."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>52 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 52: "</expr></argument>,
                        <argument><expr>"same, with expanded, empty keyword "</expr></argument>,
                        <argument><expr>"$$$$$$Date: "</expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr>" $$$$$$."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else  <comment type="block">/* unexpand */</comment>
        <block>{
          <comment type="block">/* Lines 12 and 13 remain unchanged. */</comment>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>33 - 1</expr>]</index></name> =
            "Line 33: Valid $LastChangedDate$, started expanded."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>34 - 1</expr>]</index></name> =
            "Line 34: Valid $Date$, started expanded."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>51 - 1</expr>]</index></name> =
            "Line 51: same, but with embedded keyword $$$$$$$$Date$$$$$$$$$$."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>52 - 1</expr>]</index></name> =
            "Line 52: same, with expanded, empty keyword $$$$$$Date$$$$$$."</expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

  <if>if <condition>(<expr><name>author</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>expand</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>expect</name><index>[<expr>8 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 8: "</expr></argument>,
                        <argument><expr>"Valid $LastChangedBy: "</expr></argument>,
                        <argument><expr><name>author</name></expr></argument>,
                        <argument><expr>" $, started unexpanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>9 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 9: "</expr></argument>,
                        <argument><expr>"Valid $Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $, started unexpanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>37 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 37: "</expr></argument>,
                        <argument><expr>"Valid $LastChangedBy: "</expr></argument>, <argument><expr><name>author</name></expr></argument>,
                        <argument><expr>" $, started expanded."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>38 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 38: "</expr></argument>,
                        <argument><expr>"Valid $Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>46 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 46: "</expr></argument>,
                        <argument><expr>"Empty $Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>71 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>".$veR$Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>expect</name><index>[<expr>74 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 74: "</expr></argument>,
                        <argument><expr>"Valid $Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>79 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 79: "</expr></argument>,
                        <argument><expr>"Valid $Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>80 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 80: "</expr></argument>,
                        <argument><expr>"Valid $Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>81 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 81: "</expr></argument>,
                        <argument><expr>"Valid $Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>82 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 82: "</expr></argument>,
                        <argument><expr>"Valid $Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else  <comment type="block">/* unexpand */</comment>
        <block>{
          <comment type="block">/* Lines 8, 9, and 71 remain unchanged. */</comment>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>37 - 1</expr>]</index></name> =
            "Line 37: Valid $LastChangedBy$, started expanded."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>38 - 1</expr>]</index></name> =
            "Line 38: Valid $Author$, started expanded."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>46 - 1</expr>]</index></name> =
            "Line 46: Empty $Author$, started expanded."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>74 - 1</expr>]</index></name> =
            "Line 74: Valid $Author$, started expanded."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>79 - 1</expr>]</index></name> =
            "Line 79: Valid $Author$, started expanded."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>80 - 1</expr>]</index></name> =
            "Line 80: Valid $Author$, started expanded."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>81 - 1</expr>]</index></name> =
            "Line 81: Valid $Author$, started expanded."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>82 - 1</expr>]</index></name> =
            "Line 82: Valid $Author$, started expanded."</expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

  <if>if <condition>(<expr><name>url</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>expand</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>expect</name><index>[<expr>16 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 16: "</expr></argument>,
                        <argument><expr>"Valid $HeadURL: "</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>" $, started unexpanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>17 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 17: "</expr></argument>,
                        <argument><expr>"Valid $URL: "</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>" $, started unexpanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>41 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 41: "</expr></argument>,
                        <argument><expr>"Valid $HeadURL: "</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>42 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 42: "</expr></argument>,
                        <argument><expr>"Valid $URL: "</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>75 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 75: "</expr></argument>,
                        <argument><expr>"Valid $URL: "</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>" $, started expanded."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else  <comment type="block">/* unexpand */</comment>
        <block>{
          <comment type="block">/* Lines 16 and 17 and remain unchanged. */</comment>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>41 - 1</expr>]</index></name> =
            "Line 41: Valid $HeadURL$, started expanded."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>42 - 1</expr>]</index></name> =
            "Line 42: Valid $URL$, started expanded."</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>75 - 1</expr>]</index></name> =
            "Line 75: Valid $URL$, started expanded."</expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

  <comment type="block">/* Handle lines 48, 49, and 70 specially, as they contains two valid
     keywords. */</comment>
  <if>if <condition>(<expr><name>rev</name> &amp;&amp; <name>author</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>expand</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>expect</name><index>[<expr>48 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 48: "</expr></argument>,
                        <argument><expr>"Two keywords back to back: "
                        "$Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $"
                        "$Rev: "</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>" $."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>49 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 49: "</expr></argument>,
                        <argument><expr>"One keyword, one not, back to back: "
                        "$Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $Rev$."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>70 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"$Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $Rev$."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <comment type="block">/* Else Lines 48, 49, and 70 remain unchanged. */</comment>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>rev</name> &amp;&amp; (! <name>author</name>)</expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>expand</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>expect</name><index>[<expr>48 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 48: "</expr></argument>,
                        <argument><expr>"Two keywords back to back: "
                        "$Author$$Rev: "</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>" $."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>49 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 49: "</expr></argument>,
                        <argument><expr>"One keyword, one not, back to back: "
                        "$Author$Rev: "</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>" $."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>70 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"$Author$Rev: "</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>" $."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <comment type="block">/* Else Lines 48, 49, and 70 remain unchanged. */</comment>
    }</block></then>
  <else>else <if>if <condition>(<expr>(! <name>rev</name>) &amp;&amp; <name>author</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>expand</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>expect</name><index>[<expr>48 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 48: "</expr></argument>,
                        <argument><expr>"Two keywords back to back: "
                        "$Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $$Rev$."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>49 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 49: "</expr></argument>,
                        <argument><expr>"One keyword, one not, back to back: "
                        "$Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $Rev$."</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>expect</name><index>[<expr>70 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"$Author: "</expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr>" $Rev$."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <comment type="block">/* Else Lines 48, 49, and 70 remain unchanged. */</comment>
    }</block></then></if></else></if></else></if>
  <comment type="block">/* Else neither rev nor author, so Lines 48, 49, and 70 remain
     unchanged. */</comment>

  <comment type="block">/* Handle line 24 specially, as it contains two valid keywords. */</comment>
  <if>if <condition>(<expr><name>date</name> &amp;&amp; <name>author</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>expand</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>expect</name><index>[<expr>24 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 24: "</expr></argument>,
                        <argument><expr>"keyword in a keyword: $Author: "</expr></argument>,
                        <argument><expr><name>author</name></expr></argument>,
                        <argument><expr>" $Date$ $"</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else  <comment type="block">/* unexpand */</comment>
        <block>{
          <expr_stmt><expr><name><name>expect</name><index>[<expr>24 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 24: "</expr></argument>,
                        <argument><expr>"keyword in a keyword: $Author$Date$ $"</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>date</name> &amp;&amp; (! <name>author</name>)</expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>expand</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>expect</name><index>[<expr>24 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 24: "</expr></argument>,
                        <argument><expr>"keyword in a keyword: $Author: $Date: "</expr></argument>,
                        <argument><expr><name>date</name></expr></argument>,
                        <argument><expr>" $ $"</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <comment type="block">/* Else Line 24 remains unchanged. */</comment>
    }</block></then>
  <else>else <if>if <condition>(<expr>(! <name>date</name>) &amp;&amp; <name>author</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>expand</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>expect</name><index>[<expr>24 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 24: "</expr></argument>,
                        <argument><expr>"keyword in a keyword: $Author: "</expr></argument>,
                        <argument><expr><name>author</name></expr></argument>,
                        <argument><expr>" $Date$ $"</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else  <comment type="block">/* unexpand */</comment>
        <block>{
          <expr_stmt><expr><name><name>expect</name><index>[<expr>24 - 1</expr>]</index></name> =
            <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Line 24: "</expr></argument>,
                        <argument><expr>"keyword in a keyword: $Author$Date$ $"</expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if></else></if></else></if>
  <comment type="block">/* Else neither author nor date, so Line 24 remains unchanged. */</comment>

  <comment type="block">/** Ready to verify. **/</comment>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>dst_fname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name>expect</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr>*<name>expect</name></expr></argument>)</argument_list></sizeof>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <if>if <condition>(<expr><name><name>contents</name>-&gt;<name>len</name></name> &lt; <name>idx</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_MALFORMED_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr>"'%s' has short contents at line %" <name>APR_SIZE_T_FMT</name></expr></argument>,
           <argument><expr><name>dst_fname</name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</return></then></if>

      <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>contents</name>-&gt;<name>data</name></name> + <name>idx</name></expr></argument>, <argument><expr><name><name>expect</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>expect</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_MALFORMED_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr>"'%s' has wrong contents at line %" <name>APR_SIZE_T_FMT</name></expr></argument>,
           <argument><expr><name>dst_fname</name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* Else, the data is correct, at least up to the next eol. */</comment>

      <expr_stmt><expr><name>idx</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>expect</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>dst_eol</name></expr>)</condition><then>  <comment type="block">/* verify the promised consistent eol style */</comment>
        <block>{
          <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>contents</name>-&gt;<name>data</name></name> + <name>idx</name></expr></argument>, <argument><expr><name>dst_eol</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dst_eol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name>
              <argument_list>(<argument><expr><name>SVN_ERR_IO_UNKNOWN_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr>"'%s' has wrong eol style at line %" <name>APR_SIZE_T_FMT</name></expr></argument>, <argument><expr><name>dst_fname</name></expr></argument>,
               <argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</return></then>
          <else>else
            <expr_stmt><expr><name>idx</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>dst_eol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></then>
      <else>else  <comment type="block">/* allow any eol style, even inconsistent ones, loosely */</comment>
        <block>{
          <while>while <condition>(<expr>(*(<name><name>contents</name>-&gt;<name>data</name></name> + <name>idx</name>) == '\r')
                 || (*(<name><name>contents</name>-&gt;<name>data</name></name> + <name>idx</name>) == '\n')</expr>)</condition>
            <expr_stmt><expr><name>idx</name>++</expr>;</expr_stmt></while>
        }</block></else></if>
    }</block></for>

  <comment type="block">/* Clean up this test, since successful. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remove_file</name><argument_list>(<argument><expr><name>src_fname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remove_file</name><argument_list>(<argument><expr><name>dst_fname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>noop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
     <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
     <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "no conversions"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"noop"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"noop"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"noop"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"noop"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<escape char="0xc"/>
<comment type="block">/** EOL conversion alone. **/</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>crlf_to_crlf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
             <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "convert CRLF to CRLF"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"crlf_to_crlf"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>lf_to_crlf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
           <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
           <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "convert LF to CRLF"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"lf_to_crlf"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cr_to_crlf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
           <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
           <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "convert CR to CRLF"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"cr_to_crlf"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>mixed_to_crlf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
              <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "convert mixed line endings to CRLF"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"mixed_to_crlf"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>1</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>lf_to_lf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
         <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "convert LF to LF"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"lf_to_lf"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>crlf_to_lf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
           <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
           <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "convert CRLF to LF"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"crlf_to_lf"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cr_to_lf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
         <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "convert CR to LF"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"cr_to_lf"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>mixed_to_lf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
            <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
            <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "convert mixed line endings to LF"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"cr_to_lf"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>crlf_to_cr</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
           <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
           <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "convert CRLF to CR"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"crlf_to_cr"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>lf_to_cr</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
         <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "convert LF to CR"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"lf_to_cr"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cr_to_cr</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
         <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "convert CR to CR"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"cr_to_cr"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>mixed_to_cr</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
            <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
            <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "convert mixed line endings to CR"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"mixed_to_cr"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>mixed_no_repair</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "keep mixed line endings without repair flag"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"mixed_no_repair"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"mixed_no_repair"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/** Keyword expansion alone. **/</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>expand_author</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
              <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "expand author"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>expand_date</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
            <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
            <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "expand date"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"date"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"date"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>expand_author_date</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                   <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "expand author and date"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author_date"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author_date"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>expand_author_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                  <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "expand author and rev"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author_rev"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author_rev"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>expand_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
           <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
           <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "expand rev"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>expand_rev_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
               <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "expand rev and url"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"rev_url"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"http://subversion.tigris.org"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"rev_url"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"http://subversion.tigris.org"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>expand_author_date_rev_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                           <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "expand author, date, rev, and url"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author_date_rev_url"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>,
           <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>,
           <argument><expr>"jrandom"</expr></argument>,
           <argument><expr>"http://subversion.tigris.org"</expr></argument>,
           <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author_date_rev_url"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>,
           <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>,
           <argument><expr>"jrandom"</expr></argument>,
           <argument><expr>"http://subversion.tigris.org"</expr></argument>,
           <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/** Keyword expansion and EOL conversion together. **/</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>lf_to_crlf_expand_author</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                         <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "lf_to_crlf; expand author"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"lf_to_crlf_author"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>mixed_to_lf_expand_author_date</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                               <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "mixed_to_lf; expand author and date"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"mixed_to_lf_author_date"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>crlf_to_cr_expand_author_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                             <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "crlf_to_cr; expand author and rev"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"crlf_to_cr_author_rev"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cr_to_crlf_expand_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                      <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "cr_to_crlf; expand rev"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"cr_to_crlf_rev"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cr_to_crlf_expand_rev_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                          <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "cr_to_crlf; expand rev and url"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"cr_to_crlf_rev_url"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"http://subversion.tigris.org"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>mixed_to_crlf_expand_author_date_rev_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                                         <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                                         <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "mixed_to_crlf; expand author, date, rev, and url"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"mixed_to_crlf_author_date_rev_url"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>1</expr></argument>,
           <argument><expr>"1729"</expr></argument>,
           <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>,
           <argument><expr>"jrandom"</expr></argument>,
           <argument><expr>"http://subversion.tigris.org"</expr></argument>,
           <argument><expr>1</expr></argument>,
           <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/** Keyword unexpansion alone. **/</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>unexpand_author</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "unexpand author"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>unexpand_date</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
              <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "unexpand date"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"date"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"date"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>unexpand_author_date</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                     <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "unexpand author and date"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author_date"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author_date"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>unexpand_author_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                    <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "unexpand author and rev"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author_rev"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author_rev"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>unexpand_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
             <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "unexpand rev"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>unexpand_rev_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                 <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "unexpand rev and url"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"rev_url"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"http://subversion.tigris.org"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"rev_url"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"http://subversion.tigris.org"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>unexpand_author_date_rev_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                             <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "unexpand author, date, rev, and url"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author_date_rev_url"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>,
           <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>,
           <argument><expr>"jrandom"</expr></argument>,
           <argument><expr>"http://subversion.tigris.org"</expr></argument>,
           <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"author_date_rev_url"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>,
           <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>,
           <argument><expr>"jrandom"</expr></argument>,
           <argument><expr>"http://subversion.tigris.org"</expr></argument>,
           <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/** Keyword unexpansion and EOL conversion together. **/</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>lf_to_crlf_unexpand_author</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                           <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "lf_to_crlf; unexpand author"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"lf_to_crlf_author"</expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>mixed_to_lf_unexpand_author_date</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                                 <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "mixed_to_lf; unexpand author and date"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"mixed_to_lf_author_date"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>crlf_to_cr_unexpand_author_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                               <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "crlf_to_cr; unexpand author and rev"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"crlf_to_cr_author_rev"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"jrandom"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cr_to_crlf_unexpand_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                        <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "cr_to_crlf; unexpand rev"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"cr_to_crlf_rev"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cr_to_crlf_unexpand_rev_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                            <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "cr_to_crlf; unexpand rev and url"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"cr_to_crlf_rev_url"</expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"1729"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"http://subversion.tigris.org"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>mixed_to_crlf_unexpand_author_date_rev_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                                           <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                                           <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "mixed_to_crlf; unexpand author, date, rev, url"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>substitute_and_verify</name>
          <argument_list>(<argument><expr>"mixed_to_crlf_author_date_rev_url"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>1</expr></argument>,
           <argument><expr>"1729"</expr></argument>,
           <argument><expr>"Wed Jan  9 07:49:05 2002"</expr></argument>,
           <argument><expr>"jrandom"</expr></argument>,
           <argument><expr>"http://subversion.tigris.org"</expr></argument>,
           <argument><expr>0</expr></argument>,
           <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* The test table.  */</comment>

<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>=
  <expr><block>{
    <expr><name>SVN_TEST_NULL</name></expr>,
  <comment type="block">/* The no-op conversion. */</comment>
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>noop</name></expr></argument>)</argument_list></call></expr>,
    <comment type="block">/* Conversions resulting in crlf, no keywords involved. */</comment>
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>crlf_to_crlf</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>lf_to_crlf</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>cr_to_crlf</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>mixed_to_crlf</name></expr></argument>)</argument_list></call></expr>,
    <comment type="block">/* Conversions resulting in lf, no keywords involved. */</comment>
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>lf_to_lf</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>crlf_to_lf</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>cr_to_lf</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>mixed_to_lf</name></expr></argument>)</argument_list></call></expr>,
    <comment type="block">/* Conversions resulting in cr, no keywords involved. */</comment>
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>crlf_to_cr</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>lf_to_cr</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>cr_to_cr</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>mixed_to_cr</name></expr></argument>)</argument_list></call></expr>,
    <comment type="block">/* Random eol stuff. */</comment>
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>mixed_no_repair</name></expr></argument>)</argument_list></call></expr>,
    <comment type="block">/* Keyword expansion alone, no eol conversion involved. */</comment>
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>expand_author</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>expand_date</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>expand_author_date</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>expand_author_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>expand_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>expand_rev_url</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>expand_author_date_rev_url</name></expr></argument>)</argument_list></call></expr>,
    <comment type="block">/* Keyword expansion and eol conversion together. */</comment>
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>lf_to_crlf_expand_author</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>mixed_to_lf_expand_author_date</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>crlf_to_cr_expand_author_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>cr_to_crlf_expand_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>cr_to_crlf_expand_rev_url</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>mixed_to_crlf_expand_author_date_rev_url</name></expr></argument>)</argument_list></call></expr>,
    <comment type="block">/* Keyword unexpansion alone, no eol conversion involved. */</comment>
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>unexpand_author</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>unexpand_date</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>unexpand_author_date</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>unexpand_author_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>unexpand_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>unexpand_rev_url</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>unexpand_author_date_rev_url</name></expr></argument>)</argument_list></call></expr>,
    <comment type="block">/* Keyword unexpansion and eol conversion together. */</comment>
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>lf_to_crlf_unexpand_author</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>mixed_to_lf_unexpand_author_date</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>crlf_to_cr_unexpand_author_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>cr_to_crlf_unexpand_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>cr_to_crlf_unexpand_rev_url</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>mixed_to_crlf_unexpand_author_date_rev_url</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>SVN_TEST_NULL</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
</unit>
