<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/tests/libsvn_subr/config-test.c"><comment type="block">/*
 * config-test.c:  tests svn_config
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ====================================================================
   To add tests, look toward the bottom of this file.

*/</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>


<comment type="block">/* Initialize parameters for the tests. */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>test_argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> **</type><name>test_argv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>apr_getopt_option_t</name></type> <name><name>opt_def</name><index>[]</index></name> <init>=
  <expr><block>{
    <expr><block>{<expr>"srcdir"</expr>, <expr>'S'</expr>, <expr>1</expr>, <expr>"the source directory for VPATH test runs"</expr>}</block></expr>,
    <expr><block>{<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>}</block></expr>
  }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>srcdir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>init_params</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>optch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_arg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>apr_getopt_init</name><argument_list>(<argument><expr>&amp;<name>opt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>test_argc</name></expr></argument>, <argument><expr><name>test_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr>!(<name>status</name> = <call><name>apr_getopt_long</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>opt_def</name></expr></argument>, <argument><expr>&amp;<name>optch</name></expr></argument>, <argument><expr>&amp;<name>opt_arg</name></expr></argument>)</argument_list></call>)</expr>)</condition>
    <block>{
      <switch>switch <condition>(<expr><name>optch</name></expr>)</condition>
        <block>{
        <case>case <expr>'S'</expr>:
          <expr_stmt><expr><name>srcdir</name> = <name>opt_arg</name></expr>;</expr_stmt>
          <break>break;</break>
        </case>}</block></switch>
    }</block></while>

  <if>if <condition>(<expr>!<name>srcdir</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr>0</expr></argument>,
                            <argument><expr>"missing required parameter '--srcdir'"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* A quick way to create error messages.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fail</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>msg</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>msg</name> = <call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>config_keys</name><index>[]</index></name> <init>= <expr><block>{ <expr>"foo"</expr>, <expr>"a"</expr>, <expr>"b"</expr>, <expr>"c"</expr>, <expr>"d"</expr>, <expr>"e"</expr>, <expr>"f"</expr>, <expr>"g"</expr>,
                                     <expr>"h"</expr>, <expr>"i"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>config_values</name><index>[]</index></name> <init>= <expr><block>{ <expr>"bar"</expr>, <expr>"Aa"</expr>, <expr>"100"</expr>, <expr>"bar"</expr>,
                                       <expr>"a %(bogus)s oyster bar"</expr>,
                                       <expr>"%(bogus)s shmoo %("</expr>,
                                       <expr>"%Aa"</expr>, <expr>"lyrical bard"</expr>, <expr>"%(unterminated"</expr>,
                                       <expr>"Aa 100"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test1</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
      <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
      <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cfg_file</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "test svn_config"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<name>srcdir</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>init_params</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>cfg_file</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>srcdir</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr>"config-test.cfg"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_read</name><argument_list>(<argument><expr>&amp;<name>cfg</name></expr></argument>, <argument><expr><name>cfg_file</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Test values retrieved from our ConfigParser instance against
     values retrieved using svn_config. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>config_keys</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>py_val</name></decl>, *<decl><type ref="prev"/><name>c_val</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>key</name> = <name><name>config_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>py_val</name> = <name><name>config_values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>c_val</name></expr></argument>, <argument><expr>"section1"</expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>"default value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
      printf("Testing expected value '%s' against '%s' for "
             "option '%s'\n", py_val, c_val, key);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <comment type="block">/* Fail iff one value is null, or the strings don't match. */</comment>
      <if>if <condition>(<expr>(<name>c_val</name> == <name>NULL</name>) != (<name>py_val</name> == <name>NULL</name>)
          || (<name>c_val</name> != <name>NULL</name> &amp;&amp; <name>py_val</name> != <name>NULL</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>c_val</name></expr></argument>, <argument><expr><name>py_val</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
        <return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Expected value '%s' not equal to '%s' for "
                    "option '%s'"</expr></argument>, <argument><expr><name>py_val</name></expr></argument>, <argument><expr><name>c_val</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></for>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>true_keys</name><index>[]</index></name> <init>= <expr><block>{<expr>"true1"</expr>, <expr>"true2"</expr>, <expr>"true3"</expr>, <expr>"true4"</expr>,
                                  <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>false_keys</name><index>[]</index></name> <init>= <expr><block>{<expr>"false1"</expr>, <expr>"false2"</expr>, <expr>"false3"</expr>, <expr>"false4"</expr>,
                                   <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
      <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
      <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cfg_file</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "test svn_config boolean conversion"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<name>srcdir</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>init_params</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>cfg_file</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>srcdir</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr>"config-test.cfg"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_read</name><argument_list>(<argument><expr>&amp;<name>cfg</name></expr></argument>, <argument><expr><name>cfg_file</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>true_keys</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>value</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_get_bool</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr>"booleans"</expr></argument>, <argument><expr><name><name>true_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                  <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then>
        <return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Value of option '%s' is not true"</expr></argument>, <argument><expr><name><name>true_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></for>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>false_keys</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>value</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_get_bool</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr>"booleans"</expr></argument>, <argument><expr><name><name>false_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                  <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>value</name></expr>)</condition><then>
        <return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Value of option '%s' is not true"</expr></argument>, <argument><expr><name><name>false_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></for>

  <block>{
    <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>value</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr>(<name>err</name> = <call><name>svn_config_get_bool</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>,
                                               <argument><expr>"booleans"</expr></argument>, <argument><expr>"bad_true"</expr></argument>,
                                               <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>err</name></expr>)</condition><then>
      <return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"No error on bad truth value"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr>(<name>err</name> = <call><name>svn_config_get_bool</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>,
                                               <argument><expr>"booleans"</expr></argument>, <argument><expr>"bad_false"</expr></argument>,
                                               <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>err</name></expr>)</condition><then>
      <return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"No error on bad truth value"</expr></argument>)</argument_list></call></expr>;</return></then></if>
  }</block>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>has_section_test</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                 <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cfg_file</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "test svn_config_has_section"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<name>srcdir</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>init_params</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>cfg_file</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>srcdir</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr>"config-test.cfg"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_read</name><argument_list>(<argument><expr>&amp;<name>cfg</name></expr></argument>, <argument><expr><name>cfg_file</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <call><name>svn_config_has_section</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>"section1"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Failed to find section1"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><call><name>svn_config_has_section</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>"notthere"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Returned true on missing section"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/*
   ====================================================================
   If you add a new test to this file, update this array.

   (These globals are required by our included main())
*/</comment>

<comment type="block">/* An array of all test functions */</comment>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>=
  <expr><block>{
    <expr><name>SVN_TEST_NULL</name></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test1</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test2</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>has_section_test</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>SVN_TEST_NULL</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
</unit>
