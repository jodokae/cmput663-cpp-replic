<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/tests/libsvn_subr/utf-test.c"><comment type="block">/*
 * utf-test.c -- test the utf functions
 *
 * ====================================================================
 * Copyright (c) 2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_subr/utf_impl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>

<comment type="block">/* Random number seed.  Yes, it's global, just pretend you can't see it. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_uint32_t</name></type> <name>diff_diff3_seed</name></decl>;</decl_stmt>

<comment type="block">/* Return the value of the current random number seed, initializing it if
   necessary */</comment>
<function><type><specifier>static</specifier> <name>apr_uint32_t</name></type>
<name>seed_val</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>static</specifier> <name>svn_boolean_t</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>first</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>diff_diff3_seed</name> = (<name>apr_uint32_t</name>) <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>first</name> = <name>FALSE</name></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>diff_diff3_seed</name></expr>;</return>
}</block></function>

<comment type="block">/* Return a random number N such that MIN_VAL &lt;= N &lt;= MAX_VAL */</comment>
<function><type><specifier>static</specifier> <name>apr_uint32_t</name></type>
<name>range_rand</name><parameter_list>(<param><decl><type><name>apr_uint32_t</name></type> <name>min_val</name></decl></param>,
           <param><decl><type><name>apr_uint32_t</name></type> <name>max_val</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>diff</name> <init>= <expr><name>max_val</name> - <name>min_val</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>val</name> <init>= <expr><name>diff</name> * <call><name>svn_test_rand</name><argument_list>(<argument><expr>&amp;<name>diff_diff3_seed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>val</name> /= 0xffffffff</expr>;</expr_stmt>
  <return>return <expr><name>min_val</name> + (<name>apr_uint32_t</name>) <name>val</name></expr>;</return>
}</block></function>

<comment type="block">/* Explicit tests of various valid/invalid sequences */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>utf_validate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
             <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <struct>struct <name>data</name> <block>{
    <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>valid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>string</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
  }</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>TRUE</name></expr>,  <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\x80'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,

    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xC0'</expr>,                                   <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xC0'</expr>, <expr>'\x81'</expr>,                 <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,

    <expr><block>{<expr><name>TRUE</name></expr>,  <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xC5'</expr>, <expr>'\x81'</expr>,                 <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xC5'</expr>, <expr>'\xC0'</expr>,                 <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,

    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE0'</expr>,                                   <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE0'</expr>,                         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE0'</expr>, <expr>'\xA0'</expr>,                           <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE0'</expr>, <expr>'\xA0'</expr>,                 <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>TRUE</name></expr>,  <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE0'</expr>, <expr>'\xA0'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE0'</expr>, <expr>'\x9F'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE0'</expr>, <expr>'\xCF'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,

    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE5'</expr>,                                   <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE5'</expr>,                         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE5'</expr>, <expr>'\x81'</expr>,                           <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE5'</expr>, <expr>'\x81'</expr>,                 <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>TRUE</name></expr>,  <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE5'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE5'</expr>, <expr>'\xE1'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xE5'</expr>, <expr>'\x81'</expr>, <expr>'\xE1'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,

    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xED'</expr>,                                   <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xED'</expr>,                         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xED'</expr>, <expr>'\x81'</expr>,                           <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xED'</expr>, <expr>'\x81'</expr>,                 <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>TRUE</name></expr>,  <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xED'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xED'</expr>, <expr>'\xA0'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xED'</expr>, <expr>'\x81'</expr>, <expr>'\xC1'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,

    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xEE'</expr>,                                   <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xEE'</expr>,                         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xEE'</expr>, <expr>'\x81'</expr>,                           <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xEE'</expr>, <expr>'\x81'</expr>,                 <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>TRUE</name></expr>,  <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xEE'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>TRUE</name></expr>,  <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xEE'</expr>, <expr>'\xA0'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xEE'</expr>, <expr>'\xC0'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xEE'</expr>, <expr>'\x81'</expr>, <expr>'\xC1'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,

    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF0'</expr>,                                   <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF0'</expr>,                         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF0'</expr>, <expr>'\x91'</expr>,                           <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF0'</expr>, <expr>'\x91'</expr>,                 <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF0'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>,                   <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF0'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>TRUE</name></expr>,  <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF0'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF0'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF0'</expr>, <expr>'\xC1'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF0'</expr>, <expr>'\x91'</expr>, <expr>'\xC1'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF0'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>, <expr>'\xC1'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,

    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF2'</expr>,                         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF2'</expr>, <expr>'\x91'</expr>,                 <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF2'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>TRUE</name></expr>,  <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF2'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>TRUE</name></expr>,  <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF2'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF2'</expr>, <expr>'\xC1'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF2'</expr>, <expr>'\x91'</expr>, <expr>'\xC1'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF2'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>, <expr>'\xC1'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,

    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF4'</expr>,                         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF4'</expr>, <expr>'\x91'</expr>,                 <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF4'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF4'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>TRUE</name></expr>,  <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF4'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF4'</expr>, <expr>'\xC1'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF4'</expr>, <expr>'\x91'</expr>, <expr>'\xC1'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF4'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>, <expr>'\xC1'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,

    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF5'</expr>,                         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF5'</expr>, <expr>'\x81'</expr>,                 <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,

    <expr><block>{<expr><name>TRUE</name></expr>,  <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF4'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>,
             <expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF2'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF4'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>,
             <expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF2'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>, <expr>'\xC1'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,
    <expr><block>{<expr><name>FALSE</name></expr>, <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF4'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'\x81'</expr>, <expr>'x'</expr>, <expr>'y'</expr>,
             <expr>'a'</expr>, <expr>'b'</expr>, <expr>'\xF2'</expr>, <expr>'\x91'</expr>, <expr>'\x81'</expr>,         <expr>'x'</expr>, <expr>'y'</expr>, <expr>'\0'</expr>}</block></expr>}</block></expr>,

    <expr><block>{<expr>-1</expr>}</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "test is_valid/last_valid"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>


  <while>while <condition>(<expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>valid</name> != -1</expr>)</condition>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last</name> <init>= <expr><call><name>svn_utf__last_valid</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr></argument>,
                                             <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr>(<call><name>svn_utf__cstring_is_valid</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr></argument>)</argument_list></call> != <name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>valid</name>)
          ||
          (<call><name>svn_utf__is_valid</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> != <name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>valid</name>)</expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"is_valid test %d failed"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <if>if <condition>(<expr>!<call><name>svn_utf__is_valid</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr></argument>, <argument><expr><name>last</name> - <name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr></argument>)</argument_list></call>
          ||
          (<name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>valid</name> &amp;&amp; *<name>last</name>)</expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"last_valid test %d failed"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
    }</block></while>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Compare the two different implementations using random data. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>utf_validate2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
              <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                      <argument><expr>"test last_valid/last_valid2 (seed:%u)"</expr></argument>, <argument><expr><call><name>seed_val</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* We want enough iterations so that most runs get both valid and invalid
     strings.  We also want enough iterations such that a deliberate error
     in one of the implementations will trigger a failure.  By experiment
     the second requirement requires a much larger number of iterations
     that the first. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 100000</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr>64</expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>

      <comment type="block">/* A random string; experiment shows that it's occasionally (less
         than 1%) valid but usually invalid. */</comment>
      <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</condition> <incr><expr>++<name>j</name></expr></incr>)
        <expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> = <call><name>range_rand</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>255</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
      <expr_stmt><expr><name><name>str</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> - 1</expr>]</index></name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>svn_utf__last_valid</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> != <call><name>svn_utf__last_valid2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <comment type="block">/* Duplicate calls for easy debugging */</comment>
          <expr_stmt><expr><call><name>svn_utf__last_valid</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_utf__last_valid2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"is_valid2 test %d failed"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Test conversion from different codepages to utf8. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_utf_cstring_to_utf8_ex2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                             <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <struct>struct <name>data</name> <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expected_result</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from_page</name></decl>;</decl_stmt>
  }</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{<expr>"ascii text\n"</expr>, <expr>"ascii text\n"</expr>, <expr>"unexistant-page"</expr>}</block></expr>,
      <expr><block>{<expr>"Edelwei\xdf"</expr>, <expr>"Edelwei\xc3\x9f"</expr>, <expr>"ISO-8859-1"</expr>}</block></expr>
  }</block></expr></init></decl>;</struct>

  <expr_stmt><expr>*<name>msg</name> = "test svn_utf_cstring_to_utf8_ex2"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_to_utf8_ex2</name><argument_list>(<argument><expr>&amp;<name>dest</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr></argument>,
                                          <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>from_page</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>expected_result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"svn_utf_cstring_to_utf8_ex2 ('%s', '%s') returned ('%s') "
             "instead of ('%s')"</expr></argument>,
             <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>from_page</name></expr></argument>,
             <argument><expr><name>dest</name></expr></argument>,
             <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>expected_result</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></for>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Test conversion to different codepages from utf8. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_utf_cstring_from_utf8_ex2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                               <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <struct>struct <name>data</name> <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expected_result</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to_page</name></decl>;</decl_stmt>
  }</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{<expr>"ascii text\n"</expr>, <expr>"ascii text\n"</expr>, <expr>"unexistant-page"</expr>}</block></expr>,
      <expr><block>{<expr>"Edelwei\xc3\x9f"</expr>, <expr>"Edelwei\xdf"</expr>, <expr>"ISO-8859-1"</expr>}</block></expr>
  }</block></expr></init></decl>;</struct>

  <expr_stmt><expr>*<name>msg</name> = "test svn_utf_cstring_from_utf8_ex2"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8_ex2</name><argument_list>(<argument><expr>&amp;<name>dest</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr></argument>,
                                            <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>to_page</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>expected_result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr>"svn_utf_cstring_from_utf8_ex2 ('%s', '%s') returned ('%s') "
             "instead of ('%s')"</expr></argument>,
             <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>to_page</name></expr></argument>,
             <argument><expr><name>dest</name></expr></argument>,
             <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>expected_result</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></for>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/* The test table.  */</comment>

<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>=
  <expr><block>{
    <expr><name>SVN_TEST_NULL</name></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>utf_validate</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>utf_validate2</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_utf_cstring_to_utf8_ex2</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_utf_cstring_from_utf8_ex2</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>SVN_TEST_NULL</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
</unit>
