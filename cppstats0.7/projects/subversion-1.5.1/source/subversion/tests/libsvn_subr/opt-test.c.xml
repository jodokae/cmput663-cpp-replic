<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/tests/libsvn_subr/opt-test.c"><comment type="block">/*
 * opt-test.c -- test the option functions
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_parse_peg_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                   <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <struct><specifier>static</specifier> struct <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt> <comment type="block">/* NULL means an error is expected. */</comment>
      <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg</name></decl>;</decl_stmt>
  }</block> <decl>const <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr>"foo/bar"</expr>,              <expr>"foo/bar"</expr>,      <expr><block>{<expr><name>svn_opt_revision_unspecified</name></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"foo/bar@13"</expr>,           <expr>"foo/bar"</expr>,      <expr><block>{<expr><name>svn_opt_revision_number</name></expr>, <expr><block>{<expr>13</expr>}</block></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"foo/bar@HEAD"</expr>,         <expr>"foo/bar"</expr>,      <expr><block>{<expr><name>svn_opt_revision_head</name></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"foo/bar@{1999-12-31}"</expr>, <expr>"foo/bar"</expr>,      <expr><block>{<expr><name>svn_opt_revision_date</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"http://a/b@27"</expr>,        <expr>"http://a/b"</expr>,   <expr><block>{<expr><name>svn_opt_revision_number</name></expr>, <expr><block>{<expr>27</expr>}</block></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"http://a/b@COMMITTED"</expr>, <expr>"http://a/b"</expr>,   <expr><block>{<expr><name>svn_opt_revision_committed</name></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"foo/bar@1:2"</expr>,          <expr><name>NULL</name></expr>,           <expr><block>{<expr><name>svn_opt_revision_unspecified</name></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"foo/bar@baz"</expr>,          <expr><name>NULL</name></expr>,           <expr><block>{<expr><name>svn_opt_revision_unspecified</name></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"foo/bar@"</expr>,             <expr>"foo/bar"</expr>,      <expr><block>{<expr><name>svn_opt_revision_unspecified</name></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"foo/bar/@13"</expr>,          <expr>"foo/bar/"</expr>,     <expr><block>{<expr><name>svn_opt_revision_number</name></expr>, <expr><block>{<expr>13</expr>}</block></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"foo/bar@@13"</expr>,          <expr>"foo/bar@"</expr>,     <expr><block>{<expr><name>svn_opt_revision_number</name></expr>, <expr><block>{<expr>13</expr>}</block></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"foo/@bar@HEAD"</expr>,        <expr>"foo/@bar"</expr>,     <expr><block>{<expr><name>svn_opt_revision_head</name></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"foo@/bar"</expr>,             <expr>"foo@/bar"</expr>,     <expr><block>{<expr><name>svn_opt_revision_unspecified</name></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr>"foo@HEAD/bar"</expr>,         <expr>"foo@HEAD/bar"</expr>, <expr><block>{<expr><name>svn_opt_revision_unspecified</name></expr>}</block></expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>

  <expr_stmt><expr>*<name>msg</name> = "test svn_opt_parse_path"</expr>;</expr_stmt>
  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>svn_opt_parse_path</name><argument_list>(<argument><expr>&amp;<name>peg</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>input</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name></expr>)</condition><then>
            <block>{
              <return>return <expr><call><name>svn_error_createf</name>
                <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                 <argument><expr>"svn_opt_parse_path ('%s') returned an error instead of '%s'"</expr></argument>,
                 <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>input</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block></then>
      <else>else
        <block>{
          <if>if <condition>(<expr>(<name>path</name> == <name>NULL</name>)
              || (<name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name> == <name>NULL</name>)
              || (<call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name></expr></argument>)</argument_list></call> != 0)
              || (<name><name>peg</name>.<name>kind</name></name> != <name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name><name>peg</name>.<name>kind</name></name>)
              || (<name><name>peg</name>.<name>kind</name></name> == <name>svn_opt_revision_number</name> &amp;&amp; <name><name>peg</name>.<name>value</name>.<name>number</name></name> != <name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name><name>peg</name>.<name>value</name>.<name>number</name></name>)</expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name>
              <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr>"svn_opt_parse_path ('%s') returned '%s' instead of '%s'"</expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>input</name></expr></argument>,
               <argument><expr><name>path</name> ? <name>path</name> : "NULL"</expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name> ? <name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name> : "NULL"</expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></else></if>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_svn_opt_args_to_target_array2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                                   <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <struct><specifier>static</specifier> struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>output</name></decl>;</decl_stmt> <comment type="block">/* NULL means an error is expected. */</comment>
  }</block> <decl>const <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr>"."</expr>,                      <expr>""</expr> }</block></expr>,
    <expr><block>{ <expr>".@BASE"</expr>,                 <expr>"@BASE"</expr> }</block></expr>,
    <expr><block>{ <expr>"foo///bar"</expr>,              <expr>"foo/bar"</expr> }</block></expr>,
    <expr><block>{ <expr>"foo///bar@13"</expr>,           <expr>"foo/bar@13"</expr> }</block></expr>,
    <expr><block>{ <expr>"foo///bar@HEAD"</expr>,         <expr>"foo/bar@HEAD"</expr> }</block></expr>,
    <expr><block>{ <expr>"foo///bar@{1999-12-31}"</expr>, <expr>"foo/bar@{1999-12-31}"</expr> }</block></expr>,
    <expr><block>{ <expr>"http://a//b////"</expr>,        <expr>"http://a/b"</expr> }</block></expr>,
    <expr><block>{ <expr>"http://a///b@27"</expr>,        <expr>"http://a/b@27"</expr> }</block></expr>,
    <expr><block>{ <expr>"http://a/b//@COMMITTED"</expr>, <expr>"http://a/b@COMMITTED"</expr> }</block></expr>,
    <expr><block>{ <expr>"foo///bar@1:2"</expr>,          <expr>"foo/bar@1:2"</expr> }</block></expr>,
    <expr><block>{ <expr>"foo///bar@baz"</expr>,          <expr>"foo/bar@baz"</expr> }</block></expr>,
    <expr><block>{ <expr>"foo///bar@"</expr>,             <expr>"foo/bar@"</expr> }</block></expr>,
    <expr><block>{ <expr>"foo///bar///@13"</expr>,        <expr>"foo/bar@13"</expr> }</block></expr>,
    <expr><block>{ <expr>"foo///bar@@13"</expr>,          <expr>"foo/bar@@13"</expr> }</block></expr>,
    <expr><block>{ <expr>"foo///@bar@HEAD"</expr>,        <expr>"foo/@bar@HEAD"</expr> }</block></expr>,
    <expr><block>{ <expr>"foo@///bar"</expr>,             <expr>"foo@/bar"</expr> }</block></expr>,
    <expr><block>{ <expr>"foo@HEAD///bar"</expr>,         <expr>"foo@HEAD/bar"</expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>

  <expr_stmt><expr>*<name>msg</name> = "test svn_opt_args_to_target_array2"</expr>;</expr_stmt>
  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input</name> <init>= <expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>input</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expected_output</name> <init>= <expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>output</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>argc</name> <init>= <expr>2</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>argv</name><index>[]</index></name> <init>= <expr><block>{ <expr>"opt-test"</expr>, <expr><name>input</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>apr_err</name> = <call><name>apr_getopt_init</name><argument_list>(<argument><expr>&amp;<name>os</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>,
                                  <argument><expr>"Error initializing command line arguments"</expr></argument>)</argument_list></call></expr>;</return></then></if>

      <expr_stmt><expr><name>err</name> = <call><name>svn_opt_args_to_target_array2</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>expected_output</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>actual_output</name></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <return>return <expr><name>err</name></expr>;</return></then></if>
          <if>if <condition>(<expr><name>argc</name> - 1 != <name><name>targets</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr>"Passed %d target(s) to "
                                     "svn_opt_args_to_target_array2() but "
                                     "got %d back."</expr></argument>,
                                     <argument><expr><name>argc</name> - 1</expr></argument>,
                                     <argument><expr><name><name>targets</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

          <expr_stmt><expr><name>actual_output</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr>! <call><name>svn_path_is_canonical</name><argument_list>(<argument><expr><name>actual_output</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr>"Input '%s' to "
                                     "svn_opt_args_to_target_array2() should "
                                     "have returned a canonical path but "
                                     "'%s' is not."</expr></argument>,
                                     <argument><expr><name>input</name></expr></argument>,
                                     <argument><expr><name>actual_output</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
            
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>expected_output</name></expr></argument>, <argument><expr><name>actual_output</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr>"Input '%s' to "
                                     "svn_opt_args_to_target_array2() should "
                                     "have returned '%s' but returned '%s'."</expr></argument>,
                                     <argument><expr><name>input</name></expr></argument>,
                                     <argument><expr><name>expected_output</name></expr></argument>,
                                     <argument><expr><name>actual_output</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></then>
      <else>else
        <block>{
          <if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr>"Unexpected success in passing '%s' "
                                     "to svn_opt_args_to_target_array2()."</expr></argument>,
                                     <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></else></if>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/* The test table.  */</comment>

<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>=
  <expr><block>{
    <expr><name>SVN_TEST_NULL</name></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_parse_peg_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_svn_opt_args_to_target_array2</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>SVN_TEST_NULL</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
</unit>
