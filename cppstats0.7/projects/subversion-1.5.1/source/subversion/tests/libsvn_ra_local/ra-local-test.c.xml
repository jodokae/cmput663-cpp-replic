<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/tests/libsvn_ra_local/ra-local-test.c"><comment type="block">/*
 * ra-local-test.c :  basic tests for the RA LOCAL library
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getcwd</name></cpp:macro> <cpp:value>_getcwd</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include> <comment type="block">/* for getcwd() */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_ra_local/ra_local.h"</cpp:file></cpp:include>

<comment type="block">/*-------------------------------------------------------------------*/</comment>
<escape char="0xc"/>
<comment type="block">/** Helper routines. **/</comment>


<comment type="block">/* Helper function.  Set URL to a "file://" url for the current directory,
   suffixed by the forward-slash-style relative path SUFFIX, performing all
   allocation in POOL. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>current_directory_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>suffix</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* 8KB is a lot, but it almost guarantees that any path will fit. */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>curdir</name><index>[<expr>8192</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>utf8_ls_curdir</name></decl>, *<decl><type ref="prev"/><name>utf8_is_curdir</name></decl>, *<decl><type ref="prev"/><name>unencoded_url</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <call><name>getcwd</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curdir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_BASE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"getcwd() failed"</expr></argument>)</argument_list></call></expr>;</return></then></if>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AS400_UTF8</name></cpp:ifndef>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>utf8_ls_curdir</name></expr></argument>, <argument><expr><name>curdir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Even with the UTF support in V5R4 a few functions on OS400
     still populate string reference arguments with ebcdic,
     including _getcwd(). */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>svn_utf_cstring_to_utf8_ex2</name><argument_list>(<argument><expr>&amp;<name>utf8_ls_curdir</name></expr></argument>, <argument><expr><name>curdir</name></expr></argument>,
                                       <argument><expr>(const <name>char</name> *)0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>utf8_is_curdir</name> = <call><name>svn_path_internal_style</name><argument_list>(<argument><expr><name>utf8_ls_curdir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>unencoded_url</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"file://%s%s%s%s"</expr></argument>,
                               <argument><expr>(<name><name>utf8_is_curdir</name><index>[<expr>0</expr>]</index></name> != '/') ? "/" : ""</expr></argument>,
                               <argument><expr><name>utf8_is_curdir</name></expr></argument>,
                               <argument><expr>(<name><name>suffix</name><index>[<expr>0</expr>]</index></name> &amp;&amp; <name><name>suffix</name><index>[<expr>0</expr>]</index></name> != '/') ? "/" : ""</expr></argument>,
                               <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>url</name> = <call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>unencoded_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_and_open_local_repos</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> **</type><name>session</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_name</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_type</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_callbacks2_t</name> *</type><name>cbtable</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_create_callbacks</name><argument_list>(<argument><expr>&amp;<name>cbtable</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name>repos_name</name></expr></argument>, <argument><expr><name>fs_type</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_initialize</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>current_directory_url</name><argument_list>(<argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>repos_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_open3</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                       <argument><expr><name>url</name></expr></argument>,
                       <argument><expr><name>NULL</name></expr></argument>,
                       <argument><expr><name>cbtable</name></expr></argument>,
                       <argument><expr><name>NULL</name></expr></argument>,
                       <argument><expr><name>NULL</name></expr></argument>,
                       <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/*-------------------------------------------------------------------*/</comment>
<escape char="0xc"/>
<comment type="block">/** The tests **/</comment>

<comment type="block">/* Open an RA session to a local repository. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_ra_session</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "open an ra session to a local repository"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_and_open_local_repos</name><argument_list>(<argument><expr>&amp;<name>session</name></expr></argument>,
                                    <argument><expr>"test-repo-open"</expr></argument>, <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Discover the youngest revision in a repository.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_youngest_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                 <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>latest_rev</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "get the youngest revision in a repository"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_and_open_local_repos</name><argument_list>(<argument><expr>&amp;<name>session</name></expr></argument>,
                                    <argument><expr>"test-repo-getrev"</expr></argument>, <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the youngest revision and make sure it's 0. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_latest_revnum</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>latest_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>latest_rev</name> != 0</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr>"youngest rev isn't 0!"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Helper function.  Run svn_ra_local__split_URL with interest only in
   the return error code */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>try_split_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_path</name></decl>, *<decl><type ref="prev"/><name>fs_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_local__split_URL</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr>&amp;<name>repos_path</name></expr></argument>, <argument><expr>&amp;<name>fs_path</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>apr_err</name> = <name><name>err</name>-&gt;<name>apr_err</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>apr_err</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>split_url_syntax</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                 <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "svn_ra_local__split_URL: syntax validation"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* TEST 1:  Make sure we can recognize bad URLs (this should not
     require a filesystem) */</comment>

  <comment type="block">/* Use `blah' for scheme instead of `file' */</comment>
  <expr_stmt><expr><name>apr_err</name> = <call><name>try_split_url</name><argument_list>(<argument><expr>"blah:///bin/svn"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>apr_err</name> != <name>SVN_ERR_RA_ILLEGAL_URL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"svn_ra_local__split_URL failed to catch bad URL (scheme)"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Use only single slash after scheme */</comment>
  <expr_stmt><expr><name>apr_err</name> = <call><name>try_split_url</name><argument_list>(<argument><expr>"file:/path/to/repos"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>apr_err</name> != <name>SVN_ERR_RA_ILLEGAL_URL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"svn_ra_local__split_URL failed to catch bad URL (slashes)"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Use only a hostname, with no path */</comment>
  <expr_stmt><expr><name>apr_err</name> = <call><name>try_split_url</name><argument_list>(<argument><expr>"file://hostname"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>apr_err</name> != <name>SVN_ERR_RA_ILLEGAL_URL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"svn_ra_local__split_URL failed to catch bad URL (no path)"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>split_url_bad_host</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
                   <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "svn_ra_local__split_URL: invalid host names"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Give a hostname other than `' or `localhost' */</comment>
  <expr_stmt><expr><name>apr_err</name> = <call><name>try_split_url</name><argument_list>(<argument><expr>"file://myhost/repos/path"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>apr_err</name> != <name>SVN_ERR_RA_ILLEGAL_URL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"svn_ra_local__split_URL failed to catch bad URL (hostname)"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>split_url_host</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
               <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>msg</name> = "svn_ra_local__split_URL: valid host names"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Make sure we *don't* fuss about a good URL (note that this URL
     still doesn't point to an existing versioned resource) */</comment>
  <expr_stmt><expr><name>apr_err</name> = <call><name>try_split_url</name><argument_list>(<argument><expr>"file:///repos/path"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>apr_err</name> == <name>SVN_ERR_RA_ILLEGAL_URL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"svn_ra_local__split_URL cried foul about a good URL (no hostname)"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><name>apr_err</name> = <call><name>try_split_url</name><argument_list>(<argument><expr>"file://localhost/repos/path"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>apr_err</name> == <name>SVN_ERR_RA_ILLEGAL_URL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr>"svn_ra_local__split_URL cried foul about a good URL (localhost)"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Helper function.  Creates a repository in the current working
   directory named REPOS_PATH, then assembes a URL that points to that
   FS, plus additional cruft (IN_REPOS_PATH) that theoretically refers to a
   versioned resource in that repository.  Finally, it runs this URL
   through svn_ra_local__split_URL to verify that it accurately
   separates the filesystem path and the repository path cruft. 

   If IN_REPOS_PATH is NULL, we'll split the root URL and verify our
   parts that way (noting that that in-repos-path that results should
   be "/").  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_split_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_path</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>in_repos_path</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_type</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>, *<decl><type ref="prev"/><name>root_url</name></decl>, *<decl><type ref="prev"/><name>repos_part</name></decl>, *<decl><type ref="prev"/><name>in_repos_part</name></decl>;</decl_stmt>

  <comment type="block">/* Create a filesystem and repository */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name>repos_path</name></expr></argument>, <argument><expr><name>fs_type</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>current_directory_url</name><argument_list>(<argument><expr>&amp;<name>root_url</name></expr></argument>, <argument><expr><name>repos_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>in_repos_path</name></expr>)</condition><then>
    <expr_stmt><expr><name>url</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>root_url</name></expr></argument>, <argument><expr><name>in_repos_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>url</name> = <name>root_url</name></expr>;</expr_stmt></else></if>

  <comment type="block">/* Run this URL through our splitter... */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_local__split_URL</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr>&amp;<name>repos_part</name></expr></argument>, <argument><expr>&amp;<name>in_repos_part</name></expr></argument>,
                                  <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We better see the REPOS_PART looking just like our ROOT_URL.  And
     we better see in the IN_REPOS_PART either exactly the same as the
     IN_REPOS_PATH provided us, or "/" if we weren't provided an
     IN_REPOS_PATH.  */</comment>
  <if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>repos_part</name></expr></argument>, <argument><expr><name>root_url</name></expr></argument>)</argument_list></call> == 0)
      &amp;&amp; ((<name>in_repos_path</name> &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>in_repos_part</name></expr></argument>, <argument><expr><name>in_repos_path</name></expr></argument>)</argument_list></call> == 0))
          || ((! <name>in_repos_path</name>) &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>in_repos_part</name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call> == 0)))</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <return>return <expr><call><name>svn_error_createf</name>
    <argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
     <argument><expr>"svn_ra_local__split_URL failed to properly split the URL\n"
     "%s\n%s\n%s\n%s"</expr></argument>,
     <argument><expr><name>repos_part</name></expr></argument>, <argument><expr><name>root_url</name></expr></argument>, <argument><expr><name>in_repos_part</name></expr></argument>, 
     <argument><expr><name>in_repos_path</name> ? <name>in_repos_path</name> : "(null)"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>split_url_test</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
               <param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>msg</name> = "test svn_ra_local__split_URL correctness"</expr>;</expr_stmt>

  <if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* TEST 2: Given well-formed URLs, make sure that we can correctly
     find where the filesystem portion of the path ends and the
     in-repository path begins.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_split_url</name><argument_list>(<argument><expr>"test-repo-split-fs1"</expr></argument>,
                          <argument><expr>"/trunk/foobar/quux.c"</expr></argument>,
                          <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>,
                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_split_url</name><argument_list>(<argument><expr>"test-repo-split-fs2"</expr></argument>,
                          <argument><expr>"/alpha/beta/gamma/delta/epsilon/zeta/eta/theta"</expr></argument>,
                          <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>,
                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_split_url</name><argument_list>(<argument><expr>"test-repo-split-fs3"</expr></argument>,
                          <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>,
                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* The test table.  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_UNC_HOST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_UNC_HOST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>=
  <expr><block>{
    <expr><name>SVN_TEST_NULL</name></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>open_ra_session</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>get_youngest_rev</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>split_url_syntax</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_SKIP</name><argument_list>(<argument><expr><name>split_url_bad_host</name></expr></argument>, <argument><expr><name>HAS_UNC_HOST</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>split_url_host</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>split_url_test</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>SVN_TEST_NULL</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
</unit>
