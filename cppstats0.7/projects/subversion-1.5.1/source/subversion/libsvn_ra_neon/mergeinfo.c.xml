<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_neon/mergeinfo.c"><comment type="block">/*
 * mergeinfo.c :  routines for requesting and parsing mergeinfo reports
 *
 * ====================================================================
 * Copyright (c) 2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ne_socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>

<comment type="block">/* Baton for accumulating mergeinfo.  CATALOG stores the final
   mergeinfo catalog result we are going to hand back to the caller of
   get_mergeinfo.  curr_path and curr_info contain the value of the
   CDATA from the mergeinfo items as we get them from the server.  */</comment>

<struct>struct <name>mergeinfo_baton</name>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>curr_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>curr_info</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>catalog</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name></type> <name><name>mergeinfo_report_elements</name><index>[]</index></name> <init>=
  <expr><block>{
    <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr><name>SVN_DAV__MERGEINFO_REPORT</name></expr>, <expr><name>ELEM_mergeinfo_report</name></expr>, <expr>0</expr> }</block></expr>,
    <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr><name>SVN_DAV__MERGEINFO_ITEM</name></expr>, <expr><name>ELEM_mergeinfo_item</name></expr>, <expr>0</expr> }</block></expr>,
    <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr><name>SVN_DAV__MERGEINFO_PATH</name></expr>, <expr><name>ELEM_mergeinfo_path</name></expr>,
      <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr><name>SVN_DAV__MERGEINFO_INFO</name></expr>, <expr><name>ELEM_mergeinfo_info</name></expr>,
      <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
  }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_element</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>elem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>parent_state</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elt_name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>mergeinfo_baton</name> *</type><name>mb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name>
    <init>= <expr><call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>mergeinfo_report_elements</name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>,
                                   <argument><expr><name>elt_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>! <name>elm</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>elem</name> = <name>NE_XML_DECLINE</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <if>if <condition>(<expr><name>parent_state</name> == <name>ELEM_root</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* If we're at the root of the tree, the element has to be the editor
       * report itself. */</comment>
      <if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> != <name>ELEM_mergeinfo_report</name></expr>)</condition><then>
        <return>return <expr><call><name>UNEXPECTED_ELEMENT</name><argument_list>(<argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_mergeinfo_item</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>mb</name>-&gt;<name>curr_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mb</name>-&gt;<name>curr_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>mb</name>-&gt;<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>elem</name> = <name><name>elm</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_element</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elt_name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>mergeinfo_baton</name> *</type><name>mb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name>
    <init>= <expr><call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>mergeinfo_report_elements</name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>,
                                   <argument><expr><name>elt_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>! <name>elm</name></expr>)</condition><then>
    <return>return <expr><call><name>UNEXPECTED_ELEMENT</name><argument_list>(<argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_mergeinfo_item</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>mb</name>-&gt;<name>curr_info</name></name> &amp;&amp; <name><name>mb</name>-&gt;<name>curr_path</name></name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>path_mergeinfo</name></decl>;</decl_stmt>

          <expr_stmt><expr><name><name>mb</name>-&gt;<name>err</name></name> = <call><name>svn_mergeinfo_parse</name><argument_list>(<argument><expr>&amp;<name>path_mergeinfo</name></expr></argument>, <argument><expr><name><name>mb</name>-&gt;<name>curr_info</name>-&gt;<name>data</name></name></expr></argument>,
                                        <argument><expr><name><name>mb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>mb</name>-&gt;<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>mb</name>-&gt;<name>catalog</name></name></expr></argument>, <argument><expr><name><name>mb</name>-&gt;<name>curr_path</name></name></expr></argument>,  <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                       <argument><expr><name>path_mergeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cdata</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>mergeinfo_baton</name> *</type><name>mb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>nlen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>state</name></expr>)</condition>
    <block>{
    <case>case <expr><name>ELEM_mergeinfo_path</name></expr>:
      <expr_stmt><expr><name><name>mb</name>-&gt;<name>curr_path</name></name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>mb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_mergeinfo_info</name></expr>:
      <if>if <condition>(<expr><name><name>mb</name>-&gt;<name>curr_info</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>mb</name>-&gt;<name>curr_info</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <break>break;</break>

    </case><default>default:
      <break>break;</break>
    </default>}</block></switch>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>mb</name>-&gt;<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Request a mergeinfo-report from the URL attached to SESSION,
   and fill in the CATALOG with the results.  */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__get_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><name>svn_mergeinfo_catalog_t</name> *</type><name>catalog</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                           <param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>include_descendants</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>status_code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>request_body</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>mergeinfo_baton</name></type> <name>mb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>, <decl><type ref="prev"/><name>bc_relative</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>final_bc_url</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>minfo_report_head</name><index>[]</index></name> <init>=
    <expr>"&lt;S:" <name>SVN_DAV__MERGEINFO_REPORT</name> " xmlns:S=\"" <name>SVN_XML_NAMESPACE</name> "\"&gt;"
    <name>DEBUG_CR</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>minfo_report_tail</name><index>[]</index></name> <init>=
    <expr>"&lt;/S:" <name>SVN_DAV__MERGEINFO_REPORT</name> "&gt;" <name>DEBUG_CR</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Construct the request body. */</comment>
  <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr><name>minfo_report_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
                           <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                        <argument><expr>"&lt;S:revision&gt;%ld"
                                        "&lt;/S:revision&gt;"</expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
                           <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                        <argument><expr>"&lt;S:inherit&gt;%s"
                                        "&lt;/S:inherit&gt;"</expr></argument>,
                                        <argument><expr><call><name>svn_inheritance_to_word</name><argument_list>(<argument><expr><name>inherit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>include_descendants</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Send it only if true; server will default to "no". */</comment>
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
                               <argument><expr>"&lt;S:include-descendants&gt;yes"
                               "&lt;/S:include-descendants&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>paths</name></expr>)</condition><then>
    <block>{
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this_path</name> <init>=
            <expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                 <argument><expr>((const <name>char</name> **)<name><name>paths</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></argument>,
                                 <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr>"&lt;S:path&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr>"&lt;/S:path&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr><name>minfo_report_tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>mb</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name>.<name>curr_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name>.<name>curr_info</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name>.<name>catalog</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mb</name>.<name>err</name></name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

  <comment type="block">/* ras's URL may not exist in HEAD, and thus it's not safe to send
     it as the main argument to the REPORT request; it might cause
     dav_get_resource() to choke on the server.  So instead, we pass a
     baseline-collection URL, which we get from END. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name>ras</name></expr></argument>, <argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                         <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>final_bc_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__parsed_request</name><argument_list>(<argument><expr><name>ras</name></expr></argument>,
                                      <argument><expr>"REPORT"</expr></argument>,
                                      <argument><expr><name>final_bc_url</name></expr></argument>,
                                      <argument><expr><name><name>request_body</name>-&gt;<name>data</name></name></expr></argument>,
                                      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr><name>start_element</name></expr></argument>,
                                      <argument><expr><name>cdata_handler</name></expr></argument>,
                                      <argument><expr><name>end_element</name></expr></argument>,
                                      <argument><expr>&amp;<name>mb</name></expr></argument>,
                                      <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr>&amp;<name>status_code</name></expr></argument>,
                                      <argument><expr><name>FALSE</name></expr></argument>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>mb</name>.<name>err</name></name> == <name>SVN_NO_ERROR</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>catalog</name> = <name><name>mb</name>.<name>catalog</name></name></expr>;</expr_stmt></then></if>

  <return>return <expr><name><name>mb</name>.<name>err</name></name></expr>;</return>
}</block></function>
</unit>
