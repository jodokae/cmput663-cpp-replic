<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_neon/props.c"><comment type="block">/*
 * props.c :  routines for fetching DAV properties
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>


<comment type="block">/* some definitions of various properties that may be fetched */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ne_propname</name></type> <name>svn_ra_neon__vcc_prop</name> <init>= <expr><block>{
  <expr>"DAV:"</expr>, <expr>"version-controlled-configuration"</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ne_propname</name></type> <name>svn_ra_neon__checked_in_prop</name> <init>= <expr><block>{
  <expr>"DAV:"</expr>, <expr>"checked-in"</expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* when we begin a checkout, we fetch these from the "public" resources to
   steer us towards a Baseline Collection. we fetch the resourcetype to
   verify that we're accessing a collection. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ne_propname</name></type> <name><name>starting_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"version-controlled-configuration"</expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"resourcetype"</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"baseline-relative-path"</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"repository-uuid"</expr>}</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* when speaking to a Baseline to reach the Baseline Collection, fetch these
   properties. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ne_propname</name></type> <name><name>baseline_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"baseline-collection"</expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr><name>SVN_DAV__VERSION_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<escape char="0xc"/>
<comment type="block">/*** Propfind Implementation ***/</comment>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>is_property</name></decl>;</decl_stmt>      <comment type="block">/* is it a property, or part of some structure? */</comment>
}</block></struct></type> <name>elem_defn</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>elem_defn</name></type> <name><name>elem_definitions</name><index>[]</index></name> <init>=
<expr><block>{
  <comment type="block">/*** NOTE: Make sure that every item in here is also represented in
       propfind_elements[] ***/</comment>

  <comment type="block">/* DAV elements */</comment>
  <expr><block>{ <expr><name>ELEM_multistatus</name></expr>, <expr>"DAV:multistatus"</expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_response</name></expr>, <expr>"DAV:response"</expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_href</name></expr>, <expr>"DAV:href"</expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_propstat</name></expr>, <expr>"DAV:propstat"</expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_prop</name></expr>, <expr>"DAV:prop"</expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_status</name></expr>, <expr>"DAV:status"</expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_baseline</name></expr>, <expr>"DAV:baseline"</expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_collection</name></expr>, <expr>"DAV:collection"</expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_resourcetype</name></expr>, <expr>"DAV:resourcetype"</expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_baseline_coll</name></expr>, <expr><name>SVN_RA_NEON__PROP_BASELINE_COLLECTION</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_checked_in</name></expr>, <expr><name>SVN_RA_NEON__PROP_CHECKED_IN</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_vcc</name></expr>, <expr><name>SVN_RA_NEON__PROP_VCC</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_version_name</name></expr>, <expr><name>SVN_RA_NEON__PROP_VERSION_NAME</name></expr>, <expr>1</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_get_content_length</name></expr>, <expr><name>SVN_RA_NEON__PROP_GETCONTENTLENGTH</name></expr>, <expr>1</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_creationdate</name></expr>, <expr><name>SVN_RA_NEON__PROP_CREATIONDATE</name></expr>, <expr>1</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_creator_displayname</name></expr>, <expr><name>SVN_RA_NEON__PROP_CREATOR_DISPLAYNAME</name></expr>, <expr>1</expr> }</block></expr>,

  <comment type="block">/* SVN elements */</comment>
  <expr><block>{ <expr><name>ELEM_baseline_relpath</name></expr>, <expr><name>SVN_RA_NEON__PROP_BASELINE_RELPATH</name></expr>, <expr>1</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_md5_checksum</name></expr>, <expr><name>SVN_RA_NEON__PROP_MD5_CHECKSUM</name></expr>, <expr>1</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_repository_uuid</name></expr>, <expr><name>SVN_RA_NEON__PROP_REPOSITORY_UUID</name></expr>, <expr>1</expr> }</block></expr>,
  <expr><block>{ <expr><name>ELEM_deadprop_count</name></expr>, <expr><name>SVN_RA_NEON__PROP_DEADPROP_COUNT</name></expr>, <expr>1</expr> }</block></expr>,
  <expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name></type> <name><name>propfind_elements</name><index>[]</index></name> <init>=
<expr><block>{
  <comment type="block">/*** NOTE: Make sure that every item in here is also represented in
       elem_definitions[] ***/</comment>

  <comment type="block">/* DAV elements */</comment>
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"multistatus"</expr>, <expr><name>ELEM_multistatus</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"response"</expr>, <expr><name>ELEM_response</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"href"</expr>, <expr><name>ELEM_href</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"propstat"</expr>, <expr><name>ELEM_propstat</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"prop"</expr>, <expr><name>ELEM_prop</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"status"</expr>, <expr><name>ELEM_status</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"baseline"</expr>, <expr><name>ELEM_baseline</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"baseline-collection"</expr>, <expr><name>ELEM_baseline_coll</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"checked-in"</expr>, <expr><name>ELEM_checked_in</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"collection"</expr>, <expr><name>ELEM_collection</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"resourcetype"</expr>, <expr><name>ELEM_resourcetype</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"version-controlled-configuration"</expr>, <expr><name>ELEM_vcc</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr><name>SVN_DAV__VERSION_NAME</name></expr>, <expr><name>ELEM_version_name</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"getcontentlength"</expr>, <expr><name>ELEM_get_content_length</name></expr>,
    <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr><name>SVN_DAV__CREATIONDATE</name></expr>, <expr><name>ELEM_creationdate</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"creator-displayname"</expr>, <expr><name>ELEM_creator_displayname</name></expr>,
    <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,

  <comment type="block">/* SVN elements */</comment>
  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"baseline-relative-path"</expr>, <expr><name>ELEM_baseline_relpath</name></expr>,
    <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"md5-checksum"</expr>, <expr><name>ELEM_md5_checksum</name></expr>,
    <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"repository-uuid"</expr>, <expr><name>ELEM_repository_uuid</name></expr>,
    <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"deadprop-count"</expr>, <expr><name>ELEM_deadprop_count</name></expr>,
    <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,

  <comment type="block">/* Unknowns */</comment>
  <expr><block>{ <expr>""</expr>, <expr>""</expr>, <expr><name>ELEM_unknown</name></expr>, <expr><name>SVN_RA_NEON__XML_COLLECT</name></expr> }</block></expr>,

  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<typedef>typedef <type><struct>struct <name>propfind_ctx_t</name>
<block>{
  <comment type="block">/*WARNING: WANT_CDATA should stay the first element in the baton:
    svn_ra_neon__xml_collect_cdata() assumes the baton starts with a stringbuf.
  */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cdata</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt> <comment type="block">/* const char *URL-PATH -&gt; svn_ra_neon__resource_t */</comment>

  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl>;</decl_stmt> <comment type="block">/* the current resource. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>;</decl_stmt> <comment type="block">/* property encoding (or NULL) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt> <comment type="block">/* status for the current &lt;propstat&gt; (or 0 if unknown). */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>propbuffer</name></decl>;</decl_stmt> <comment type="block">/* holds properties until their status is known. */</comment>
  <decl_stmt><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>last_open_id</name></decl>;</decl_stmt> <comment type="block">/* the id of the last opened tag. */</comment>
  <decl_stmt><decl><type><name>ne_xml_parser</name> *</type><name>parser</name></decl>;</decl_stmt> <comment type="block">/* xml parser handling the PROPSET request. */</comment>

  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

}</block></struct></type> <name>propfind_ctx_t</name>;</typedef>


<comment type="block">/* Look up an element definition ID.  May return NULL if the elem is
   not recognized. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>elem_defn</name> *</type><name>defn_from_id</name><parameter_list>(<param><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>id</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>elem_defn</name> *</type><name>defn</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>defn</name> = <name>elem_definitions</name></expr>;</init> <condition><expr><name><name>defn</name>-&gt;<name>name</name></name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>defn</name></expr></incr>)
    <block>{
      <if>if <condition>(<expr><name>id</name> == <name><name>defn</name>-&gt;<name>id</name></name></expr>)</condition><then>
        <return>return <expr><name>defn</name></expr>;</return></then></if>
    }</block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>


<comment type="block">/* Assign URL to RSRC.  Use POOL for any allocations. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>assign_rsrc_url</name><parameter_list>(<param><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>url_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ne_uri</name></type> <name>parsed_url</name></decl>;</decl_stmt>

  <comment type="block">/* Parse the PATH element out of the URL.
     NOTE: mod_dav does not (currently) use an absolute URL, but simply a
     server-relative path (i.e. this uri_parse is effectively a no-op).
  */</comment>
  <if>if <condition>(<expr><call><name>ne_uri_parse</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>parsed_url</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>parsed_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unable to parse URL '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>url_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>parsed_url</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>parsed_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clean up trailing slashes from the URL. */</comment>
  <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>url_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>len</name> &gt; 1 &amp;&amp; <name><name>url_path</name><index>[<expr><name>len</name> - 1</expr>]</index></name> == '/'</expr>)</condition><then>
    <expr_stmt><expr><name><name>url_path</name><index>[<expr><name>len</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>url</name></name> = <name>url_path</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Determine whether we're receiving the expected XML response.
   Return CHILD when interested in receiving the child's contents
   or one of SVN_RA_NEON__XML_INVALID and SVN_RA_NEON__XML_DECLINE
   when respectively this is the incorrect response or
   the element (and its children) are uninteresting */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>validate_element</name><parameter_list>(<param><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>parent</name></decl></param>,
                            <param><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>child</name></decl></param>)</parameter_list>
<block>{
  <switch>switch <condition>(<expr><name>parent</name></expr>)</condition>
    <block>{
    <case>case <expr><name>ELEM_root</name></expr>:
      <if>if <condition>(<expr><name>child</name> == <name>ELEM_multistatus</name></expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_INVALID</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_multistatus</name></expr>:
      <if>if <condition>(<expr><name>child</name> == <name>ELEM_response</name></expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_response</name></expr>:
      <if>if <condition>(<expr>(<name>child</name> == <name>ELEM_href</name>) || (<name>child</name> == <name>ELEM_propstat</name>)</expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_propstat</name></expr>:
      <if>if <condition>(<expr>(<name>child</name> == <name>ELEM_prop</name>) || (<name>child</name> == <name>ELEM_status</name>)</expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_prop</name></expr>:
      <return>return <expr><name>child</name></expr>;</return> <comment type="block">/* handle all children of &lt;prop&gt; */</comment>

    </case><case>case <expr><name>ELEM_baseline_coll</name></expr>:
    </case><case>case <expr><name>ELEM_checked_in</name></expr>:
    </case><case>case <expr><name>ELEM_vcc</name></expr>:
      <if>if <condition>(<expr><name>child</name> == <name>ELEM_href</name></expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return></else></if> <comment type="block">/* not concerned with other types */</comment>

    </case><case>case <expr><name>ELEM_resourcetype</name></expr>:
      <if>if <condition>(<expr>(<name>child</name> == <name>ELEM_collection</name>) || (<name>child</name> == <name>ELEM_baseline</name>)</expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return></else></if> <comment type="block">/* not concerned with other types
                                           (### now) */</comment>

    </case><default>default:
      <return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return>
    </default>}</block></switch>

  <comment type="block">/* NOTREACHED */</comment>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_element</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>elem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>parent</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>propfind_ctx_t</name> *</type><name>pc</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name>
    <init>= <expr><call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>propfind_elements</name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


  <expr_stmt><expr>*<name>elem</name> = <name>elm</name> ? <call><name>validate_element</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>elm</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call> : <name>SVN_RA_NEON__XML_DECLINE</name></expr>;</expr_stmt>
  <if>if <condition>(<expr>*<name>elem</name> &lt; 1</expr>)</condition><then> <comment type="block">/* not a valid element */</comment>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>cdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>elem</name> = <name>elm</name> ? <name><name>elm</name>-&gt;<name>id</name></name> : <name>ELEM_unknown</name></expr>;</expr_stmt>
  <switch>switch <condition>(<expr>*<name>elem</name></expr>)</condition>
    <block>{
    <case>case <expr><name>ELEM_response</name></expr>:
      <if>if <condition>(<expr><name><name>pc</name>-&gt;<name>rsrc</name></name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_XML_MALFORMED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <comment type="block">/* Create a new resource. */</comment>
      <expr_stmt><expr><name><name>pc</name>-&gt;<name>rsrc</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*(<name><name>pc</name>-&gt;<name>rsrc</name></name>)</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pc</name>-&gt;<name>rsrc</name>-&gt;<name>pool</name></name> = <name><name>pc</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pc</name>-&gt;<name>rsrc</name>-&gt;<name>propset</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pc</name>-&gt;<name>status</name></name> = 0</expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_propstat</name></expr>:
      <expr_stmt><expr><name><name>pc</name>-&gt;<name>status</name></name> = 0</expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_href</name></expr>:
      <comment type="block">/* Remember this &lt;href&gt;'s parent so that when we close this tag,
         we know to whom the URL assignment belongs.  Could be the
         resource itself, or one of the properties:
         ELEM_baseline_coll, ELEM_checked_in, ELEM_vcc: */</comment>
      <expr_stmt><expr><name><name>pc</name>-&gt;<name>rsrc</name>-&gt;<name>href_parent</name></name> = <name><name>pc</name>-&gt;<name>last_open_id</name></name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_collection</name></expr>:
      <expr_stmt><expr><name><name>pc</name>-&gt;<name>rsrc</name>-&gt;<name>is_collection</name></name> = 1</expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_unknown</name></expr>:
      <comment type="block">/* these are our user-visible properties, presumably. */</comment>
      <expr_stmt><expr><name><name>pc</name>-&gt;<name>encoding</name></name> = <call><name>ne_xml_get_attr</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>parser</name></name></expr></argument>, <argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_DAV</name></expr></argument>,
                                     <argument><expr>"encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>pc</name>-&gt;<name>encoding</name></name></expr>)</condition><then>
        <expr_stmt><expr><name><name>pc</name>-&gt;<name>encoding</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <break>break;</break>

    </case><default>default:
      <comment type="block">/* nothing to do for these */</comment>
      <break>break;</break>
    </default>}</block></switch>

  <comment type="block">/* Remember the last tag we opened. */</comment>
  <expr_stmt><expr><name><name>pc</name>-&gt;<name>last_open_id</name></name> = *<name>elem</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>end_element</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>propfind_ctx_t</name> *</type><name>pc</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name> <init>= <expr><name><name>pc</name>-&gt;<name>rsrc</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>elem_defn</name> *</type><name>parent_defn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>elem_defn</name> *</type><name>defn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ne_status</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cdata</name> <init>= <expr><name><name>pc</name>-&gt;<name>cdata</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>state</name></expr>)</condition>
    <block>{
    <case>case <expr><name>ELEM_response</name></expr>:
      <comment type="block">/* Verify that we've received a URL for this resource. */</comment>
      <if>if <condition>(<expr>!<name><name>pc</name>-&gt;<name>rsrc</name>-&gt;<name>url</name></name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_XML_MALFORMED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* Store the resource in the top-level hash table. */</comment>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>rsrc</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>rsrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pc</name>-&gt;<name>rsrc</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>

    </case><case>case <expr><name>ELEM_propstat</name></expr>:
      <comment type="block">/* We're at the end of a set of properties.  Do the right thing
         status-wise. */</comment>
      <if>if <condition>(<expr><name><name>pc</name>-&gt;<name>status</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* We have a status.  Loop over the buffered properties, and
             if the status is a good one (200), copy them into the
             resources's property hash.  Regardless of the status,
             we'll be removing these from the temporary buffer as we
             go along. */</comment>
          <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name> <init>= <expr><call><name>apr_hash_first</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>propbuffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for (<init>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
            <block>{
              <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name><name>pc</name>-&gt;<name>status</name></name> == 200</expr>)</condition><then>
                <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>propset</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>propbuffer</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
      <else>else <if>if <condition>(<expr>! <name><name>pc</name>-&gt;<name>status</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* No status at all?  Bogosity. */</comment>
          <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_XML_MALFORMED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></else></if>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>

    </case><case>case <expr><name>ELEM_status</name></expr>:
      <comment type="block">/* Parse the &lt;status&gt; tag's CDATA for a status code. */</comment>
      <if>if <condition>(<expr><call><name>ne_parse_statusline</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_XML_MALFORMED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>status</name>.<name>reason_phrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pc</name>-&gt;<name>status</name></name> = <name><name>status</name>.<name>code</name></name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>

    </case><case>case <expr><name>ELEM_href</name></expr>:
      <comment type="block">/* Special handling for &lt;href&gt; that belongs to the &lt;response&gt; tag. */</comment>
      <if>if <condition>(<expr><name><name>rsrc</name>-&gt;<name>href_parent</name></name> == <name>ELEM_response</name></expr>)</condition><then>
        <return>return <expr><call><name>assign_rsrc_url</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* Use the parent element's name, not the href. */</comment>
      <expr_stmt><expr><name>parent_defn</name> = <call><name>defn_from_id</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>href_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* No known parent?  Get outta here. */</comment>
      <if>if <condition>(<expr>!<name>parent_defn</name></expr>)</condition><then>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

      <comment type="block">/* All other href's we'll treat as property values. */</comment>
      <expr_stmt><expr><name>name</name> = <name><name>parent_defn</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>value</name> = <call><name>svn_string_create</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><default>default:
      <comment type="block">/*** This case is, as usual, for everything not covered by other
           cases.  ELM-&gt;id should be either ELEM_unknown, or one of
           the ids in the elem_definitions[] structure.  In this case,
           we seek to handle properties.  Since ELEM_unknown should
           only occur for properties, we will handle that id.  All
           other ids will be searched for in the elem_definitions[]
           structure to determine if they are properties.  Properties,
           we handle; all else hits the road.  ***/</comment>

      <if>if <condition>(<expr><name>state</name> == <name>ELEM_unknown</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>defn</name> = <call><name>defn_from_id</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! (<name>defn</name> &amp;&amp; <name><name>defn</name>-&gt;<name>is_property</name></name>)</expr>)</condition><then>
            <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
          <expr_stmt><expr><name>name</name> = <name><name>defn</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
        }</block></else></if>

      <comment type="block">/* Check for encoding attribute. */</comment>
      <if>if <condition>(<expr><name><name>pc</name>-&gt;<name>encoding</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* Handle the property value by converting it to string. */</comment>
        <expr_stmt><expr><name>value</name> = <call><name>svn_string_create</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      }</block></then></if>

      <comment type="block">/* Check for known encoding type */</comment>
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>encoding</name></name></expr></argument>, <argument><expr>"base64"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_XML_MALFORMED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* There is an encoding on this property, handle it.
       * the braces are needed to allocate "in" on the stack. */</comment>
      <block>{
        <decl_stmt><decl><type><name>svn_string_t</name></type> <name>in</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>in</name>.<name>data</name></name> = <name>cdata</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>in</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>svn_base64_decode_string</name><argument_list>(<argument><expr>&amp;<name>in</name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>

      <expr_stmt><expr><name><name>pc</name>-&gt;<name>encoding</name></name> = <name>NULL</name></expr>;</expr_stmt> <comment type="block">/* Reset encoding for future attribute(s). */</comment>
    </default>}</block></switch>

  <comment type="block">/*** Handling resource properties from here out. ***/</comment>

  <comment type="block">/* Add properties to the temporary propbuffer.  At the end of the
     &lt;propstat&gt;, we'll either dump the props as invalid or move them
     into the resource's property hash. */</comment>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>propbuffer</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>set_parser</name><parameter_list>(<param><decl><type><name>ne_xml_parser</name> *</type><name>parser</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>propfind_ctx_t</name> *</type><name>pc</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pc</name>-&gt;<name>parser</name></name> = <name>parser</name></expr>;</expr_stmt>
}</block></function>


<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__get_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>results</name></decl></param>,
                                     <param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                     <param><decl><type><name>int</name></type> <name>depth</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>ne_propname</name> *</type><name>which_props</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>propfind_ctx_t</name></type> <name>pc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>body</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_ra_neon__add_depth_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we have a label, use it. */</comment>
  <if>if <condition>(<expr><name>label</name> != <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"Label"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* It's easier to roll our own PROPFIND here than use neon's current
     interfaces. */</comment>
  <comment type="block">/* The start of the request body is fixed: */</comment>
  <expr_stmt><expr><name>body</name> = <call><name>svn_stringbuf_create</name>
    <argument_list>(<argument><expr>"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;" <name>DEBUG_CR</name>
     "&lt;propfind xmlns=\"DAV:\"&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Are we asking for specific propert(y/ies), or just all of them? */</comment>
  <if>if <condition>(<expr><name>which_props</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;prop&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name><name>which_props</name><index>[<expr><name>n</name></expr>]</index></name>.<name>name</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>)
        <block>{
          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name>
            <argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr>"&lt;"</expr></argument>, <argument><expr><name><name>which_props</name><index>[<expr><name>n</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr>" xmlns=\""</expr></argument>,
                               <argument><expr><name><name>which_props</name><index>[<expr><name>n</name></expr>]</index></name>.<name>nspace</name></expr></argument>, <argument><expr>"\"/&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;/prop&gt;&lt;/propfind&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;allprop/&gt;&lt;/propfind&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Initialize our baton. */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>pc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pc</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pc</name>.<name>propbuffer</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pc</name>.<name>props</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pc</name>.<name>cdata</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create and dispatch the request! */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__parsed_request</name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr>"PROPFIND"</expr></argument>, <argument><expr><name>url</name></expr></argument>,
                                      <argument><expr><name><name>body</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                      <argument><expr><name>set_parser</name></expr></argument>,
                                      <argument><expr><name>start_element</name></expr></argument>,
                                      <argument><expr><name>svn_ra_neon__xml_collect_cdata</name></expr></argument>,
                                      <argument><expr><name>end_element</name></expr></argument>,
                                      <argument><expr>&amp;<name>pc</name></expr></argument>, <argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>results</name> = <name><name>pc</name>.<name>props</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__get_props_resource</name><parameter_list>(<param><decl><type><name>svn_ra_neon__resource_t</name> **</type><name>rsrc</name></decl></param>,
                                              <param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
                                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
                                              <param><decl><type><specifier>const</specifier> <name>ne_propname</name> *</type><name>which_props</name></decl></param>,
                                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type> <name>url_path</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Clean up any trailing slashes. */</comment>
  <if>if <condition>(<expr><name>len</name> &gt; 1 &amp;&amp; <name><name>url</name><index>[<expr><name>len</name> - 1</expr>]</index></name> == '/'</expr>)</condition><then>
      <expr_stmt><expr><name><name>url_path</name><index>[<expr><name>len</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props</name><argument_list>(<argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>url_path</name></expr></argument>, <argument><expr><name>SVN_RA_NEON__DEPTH_ZERO</name></expr></argument>,
                                 <argument><expr><name>label</name></expr></argument>, <argument><expr><name>which_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### HACK.  We need to have the client canonicalize paths, get rid
     of double slashes and such.  This check is just a check against
     non-SVN servers;  in the long run we want to re-enable this. */</comment>
  <if>if <condition>(<expr>1 || <name>label</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* pick out the first response: the URL requested will not match
       * the response href. */</comment>
      <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name> <init>= <expr><call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>hi</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>void</name> *</type><name>ent</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr>*<name>rsrc</name> = <name>ent</name></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <expr_stmt><expr>*<name>rsrc</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr>*<name>rsrc</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>url_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr>*<name>rsrc</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* ### hmmm, should have been in there... */</comment>
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to find label '%s' for URL '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>label</name> ? <name>label</name> : "NULL"</expr></argument>, <argument><expr><name>url_path</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__get_one_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>propval</name></decl></param>,
                                        <param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>ne_propname</name> *</type><name>propname</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ne_propname</name></type> <name><name>props</name><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr>0</expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>props</name><index>[<expr>0</expr>]</index></name> = *<name>propname</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>props</name></expr></argument>,
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>propname</name>-&gt;<name>nspace</name></name></expr></argument>, <argument><expr><name><name>propname</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>propset</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* ### need an SVN_ERR here */</comment>
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_PROPS_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' was not present on the resource"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr>*<name>propval</name> = <name>value</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__get_starting_props</name><parameter_list>(<param><decl><type><name>svn_ra_neon__resource_t</name> **</type><name>rsrc</name></decl></param>,
                                              <param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
                                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
                                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,
                                          <argument><expr><name>starting_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Cache some of the resource information. */</comment>

  <if>if <condition>(<expr>! <name><name>sess</name>-&gt;<name>vcc</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>(*<name>rsrc</name>)-&gt;<name>propset</name></name></expr></argument>,
                             <argument><expr><name>SVN_RA_NEON__PROP_VCC</name></expr></argument>,
                             <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>propval</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>sess</name>-&gt;<name>vcc</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <if>if <condition>(<expr>! <name><name>sess</name>-&gt;<name>uuid</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>(*<name>rsrc</name>)-&gt;<name>propset</name></name></expr></argument>,
                             <argument><expr><name>SVN_RA_NEON__PROP_REPOSITORY_UUID</name></expr></argument>,
                             <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>propval</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>sess</name>-&gt;<name>uuid</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__search_for_starting_props</name><parameter_list>(<param><decl><type><name>svn_ra_neon__resource_t</name> **</type><name>rsrc</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>missing_path</name></decl></param>,
                                       <param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>path_s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ne_uri</name></type> <name>parsed_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>lopped_path</name> <init>=
    <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* initialize to make sure it'll fit
                                        without reallocating */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Split the url into its component pieces (scheme, host, path,
     etc).  We want the path part. */</comment>
  <expr_stmt><expr><call><name>ne_uri_parse</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>parsed_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>parsed_url</name>.<name>path</name></name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>parsed_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Neon was unable to parse URL '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name>lopped_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>path_s</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name><name>parsed_url</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>parsed_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Try to get the starting_props from the public url.  If the
     resource no longer exists in HEAD, we'll get a failure.  That's
     fine: just keep removing components and trying to get the
     starting_props from parent directories. */</comment>
  <while>while <condition>(<expr>! <call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name><name>path_s</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__get_starting_props</name><argument_list>(<argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name><name>path_s</name>-&gt;<name>data</name></name></expr></argument>,
                                            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
        <break>break;</break></then></if>   <comment type="block">/* found an existing parent! */</comment>

      <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr>)</condition><then>
        <return>return <expr><name>err</name></expr>;</return></then></if>  <comment type="block">/* found a _real_ error */</comment>

      <comment type="block">/* else... lop off the basename and try again. */</comment>
      <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name>lopped_path</name></expr></argument>,
                        <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name><name>path_s</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name><name>lopped_path</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>len</name> = <name><name>path_s</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_path_remove_component</name><argument_list>(<argument><expr><name>path_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* if we detect an infinite loop, get out. */</comment>
      <if>if <condition>(<expr><name><name>path_s</name>-&gt;<name>len</name></name> == <name>len</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_quick_wrap</name>
          <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The path was not part of a repository"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

  <comment type="block">/* error out if entire URL was bogus (not a single part of it exists
     in the repository!)  */</comment>
  <if>if <condition>(<expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name><name>path_s</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"No part of path '%s' was found in "
                               "repository HEAD"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>parsed_url</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Duplicate rsrc out of iterpool into pool */</comment>
  <block>{
    <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>tmp</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tmp</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>(*<name>rsrc</name>)-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name>-&gt;<name>is_collection</name></name> = <name>(*<name>rsrc</name>)-&gt;<name>is_collection</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name>-&gt;<name>propset</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr><name>(*<name>rsrc</name>)-&gt;<name>propset</name></name></expr></argument>)</argument_list></call></expr>;</init>
         <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
      <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>tmp</name>-&gt;<name>propset</name></name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                     <argument><expr><call><name>svn_string_dup</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

    <expr_stmt><expr>*<name>rsrc</name> = <name>tmp</name></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr>*<name>missing_path</name> = <name><name>lopped_path</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type><name>svn_ra_neon__get_vcc</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vcc</name></decl></param>,
                                  <param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lopped_path</name></decl>;</decl_stmt>

  <comment type="block">/* Look for memory-cached VCC in the RA session. */</comment>
  <if>if <condition>(<expr><name><name>sess</name>-&gt;<name>vcc</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>vcc</name> = <name><name>sess</name>-&gt;<name>vcc</name></name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* ### Someday, possibly look for disk-cached VCC via get_wcprop callback. */</comment>

  <comment type="block">/* Finally, resort to a set of PROPFINDs up parent directories. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__search_for_starting_props</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr>&amp;<name>lopped_path</name></expr></argument>,
                                                 <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <name><name>sess</name>-&gt;<name>vcc</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* ### better error reporting... */</comment>
      <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The VCC property was not found on the "
                                "resource"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr>*<name>vcc</name> = <name><name>sess</name>-&gt;<name>vcc</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type><name>svn_ra_neon__get_baseline_props</name><parameter_list>(<param><decl><type><name>svn_string_t</name> *</type><name>bc_relative</name></decl></param>,
                                             <param><decl><type><name>svn_ra_neon__resource_t</name> **</type><name>bln_rsrc</name></decl></param>,
                                             <param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                             <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>ne_propname</name> *</type><name>which_props</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>relative_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>my_bc_relative</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lopped_path</name></decl>;</decl_stmt>

  <comment type="block">/* ### we may be able to replace some/all of this code with an
     ### expand-property REPORT when that is available on the server. */</comment>

  <comment type="block">/* -------------------------------------------------------------------
     STEP 1

     Fetch the following properties from the given URL (or, if URL no
     longer exists in HEAD, get the properties from the nearest
     still-existing parent resource):

     *) DAV:version-controlled-configuration so that we can reach the
        baseline information.

     *) svn:baseline-relative-path so that we can find this resource
        within a Baseline Collection.  If we need to search up parent
        directories, then the relative path is this property value
        *plus* any trailing components we had to chop off.

     *) DAV:resourcetype so that we can identify whether this resource
        is a collection or not -- assuming we never had to search up
        parent directories.
  */</comment>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__search_for_starting_props</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr>&amp;<name>lopped_path</name></expr></argument>,
                                                 <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_vcc</name><argument_list>(<argument><expr>&amp;<name>vcc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>vcc</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* ### better error reporting... */</comment>

      <comment type="block">/* ### need an SVN_ERR here */</comment>
      <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The VCC property was not found on the "
                                "resource"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Allocate our own bc_relative path. */</comment>
  <expr_stmt><expr><name>relative_path</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>propset</name></name></expr></argument>,
                               <argument><expr><name>SVN_RA_NEON__PROP_BASELINE_RELPATH</name></expr></argument>,
                               <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>relative_path</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* ### better error reporting... */</comment>
      <comment type="block">/* ### need an SVN_ERR here */</comment>
      <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The relative-path property was not "
                                "found on the resource"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* don't forget to tack on the parts we lopped off in order to find
     the VCC...  We are expected to return a URI decoded relative
     path, so decode the lopped path first. */</comment>
  <expr_stmt><expr><name>my_bc_relative</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>relative_path</name>-&gt;<name>data</name></name></expr></argument>,
                                 <argument><expr><call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>lopped_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* if they want the relative path (could be, they're just trying to find
     the baseline collection), then return it */</comment>
  <if>if <condition>(<expr><name>bc_relative</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>bc_relative</name>-&gt;<name>data</name></name> = <name>my_bc_relative</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bc_relative</name>-&gt;<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>my_bc_relative</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* -------------------------------------------------------------------
     STEP 2

     We have the Version Controlled Configuration (VCC). From here, we
     need to reach the Baseline for specified revision.

     If the revision is SVN_INVALID_REVNUM, then we're talking about
     the HEAD revision. We have one extra step to reach the Baseline:

     *) Fetch the DAV:checked-in from the VCC; it points to the Baseline.

     If we have a specific revision, then we use a Label header when
     fetching props from the VCC. This will direct us to the Baseline
     with that label (in this case, the label == the revision number).

     From the Baseline, we fetch the following properties:

     *) DAV:baseline-collection, which is a complete tree of the Baseline
        (in SVN terms, this tree is rooted at a specific revision)

     *) DAV:version-name to get the revision of the Baseline that we are
        querying. When asking about the HEAD, this tells us its revision.
  */</comment>

  <if>if <condition>(<expr><name>revision</name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Fetch the latest revision */</comment>

      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>baseline</name></decl>;</decl_stmt>

      <comment type="block">/* Get the Baseline from the DAV:checked-in value, then fetch its
         DAV:baseline-collection property. */</comment>
      <comment type="block">/* ### should wrap this with info about rsrc==VCC */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_one_prop</name><argument_list>(<argument><expr>&amp;<name>baseline</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>vcc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                        <argument><expr>&amp;<name>svn_ra_neon__checked_in_prop</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* ### do we want to optimize the props we fetch, based on what the
         ### user asked for? i.e. omit version-name if latest_rev is NULL */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>,
                                              <argument><expr><name><name>baseline</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                              <argument><expr><name>which_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* Fetch a specific revision */</comment>

      <decl_stmt><decl><type><name>char</name></type> <name><name>label</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>

      <comment type="block">/* ### send Label hdr, get DAV:baseline-collection [from the baseline] */</comment>

      <expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* ### do we want to optimize the props we fetch, based on what the
         ### user asked for? i.e. omit version-name if latest_rev is NULL */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>vcc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,
                                              <argument><expr><name>which_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Return the baseline rsrc, which now contains whatever set of
     props the caller wanted. */</comment>
  <expr_stmt><expr>*<name>bln_rsrc</name> = <name>rsrc</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type><name>svn_ra_neon__get_baseline_info</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>is_dir</name></decl></param>,
                                            <param><decl><type><name>svn_string_t</name> *</type><name>bc_url</name></decl></param>,
                                            <param><decl><type><name>svn_string_t</name> *</type><name>bc_relative</name></decl></param>,
                                            <param><decl><type><name>svn_revnum_t</name> *</type><name>latest_rev</name></decl></param>,
                                            <param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                            <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>baseline_rsrc</name></decl>, *<decl><type ref="prev"/><name>rsrc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>my_bc_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name></type> <name>my_bc_rel</name></decl>;</decl_stmt>

  <comment type="block">/* Go fetch a BASELINE_RSRC that contains specific properties we
     want.  This routine will also fill in BC_RELATIVE as best it
     can. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_props</name><argument_list>(<argument><expr>&amp;<name>my_bc_rel</name></expr></argument>,
                                          <argument><expr>&amp;<name>baseline_rsrc</name></expr></argument>,
                                          <argument><expr><name>sess</name></expr></argument>,
                                          <argument><expr><name>url</name></expr></argument>,
                                          <argument><expr><name>revision</name></expr></argument>,
                                          <argument><expr><name>baseline_props</name></expr></argument>, <comment type="block">/* specific props */</comment>
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* baseline_rsrc now points at the Baseline. We will checkout from
     the DAV:baseline-collection.  The revision we are checking out is
     in DAV:version-name */</comment>

  <comment type="block">/* Allocate our own copy of bc_url regardless. */</comment>
  <expr_stmt><expr><name>my_bc_url</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>baseline_rsrc</name>-&gt;<name>propset</name></name></expr></argument>,
                           <argument><expr><name>SVN_RA_NEON__PROP_BASELINE_COLLECTION</name></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>my_bc_url</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* ### better error reporting... */</comment>
      <comment type="block">/* ### need an SVN_ERR here */</comment>
      <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'DAV:baseline-collection' was not present "
                                "on the baseline resource"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* maybe return bc_url to the caller */</comment>
  <if>if <condition>(<expr><name>bc_url</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>bc_url</name> = *<name>my_bc_url</name></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>latest_rev</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>vsn_name</name><init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>baseline_rsrc</name>-&gt;<name>propset</name></name></expr></argument>,
                                                 <argument><expr><name>SVN_RA_NEON__PROP_VERSION_NAME</name></expr></argument>,
                                                 <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>vsn_name</name> == <name>NULL</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* ### better error reporting... */</comment>

          <comment type="block">/* ### need an SVN_ERR here */</comment>
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' was not present on the baseline "
                                     "resource"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr>"DAV:" <name>SVN_DAV__VERSION_NAME</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr>*<name>latest_rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>vsn_name</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>is_dir</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* query the DAV:resourcetype of the full, assembled URL. */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_bc_url</name> <init>= <expr><call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>my_bc_url</name>-&gt;<name>data</name></name></expr></argument>,
                                                           <argument><expr><name><name>my_bc_rel</name>.<name>data</name></name></expr></argument>,
                                                           <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_starting_props</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>full_bc_url</name></expr></argument>,
                                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>is_dir</name> = <name><name>rsrc</name>-&gt;<name>is_collection</name></name></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>bc_relative</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>bc_relative</name> = <name>my_bc_rel</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Helper function for svn_ra_neon__do_proppatch() below. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_setprop</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>body</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>xml_safe</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>xml_tag_name</name></decl>;</decl_stmt>

  <comment type="block">/* Map property names to namespaces */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSLEN</name></cpp:macro> <cpp:value>(sizeof(SVN_PROP_PREFIX) - 1)</cpp:value></cpp:define>
  <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_PREFIX</name></expr></argument>, <argument><expr><name>NSLEN</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>xml_tag_name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"S:"</expr></argument>, <argument><expr><name>name</name> + <name>NSLEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NSLEN</name></cpp:undef>
  <else>else
    <block>{
      <expr_stmt><expr><name>xml_tag_name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"C:"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* If there is no value, just generate an empty tag and get outta
     here. */</comment>
  <if>if <condition>(<expr>! <name>value</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>,
                               <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;%s /&gt;"</expr></argument>, <argument><expr><name>xml_tag_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

  <comment type="block">/* If a property is XML-safe, XML-encode it.  Else, base64-encode
     it. */</comment>
  <if>if <condition>(<expr><call><name>svn_xml_is_xml_safe</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>xml_esc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>svn_xml_escape_cdata_string</name><argument_list>(<argument><expr>&amp;<name>xml_esc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>xml_safe</name> = <name><name>xml_esc</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>base64ed</name> <init>= <expr><call><name>svn_base64_encode_string</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>encoding</name> = " V:encoding=\"base64\""</expr>;</expr_stmt>
      <expr_stmt><expr><name>xml_safe</name> = <name><name>base64ed</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>,
                           <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,<argument><expr>"&lt;%s %s&gt;%s&lt;/%s&gt;"</expr></argument>,
                                        <argument><expr><name>xml_tag_name</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>,
                                        <argument><expr><name>xml_safe</name></expr></argument>, <argument><expr><name>xml_tag_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__do_proppatch</name><parameter_list>(<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                          <param><decl><type><name>apr_hash_t</name> *</type><name>prop_changes</name></decl></param>,
                          <param><decl><type><name>apr_array_header_t</name> *</type><name>prop_deletes</name></decl></param>,
                          <param><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>body</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* just punt if there are no changes to make. */</comment>
  <if>if <condition>(<expr>(<name>prop_changes</name> == <name>NULL</name> || (! <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>prop_changes</name></expr></argument>)</argument_list></call>))
      &amp;&amp; (<name>prop_deletes</name> == <name>NULL</name> || <name><name>prop_deletes</name>-&gt;<name>nelts</name></name> == 0)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* easier to roll our own PROPPATCH here than use ne_proppatch(), which
   * doesn't really do anything clever. */</comment>
  <expr_stmt><expr><name>body</name> = <call><name>svn_stringbuf_create</name>
    <argument_list>(<argument><expr>"&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;" <name>DEBUG_CR</name>
     "&lt;D:propertyupdate xmlns:D=\"DAV:\" xmlns:V=\""
     <name>SVN_DAV_PROP_NS_DAV</name> "\" xmlns:C=\""
     <name>SVN_DAV_PROP_NS_CUSTOM</name> "\" xmlns:S=\""
     <name>SVN_DAV_PROP_NS_SVN</name> "\"&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Handle property changes. */</comment>
  <if>if <condition>(<expr><name>prop_changes</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;D:set&gt;&lt;D:prop&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>prop_changes</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>append_setprop</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;/D:prop&gt;&lt;/D:set&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Handle property deletions. */</comment>
  <if>if <condition>(<expr><name>prop_deletes</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;D:remove&gt;&lt;D:prop&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name><name>prop_deletes</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>prop_deletes</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>append_setprop</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;/D:prop&gt;&lt;/D:remove&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Finish up the body. */</comment>
  <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;/D:propertyupdate&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Finish up the headers. */</comment>
  <if>if <condition>(<expr>! <name>extra_headers</name></expr>)</condition><then>
    <expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
               <argument><expr>"text/xml; charset=UTF-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>, <argument><expr>"PROPPATCH"</expr></argument>, <argument><expr><name>url</name></expr></argument>,
                                    <argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name><name>body</name>-&gt;<name>data</name></name></expr></argument>,
                                    <argument><expr>200</expr></argument>, <argument><expr>207</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_PROPPATCH_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"At least one property change failed; repository is unchanged"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__do_check_path</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                           <param><decl><type><name>svn_node_kind_t</name> *</type><name>kind</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_dir</name></decl>;</decl_stmt>

  <comment type="block">/* ### For now, using svn_ra_neon__get_baseline_info() works because
     we only have three possibilities: dir, file, or none.  When we
     add symlinks, we will need to do something different.  Here's one
     way described by Greg Stein:

       That is a PROPFIND (Depth:0) for the DAV:resourcetype property.

       You can use the svn_ra_neon__get_one_prop() function to fetch
       it. If the PROPFIND fails with a 404, then you have
       svn_node_none. If the resulting property looks like:

           &lt;D:resourcetype&gt;
             &lt;D:collection/&gt;
           &lt;/D:resourcetype&gt;

       Then it is a collection (directory; svn_node_dir). Otherwise,
       it is a regular resource (svn_node_file).

       The harder part is parsing the resourcetype property. "Proper"
       parsing means treating it as an XML property and looking for
       the DAV:collection element in there. To do that, however, means
       that get_one_prop() can't be used. I think there may be some
       Neon functions for parsing XML properties; we'd need to
       look. That would probably be the best approach. (an alternative
       is to use apr_xml_* parsing functions on the returned string;
       get back a DOM-like thing, and look for the element).
  */</comment>

  <comment type="block">/* If we were given a relative path to append, append it. */</comment>
  <if>if <condition>(<expr><name>path</name></expr>)</condition><then>
    <expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr>&amp;<name>is_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                       <argument><expr><name>ras</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>is_dir</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>kind</name> = <name>svn_node_dir</name></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr>*<name>kind</name> = <name>svn_node_file</name></expr>;</expr_stmt></else></if>
    }</block></then>
  <else>else <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr>)</condition><then>
    <block>{

      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>kind</name> = <name>svn_node_none</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if></else></if>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__do_stat</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                     <param><decl><type><name>svn_dirent_t</name> **</type><name>dirent</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>final_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>resources</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <comment type="block">/* If we were given a relative path to append, append it. */</comment>
  <if>if <condition>(<expr><name>path</name></expr>)</condition><then>
    <expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Invalid revision means HEAD, which is just the public URL. */</comment>
  <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>final_url</name> = <name>url</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* Else, convert (rev, path) into an opaque server-generated URL. */</comment>
      <decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>, <decl><type ref="prev"/><name>bc_relative</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>,
                                           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>,
                                           <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* easy out: */</comment>
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr>*<name>dirent</name> = <name>NULL</name></expr>;</expr_stmt>
              <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
            }</block></then>
          <else>else
            <return>return <expr><name>err</name></expr>;</return></else></if>
        }</block></then></if>

      <expr_stmt><expr><name>final_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>,
                                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Depth-zero PROPFIND is the One True DAV Way. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__get_props</name><argument_list>(<argument><expr>&amp;<name>resources</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>, <argument><expr><name>final_url</name></expr></argument>,
                               <argument><expr><name>SVN_RA_NEON__DEPTH_ZERO</name></expr></argument>,
                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* all props */</comment>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* easy out: */</comment>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr>*<name>dirent</name> = <name>NULL</name></expr>;</expr_stmt>
          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then>
      <else>else
        <return>return <expr><name>err</name></expr>;</return></else></if>
    }</block></then></if>

  <comment type="block">/* Copying parsing code from svn_ra_neon__get_dir() here.  The hash
     of resources only contains one item, but there's no other way to
     get the item. */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>resources</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>resource</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>h</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>entry</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>resource</name> = <name>val</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>entry</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name><name>resource</name>-&gt;<name>is_collection</name></name> ? <name>svn_node_dir</name> : <name>svn_node_file</name></expr>;</expr_stmt>

      <comment type="block">/* entry-&gt;size is already 0 by virtue of pcalloc(). */</comment>
      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
                                 <argument><expr><name>SVN_RA_NEON__PROP_GETCONTENTLENGTH</name></expr></argument>,
                                 <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>propval</name></expr>)</condition><then>
            <expr_stmt><expr><name><name>entry</name>-&gt;<name>size</name></name> = <call><name>svn__atoui64</name><argument_list>(<argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>

      <comment type="block">/* does this resource contain any 'dead' properties? */</comment>
      <for>for (<init><expr><name>h</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>)</argument_list></call></expr>;</init>
           <condition><expr><name>h</name></expr>;</condition> <incr><expr><name>h</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>kkey</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr>&amp;<name>kkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>kkey</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_CUSTOM</name></expr></argument>,
                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_DAV_PROP_NS_CUSTOM</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr><name><name>entry</name>-&gt;<name>has_props</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>

          <else>else <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>kkey</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_SVN</name></expr></argument>,
                           <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_DAV_PROP_NS_SVN</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr><name><name>entry</name>-&gt;<name>has_props</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if></else></if>
        }</block></for>

      <comment type="block">/* created_rev &amp; friends */</comment>
      <expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
                             <argument><expr><name>SVN_RA_NEON__PROP_VERSION_NAME</name></expr></argument>,
                             <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>propval</name> != <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>entry</name>-&gt;<name>created_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
                             <argument><expr><name>SVN_RA_NEON__PROP_CREATIONDATE</name></expr></argument>,
                             <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>propval</name> != <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;(<name><name>entry</name>-&gt;<name>time</name></name>)</expr></argument>,
                                      <argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
                             <argument><expr><name>SVN_RA_NEON__PROP_CREATOR_DISPLAYNAME</name></expr></argument>,
                             <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>propval</name> != <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>entry</name>-&gt;<name>last_author</name></name> = <name><name>propval</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>

      <expr_stmt><expr>*<name>dirent</name> = <name>entry</name></expr>;</expr_stmt>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
