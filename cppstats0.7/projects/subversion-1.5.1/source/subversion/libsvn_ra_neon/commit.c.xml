<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_neon/commit.c"><comment type="block">/*
 * commit.c :  routines for committing changes to the server
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uuid.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>


<comment type="block">/*
** version_rsrc_t: identify the relevant pieces of a resource on the server
**
** REVISION is the resource's revision, or SVN_INVALID_REVNUM if it is
** new or is the HEAD.
**
** URL refers to the public/viewable/original resource.
** VSN_URL refers to the version resource that we stored locally
** WR_URL refers to a working resource for this resource
**
** Note that VSN_URL is NULL if this resource has just been added, and
** WR_URL can be NULL if the resource has not (yet) been checked out.
**
** LOCAL_PATH is relative to the root of the commit. It will be used
** for the get_func, push_func, and close_func callbacks.
**
** NAME is the name of the resource.
*/</comment>
<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vsn_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wr_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>local_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt> <comment type="block">/* pool in which this resource is allocated. */</comment>

}</block></struct></type> <name>version_rsrc_t</name>;</typedef>


<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activity_url</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>valid_targets</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>svn_ra_get_wc_prop_func_t</name></type> <name>get_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_push_wc_prop_func_t</name></type> <name>push_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>cb_baton</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>disable_merge_response</name></decl>;</decl_stmt>

  <comment type="block">/* The (potential) author of this commit. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl>;</decl_stmt>

  <comment type="block">/* The commit callback and baton */</comment>
  <decl_stmt><decl><type><name>svn_commit_callback2_t</name></type> <name>callback</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>callback_baton</name></decl>;</decl_stmt>

  <comment type="block">/* The hash of lock-tokens owned by the working copy. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>tokens</name></decl>;</decl_stmt>

  <comment type="block">/* Whether or not to keep the locks after commit is done. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl>;</decl_stmt>

}</block></struct></type> <name>commit_ctx_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>tmpfile</name></decl>;</decl_stmt>        <comment type="block">/* may be NULL for content-less file */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>fname</name></decl>;</decl_stmt>     <comment type="block">/* may be NULL for content-less file */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl>;</decl_stmt>  <comment type="block">/* hex md5 of base text; may be null */</comment>
  <decl_stmt><decl><type><name>apr_off_t</name></type> <name>progress</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>put_baton_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>prop_changes</name></decl>;</decl_stmt> <comment type="block">/* name/values pairs of new/changed properties. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>prop_deletes</name></decl>;</decl_stmt> <comment type="block">/* names of properties to delete. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>created</name></decl>;</decl_stmt> <comment type="block">/* set if this is an add rather than an update */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>copied</name></decl>;</decl_stmt> <comment type="block">/* set if this object was copied */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt> <comment type="block">/* the pool from open_foo() / add_foo() */</comment>
  <decl_stmt><decl><type><name>put_baton_t</name> *</type><name>put_baton</name></decl>;</decl_stmt>  <comment type="block">/* baton for this file's PUT request */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>       <comment type="block">/* file's lock token, if available */</comment>
}</block></struct></type> <name>resource_baton_t</name>;</typedef>

<comment type="block">/* this property will be fetched from the server when we don't find it
   cached in the WC property store. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ne_propname</name></type> <name><name>fetch_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"checked-in"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ne_propname</name></type> <name>log_message_prop</name> <init>= <expr><block>{ <expr><name>SVN_DAV_PROP_NS_SVN</name></expr>, <expr>"log"</expr> }</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* perform a deep copy of BASE into POOL, and return the result. */</comment>
<function><type><specifier>static</specifier> <name>version_rsrc_t</name> *</type> <name>dup_resource</name><parameter_list>(<param><decl><type><name>version_rsrc_t</name> *</type><name>base</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rsrc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>revision</name></name> = <name><name>base</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>url</name></name> = <name><name>base</name>-&gt;<name>url</name></name> ?
    <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>vsn_url</name></name> = <name><name>base</name>-&gt;<name>vsn_url</name></name> ?
    <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>vsn_url</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>wr_url</name></name> = <name><name>base</name>-&gt;<name>wr_url</name></name> ?
    <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>wr_url</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>local_path</name></name> = <name><name>base</name>-&gt;<name>local_path</name></name> ?
    <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>local_path</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>rsrc</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>delete_activity</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>commit_ctx_t</name> *</type><name>cc</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr>"DELETE"</expr></argument>,
                                     <argument><expr><name><name>cc</name>-&gt;<name>activity_url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr>204</expr></argument> <comment type="block">/* No Content */</comment>,
                                     <argument><expr>404</expr></argument> <comment type="block">/* Not Found */</comment>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Get the version resource URL for RSRC, storing it in
   RSRC-&gt;vsn_url.  Use POOL for all temporary allocations. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>get_version_url</name><parameter_list>(<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>version_rsrc_t</name> *</type><name>parent</name></decl></param>,
                                     <param><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name></decl></param>,
                                     <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>propres</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>url_str</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>force</name></expr>)</condition><then>
    <block>{
      <if>if  <condition>(<expr><name><name>cc</name>-&gt;<name>get_func</name></name> != <name>NULL</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>vsn_url_value</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>cc</name>-&gt;<name>get_func</name></name>)<argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>cb_baton</name></name></expr></argument>,
                                  <argument><expr><name><name>rsrc</name>-&gt;<name>local_path</name></name></expr></argument>,
                                  <argument><expr><name>SVN_RA_NEON__LP_VSN_URL</name></expr></argument>,
                                  <argument><expr>&amp;<name>vsn_url_value</name></expr></argument>,
                                  <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>vsn_url_value</name> != <name>NULL</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>vsn_url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>vsn_url_value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

      <comment type="block">/* If we know the version resource URL of the parent and it is
         the same revision as RSRC, use that as a base to calculate
         the version resource URL of RSRC. */</comment>
      <if>if <condition>(<expr><name>parent</name> &amp;&amp; <name><name>parent</name>-&gt;<name>vsn_url</name></name> &amp;&amp; <name><name>parent</name>-&gt;<name>revision</name></name> == <name><name>rsrc</name>-&gt;<name>revision</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>vsn_url</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>vsn_url</name></name></expr></argument>,
                                                     <argument><expr><name><name>rsrc</name>-&gt;<name>name</name></name></expr></argument>,
                                                     <argument><expr><name><name>rsrc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then></if>

      <comment type="block">/* whoops. it wasn't there. go grab it from the server. */</comment>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>rsrc</name>-&gt;<name>revision</name></name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* We aren't trying to get a specific version -- use the HEAD. We
         fetch the version URL from the public URL. */</comment>
      <expr_stmt><expr><name>url</name> = <name><name>rsrc</name>-&gt;<name>url</name></name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_relative</name></decl>;</decl_stmt>

      <comment type="block">/* The version URL comes from a resource in the Baseline Collection. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
                                             <argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                             <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
                                             <argument><expr><name><name>rsrc</name>-&gt;<name>url</name></name></expr></argument>,
                                             <argument><expr><name><name>rsrc</name>-&gt;<name>revision</name></name></expr></argument>,
                                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Get the DAV:checked-in property, which contains the URL of the
     Version Resource */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>propres</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
                                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fetch_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>url_str</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>propres</name>-&gt;<name>propset</name></name></expr></argument>,
                         <argument><expr><name>SVN_RA_NEON__PROP_CHECKED_IN</name></expr></argument>,
                         <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>url_str</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* ### need a proper SVN_ERR here */</comment>
      <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not fetch the Version Resource URL "
                                "(needed during an import or when it is "
                                "missing from the local, cached props)"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* ensure we get the proper lifetime for this URL since it is going into
     a resource object. */</comment>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>vsn_url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>url_str</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>cc</name>-&gt;<name>push_func</name></name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Now we can store the new version-url. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>cc</name>-&gt;<name>push_func</name></name>)<argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>cb_baton</name></name></expr></argument>,
                               <argument><expr><name><name>rsrc</name>-&gt;<name>local_path</name></name></expr></argument>,
                               <argument><expr><name>SVN_RA_NEON__LP_VSN_URL</name></expr></argument>,
                               <argument><expr><name>url_str</name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* When FORCE is true, then we force a query to the server, ignoring any
   cached property. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>get_activity_collection</name><parameter_list>(<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>collection</name></decl></param>,
                                             <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>force</name> &amp;&amp; <name><name>cc</name>-&gt;<name>get_func</name></name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* with a get_func, we can just ask for the activity URL from the
         property store. */</comment>

      <comment type="block">/* get the URL where we should create activities */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>cc</name>-&gt;<name>get_func</name></name>)<argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>cb_baton</name></name></expr></argument>,
                              <argument><expr>""</expr></argument>,
                              <argument><expr><name>SVN_RA_NEON__LP_ACTIVITY_COLL</name></expr></argument>,
                              <argument><expr><name>collection</name></expr></argument>,
                              <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>*<name>collection</name> != <name>NULL</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* the property was there. return it. */</comment>
          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then></if>

      <comment type="block">/* property not found for some reason. get it from the server. */</comment>
    }</block></then></if>

  <comment type="block">/* use our utility function to fetch the activity URL */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_activity_collection</name><argument_list>(<argument><expr><name>collection</name></expr></argument>,
                                               <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
                                               <argument><expr><name><name>cc</name>-&gt;<name>ras</name>-&gt;<name>root</name>.<name>path</name></name></expr></argument>,
                                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>cc</name>-&gt;<name>push_func</name></name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* save the (new) activity collection URL into the directory */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>cc</name>-&gt;<name>push_func</name></name>)<argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>cb_baton</name></name></expr></argument>,
                               <argument><expr>""</expr></argument>,
                               <argument><expr><name>SVN_RA_NEON__LP_ACTIVITY_COLL</name></expr></argument>,
                               <argument><expr>*<name>collection</name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>create_activity</name><parameter_list>(<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type> <name>activity_collection</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid_buf</name> <init>= <expr><call><name>svn_uuid_generate</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>

  <comment type="block">/* get the URL where we'll create activities, construct the URL for
     the activity, and create the activity.  The URL for our activity
     will be ACTIVITY_COLL/UUID */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_activity_collection</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr>&amp;<name>activity_collection</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>activity_collection</name>-&gt;<name>data</name></name></expr></argument>,
                                   <argument><expr><name>uuid_buf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
                                      <argument><expr>"MKACTIVITY"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr>201</expr></argument> <comment type="block">/* Created */</comment>,
                                      <argument><expr>404</expr></argument> <comment type="block">/* Not Found */</comment>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* if we get a 404, then it generally means that the cached activity
     collection no longer exists. Retry the sequence, but force a query
     to the server for the activity collection. */</comment>
  <if>if <condition>(<expr><name>code</name> == 404</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_activity_collection</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr>&amp;<name>activity_collection</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>activity_collection</name>-&gt;<name>data</name></name></expr></argument>,
                                       <argument><expr><name>uuid_buf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
                                          <argument><expr>"MKACTIVITY"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                          <argument><expr>201</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name><name>cc</name>-&gt;<name>activity_url</name></name> = <name>url</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Add a child resource.  POOL should be as "temporary" as possible,
   but probably not as far as requiring a new temp pool. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>add_child</name><parameter_list>(<param><decl><type><name>version_rsrc_t</name> **</type><name>child</name></decl></param>,
                               <param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>version_rsrc_t</name> *</type><name>parent</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                               <param><decl><type><name>int</name></type> <name>created</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>

  <comment type="block">/* ### todo:  This from Yoshiki Hayashi &lt;yoshiki@xemacs.org&gt;:

     Probably created flag in add_child can be removed because
        revision is valid =&gt; created is false
        revision is invalid =&gt; created is true
  */</comment>

  <expr_stmt><expr><name>rsrc</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rsrc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>revision</name></name> = <name>revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>url</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>local_path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>local_path</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Case 1:  the resource is truly "new".  Either it was added as a
     completely new object, or implicitly created via a COPY.  Either
     way, it has no VR URL anywhere.  However, we *can* derive its WR
     URL by the rules of deltaV:  "copy structure is preserved below
     the WR you COPY to."  */</comment>
  <if>if <condition>(<expr><name>created</name> || (<name><name>parent</name>-&gt;<name>vsn_url</name></name> == <name>NULL</name>)</expr>)</condition><then>
    <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>wr_url</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>wr_url</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>

  <comment type="block">/* Case 2: the resource is already under version-control somewhere.
     This means it has a VR URL already, and the WR URL won't exist
     until it's "checked out". */</comment>
  <else>else
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_version_url</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <expr_stmt><expr>*<name>child</name> = <name>rsrc</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>do_checkout</name><parameter_list>(<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vsn_url</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>allow_404</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
                                 <param><decl><type><name>int</name> *</type><name>code</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>locn</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__request_t</name> *</type><name>request</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* assert: vsn_url != NULL */</comment>

  <comment type="block">/* ### send a CHECKOUT resource on vsn_url; include cc-&gt;activity_url;
     ### place result into res-&gt;wr_url and return it */</comment>

  <comment type="block">/* create/prep the request */</comment>
  <expr_stmt><expr><name>request</name> =
    <call><name>svn_ra_neon__request_create</name><argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr>"CHECKOUT"</expr></argument>, <argument><expr><name>vsn_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### store this into cc to avoid pool growth */</comment>
  <expr_stmt><expr><name>body</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>,
                      <argument><expr>"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;"
                      "&lt;D:checkout xmlns:D=\"DAV:\"&gt;"
                      "&lt;D:activity-set&gt;"
                      "&lt;D:href&gt;%s&lt;/D:href&gt;"
                      "&lt;/D:activity-set&gt;&lt;/D:checkout&gt;"</expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>activity_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>token</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"If"</expr></argument>,
                              <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"(&lt;%s&gt;)"</expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* run the request and get the resulting status code (and svn_error_t) */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__request_dispatch</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>body</name></expr></argument>,
                                      <argument><expr>201</expr></argument> <comment type="block">/* Created */</comment>,
                                      <argument><expr><name>allow_404</name> ? 404 <comment type="block">/* Not Found */</comment> : 0</expr></argument>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <goto>goto <name>cleanup</name>;</goto></then></if>

  <if>if <condition>(<expr><name>allow_404</name> &amp;&amp; *<name>code</name> == 404 &amp;&amp; <name><name>request</name>-&gt;<name>err</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>request</name>-&gt;<name>err</name></name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr>*<name>locn</name> = <call><name>svn_ra_neon__request_get_location</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label><name>cleanup</name>:</label>
  <expr_stmt><expr><call><name>svn_ra_neon__request_destroy</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>checkout_resource</name><parameter_list>(<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
                                       <param><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name></decl></param>,
                                       <param><decl><type><name>svn_boolean_t</name></type> <name>allow_404</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>locn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ne_uri</name></type> <name>parse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>rsrc</name>-&gt;<name>wr_url</name></name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* already checked out! */</comment>
      <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* check out the Version Resource */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>do_checkout</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>rsrc</name>-&gt;<name>vsn_url</name></name></expr></argument>, <argument><expr><name>allow_404</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr>&amp;<name>locn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* possibly run the request again, with a re-fetched Version Resource */</comment>
  <if>if <condition>(<expr><name>err</name> == <name>NULL</name> &amp;&amp; <name>allow_404</name> &amp;&amp; <name>code</name> == 404</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>locn</name> = <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* re-fetch, forcing a query to the server */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_version_url</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* do it again, but don't allow a 404 this time */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>do_checkout</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>rsrc</name>-&gt;<name>vsn_url</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr>&amp;<name>locn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* special-case when conflicts occur */</comment>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* ### TODO: it's a shame we don't have the full path from the
         ### root of the drive here, nor the type of the resource.
         ### Because we lack this information, the error message is
         ### overly generic.  See issue #2740. */</comment>
      <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_CONFLICT</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"File or directory '%s' is out of date; try updating"</expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>local_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* we got the header, right? */</comment>
  <if>if <condition>(<expr><name>locn</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_REQUEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The CHECKOUT response did not contain a "
                              "'Location:' header"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* The location is an absolute URI. We want just the path portion. */</comment>
  <comment type="block">/* ### what to do with the rest? what if it points somewhere other
     ### than the current session? */</comment>
  <if>if <condition>(<expr><call><name>ne_uri_parse</name><argument_list>(<argument><expr><name>locn</name></expr></argument>, <argument><expr>&amp;<name>parse</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>parse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unable to parse URL '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>locn</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>wr_url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>parse</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>parse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>record_prop_change</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                               <param><decl><type><name>resource_baton_t</name> *</type><name>r</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* copy the name into the pool so we get the right lifetime (who knows
     what the caller will do with it) */</comment>
  <expr_stmt><expr><name>name</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>value</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* changed/new property */</comment>
      <if>if <condition>(<expr><name><name>r</name>-&gt;<name>prop_changes</name></name> == <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>prop_changes</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>prop_changes</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                   <argument><expr><call><name>svn_string_dup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* deleted property. */</comment>
      <if>if <condition>(<expr><name><name>r</name>-&gt;<name>prop_deletes</name></name> == <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>prop_deletes</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>prop_deletes</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>name</name></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<comment type="block">/*
A very long note about enforcing directory-up-to-dateness when
proppatching, writ by Ben:

Once upon a time, I thought it would be necessary to attach the
X-SVN-Version-Name header to every PROPPATCH request we send.  This
would allow mod_dav_svn to verify that a directory is up-to-date.

But it turns out that mod_dav_svn screams and errors if you *ever* try
to CHECKOUT an out-of-date VR.  And furthermore, a directory is never
a 'committable' (according to svn_client_commit) unless it has a
propchange.  Therefore:

1. when ra_neon's commit editor attempts to CHECKOUT a parent directory
   because some child is being added or deleted, it's *unable* to get
   the VR cache, and thus just gets the HEAD one instead.  So it ends
   up always doing a CHECKOUT of the latest version of the directory.
   This is actually fine; Subversion's semantics allow us to
   add/delete children on out-of-date directories.  If, in dav terms,
   this means always checking out the latest directory, so be it.  Any
   namespace conflicts will be detected with the actual PUT or DELETE
   of the child.

2. when ra_neon's commit editor receives a directory propchange, it
   *is* able to get the VR cache (because the dir is a "committable"),
   and thus it does a CHECKOUT of the older directory.  And mod_dav_svn
   will scream if the VR is out of date, which is exactly what we want in
   the directory propchange scenario.

The only potential badness here is the case of committing a directory
with a propchange, and an add/rm of its child.  This commit should
fail, due to the out-of-date propchange.  However, it's *possible*
that it will fail for a different reason:  we might attempt the add/rm
first, which means checking out the parent VR, which *would* be
available from the cache, and thus we get an early error.  Instead of
seeing an error about 'cannot proppatch out-of-date dir', the user
will see an error about 'cannot checkout out-of-date parent'.  Not
really a big deal I guess.

*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>do_proppatch</name><parameter_list>(<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>version_rsrc_t</name> *</type><name>rsrc</name></decl></param>,
                                  <param><decl><type><name>resource_baton_t</name> *</type><name>rb</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><name><name>rsrc</name>-&gt;<name>wr_url</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>token</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token_header_val</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>token_header_val</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"(&lt;%s&gt;)"</expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"If"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                   <argument><expr><name>token_header_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><call><name>svn_ra_neon__do_proppatch</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>prop_changes</name></name></expr></argument>,
                                   <argument><expr><name><name>rb</name>-&gt;<name>prop_deletes</name></name></expr></argument>, <argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>add_valid_target</name><argument_list>(<argument><expr><name>commit_ctx_t</name> *<name>cc</name></expr></argument>,
                 <argument><expr>const <name>char</name> *<name>path</name></expr></argument>,
                 <argument>enum <expr><name>svn_recurse_kind</name> <name>kind</name></expr></argument>)</argument_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name> <init>= <expr><name><name>cc</name>-&gt;<name>valid_targets</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>path_str</name> <init>= <expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>path_str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>path_str</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr>(<name>void</name>*)<name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                                      <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
                                      <param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>commit_ctx_t</name> *</type><name>cc</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>

  <comment type="block">/* create the root resource. no wr_url (yet). */</comment>
  <expr_stmt><expr><name>rsrc</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rsrc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>pool</name></name> = <name>dir_pool</name></expr>;</expr_stmt>

  <comment type="block">/* ### should this be 'base_revision' here? we might not always be
     ### working against the head! (think "properties"). */</comment>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>url</name></name> = <name><name>cc</name>-&gt;<name>ras</name>-&gt;<name>root</name>.<name>path</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsrc</name>-&gt;<name>local_path</name></name> = ""</expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_version_url</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>root</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>root</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>root</name>-&gt;<name>pool</name></name> = <name>dir_pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>root</name>-&gt;<name>cc</name></name> = <name>cc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>root</name>-&gt;<name>rsrc</name></name> = <name>rsrc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>root</name>-&gt;<name>created</name></name> = <name>FALSE</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>root_baton</name> = <name>root</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Helper func for commit_delete_entry.  Find all keys in LOCK_TOKENS
   which are children of DIR.  Returns the keys (and their vals) in
   CHILD_TOKENS.   No keys or values are reallocated or dup'd.  If no
   keys are children, then return an empty hash.  Use POOL to allocate
   new hash. */</comment>
<function><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>get_child_tokens</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>tokens</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>lock_tokens</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tokens</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                         <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                         <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>parent</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>revstr</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr>! <name>extra_headers</name></expr>)</condition><then>
        <expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>SVN_DAV_VERSION_NAME_HEADER</name></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>revstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* get the URL to the working collection */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>checkout_resource</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* create the URL for the child resource */</comment>
  <expr_stmt><expr><name>child</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>rsrc</name>-&gt;<name>wr_url</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Start out assuming that we're deleting a file;  try to lookup the
     path itself in the token-hash, and if found, attach it to the If:
     header. */</comment>
  <if>if <condition>(<expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name> <init>=
        <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>token</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token_header_val</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token_uri</name></decl>;</decl_stmt>

          <expr_stmt><expr><name>token_uri</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>,
                                                 <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>token_header_val</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;%s&gt; (&lt;%s&gt;)"</expr></argument>,
                                          <argument><expr><name>token_uri</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"If"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                       <argument><expr><name>token_header_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <comment type="block">/* dav_method_delete() always calls dav_unlock(), but if the svn
     client passed --no-unlock to 'svn commit', then we need to send a
     header which prevents mod_dav_svn from actually doing the unlock. */</comment>
  <if>if <condition>(<expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>keep_locks</name></name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr>! <name>extra_headers</name></expr>)</condition><then>
        <expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>SVN_DAV_OPTIONS_HEADER</name></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>SVN_DAV_OPTION_KEEP_LOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* 404 is ignored, because mod_dav_svn is effectively merging
     against the HEAD revision on-the-fly.  In such a universe, a
     failed deletion (because it's already missing) is OK;  deletion
     is an idempotent merge operation. */</comment>
  <expr_stmt><expr><name>serr</name> = <call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
                                     <argument><expr>"DELETE"</expr></argument>, <argument><expr><name>child</name></expr></argument>,
                                     <argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr>204</expr></argument> <comment type="block">/* Created */</comment>,
                                     <argument><expr>404</expr></argument> <comment type="block">/* Not Found */</comment>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* A locking-related error most likely means we were deleting a
     directory rather than a file, and didn't send all of the
     necessary lock-tokens within the directory. */</comment>
  <if>if <condition>(<expr><name>serr</name> &amp;&amp; ((<name><name>serr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_BAD_LOCK_TOKEN</name>)
               || (<name><name>serr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NO_LOCK_TOKEN</name>)
               || (<name><name>serr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_LOCK_OWNER_MISMATCH</name>)
               || (<name><name>serr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_PATH_ALREADY_LOCKED</name>))</expr>)</condition><then>
    <block>{
      <comment type="block">/* Re-attempt the DELETE request as if the path were a directory.
         Discover all lock-tokens within the directory, and send them in
         the body of the request (which is normally empty).  Of course,
         if we don't *find* any additional lock-tokens, don't bother to
         retry (it ain't gonna do any good).

         Note that we're not sending the locks in the If: header, for
         the same reason we're not sending in MERGE's headers: httpd has
       limits on the amount of data it's willing to receive in headers. */</comment>

      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>child_tokens</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_ra_neon__request_t</name> *</type><name>request</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>locks_list</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>child_tokens</name> = <call><name>get_child_tokens</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* No kiddos?  Return the original error.  Else, clear it so it
         doesn't get leaked.  */</comment>
      <if>if <condition>(<expr>(! <name>child_tokens</name>)
          || (<call><name>apr_hash_count</name><argument_list>(<argument><expr><name>child_tokens</name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
        <return>return <expr><name>serr</name></expr>;</return></then>
      <else>else
        <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

      <comment type="block">/* In preparation of directory locks, go ahead and add the actual
         target's lock token to those of its children. */</comment>
      <if>if <condition>(<expr>(<name>token</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>child_tokens</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>


      <expr_stmt><expr><name>request</name> =
        <call><name>svn_ra_neon__request_create</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr>"DELETE"</expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__assemble_locktoken_body</name><argument_list>(<argument><expr>&amp;<name>locks_list</name></expr></argument>,
                                                 <argument><expr><name>child_tokens</name></expr></argument>, <argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <goto>goto <name>cleanup</name>;</goto></then></if>

      <expr_stmt><expr><name>body</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>,
                          <argument><expr>"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; %s"</expr></argument>,
                          <argument><expr><name><name>locks_list</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__request_dispatch</name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>body</name></expr></argument>,
                                          <argument><expr>204</expr></argument> <comment type="block">/* Created */</comment>,
                                          <argument><expr>404</expr></argument> <comment type="block">/* Not Found */</comment>,
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <label><name>cleanup</name>:</label>
      <expr_stmt><expr><call><name>svn_ra_neon__request_destroy</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>serr</name></expr>)</condition><then>
    <return>return <expr><name>serr</name></expr>;</return></then></if></else></if>

  <comment type="block">/* Add this path to the valid targets hash. */</comment>
  <expr_stmt><expr><call><name>add_valid_target</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_nonrecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_add_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                    <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
                                    <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
                                    <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>parent</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>child</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>workpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* check out the parent resource so that we can create the new collection
     as one of its children. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>checkout_resource</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* create a child object that contains all the resource urls */</comment>
  <expr_stmt><expr><name>child</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>child</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name>-&gt;<name>pool</name></name> = <name>dir_pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name>-&gt;<name>cc</name></name> = <name><name>parent</name>-&gt;<name>cc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name>-&gt;<name>created</name></name> = <name>TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_child</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>,
                    <argument><expr><name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name>-&gt;<name>rsrc</name></name> = <call><name>dup_resource</name><argument_list>(<argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <name>copyfrom_path</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* This a new directory with no history, so just create a new,
         empty collection */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr>"MKCOL"</expr></argument>,
                                          <argument><expr><name><name>child</name>-&gt;<name>rsrc</name>-&gt;<name>wr_url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                          <argument><expr>201</expr></argument> <comment type="block">/* Created */</comment>, <argument><expr>0</expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>, <decl><type ref="prev"/><name>bc_relative</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_src</name></decl>;</decl_stmt>

      <comment type="block">/* This add has history, so we need to do a COPY. */</comment>

      <comment type="block">/* Convert the copyfrom_* url/rev "public" pair into a Baseline
         Collection (BC) URL that represents the revision -- and a
         relative path under that BC.  */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
                                             <argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                             <argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
                                             <argument><expr><name>copyfrom_path</name></expr></argument>,
                                             <argument><expr><name>copyfrom_revision</name></expr></argument>,
                                             <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


      <comment type="block">/* Combine the BC-URL and relative path; this is the main
         "source" argument to the COPY request.  The "Destination:"
         header given to COPY is simply the wr_url that is already
         part of the child object. */</comment>
      <expr_stmt><expr><name>copy_src</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>,
                                            <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>,
                                            <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Have neon do the COPY. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__copy</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
                                <argument><expr>1</expr></argument>,                   <comment type="block">/* overwrite */</comment>
                                <argument><expr><name>SVN_RA_NEON__DEPTH_INFINITE</name></expr></argument>, <comment type="block">/* deep copy */</comment>
                                <argument><expr><name>copy_src</name></expr></argument>,            <comment type="block">/* source URI */</comment>
                                <argument><expr><name><name>child</name>-&gt;<name>rsrc</name>-&gt;<name>wr_url</name></name></expr></argument>, <comment type="block">/* dest URI */</comment>
                                <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Remember that this object was copied. */</comment>
      <expr_stmt><expr><name><name>child</name>-&gt;<name>copied</name></name> = <name>TRUE</name></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Add this path to the valid targets hash. */</comment>
  <expr_stmt><expr><call><name>add_valid_target</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                   <argument><expr><name>copyfrom_path</name> ? <name>svn_recursive</name> : <name>svn_nonrecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <name>child</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_open_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
                                     <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>parent</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>child</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>child</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>workpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>child</name>-&gt;<name>pool</name></name> = <name>dir_pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name>-&gt;<name>cc</name></name> = <name><name>parent</name>-&gt;<name>cc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name>-&gt;<name>created</name></name> = <name>FALSE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_child</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>,
                    <argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name>-&gt;<name>rsrc</name></name> = <call><name>dup_resource</name><argument_list>(<argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
  ** Note: open_dir simply means that a change has occurred somewhere
  **       within this directory. We have nothing to do, to prepare for
  **       those changes (each will be considered independently).
  **
  ** Note: if a directory is replaced by something else, then this callback
  **       will not be used: a true replacement is modeled with a "delete"
  **       followed by an "add".
  */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <name>child</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>dir</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* record the change. it will be applied at close_dir time. */</comment>
  <comment type="block">/* ### we should put this into the dir_baton's pool */</comment>
  <expr_stmt><expr><call><name>record_prop_change</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* do the CHECKOUT sooner rather than later */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>checkout_resource</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Add this path to the valid targets hash. */</comment>
  <expr_stmt><expr><call><name>add_valid_target</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>rsrc</name>-&gt;<name>local_path</name></name></expr></argument>, <argument><expr><name>svn_nonrecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_close_dir</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>dir</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Perform all of the property changes on the directory. Note that we
     checked out the directory when the first prop change was noted. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_proppatch</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
                                     <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>parent</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>workpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/*
  ** To add a new file into the repository, we CHECKOUT the parent
  ** collection, then PUT the file as a member of the resuling working
  ** collection.
  **
  ** If the file was copied from elsewhere, then we will use the COPY
  ** method to copy into the working collection.
  */</comment>

  <comment type="block">/* Do the parent CHECKOUT first */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>checkout_resource</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Construct a file_baton that contains all the resource urls. */</comment>
  <expr_stmt><expr><name>file</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name>-&gt;<name>pool</name></name> = <name>file_pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name>-&gt;<name>cc</name></name> = <name><name>parent</name>-&gt;<name>cc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name>-&gt;<name>created</name></name> = <name>TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_child</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>,
                    <argument><expr><name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name>-&gt;<name>rsrc</name></name> = <call><name>dup_resource</name><argument_list>(<argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>file</name>-&gt;<name>token</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* If the parent directory existed before this commit then there may be a
     file with this URL already. We need to ensure such a file does not
     exist, which we do by attempting a PROPFIND.  Of course, a
     PROPFIND *should* succeed if this "add" is actually the second
     half of a "replace".

     ### For now, we'll assume that if this path has already been
     added to the valid targets hash, that addition occurred during the
     "delete" phase (if that's not the case, this editor is being
     driven incorrectly, as we should never visit the same path twice
     except in a delete+add situation). */</comment>
  <if>if <condition>(<expr>(! <name><name>parent</name>-&gt;<name>created</name></name>)
      &amp;&amp; (! <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>cc</name>-&gt;<name>valid_targets</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>res</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_ra_neon__get_starting_props</name><argument_list>(<argument><expr>&amp;<name>res</name></expr></argument>,
                                                         <argument><expr><name><name>file</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
                                                         <argument><expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>wr_url</name></name></expr></argument>,
                                                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>err</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* If the PROPFIND succeeds the file already exists */</comment>
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_ALREADY_EXISTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"File '%s' already exists"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
      <else>else <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* A real error */</comment>
          <return>return <expr><name>err</name></expr>;</return>
        }</block></else></if></else></if>
    }</block></then></if>

  <if>if <condition>(<expr>! <name>copyfrom_path</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* This a truly new file. */</comment>

      <comment type="block">/* ### wait for apply_txdelta before doing a PUT. it might arrive a
         ### "long time" from now. certainly after many other operations, so
         ### we don't want to start a PUT just yet.
         ### so... anything else to do here?
      */</comment>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>, <decl><type ref="prev"/><name>bc_relative</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_src</name></decl>;</decl_stmt>

      <comment type="block">/* This add has history, so we need to do a COPY. */</comment>

      <comment type="block">/* Convert the copyfrom_* url/rev "public" pair into a Baseline
         Collection (BC) URL that represents the revision -- and a
         relative path under that BC.  */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
                                             <argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                             <argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
                                             <argument><expr><name>copyfrom_path</name></expr></argument>,
                                             <argument><expr><name>copyfrom_revision</name></expr></argument>,
                                             <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


      <comment type="block">/* Combine the BC-URL and relative path; this is the main
         "source" argument to the COPY request.  The "Destination:"
         header given to COPY is simply the wr_url that is already
         part of the file_baton. */</comment>
      <expr_stmt><expr><name>copy_src</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>,
                                            <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>,
                                            <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Have neon do the COPY. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__copy</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
                                <argument><expr>1</expr></argument>,               <comment type="block">/* overwrite */</comment>
                                <argument><expr><name>SVN_RA_NEON__DEPTH_ZERO</name></expr></argument>,
                                                <comment type="block">/* file: this doesn't matter */</comment>
                                <argument><expr><name>copy_src</name></expr></argument>,        <comment type="block">/* source URI */</comment>
                                <argument><expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>wr_url</name></name></expr></argument>,<comment type="block">/* dest URI */</comment>
                                <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Remember that this object was copied. */</comment>
      <expr_stmt><expr><name><name>file</name>-&gt;<name>copied</name></name> = <name>TRUE</name></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Add this path to the valid targets hash. */</comment>
  <expr_stmt><expr><call><name>add_valid_target</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_nonrecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* return the file_baton */</comment>
  <expr_stmt><expr>*<name>file_baton</name> = <name>file</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                      <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                      <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
                                      <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>parent</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>workpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>file</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name>-&gt;<name>pool</name></name> = <name>file_pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name>-&gt;<name>cc</name></name> = <name><name>parent</name>-&gt;<name>cc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name>-&gt;<name>created</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_child</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>,
                    <argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name>-&gt;<name>rsrc</name></name> = <call><name>dup_resource</name><argument_list>(<argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>file</name>-&gt;<name>token</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* do the CHECKOUT now. we'll PUT the new file contents later on. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>checkout_resource</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                            <argument><expr><name><name>file</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### wait for apply_txdelta before doing a PUT. it might arrive a
     ### "long time" from now. certainly after many other operations, so
     ### we don't want to start a PUT just yet.
     ### so... anything else to do here? what about the COPY case?
  */</comment>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>file_baton</name> = <name>file</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_stream_write</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
                                         <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>put_baton_t</name> *</type><name>pb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>pb</name>-&gt;<name>ras</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>ras</name>-&gt;<name>callbacks</name></name> &amp;&amp; <name><name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>ras</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* drop the data into our temp file */</comment>
  <expr_stmt><expr><name>status</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>,
                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not write svndiff to temp file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><name><name>ras</name>-&gt;<name>progress_func</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>pb</name>-&gt;<name>progress</name></name> += *<name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ras</name>-&gt;<name>progress_func</name></name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>progress</name></name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name><name>ras</name>-&gt;<name>progress_baton</name></name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>commit_apply_txdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                     <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
                     <param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>file</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>put_baton_t</name> *</type><name>baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>baton</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>-&gt;<name>ras</name></name> = <name><name>file</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>-&gt;<name>pool</name></name> = <name><name>file</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name>-&gt;<name>put_baton</name></name> = <name>baton</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>base_checksum</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>baton</name>-&gt;<name>base_checksum</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>base_checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name><name>baton</name>-&gt;<name>base_checksum</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>

  <comment type="block">/* ### oh, hell. Neon's request body support is either text (a C string),
     ### or a FILE*. since we are getting binary data, we must use a FILE*
     ### for now. isn't that special? */</comment>

  <comment type="block">/* Use the client callback to create a tmpfile. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>file</name>-&gt;<name>cc</name>-&gt;<name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>open_tmp_file</name></name>
          <argument_list>(<argument><expr>&amp;<name><name>baton</name>-&gt;<name>tmpfile</name></name></expr></argument>,
           <argument><expr><name><name>file</name>-&gt;<name>cc</name>-&gt;<name>ras</name>-&gt;<name>callback_baton</name></name></expr></argument>,
           <argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### register a cleanup on file_pool which closes the file; this
     ### will ensure that the file always gets tossed, even if we exit
     ### with an error. */</comment>

  <expr_stmt><expr><name>stream</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>commit_stream_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_txdelta_to_svndiff</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Add this path to the valid targets hash. */</comment>
  <expr_stmt><expr><call><name>add_valid_target</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>local_path</name></name></expr></argument>, <argument><expr><name>svn_nonrecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>file</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* record the change. it will be applied at close_file time. */</comment>
  <comment type="block">/* ### we should put this into the file_baton's pool */</comment>
  <expr_stmt><expr><call><name>record_prop_change</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* do the CHECKOUT sooner rather than later */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>checkout_resource</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Add this path to the valid targets hash. */</comment>
  <expr_stmt><expr><call><name>add_valid_target</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>local_path</name></name></expr></argument>, <argument><expr><name>svn_nonrecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>file</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>commit_ctx_t</name> *</type><name>cc</name> <init>= <expr><name><name>file</name>-&gt;<name>cc</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If this is a newly added file, not copied, and the editor driver
     didn't call apply_textdelta(), then we'll pretend they *did* call
     apply_textdelta() and described a zero-byte empty file. */</comment>
  <if>if <condition>(<expr>(! <name><name>file</name>-&gt;<name>put_baton</name></name>) &amp;&amp; <name><name>file</name>-&gt;<name>created</name></name> &amp;&amp; (! <name><name>file</name>-&gt;<name>copied</name></name>)</expr>)</condition><then>
    <block>{
      <comment type="block">/* Make a dummy put_baton, with NULL fields to indicate that
         we're dealing with a content-less (zero-byte) file. */</comment>
      <expr_stmt><expr><name><name>file</name>-&gt;<name>put_baton</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*(<name><name>file</name>-&gt;<name>put_baton</name></name>)</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>file</name>-&gt;<name>put_baton</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>put_baton_t</name> *</type><name>pb</name> <init>= <expr><name><name>file</name>-&gt;<name>put_baton</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>wr_url</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_ra_neon__request_t</name> *</type><name>request</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

      <comment type="block">/* create/prep the request */</comment>
      <expr_stmt><expr><name>request</name> = <call><name>svn_ra_neon__request_create</name><argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr>"PUT"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>file</name>-&gt;<name>token</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_ra_neon__set_header</name>
          <argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"If"</expr></argument>,
           <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;%s&gt; (&lt;%s&gt;)"</expr></argument>,
                        <argument><expr><call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>,
                                                   <argument><expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>url</name></name></expr></argument>,
                                                   <argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>file</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>base_checksum</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>,
                                <argument><expr><name>SVN_DAV_BASE_FULLTEXT_MD5_HEADER</name></expr></argument>,
                                <argument><expr><name><name>pb</name>-&gt;<name>base_checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name>text_checksum</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>,
                                <argument><expr><name>SVN_DAV_RESULT_FULLTEXT_MD5_HEADER</name></expr></argument>,
                                <argument><expr><name>text_checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>tmpfile</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>,
                                  <argument><expr><name>SVN_SVNDIFF_MIME_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Give the file to neon. The provider will rewind the file. */</comment>
          <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__set_neon_body_provider</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <goto>goto <name>cleanup</name>;</goto></then></if>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>ne_set_request_body_buffer</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>ne_req</name></name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

      <comment type="block">/* run the request and get the resulting status code (and svn_error_t) */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__request_dispatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                          <argument><expr>201</expr></argument> <comment type="block">/* Created */</comment>,
                                          <argument><expr>204</expr></argument> <comment type="block">/* No Content */</comment>,
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <label><name>cleanup</name>:</label>
      <expr_stmt><expr><call><name>svn_ra_neon__request_destroy</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>tmpfile</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* we're done with the file.  this should delete it. */</comment>
          <expr_stmt><expr>(<name>void</name>) <call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <comment type="block">/* Perform all of the property changes on the file. Note that we
     checked out the file when the first prop change was noted. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_proppatch</name><argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>commit_ctx_t</name> *</type><name>cc</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_commit_info_t</name> *</type><name>commit_info</name> <init>= <expr><call><name>svn_create_commit_info</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__merge_activity</name><argument_list>(<argument><expr>&amp;(<name><name>commit_info</name>-&gt;<name>revision</name></name>)</expr></argument>,
                                      <argument><expr>&amp;(<name><name>commit_info</name>-&gt;<name>date</name></name>)</expr></argument>,
                                      <argument><expr>&amp;(<name><name>commit_info</name>-&gt;<name>author</name></name>)</expr></argument>,
                                      <argument><expr>&amp;(<name><name>commit_info</name>-&gt;<name>post_commit_err</name></name>)</expr></argument>,
                                      <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
                                      <argument><expr><name><name>cc</name>-&gt;<name>ras</name>-&gt;<name>root</name>.<name>path</name></name></expr></argument>,
                                      <argument><expr><name><name>cc</name>-&gt;<name>activity_url</name></name></expr></argument>,
                                      <argument><expr><name><name>cc</name>-&gt;<name>valid_targets</name></name></expr></argument>,
                                      <argument><expr><name><name>cc</name>-&gt;<name>tokens</name></name></expr></argument>,
                                      <argument><expr><name><name>cc</name>-&gt;<name>keep_locks</name></name></expr></argument>,
                                      <argument><expr><name><name>cc</name>-&gt;<name>disable_merge_response</name></name></expr></argument>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delete_activity</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__maybe_store_auth_info</name><argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>commit_info</name>-&gt;<name>revision</name></name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>cc</name>-&gt;<name>callback</name></name><argument_list>(<argument><expr><name>commit_info</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>callback_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_abort_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>delete_activity</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>apply_revprops</name><parameter_list>(<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
                                    <param><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>baseline_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>version_rsrc_t</name></type> <name>baseline_rsrc</name> <init>= <expr><block>{ <expr><name>SVN_INVALID_REVNUM</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>retry_count</name> <init>= <expr>5</expr></init></decl>;</decl_stmt>

  <comment type="block">/* ### this whole sequence can/should be replaced with an expand-property
     ### REPORT when that is available on the server. */</comment>

  <comment type="block">/* fetch the DAV:version-controlled-configuration from the session's URL */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_vcc</name><argument_list>(<argument><expr>&amp;<name>vcc</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name>-&gt;<name>root</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### we should use DAV:apply-to-version on the CHECKOUT so we can skip
     ### retrieval of the baseline */</comment>

  <do>do <block>{

    <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get the latest baseline from VCC's DAV:checked-in property.
       This should give us the HEAD revision of the moment. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_one_prop</name><argument_list>(<argument><expr>&amp;<name>baseline_url</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
                                      <argument><expr><name>vcc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr>&amp;<name>svn_ra_neon__checked_in_prop</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>baseline_rsrc</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>baseline_rsrc</name>.<name>vsn_url</name></name> = <name><name>baseline_url</name>-&gt;<name>data</name></name></expr>;</expr_stmt>

    <comment type="block">/* To set the revision properties, we must checkout the latest baseline
       and get back a mutable "working" baseline.  */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>checkout_resource</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr>&amp;<name>baseline_rsrc</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* There's a small chance of a race condition here, if apache is
       experiencing heavy commit concurrency or if the network has
       long latency.  It's possible that the value of HEAD changed
       between the time we fetched the latest baseline and the time we
       checkout that baseline.  If that happens, apache will throw us
       a BAD_BASELINE error (deltaV says you can only checkout the
       latest baseline).  We just ignore that specific error and
       retry a few times, asking for the latest baseline again. */</comment>
    <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_APMOD_BAD_BASELINE</name></expr>)</condition><then>
      <return>return <expr><name>err</name></expr>;</return></then></if>

  }</block> while <condition>(<expr><name>err</name> &amp;&amp; (--<name>retry_count</name> &gt; 0)</expr>)</condition>;</do>

  <comment type="block">/* Yikes, if we couldn't hold onto HEAD after a few retries, throw a
     real error.*/</comment>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><name>err</name></expr>;</return></then></if>

  <return>return <expr><call><name>svn_ra_neon__do_proppatch</name><argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name><name>baseline_rsrc</name>.<name>wr_url</name></name></expr></argument>, <argument><expr><name>revprop_table</name></expr></argument>,
                                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__get_commit_editor</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                                             <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                                             <param><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
                                             <param><decl><type><name>svn_commit_callback2_t</name></type> <name>callback</name></decl></param>,
                                             <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                                             <param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
                                             <param><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>commit_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <comment type="block">/* Build the main commit editor's baton. */</comment>
  <expr_stmt><expr><name>cc</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cc</name>-&gt;<name>ras</name></name> = <name>ras</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cc</name>-&gt;<name>valid_targets</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cc</name>-&gt;<name>get_func</name></name> = <name><name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>get_wc_prop</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cc</name>-&gt;<name>push_func</name></name> = <name><name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>push_wc_prop</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cc</name>-&gt;<name>cb_baton</name></name> = <name><name>ras</name>-&gt;<name>callback_baton</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cc</name>-&gt;<name>callback</name></name> = <name>callback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cc</name>-&gt;<name>callback_baton</name></name> = <name>callback_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cc</name>-&gt;<name>tokens</name></name> = <name>lock_tokens</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cc</name>-&gt;<name>keep_locks</name></name> = <name>keep_locks</name></expr>;</expr_stmt>

  <comment type="block">/* If the caller didn't give us any way of storing wcprops, then
     there's no point in getting back a MERGE response full of VR's. */</comment>
  <if>if <condition>(<expr><name><name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>push_wc_prop</name></name> == <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>cc</name>-&gt;<name>disable_merge_response</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* ### should we perform an OPTIONS to validate the server we're about
     ### to talk to? */</comment>

  <comment type="block">/*
  ** Create an Activity. This corresponds directly to an FS transaction.
  ** We will check out all further resources within the context of this
  ** activity.
  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_activity</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
  ** Find the latest baseline resource, check it out, and then apply the
  ** log message onto the thing.
  */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>apply_revprops</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>revprop_table</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* If the caller gets an error during the editor drive, we rely on them
     to call abort_edit() so that we can clear up the activity.  But if we
     got an error here, we need to clear up the activity ourselves. */</comment>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>commit_abort_edit</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/*
  ** Set up the editor.
  **
  ** This structure is used during the commit process. An external caller
  ** uses these callbacks to describe all the changes in the working copy
  ** that must be committed to the server.
  */</comment>
  <expr_stmt><expr><name>commit_editor</name> = <call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>open_root</name></name> = <name>commit_open_root</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>delete_entry</name></name> = <name>commit_delete_entry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>add_directory</name></name> = <name>commit_add_dir</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>open_directory</name></name> = <name>commit_open_dir</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>commit_change_dir_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>close_directory</name></name> = <name>commit_close_dir</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>add_file</name></name> = <name>commit_add_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>open_file</name></name> = <name>commit_open_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>commit_apply_txdelta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>change_file_prop</name></name> = <name>commit_change_file_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>close_file</name></name> = <name>commit_close_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>close_edit</name></name> = <name>commit_close_edit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>abort_edit</name></name> = <name>commit_abort_edit</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>editor</name> = <name>commit_editor</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>edit_baton</name> = <name>cc</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
