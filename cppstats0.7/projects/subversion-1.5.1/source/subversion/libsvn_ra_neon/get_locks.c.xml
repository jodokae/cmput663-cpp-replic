<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_neon/get_locks.c"><comment type="block">/*
 * get_locks.c :  RA get-locks API implementation
 *
 * ====================================================================
 * Copyright (c) 2004-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include> <comment type="block">/* for strcmp() */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ne_basic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>

<comment type="block">/* -------------------------------------------------------------------------
**
** GET-LOCKS REPORT HANDLING
**
** DeltaV provides a mechanism for fetching a list of locks below a
** path, but it's often unscalable.  It requires doing a PROPFIND of
** depth infinity, looking for the 'DAV:lockdiscovery' prop on every
** resource.  But depth-infinity propfinds can sometimes behave like a
** DoS attack, and mod_dav even disables them by default!
**
** So we send a custom 'get-locks' REPORT on a public URI... which is
** fine, since all lock queries are always against HEAD anyway.  The
** response is a just a list of svn_lock_t's.  (Generic DAV clients,
** of course, are free to do infinite PROPFINDs as they wish, assuming
** the server allows it.)
*/</comment>

<comment type="block">/* Elements used in a get-locks-report response */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name></type> <name><name>getlocks_report_elements</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"get-locks-report"</expr>, <expr><name>ELEM_get_locks_report</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"lock"</expr>, <expr><name>ELEM_lock</name></expr>, <expr>0</expr>}</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"path"</expr>, <expr><name>ELEM_lock_path</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"token"</expr>, <expr><name>ELEM_lock_token</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"owner"</expr>, <expr><name>ELEM_lock_owner</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"comment"</expr>, <expr><name>ELEM_lock_comment</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr><name>SVN_DAV__CREATIONDATE</name></expr>,
    <expr><name>ELEM_lock_creationdate</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"expirationdate"</expr>,
    <expr><name>ELEM_lock_expirationdate</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * The get-locks-report xml request body is super-simple.
 * The server doesn't need anything but the URI in the REPORT request line.
 *
 *    &lt;S:get-locks-report xmlns...&gt;
 *    &lt;/S:get-locks-report&gt;
 *
 * The get-locks-report xml response is just a list of svn_lock_t's
 * that exist at or "below" the request URI.  (The server runs
 * svn_repos_fs_get_locks()).
 *
 *    &lt;S:get-locks-report xmlns...&gt;
 *        &lt;S:lock&gt;
 *           &lt;S:path&gt;/foo/bar/baz&lt;/S:path&gt;
 *           &lt;S:token&gt;opaquelocktoken:706689a6-8cef-0310-9809-fb7545cbd44e
 *                &lt;/S:token&gt;
 *           &lt;S:owner&gt;fred&lt;/S:owner&gt;
 *           &lt;S:comment encoding="base64"&gt;ET39IGCB93LL4M&lt;/S:comment&gt;
 *           &lt;S:creationdate&gt;2005-02-07T14:17:08Z&lt;/S:creationdate&gt;
 *           &lt;S:expirationdate&gt;2005-02-08T14:17:08Z&lt;/S:expirationdate&gt;
 *        &lt;/S:lock&gt;
 *        ...
 *    &lt;/S:get-locks-report&gt;
 *
 *
 * The &lt;path&gt; and &lt;token&gt; and date-element cdata is xml-escaped by mod_dav_svn.
 *
 * The &lt;owner&gt; and &lt;comment&gt; cdata is always xml-escaped, but
 * possibly also base64-encoded if necessary, as indicated by the
 * encoding attribute.
 *
 * The absence of &lt;expirationdate&gt; means that there's no expiration.
 *
 * If there are no locks to return, then the response will look just
 * like the request.
 */</comment>


<comment type="block">/* Context for parsing server's response. */</comment>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>current_lock</name></decl>;</decl_stmt>        <comment type="block">/* the lock being constructed */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cdata_accum</name></decl>;</decl_stmt>    <comment type="block">/* a place to accumulate cdata */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>;</decl_stmt>            <comment type="block">/* normally NULL, else the value of
                                      'encoding' attribute on cdata's tag.*/</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>lock_hash</name></decl>;</decl_stmt>           <comment type="block">/* the final hash returned */</comment>

  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>scratchpool</name></decl>;</decl_stmt>         <comment type="block">/* temporary stuff goes in here */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>                <comment type="block">/* permanent stuff goes in here */</comment>

}</block></struct></type> <name>get_locks_baton_t</name>;</typedef>



<comment type="block">/* This implements the `svn_ra_neon__startelm_cb_t' prototype. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>getlocks_start_element</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>elem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>, <param><decl><type><name>int</name></type> <name>parent_state</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ln</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>get_locks_baton_t</name> *</type><name>baton</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>elm</name> = <call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>getlocks_report_elements</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Just skip unknown elements. */</comment>
  <if>if <condition>(<expr>!<name>elm</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>elem</name> = <name>NE_XML_DECLINE</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_lock</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>parent_state</name> != <name>ELEM_get_locks_report</name></expr>)</condition><then>
        <return>return <expr><call><name>UNEXPECTED_ELEMENT</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</return></then>
      <else>else
        <comment type="block">/* allocate a new svn_lock_t in the permanent pool */</comment>
        <expr_stmt><expr><name><name>baton</name>-&gt;<name>current_lock</name></name> = <call><name>svn_lock_create</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then>

  <else>else <if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_lock_path</name>
           || <name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_lock_token</name>
           || <name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_lock_owner</name>
           || <name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_lock_comment</name>
           || <name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_lock_creationdate</name>
           || <name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_lock_expirationdate</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>parent_state</name> != <name>ELEM_lock</name></expr>)</condition><then>
        <return>return <expr><call><name>UNEXPECTED_ELEMENT</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* look for any incoming encodings on these elements. */</comment>
      <expr_stmt><expr><name>encoding</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"encoding"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>encoding</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>baton</name>-&gt;<name>encoding</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>scratchpool</name></name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if></else></if>

  <expr_stmt><expr>*<name>elem</name> = <name><name>elm</name>-&gt;<name>id</name></name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements the `svn_ra_svn__cdata_cb_t' prototype. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>getlocks_cdata_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cdata</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>get_locks_baton_t</name> *</type><name>baton</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

  <switch>switch<condition>(<expr><name>state</name></expr>)</condition>
    <block>{
    <case>case <expr><name>ELEM_lock_path</name></expr>:
    </case><case>case <expr><name>ELEM_lock_token</name></expr>:
    </case><case>case <expr><name>ELEM_lock_owner</name></expr>:
    </case><case>case <expr><name>ELEM_lock_comment</name></expr>:
    </case><case>case <expr><name>ELEM_lock_creationdate</name></expr>:
    </case><case>case <expr><name>ELEM_lock_expirationdate</name></expr>:
      <comment type="block">/* accumulate cdata in the scratchpool. */</comment>
      <expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </case>}</block></switch>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<comment type="block">/* This implements the `svn_ra_neon__endelm_cb_t' prototype. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>getlocks_end_element</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ln</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>get_locks_baton_t</name> *</type><name>baton</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>elm</name> = <call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>getlocks_report_elements</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Just skip unknown elements. */</comment>
  <if>if <condition>(<expr><name>elm</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <switch>switch <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>ELEM_lock</name></expr>:
      <comment type="block">/* is the final svn_lock_t valid?  all fields must be present
         except for 'comment' and 'expiration_date'. */</comment>
      <if>if <condition>(<expr>(! <name><name>baton</name>-&gt;<name>current_lock</name>-&gt;<name>path</name></name>)
          || (! <name><name>baton</name>-&gt;<name>current_lock</name>-&gt;<name>token</name></name>)
          || (! <name><name>baton</name>-&gt;<name>current_lock</name>-&gt;<name>owner</name></name>)
          || (! <name><name>baton</name>-&gt;<name>current_lock</name>-&gt;<name>creation_date</name></name>)</expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Incomplete lock data returned"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>lock_hash</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>current_lock</name>-&gt;<name>path</name></name></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>current_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_lock_path</name></expr>:
      <comment type="block">/* neon has already xml-unescaped the cdata for us. */</comment>
      <expr_stmt><expr><name><name>baton</name>-&gt;<name>current_lock</name>-&gt;<name>path</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>,
                                                 <argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name>-&gt;<name>data</name></name></expr></argument>,
                                                 <argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* clean up the accumulator. */</comment>
      <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_lock_token</name></expr>:
      <comment type="block">/* neon has already xml-unescaped the cdata for us. */</comment>
      <expr_stmt><expr><name><name>baton</name>-&gt;<name>current_lock</name>-&gt;<name>token</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>,
                                                  <argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name>-&gt;<name>data</name></name></expr></argument>,
                                                  <argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* clean up the accumulator. */</comment>
      <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_lock_creationdate</name></expr>:
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;(<name><name>baton</name>-&gt;<name>current_lock</name>-&gt;<name>creation_date</name></name>)</expr></argument>,
                                    <argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name>-&gt;<name>data</name></name></expr></argument>,
                                    <argument><expr><name><name>baton</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* clean up the accumulator. */</comment>
      <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_lock_expirationdate</name></expr>:
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;(<name><name>baton</name>-&gt;<name>current_lock</name>-&gt;<name>expiration_date</name></name>)</expr></argument>,
                                    <argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name>-&gt;<name>data</name></name></expr></argument>,
                                    <argument><expr><name><name>baton</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* clean up the accumulator. */</comment>
      <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_lock_owner</name></expr>:
    </case><case>case <expr><name>ELEM_lock_comment</name></expr>:
      <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>final_val</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>baton</name>-&gt;<name>encoding</name></name></expr>)</condition><then>
          <block>{
            <comment type="block">/* Possibly recognize other encodings someday. */</comment>
            <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>encoding</name></name></expr></argument>, <argument><expr>"base64"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
              <block>{
                <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>encoded_val</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>decoded_val</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>encoded_val</name> = <call><name>svn_string_create_from_buf</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name></name></expr></argument>,
                                                         <argument><expr><name><name>baton</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>decoded_val</name> = <call><name>svn_base64_decode_string</name><argument_list>(<argument><expr><name>encoded_val</name></expr></argument>,
                                                       <argument><expr><name><name>baton</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>final_val</name> = <name><name>decoded_val</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
              }</block></then>
            <else>else
              <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>,
                                       <argument><expr><name>NULL</name></expr></argument>,
                                       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Got unrecognized encoding '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name><name>baton</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</return></else></if>

            <expr_stmt><expr><name><name>baton</name>-&gt;<name>encoding</name></name> = <name>NULL</name></expr>;</expr_stmt>
          }</block></then>
        <else>else
          <block>{
            <comment type="block">/* neon has already xml-unescaped the cdata for us. */</comment>
            <expr_stmt><expr><name>final_val</name> = <name><name>baton</name>-&gt;<name>cdata_accum</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
          }</block></else></if>

        <if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_lock_owner</name></expr>)</condition><then>
          <expr_stmt><expr><name><name>baton</name>-&gt;<name>current_lock</name>-&gt;<name>owner</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>final_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_lock_comment</name></expr>)</condition><then>
          <expr_stmt><expr><name><name>baton</name>-&gt;<name>current_lock</name>-&gt;<name>comment</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>final_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <comment type="block">/* clean up the accumulator. */</comment>
        <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>cdata_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      }</block>


    </case><default>default:
      <break>break;</break>
    </default>}</block></switch>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__get_locks</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                       <param><decl><type><name>apr_hash_t</name> **</type><name>locks</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl>, *<decl><type ref="prev"/><name>url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>status_code</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>get_locks_baton_t</name></type> <name>baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>baton</name>.<name>lock_hash</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>.<name>scratchpool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>.<name>current_lock</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>.<name>encoding</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>.<name>cdata_accum</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>body</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                      <argument><expr>"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;"
                      "&lt;S:get-locks-report xmlns:S=\"" <name>SVN_XML_NAMESPACE</name> "\" "
                      "xmlns:D=\"DAV:\"&gt;"
                      "&lt;/S:get-locks-report&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="block">/* We always run the report on the 'public' URL, which represents
     HEAD anyway.  If the path doesn't exist in HEAD, then there can't
     possibly be a lock, so we just return no locks. */</comment>
  <expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__parsed_request</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr>"REPORT"</expr></argument>, <argument><expr><name>url</name></expr></argument>,
                                    <argument><expr><name>body</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr><name>getlocks_start_element</name></expr></argument>,
                                    <argument><expr><name>getlocks_cdata_handler</name></expr></argument>,
                                    <argument><expr><name>getlocks_end_element</name></expr></argument>,
                                    <argument><expr>&amp;<name>baton</name></expr></argument>,
                                    <argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* extra headers */</comment>
                                    <argument><expr>&amp;<name>status_code</name></expr></argument>,
                                    <argument><expr><name>FALSE</name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>baton</name>.<name>scratchpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>locks</name> = <name><name>baton</name>.<name>lock_hash</name></name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* ### Should svn_ra_neon__parsed_request() take care of storing auth
     ### info itself? */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__maybe_store_auth_info_after_result</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Map status 501: Method Not Implemented to our not implemented error.
     1.0.x servers and older don't support this report. */</comment>
  <if>if <condition>(<expr><name>status_code</name> == 501</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Server does not support locking features"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Server does not support locking features"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>

  <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><name>err</name></expr>;</return></then></if></else></if>

  <expr_stmt><expr>*<name>locks</name> = <name><name>baton</name>.<name>lock_hash</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
